/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        s = @serializers/
        t = @structure_tags/
        temp = @structures/template/
    }
}
base inherit temp/base_multiple_files {
    $ name = "commands"
    $ structure = @file
}
file inherit temp/Dict {
    value_types = #dict
    value_structure = @command
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "command"}
    }
}
command inherit temp/SortedKeymap {
    keys = {
        "versions" = :Key {types = #list, structure = @versions}
    }
}
versions inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @version
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "version"}
    }
}
version inherit temp/SortedKeymap {
    keys = {
        "allows_indirect_exec" = :Key {types = #bool, tags = [@t/outdated]}
        "requires_edu" = :Key {types = #bool}
        "description" = :Key {types = #str, structure = @temp/string}
        "permission" = :Key {types = #str}
        "version" = :Key {types = #int}
        "is_automation" = :Key {types = #bool, tags = [@t/outdated]}
        "is_hidden" = :Key {types = #bool}
        "outputToSpeech" = :Key {types = #bool}
        "requiresChatPerms" = :Key {types = #bool}
        "requiresTellPerms" = :Key {types = #bool}
        "aliases" = :Key {types = #list, structure = @aliases}
        "overloads" = :Key {types = #dict, structure = @overloads, similarity_weight = 4}
    }
}
aliases inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #str
    value_structure = @temp/string
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "alias"}
    }
}
overloads inherit temp/Dict {
    value_types = #dict
    value_structure = @overload
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "overload"}
    }
}
overload inherit temp/SortedKeymap {
    keys = {
        "parser" = :Key {types = #dict, structure = @parser}
        "input" = :Key {types = #dict, structure = @input, similarity_weight = 3}
        "output" = :Key {types = #dict, structure = @output, similarity_weight = 3}
    }
}
parser inherit temp/SortedKeymap {
    keys = {
        "tokens" = :Key {types = #str, structure = @temp/string}
    }
}
input inherit temp/SortedKeymap {
    keys = {
        "required_arguments" = :Key {types = #int, tags = [@t/outdated]}
        "parameters" = :Key {types = #list, structure = @parameters}
    }
}
parameters inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @parameter
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "parameter"}
    }
}
parameter inherit temp/SortedKeymap {
    keys = {
        "name" = :Key {types = #str, structure = @temp/string, similarity_weight = 4}
        "type" = :Key {types = #str}
        "enum_type" = :Key {types = #str}
        "enum_values" = :Key {types = #list, structure = @enum_values}
        "optional" = :Key {types = [#bool, #str]}
        "target_data" = :Key {types = #dict, structure = @target_data}
    }
}
enum_values inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #str
    value_structure = @temp/string
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "enum value"}
    }
}
target_data inherit temp/SortedKeymap {
    keys = {
        "allow_dead_players" = :Key {types = #bool}
        "main_target" = :Key {types = #bool}
        "players_only" = :Key {types = #bool}
    }
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"sort" = %sort_by_key}
    }
}
output inherit temp/SortedKeymap {
    keys = {
        "format_strings" = :Key {types = #list, structure = @format_strings}
        "parameters" = :Key {types = #list, structure = @parameters}
    }
}
format_strings inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = [#dict, #str]
    value_structure = @format_string
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "format string"}
    }
}
format_string :Normalizer {
    outer_types = [#dict, #str]
    inner_types = #dict
    functions = :Function {
        function = %scripts/normalizers/normalizers/commands_normalize_format_string
    }
    structure = inherit temp/SortedKeymap {
        keys = {
            "format" = :Key {types = #str, structure = @temp/string, similarity_weight = 3}
            "color" = :Key {types = #str}
            "should_show" = :Key {types = #dict, structure = @should_show}
            "params_to_use" = :Key {types = #list, structure = @parameter_list}
        }
    }
}
should_show inherit temp/SortedKeymap {
    keys = {
        "is_true" = :Key {types = #list, structure = @parameter_list}
        "not_empty" = :Key {types = #list, structure = @parameter_list}
    }
}
parameter_list inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #str
    value_structure = @temp/string
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"show_item_key" = false, "field" = "parameter"}
    }
}