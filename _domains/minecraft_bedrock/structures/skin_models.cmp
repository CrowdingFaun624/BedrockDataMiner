/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        temp = @structures/template/
    }
}
base :StructureBase {
    log = @logs/structure_log
    this_types = #dict
    structure = @cache
    delegate = :Delegate {
        delegate_class = %DefaultBaseDelegate
        arguments = {"name" = "skin_models"}
    }
}
cache :Cache {
    this_types = #dict
    structure = :Condition {
        substructures = [
            :Key {types = #dict, filter = :EqFilter {
                key = "needs_repair"
                value = false
                default = true
            }, structure = @file{$serializer=@minecraft_common!serializers/json}},
            :Key {types = #dict, filter = :EqFilter {
                key = "needs_repair"
                value = true
            }, structure = @file{$serializer=@serializers/skin_geometries_repairable_json}},
        ]
    }
}
file abstract :Normalizer {
    $ (:Serializer) serializer
    outer_types = #dict
    inner_types = #fake_file
    functions = :Function {
        function = %scripts/normalizers/models_model_normalize/
        arguments = {"serializer" = serializer}
    }
    structure = :File {
        serializer = null
        outer_types = #fake_file
        inner_types = #dict
        structure = @files
    }
}
files inherit temp/Dict {
    value_types = #dict
    key_structure = @temp/string
    min_key_similarity_threshold = 0.9
    value_structure = @skin_packs
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "file", "sort" = %sort_by_key, "measure_length" = true}
    }
}
skin_packs inherit temp/Dict {
    value_types = #dict
    // collapse_resource_packs
    value_structure = @structures/models/model
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "skin pack", "sort" = %sort_by_key, "measure_length" = true}
    }
}