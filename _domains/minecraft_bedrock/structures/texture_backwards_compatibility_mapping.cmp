/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        temp = @structures/template/
    }
}
base :StructureBase {
    log = @logs/structure_log
    this_types = #file
    structure = @cache
    delegate = :Delegate {
        delegate_class = %DefaultBaseDelegate
        arguments = {"name" = "texture_backwards_compatibility_mapping"}
    }
}
cache :Cache {
    this_types = #file
    structure = :Condition {
        substructures = [
            :Key {types = #file, filter = :EqFilter {
                key = "needs_repair"
                value = false
            }, structure = :File {
                serializer = @minecraft_common!serializers/json
                outer_types = #file
                inner_types = #dict
                structure = @textures
            }},
            :Key {types = #file, filter = :EqFilter {
                key = "needs_repair"
                value = true
            }, structure = :File {
                serializer = @serializers/texture_backwards_compatibility_mapping_repairable_json
                outer_types = #file
                inner_types = #dict
                structure = @textures
            }},
        ]
    }
}
textures inherit temp/Dict {
    value_types = #dict
    value_structure = @texture
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "texture", "sort" = %sort_by_key, "measure_length" = true}
    }
}
texture inherit temp/SortedKeymap {
    keys = {
        "uv_size" = :Key {types = #list, structure = @vector_int}
        "uv" = :Key {types = #list, structure = @vector_int}
        "base_size" = :Key {types = #list, structure = @vector_int}
        "back_compat_texture" = :Key {types = #str, structure = @temp/string, delegate_arguments = {"always_print" = true}}
    }
}
vector_int inherit temp/Dict {
    allow_key_moves = false
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #int
    value_structure = null
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "vector item", "measure_length" = false}
    }
}