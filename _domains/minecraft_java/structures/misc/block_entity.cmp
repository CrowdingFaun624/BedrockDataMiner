/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        a = @structures/misc/types/
        entity = @structures/misc/entity/
        misc = @structures/misc/misc/
        t = @structure_tags/
        tc = @structures/misc/text_component/
        temp = @structures/misc/template/
        trial_spawner = @structures/data/trial_spawner/
        vector = @structures/misc/vector/
    }
}
block_entity :Switch {
    switch_function = :Function {
        function = %scripts/normalizers/normalizers/block_entity_guess_id
    }
    substructures = {
        "Banner" = :Key {types = @a/compound, structure = @block_entity.banner, tags = @t/outdated}
        "minecraft:banner" = :Key {types = @a/compound, structure = @block_entity.banner}
        "minecraft:barrel" = :Key {types = @a/compound, structure = @block_entity.barrel}
        "Beacon" = :Key {types = @a/compound, structure = @block_entity.beacon, tags = @t/outdated}
        "minecraft:beacon" = :Key {types = @a/compound, structure = @block_entity.beacon}
        "minecraft:bed" = :Key {types = @a/compound, structure = @block_entity.bed}
        "minecraft:beehive" = :Key {types = @a/compound, structure = @block_entity.beehive}
        "minecraft:bell" = :Key {types = @a/compound, structure = @block_entity.bell}
        "minecraft:blast_furnace" = :Key {types = @a/compound, structure = @block_entity.blast_furnace}
        "Cauldron" = :Key {types = @a/compound, structure = @block_entity.brewing_stand, tags = @t/outdated}
        "minecraft:brewing_stand" = :Key {types = @a/compound, structure = @block_entity.brewing_stand}
        "minecraft:calibrated_sculk_sensor" = :Key {types = @a/compound, structure = @block_entity.calibrated_sculk_sensor}
        "minecraft:campfire" = :Key {types = @a/compound, structure = @block_entity.campfire}
        "minecraft:chiseled_bookshelf" = :Key {types = @a/compound, structure = @block_entity.chiseled_bookshelf}
        "Chest" = :Key {types = @a/compound, structure = @block_entity.chest, tags = @t/outdated}
        "minecraft:chest" = :Key {types = @a/compound, structure = @block_entity.chest}
        "minecraft:comparator" = :Key {types = @a/compound, structure = @block_entity.comparator}
        "minecraft:command_block" = :Key {types = @a/compound, structure = @block_entity.command_block}
        "minecraft:conduit" = :Key {types = @a/compound, structure = @block_entity.conduit}
        "minecraft:crafter" = :Key {types = @a/compound, structure = @block_entity.crafter}
        "minecraft:creaking_heart" = :Key {types = @a/compound, structure = @block_entity.creaking_heart}
        "minecraft:daylight_detector" = :Key {types = @a/compound, structure = @block_entity.daylight_detector}
        "minecraft:decorated_pot" = :Key {types = @a/compound, structure = @block_entity.decorated_pot}
        "minecraft:dispenser" = :Key {types = @a/compound, structure = @block_entity.dispenser}
        "minecraft:dropper" = :Key {types = @a/compound, structure = @block_entity.dropper}
        "minecraft:enchanting_table" = :Key {types = @a/compound, structure = @block_entity.enchanting_table}
        "EnderChest" = :Key {types = @a/compound, structure = @block_entity.ender_chest, tags = @t/outdated}
        "minecraft:ender_chest" = :Key {types = @a/compound, structure = @block_entity.ender_chest}
        "minecraft:end_gateway" = :Key {types = @a/compound, structure = @block_entity.end_gateway}
        "minecraft:end_portal" = :Key {types = @a/compound, structure = @block_entity.end_portal}
        "FlowerPot" = :Key {types = @a/compound, structure = @block_entity.flower_pot, tags = @t/outdated}
        "Furnace" = :Key {types = @a/compound, structure = @block_entity.furnace}
        "minecraft:furnace" = :Key {types = @a/compound, structure = @block_entity.furnace}
        "minecraft:hanging_sign" = :Key {types = @a/compound, structure = @block_entity.hanging_sign}
        "Hopper" = :Key {types = @a/compound, structure = @block_entity.hopper, tags = @t/outdated}
        "minecraft:hopper" = :Key {types = @a/compound, structure = @block_entity.hopper}
        "minecraft:jigsaw" = :Key {types = @a/compound, structure = @block_entity.jigsaw}
        "minecraft:jukebox" = :Key {types = @a/compound, structure = @block_entity.jukebox}
        "minecraft:lectern" = :Key {types = @a/compound, structure = @block_entity.lectern}
        "MobSpawner" = :Key {types = @a/compound, structure = @block_entity.mob_spawner, tags = @t/outdated}
        "minecraft:mob_spawner" = :Key {types = @a/compound, structure = @block_entity.mob_spawner}
        "minecraft:oak_sign" = :Key {types = @a/compound, structure = @block_entity.sign, tags = @t/outdated} // 18w48b
        "minecraft:piston" = :Key {types = @a/compound, structure = @block_entity.piston}
        "minecraft:sculk_catalyst" = :Key {types = @a/compound, structure = @block_entity.sculk_catalyst}
        "minecraft:sculk_sensor" = :Key {types = @a/compound, structure = @block_entity.sculk_sensor}
        "minecraft:sculk_shrieker" = :Key {types = @a/compound, structure = @block_entity.sculk_shrieker}
        "minecraft:shulker_box" = :Key {types = @a/compound, structure = @block_entity.shulker_box}
        "Sign" = :Key {types = @a/compound, structure = @block_entity.sign, tags = @t/outdated}
        "minecraft:sign" = :Key {types = @a/compound, structure = @block_entity.sign}
        "Skull" = :Key {types = @a/compound, structure = @block_entity.skull, tags = @t/outdated}
        "minecraft:skull" = :Key {types = @a/compound, structure = @block_entity.skull}
        "minecraft:smoker" = :Key {types = @a/compound, structure = @block_entity.smoker}
        "minecraft:soul_campfire" = :Key {types = @a/compound, structure = @block_entity.soul_campfire}
        "Structure" = :Key {types = @a/compound, structure = @block_entity.structure_block, tags = @t/outdated}
        "minecraft:structure_block" = :Key {types = @a/compound, structure = @block_entity.structure_block}
        "minecraft:suspicious_gravel" = :Key {types = @a/compound, structure = @block_entity.suspicious_gravel}
        "minecraft:suspicious_sand" = :Key {types = @a/compound, structure = @block_entity.suspicious_sand}
        "minecraft:trapped_chest" = :Key {types = @a/compound, structure = @block_entity.trapped_chest}
        "minecraft:trial_spawner" = :Key {types = @a/compound, structure = @block_entity.trial_spawner}
        "minecraft:vault" = :Key {types = @a/compound, structure = @block_entity.vault}
    }
}
common.all {
    "id" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
    "keepPacked" = :Key {types = @a/bool}
    "x" = :Key {types = @a/int}
    "y" = :Key {types = @a/int}
    "z" = :Key {types = @a/int}
    "components" = :Key {types = @a/compound, structure = @structures/misc/data_components/data_components}
}
common.campfire {
    "Slot0" = :Key {types = @a/compound, structure = @misc/item_data_slotless, tags = @t/outdated}
    "Slot1" = :Key {types = @a/compound, structure = @misc/item_data_slotless, tags = @t/outdated}
    "Slot2" = :Key {types = @a/compound, structure = @misc/item_data_slotless, tags = @t/outdated}
    "Slot3" = :Key {types = @a/compound, structure = @misc/item_data_slotless, tags = @t/outdated}
    "CookingTimes" = :Key {types = @a/int_array, structure = @common.campfire:cooking_times}
    "CookingTotalTimes" = :Key {types = @a/int_array, structure = @common.campfire:cooking_times}
}
common.campfire:cooking_times inherit temp/List.nbt {
    $ field = "time"
    this_types = @a/int_array
    value_types = @a/int
    value_structure = null
}
common.chest {
    "gold" = :Key {types = @a/bool} // exclusive to 23w13a_or_b
}
common.custom_name {
    "CustomName" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
}
common.furnace {
    "BurnTime" = :Key {types = @a/short, tags = @t/outdated}
    "CookTime" = :Key {types = @a/short, tags = @t/outdated}
    "CookTimeTotal" = :Key {types = @a/short, tags = @t/outdated}
    "lit_time_remaining" = :Key {types = @a/short}
    "cooking_time_spent" = :Key {types = @a/short}
    "cooking_total_time" = :Key {types = @a/short}
    "lit_total_time" = :Key {types = @a/short}
    "RecipesUsedSize" = :Key {types = @a/short, tags = @t/outdated}
    "RecipesUsed" = :Key {types = @a/compound, structure = @common.furnace:recipes_used}
}
common.furnace:recipes_used inherit temp/Dict.nbt {
    $ field = "recipe"
    value_types = @a/int
    key_structure = @misc/string.nbt
    value_structure = null
}
common.lockable {
    "Lock" = :Key {types = @a/string}
}
common.loot_table {
    "LootTable" = :Key {types = @a/string}
    "LootTableSeed" = :Key {types = @a/long}
}
common.sculk_sensor {
    "last_vibration_frequency" = :Key {types = @a/int}
    "listener" = :Key {types = @a/compound, structure = @misc/event_listener.block}
}
common.sign {
    "is_waxed" = :Key {types = @a/bool}
    "front_text" = :Key {types = @a/compound, structure = @common.sign:text}
    "back_text" = :Key {types = @a/compound, structure = @common.sign:text}
    "GlowingText" = :Key {types = @a/bool, tags = @t/outdated}
    "Color" = :Key {types = @a/string, tags = @t/outdated}
    "Text1" = :Key {types = @a/string, tags = @t/outdated}
    "Text2" = :Key {types = @a/string, tags = @t/outdated}
    "Text3" = :Key {types = @a/string, tags = @t/outdated}
    "Text4" = :Key {types = @a/string, tags = @t/outdated}
}
common.sign:text inherit temp/SortedKeymap {
    keys = {
        "has_glowing_text" = :Key {types = @a/bool}
        "color" = :Key {types = @a/string}
        "filtered_messages" = :Key {types = @a/list, structure = @tc/lines}
        "messages" = :Key {types = @a/list, structure = @tc/lines}
    }
}
common.storage {
    "Items" = :Key {types = @a/list, structure = @misc/item_data_list}
}
common.suspicious {
    "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
}
block_entity.banner inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + {
        "Base" = :Key {types = @a/int, tags = @t/outdated}
        "Patterns" = :Key {types = [@a/compound, @a/list], structure = @misc/banner_pattern_or_list, tags = @t/outdated}
        "patterns" = :Key {types = [@a/compound, @a/list], structure = @misc/banner_pattern_or_list}
    }
}
block_entity.barrel inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.loot_table + @common.storage
}
block_entity.beacon inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + {
        "Levels" = :Key {types = @a/int, tags = @t/outdated}
        "Primary" = :Key {types = @a/int, tags = @t/outdated}
        "Secondary" = :Key {types = @a/int, tags = @t/outdated}
        "primary_effect" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "secondary_effect" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
    }
}
block_entity.bed inherit temp/SortedKeymap.nbt {
    keys = @common.all
}
block_entity.beehive inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "bees" = :Key {types = @a/list, structure = @misc/bee_list}
        "flower_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
block_entity.bell inherit temp/SortedKeymap.nbt {
    keys = @common.all
}
block_entity.blast_furnace inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.furnace + @common.lockable + @common.storage
}
block_entity.brewing_stand inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.storage + {
        "BrewTime" = :Key {types = @a/short}
        "Fuel" = :Key {types = @a/byte}
    }
}
block_entity.calibrated_sculk_sensor inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.sculk_sensor
}
block_entity.campfire inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.campfire + @common.storage
}
block_entity.chiseled_bookshelf inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.storage + {
        "last_interacted_slot" = :Key {types = @a/int}
    }
}
block_entity.chest inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.chest + @common.custom_name + @common.lockable + @common.loot_table + @common.storage
}
block_entity.comparator inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "OutputSignal" = :Key {types = @a/int}
    }
}
block_entity.command_block inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + {
        "auto" = :Key {types = @a/bool}
        "Command" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "conditionMet" = :Key {types = @a/bool}
        "LastExecution" = :Key {types = @a/long}
        "LastOutput" = :Key {types = @a/string}
        "powered" = :Key {types = @a/bool}
        "SuccessCount" = :Key {types = @a/int}
        "TrackOutput" = :Key {types = @a/bool}
        "UpdateLastExecution" = :Key {types = @a/bool}
    }
}
block_entity.conduit inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "Target" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
block_entity.crafter inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.lockable + @common.loot_table + @common.storage + { // common.custom_name?
        "crafting_ticks_remaining" = :Key {types = @a/int}
        "triggered" = :Key {types = @a/bool}
        "disabled_slots" = :Key {types = @a/int_array, structure = @block_entity.crafter:disabled_slots}
    }
}
block_entity.crafter:disabled_slots inherit temp/List.nbt {
    $ field = "slot"
    this_types = @a/int_array
    value_types = @a/int
    value_structure = null
}
block_entity.creaking_heart inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "creaking" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
block_entity.daylight_detector inherit temp/SortedKeymap.nbt {
    keys = @common.all
}
block_entity.decorated_pot inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.loot_table + {
        "sherds" = :Key {types = @a/list, structure = @block_entity.decorated_pot:sherds}
        "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
    }
}
block_entity.decorated_pot:sherds inherit temp/Sequence.nbt {
    value_types = @a/string
    value_structure = @misc/string.nbt
}
block_entity.dispenser inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.loot_table + @common.storage
}
block_entity.dropper inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.loot_table + @common.storage + {
        "Lunar" = :Key {types = @a/bool} // exclusive to 23w13a_or_b
    }
}
block_entity.enchanting_table inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name
}
block_entity.ender_chest inherit temp/SortedKeymap.nbt {
    keys = @common.all
}
block_entity.end_gateway inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "Age" = :Key {types = @a/long}
        "ExactTeleport" = :Key {types = @a/bool}
        "exit_portal" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
block_entity.end_portal inherit temp/SortedKeymap.nbt {
    keys = @common.all
}
block_entity.flower_pot inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "Item" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "Data" = :Key {types = @a/int}
    }
}
block_entity.furnace inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.furnace + @common.lockable + @common.storage
}
block_entity.hanging_sign inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.sign
}
block_entity.hopper inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.loot_table + @common.storage + {
        "TransferCooldown" = :Key {types = @a/int}
    }
}
block_entity.jigsaw inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "attachement_type" = :Key {types = @a/string, tags = @t/outdated}
        "target_pool" = :Key {types = @a/string, tags = @t/outdated}
        "final_state" = :Key {types = @a/string}
        "joint" = :Key {types = @a/string}
        "name" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "pool" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "target" = :Key {types = @a/string}
        "selection_priority" = :Key {types = @a/int}
        "placement_priority" = :Key {types = @a/int}
    }
}
block_entity.jukebox inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "RecordItem" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "ticks_since_song_started" = :Key {types = @a/long}
    }
}
block_entity.lectern inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "Book" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "Page" = :Key {types = @a/int}
    }
}
block_entity.mob_spawner:keys @common.all + {
        "Delay" = :Key {types = @a/short}
        "MaxNearbyEntities" = :Key {types = @a/short}
        "MaxSpawnDelay" = :Key {types = @a/short}
        "MinSpawnDelay" = :Key {types = @a/short}
        "RequiredPlayerRange" = :Key {types = @a/short}
        "SpawnCount" = :Key {types = @a/short}
        "SpawnData" = :Key {types = @a/compound, structure = @block_entity.mob_spawner:entity}
        "SpawnPotentials" = :Key {types = @a/list, structure = @trial_spawner/spawn_potentials}
        "SpawnRange" = :Key {types = @a/short}
    }
block_entity.mob_spawner inherit temp/SortedKeymap.nbt {
    keys = @block_entity.mob_spawner:keys
}
block_entity.mob_spawner:entity :Switch {
    switch_function = :Function {
        function = %scripts/normalizers/normalizers/block_entity_spawn_data_switch
    }
    substructures = {
        "old" = :Key {types = @a/compound, structure = @entity/entity, tags = @t/outdated}
        "new" = :Key {types = @a/compound, structure = inherit temp/SortedKeymap.nbt {
            keys = {
                "entity" = :Key {types = @a/compound, structure = @structures/misc/entity/entity}
                "custom_spawn_rules" = :Key {types = @a/compound, structure = @block_entity.mob_spawner:custom_spawn_rules}
                "equipment_loot_table" = :Key {types = #str, tags = @t/outdated}
                "equipment" = :Key {types = @a/compound, structure = @block_entity.mob_spawner:equipment}
            }
        }}
    }
}
block_entity.mob_spawner:custom_spawn_rules inherit temp/SortedKeymap.nbt {
    keys = {
        "block_light_limit" = :Key {types = @a/int}
        "sky_light_limit" = :Key {types = @a/int}
    }
}
block_entity.mob_spawner:equipment inherit temp/SortedKeymap.nbt {
    keys = {
        "loot_table" = :Key {types = @a/string, structure = @misc/string.nbt}
        "slot_drop_chances" = :Key {types = [@a/float, @a/compound], structure = @block_entity.mob_spawner:equipment.slot_drop_chances}
    }
}
block_entity.mob_spawner:equipment.slot_drop_chances :Union {
    substructures = [
        :Key {types = @a/float},
        :Key {types = @a/compound, structure = inherit temp/SortedKeymap.nbt {
            keys = {
                "feet" = :Key {types = @a/float}
                "legs" = :Key {types = @a/float}
                "chest" = :Key {types = @a/float}
                "head" = :Key {types = @a/float}
                "body" = :Key {types = @a/float}
                "mainhand" = :Key {types = @a/float}
                "offhand" = :Key {types = @a/float}
            }
        }},
    ]
}
block_entity.piston inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "blockState" = :Key {types = @a/compound, structure = @structures/misc/block_state/block_state}
        "extending" = :Key {types = @a/bool}
        "facing" = :Key {types = @a/int}
        "progress" = :Key {types = @a/float}
        "source" = :Key {types = @a/bool}
    }
}
block_entity.sculk_catalyst inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "cursors" = :Key {types = @a/list, structure = @block_entity.sculk_catalyst:cursors}
    }
}
block_entity.sculk_catalyst:cursors inherit temp/Set.nbt {
    $ field = "cursor"
    value_types = @a/compound
    value_structure = @block_entity.sculk_catalyst:cursors.item
}
block_entity.sculk_catalyst:cursors.item inherit temp/SortedKeymap.nbt {
    keys = {
        "charge" = :Key {types = @a/int}
        "pos" = :Key {types = @a/list, structure = @vector/vector.tag_int}
        "decay_delay" = :Key {types = @a/int}
        "update_delay" = :Key {types = @a/int}
        "facings" = :Key {types = @a/list, structure = @block_entity.sculk_catalyst:cursors.item.facings}
    }
}
block_entity.sculk_catalyst:cursors.item.facings inherit temp/Set.nbt {
    $ field = "facing"
    value_types = #null // TODO: ehh?
    value_structure = null
}
block_entity.sculk_sensor inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.sculk_sensor
}
block_entity.sculk_shrieker inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "VibrationListener" = :Key {types = @a/compound, structure = @misc/event_listener.block}
    }
}
block_entity.shulker_box inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.lockable + @common.loot_table + @common.storage
}
block_entity.sign inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.sign
}
block_entity.skull inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "Rot" = :Key {types = @a/byte, tags = @t/outdated}
        "SkullType" = :Key {types = @a/byte, tags = @t/outdated}
        "custom_name" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "note_block_sound" = :Key {types = @a/string}
        "profile" = :Key {types = [@a/string, @a/compound], structure = @misc/profile, delegate_arguments = {"always_print" = true}}
    }
}
block_entity.smoker inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.custom_name + @common.furnace + @common.lockable + @common.storage
}
block_entity.soul_campfire inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.campfire + @common.storage
}
block_entity.structure_block inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "author" = :Key {types = @a/string, structure = @misc/string.nbt}
        "ignoreEntities" = :Key {types = @a/bool}
        "integrity" = :Key {types = @a/float}
        "metadata" = :Key {types = @a/string}
        "mirror" = :Key {types = @a/string}
        "mode" = :Key {types = @a/string}
        "name" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "posX" = :Key {types = @a/int}
        "posY" = :Key {types = @a/int}
        "posZ" = :Key {types = @a/int}
        "powered" = :Key {types = @a/bool}
        "rotation" = :Key {types = @a/string}
        "seed" = :Key {types = @a/long}
        "showair" = :Key {types = @a/bool}
        "showboundingbox" = :Key {types = @a/bool}
        "sizeX" = :Key {types = @a/int}
        "sizeY" = :Key {types = @a/int}
        "sizeZ" = :Key {types = @a/int}
    }
}
block_entity.suspicious_gravel inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.loot_table + @common.suspicious
}
block_entity.suspicious_sand inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.loot_table + @common.suspicious
}
block_entity.trapped_chest inherit temp/SortedKeymap.nbt {
    keys = @common.all + @common.chest + @common.custom_name + @common.lockable + @common.loot_table + @common.storage
}
block_entity.trial_spawner inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "required_player_range" = :Key {types = @a/int}
        "target_cooldown_length" = :Key {types = @a/int}
        "normal_config" = :Key {types = [@a/string, @a/compound], structure = @trial_spawner/trial_spawner_or_id}
        "ominous_config" = :Key {types = [@a/string, @a/compound], structure = @trial_spawner/trial_spawner_or_id}
        "registered_players" = :Key {types = @a/list, structure = @misc/uuid_list_list.nbt}
        "current_mobs" = :Key {types = @a/list, structure = @misc/uuid_list_list.nbt}
        "cooldown_ends_at" = :Key {types = @a/long}
        "next_mob_spawns_at" = :Key {types = @a/long}
        "total_mobs_spawned" = :Key {types = @a/int}
        "spawn_data" = :Key {types = @a/compound, structure = @block_entity.mob_spawner:entity}
        "ejecting_loot_table" = :Key {types = @a/string}
        "spawn_range" = :Key {types = @a/int, tags = @t/outdated}
        "total_mobs" = :Key {types = @a/float, tags = @t/outdated}
        "simultaneous_mobs" = :Key {types = @a/float, tags = @t/outdated}
        "total_mobs_added_per_player" = :Key {types = @a/float, tags = @t/outdated}
        "simultaneous_mobs_added_per_player" = :Key {types = @a/float, tags = @t/outdated}
        "ticks_between_spawn" = :Key {types = @a/int, tags = @t/outdated}
        "spawn_potentials" = :Key {types = @a/list, structure = @trial_spawner/spawn_potentials, tags = @t/outdated}
        "loot_tables_to_eject" = :Key {types = @a/list, structure = @trial_spawner/loot_tables, tags = @t/outdated}
    }
}
block_entity.vault inherit temp/SortedKeymap.nbt {
    keys = @common.all + {
        "config" = :Key {types = @a/compound, structure = @block_entity.vault:config}
        "server_data" = :Key {types = @a/compound, structure = @block_entity.vault:server_data}
        "shared_data" = :Key {types = @a/compound, structure = @block_entity.vault:shared_data}
    }
}
block_entity.vault:config inherit temp/SortedKeymap.nbt {
    keys = {
        "loot_table" = :Key {types = @a/string}
        "override_loot_table_to_display" = :Key {types = @a/string}
        "activation_range" = :Key {types = @a/double}
        "deactivation_range" = :Key {types = @a/double}
        "key_item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
    }
}
block_entity.vault:server_data inherit temp/SortedKeymap.nbt {
    keys = {
        "rewarded_players" = :Key {types = @a/list, structure = @misc/uuid_list_list.nbt}
        "state_updating_resumes_at" = :Key {types = @a/long}
        "items_to_eject" = :Key {types = @a/list, structure = @misc/item_data_list}
        "total_ejections_needed" = :Key {types = @a/int}
    }
}
block_entity.vault:shared_data inherit temp/SortedKeymap.nbt {
    keys = {
        "display_item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "connected_players" = :Key {types = @a/list, structure = @misc/uuid_list_list.nbt}
        "connected_particles_range" = :Key {types = @a/double}
    }
}