/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        a = @structures/misc/types/
        misc = @structures/misc/misc/
        temp = @structures/misc/template/
    }
}
block_state_list inherit temp/Set.nbt {
    $ field = "block state"
    value_types = @a/compound
    value_structure = @block_state
}
block_state_or_id_list inherit temp/Set.nbt {
    $ field = "block state"
    value_types = [@a/compound, @a/string]
    value_structure = @block_state_or_id
}
block_state_list_or_id :Union {
    substructures = [
        :Key {types = @a/string}
        :Key {types = @a/compound, structure = @block_state}
        :Key {types = @a/list, structure = @block_state_or_id_list}
    ]
}
block_state_or_id :Union {
    substructures = [
        :Key {types = @a/string},
        :Key {types = @a/compound, structure = @block_state},
    ]
}
block_state inherit temp/SortedKeymap.nbt {
    keys = {
        "Name" = :Key {types = @a/string, structure = @misc/string.nbt}
        "Properties" = :Key {types = @a/compound, structure = @properties}
    }
}
properties inherit temp/Dict.nbt {
    $ field = "property"
    value_types = @a/string
    value_structure = null
}
// properties inherit temp/SortedKeymap.nbt {
//     delegate = :Delegate {
//         delegate_class = %DefaultDelegate
//         arguments = {"sort" = %sort_by_key, "field" = "property"}
//     }
//     keys = {
//         "age": :Key {types = @state_int}
//         "attached": :Key {types = @state_bool}
//         "attachment": :Key {types = #str}
//         "axis": :Key {types = #str}
//         "berries": :Key {types = @state_bool}
//         "bites": :Key {types = @state_int}
//         "bloom": :Key {types = @state_bool}
//         "bottom": :Key {types = @state_bool}
//         "can_summon": :Key {types = @state_bool}
//         "candles": :Key {types = @state_int}
//         "charges": :Key {types = @state_int}
//         "conditional": :Key {types = @state_bool}
//         "cracked": :Key {types = @state_bool}
//         "crafting": :Key {types = @state_bool}
//         "delay": :Key {types = @state_int}
//         "disarmed": :Key {types = @state_bool}
//         "distance": :Key {types = @state_int}
//         "down": :Key {types = @state_bool}
//         "drag": :Key {types = @state_bool}
//         "dusted": :Key {types = @state_bool}
//         "east": :Key {types = [@state_bool, #str]}
//         "eggs": :Key {types = @state_int}
//         "enabled": :Key {types = @state_bool}
//         "extended": :Key {types = @state_bool}
//         "eye": :Key {types = @state_bool}
//         "face": :Key {types = #str}
//         "facing": :Key {types = #str}
//         "falling": :Key {types = @state_bool}
//         "flower_amount": :Key {types = @state_int}
//         "half": :Key {types = #str}
//         "hanging": :Key {types = @state_bool}
//         "has_book": :Key {types = @state_bool}
//         "has_bottle_0": :Key {types = @state_bool}
//         "has_bottle_1": :Key {types = @state_bool}
//         "has_bottle_2": :Key {types = @state_bool}
//         "has_record": :Key {types = @state_bool}
//         "hatch": :Key {types = @state_int}
//         "hinge": :Key {types = #str}
//         "honey_level": :Key {types = @state_int}
//         "in_wall": :Key {types = @state_bool}
//         "instrument": :Key {types = #str}
//         "inverted": :Key {types = @state_bool}
//         "layers": :Key {types = @state_int}
//         "leaves": :Key {types = #str}
//         "level": :Key {types = @state_int}
//         "lit": :Key {types = @state_bool}
//         "locked": :Key {types = @state_bool}
//         "mode": :Key {types = #str}
//         "moisture": :Key {types = @state_int}
//         "north": :Key {types = [@state_bool, #str]}
//         "note": :Key {types = @state_int}
//         "occupied": :Key {types = @state_bool}
//         "ominous": :Key {types = @state_bool}
//         "open": :Key {types = @state_bool}
//         "orientation": :Key {types = #str}
//         "part": :Key {types = #str}
//         "persistent": :Key {types = @state_bool}
//         "pickles": :Key {types = @state_int}
//         "power": :Key {types = @state_int}
//         "powered": :Key {types = @state_bool}
//         "rotation": :Key {types = @state_int}
//         "sculk_sensor_phase": :Key {types = #str}
//         "shape": :Key {types = #str}
//         "short": :Key {types = @state_bool}
//         "shrieking": :Key {types = @state_bool}
//         "signal_fire": :Key {types = @state_bool}
//         "slices": :Key {types = @state_int} // exclusive to 23w13a_or_b
//         "slot_0_occupied": :Key {types = @state_bool}
//         "slot_1_occupied": :Key {types = @state_bool}
//         "slot_2_occupied": :Key {types = @state_bool}
//         "slot_3_occupied": :Key {types = @state_bool}
//         "slot_4_occupied": :Key {types = @state_bool}
//         "slot_5_occupied": :Key {types = @state_bool}
//         "snowy": :Key {types = @state_bool}
//         "south": :Key {types = [@state_bool, #str]}
//         "stage": :Key {types = @state_int}
//         "thickness": :Key {types = #str}
//         "tilt": :Key {types = #str}
//         "trial_spawner_state": :Key {types = #str}
//         "triggered": :Key {types = @state_bool}
//         "type": :Key {types = #str}
//         "unstable": :Key {types = @state_bool}
//         "up": :Key {types = @state_bool}
//         "vault_state": :Key {types = #str}
//         "vertical_direction": :Key {types = #str}
//         "waterlogged": :Key {types = @state_bool}
//         "west": :Key {types = [@state_bool, #str]}
//     }
// }
// fluid_properties inherit temp/SortedKeympa {
//     keys = {
//         "falling" = :Key {types = @state_bool}
//         "level" = :Key {types = @state_int}
//     }
// }