/* Converted by CmpMigrator 0.1.9 */
// https://minecraft.wiki/w/Data_component_format
settings {
    aliases {
        a = @structures/misc/types/
        conditions = @structures/data/advancements/conditions/
        misc = @structures/misc/misc/
        t = @structure_tags/
        tc = @structures/misc/text_component/
        temp = @structures/misc/template/
    }
}
data_components:keys {
    "minecraft:attribute_modifiers" = :Key {types = [@a/compound, @a/list], structure = @component.attribute_modifiers}
    "minecraft:axolotl/variant" = :Key {types = @a/string}
    "minecraft:banner_patterns" = :Key {types = @a/list, structure = @component.banner_patterns}
    "minecraft:base_color" = :Key {types = @a/string}
    "minecraft:bees" = :Key {types = @a/list, structure = @misc/bee_list}
    "minecraft:block_entity_data" = :Key {types = @a/compound, structure = @structures/misc/block_entity/block_entity}
    "minecraft:block_state" = :Key {types = @a/compound, structure = @structures/misc/block_state/properties}
    "minecraft:blocks_attacks" = :Key {types = @a/compound, structure = @component.blocks_attacks}
    "minecraft:break_sound" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
    "minecraft:bucket_entity_data" = :Key {types = @a/compound, structure = @component.bucket_entity_data}
    "minecraft:bundle_contents" = :Key {types = @a/list, structure = @misc/item_data_list}
    "minecraft:can_break" = :Key {types = [@a/list, @a/compound], structure = @component.can_break:union}
    "minecraft:can_place_on" = :Key {types = [@a/list, @a/compound], structure = @component.can_break:union}
    "minecraft:cat/collar" = :Key {types = @a/string}
    "minecraft:cat/variant" = :Key {types = @a/string}
    "minecraft:charged_projectiles" = :Key {types = @a/list, structure = @misc/item_data_list}
    "minecraft:chicken/variant" = :Key {types = @a/string}
    "minecraft:clicks" = :Key {types = @a/int, tags = [@t/april_fools]}
    "minecraft:consumable" = :Key {types = @a/compound, structure = @component.consumable}
    "minecraft:contacts_messages" = :Key {types = @a/long_array, structure = @component.contacts_messages, tags = [@t/april_fools]}
    "minecraft:container" = :Key {types = @a/list, structure = @component.container}
    "minecraft:container_loot" = :Key {types = @a/compound, structure = @component.container_loot}
    "minecraft:cow/variant" = :Key {types = @a/string}
    "minecraft:creative_slot_lock" = :Key {types = @a/compound, structure = @misc/empty_compound} // internal
    "minecraft:custom_data" = :Key {types = [@a/compound, @a/string], structure = @component.custom_data}
    "minecraft:custom_model_data" = :Key {types = @a/compound, structure = @component.custom_model_data}
    "minecraft:custom_name" = :Key {types = [@a/string, @a/list, @a/compound], structure = @structures/misc/text_component/root}
    "minecraft:damage" = :Key {types = @a/int}
    "minecraft:damage_resistant" = :Key {types = @a/compound, structure = @component.damage_resistant}
    "minecraft:debug_stick_state" = :Key {types = @a/compound, structure = @component.debug_stick_state}
    "minecraft:death_protection" = :Key {types = @a/compound, structure = @component.death_protection}
    "minecraft:dyed_color" = :Key {types = [@a/list, @a/int], structure = @misc/color}
    "minecraft:enchantable" = :Key {types = @a/compound, structure = @component.enchantable}
    "minecraft:enchantment_glint_override" = :Key {types = @a/bool}
    "minecraft:enchantments" = :Key {types = @a/compound, structure = @component.enchantments}
    "minecraft:entity_data" = :Key {types = @a/compound, structure = @structures/misc/entity/entity}
    "minecraft:equippable" = :Key {types = @a/compound, structure = @component.equippable}
    "minecraft:explicit_foil" = :Key {types = @a/bool, tags = [@t/april_fools]}
    "minecraft:firework_explosion" = :Key {types = @a/compound, structure = @misc/firework_explosion}
    "minecraft:fireworks" = :Key {types = @a/compound, structure = @component.fireworks}
    "minecraft:fletching" = :Key {types = @a/compound, structure = @component.fletching, tags = [@t/april_fools]}
    "minecraft:fox/variant" = :Key {types = @a/string}
    "minecraft:food" = :Key {types = @a/compound, structure = @component.food}
    "minecraft:frog/variant" = :Key {types = @a/string}
    "minecraft:glider" = :Key {types = @a/compound, structure = @structures/misc/misc/empty_compound}
    "minecraft:heat" = :Key {types = @a/compound, structure = @component.heat, tags = [@t/april_fools]}
    "minecraft:hide_additional_tooltip" = :Key {types = @a/compound, structure = @misc/empty_compound, tags = [@t/outdated]}
    "minecraft:hide_tooltip" = :Key {types = @a/compound, structure = @misc/empty_compound, tags = [@t/outdated]}
    "minecraft:horse/variant" = :Key {types = @a/string}
    "minecraft:hovered" = :Key {types = @a/bool, tags = [@t/april_fools]}
    "minecraft:instrument" = :Key {types = [@a/string, @a/compound], structure = @component.instrument:union}
    "minecraft:intangible_projectile" = :Key {types = @a/compound, structure = @misc/empty_compound}
    "minecraft:item_mode" = :Key {types = @a/string}
    "minecraft:item_name" = :Key {types = [@a/string, @a/compound, @a/list], structure = @structures/misc/text_component/root}
    "minecraft:jukebox_playable" = :Key {types = @a/string}
    "minecraft:llama/variant" = :Key {types = @a/string}
    "minecraft:lock" = :Key {types = @a/compound, structure = @conditions/condition.item}
    "minecraft:lodestone_tracker" = :Key {types = @a/compound, structure = @component.lodestone_tracker}
    "minecraft:lore" = :Key {types = @a/list, structure = @structures/misc/text_component/lines}
    "minecraft:lubrication" = :Key {types = @a/compound, structure = @component.lubrication, tags = [@t/april_fools]}
    "minecraft:map_color" = :Key {types = @a/int}
    "minecraft:map_decorations" = :Key {types = @a/compound, structure = @component.map_decorations}
    "minecraft:map_id" = :Key {types = @a/int}
    "minecraft:map_post_processing" = :Key {types = @a/int} // internal
    "minecraft:max_damage" = :Key {types = @a/int}
    "minecraft:max_stack_size" = :Key {types = @a/int}
    "minecraft:mooshroom/variant" = :Key {types = @a/string}
    "minecraft:note_blokc_sound" = :Key {types = @a/string}
    "minecraft:ominous_bottle_amplifier" = :Key {types = @a/int}
    "minecraft:painting/variant" = :Key {types = @a/string}
    "minecraft:parrot/variant" = :Key {types = @a/string}
    "minecraft:pig/variant" = :Key {types = @a/string}
    "minecraft:pot_decorations" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name = "decoration"}}
    "minecraft:potato_bane" = :Key {types = @a/compound, structure = @component.potato_bane, tags = [@t/april_fools]}
    "minecraft:potion_contents" = :Key {types = [@a/string, @a/compound], structure = @component.potion_contents:union}
    "minecraft:potion_duration_scale" = :Key {types = @a/float}
    "minecraft:profile" = :Key {types = [@a/string, @a/compound], structure = @misc/profile}
    "minecraft:provides_banner_patterns" = :Key {types = @a/string}
    "minecraft:provides_trim_material" = :Key {types = @a/string}
    "minecraft:rabbit/variant" = :Key {types = @a/string}
    "minecraft:rarity" = :Key {types = @a/string}
    "minecraft:recipes" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="recipe"}}
    "minecraft:repairable" = :Key {types = [@a/string, @a/list], structure = @misc/named_list_or_item.nbt{$name = "item"}}
    "minecraft:repair_cost" = :Key {types = @a/int}
    "minecraft:resin" = :Key {types = @a/compound, structure = @component.resin, tags = [@t/april_fools]}
    "minecraft:salmon/size" = :Key {types = @a/string}
    "minecraft:secret_message" = :Key {types = @a/long, tags = [@t/april_fools]}
    "minecraft:sheep/color" = :Key {types = @a/string}
    "minecraft:shulker/color" = :Key {types = @a/string}
    "minecraft:snek" = :Key {types = @a/compound, structure = @component.snek, tags = [@t/april_fools]}
    "minecraft:stored_enchantments" = :Key {types = @a/compound, structure = @component.enchantments}
    "minecraft:suspicious_stew_effects" = :Key {types = @a/list, structure = @component.suspicious_stew_effects}
    "minecraft:tool" = :Key {types = @a/compound, structure = @component.tool}
    "minecraft:tooltip_display" = :Key {types = @a/compound, structure = @component.tooltip_display}
    "minecraft:tooltip_style" = :Key {types = @a/string}
    "minecraft:trim" = :Key {types = @a/compound, structure = @component.trim}
    "minecraft:tropical_fish/base_color" = :Key {types = @a/string}
    "minecraft:tropical_fish/pattern" = :Key {types = @a/string}
    "minecraft:tropical_fish/pattern_color" = :Key {types = @a/string}
    "minecraft:undercover_id" = :Key {types = @a/int, tags = [@t/april_fools]}
    "minecraft:unreakable" = :Key {types = @a/compound, structure = @misc/empty_compound}
    "minecraft:use_cooldown" = :Key {types = @a/compound, structure = @component.use_cooldown}
    "minecraft:use_remainder" = :Key {types = @a/compound, structure = @misc/item_data}
    "minecraft:views" = :Key {types = @a/int, tags = [@t/april_fools]}
    "minecraft:villager/variant" = :Key {types = @a/string}
    "minecraft:weapon" = :Key {types = @a/compound, structure = @component.weapon}
    "minecraft:wolf/collar" = :Key {types = @a/string}
    "minecraft:wolf/sound_variant" = :Key {types = @a/string}
    "minecraft:wolf/variant" = :Key {types = @a/string}
    "minecraft:writable_book_content" = :Key {types = @a/compound, structure = @component.writable_book_content}
    "minecraft:written_book_content" = :Key {types = @a/compound, structure = @component.written_book_content}
    "minecraft:xp" = :Key {types = @a/int, tags = [@t/april_fools]}
}
data_components inherit temp/SortedKeymap.nbt {
    $ keymap_field = "component"
    $ measure_length = true
    keys = @data_components:keys
}
data_component_modification inherit temp/SortedKeymap.nbt {
    $ keymap_field = "component"
    $ measure_length = true
    keys = @data_components:keys + {
        "!minecraft:attribute_modifiers" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:axolotl/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:banner_patterns" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:base_color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:bees" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:block_entity_data" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:block_state" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:blocks_attacks" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:break_sound" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:bucket_entity_data" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:bundle_contents" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:can_break" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:can_place_on" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:cat/collar" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:cat/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:charged_projectiles" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:chicken/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:clicks" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:consumable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:contacts_messages" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:container" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:container_loot" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:cow/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:creative_slot_lock" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:custom_data" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:custom_model_data" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:custom_name" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:damage" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:damage_resistant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:debug_stick_state" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:death_protection" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:dyed_color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:enchantable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:enchantment_glint_override" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:enchantments" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:entity_data" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:equippable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:explicit_foil" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:firework_explosion" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:fireworks" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:fletching" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:fox/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:food" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:frog/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:glider" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:heat" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:horse/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:hovered" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:instrument" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:intangible_projectile" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:item_mode" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:item_name" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:jukebox_playable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:llama/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:lock" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:lodestone_tracker" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:lore" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:lubrication" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:map_color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:map_decorations" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:map_id" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:map_post_processing" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:max_damage" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:max_stack_size" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:mooshroom/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:note_blokc_sound" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:ominous_bottle_amplifier" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:painting/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:parrot/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:pig/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:pot_decorations" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:potato_bane" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:potion" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:potion_duration_scale" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:profile" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:provides_banner_patterns" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:provides_trim_material" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:rabbit/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:rarity" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:recipes" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:repairable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:repair_cost" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:resin" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:salmon/size" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:secret_message" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:sheep/color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:shulker/color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:snek" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:stored_enchantments" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:suspicious_stew_effects" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tool" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tooltip_display" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tooltip_style" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:trim" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tropical_fish/base_color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tropical_fish/pattern" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:tropical_fish/pattern_color" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:undercover_id" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:unreakable" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:use_cooldown" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:use_remainder" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:views" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:villager/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:weapon" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:wolf/collar" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:wolf/sound_variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:wolf/variant" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:writable_book_content" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:written_book_content" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "!minecraft:xp" = :Key {types = @a/compound, structure = @misc/empty_compound}
    }
}
component.attribute_modifiers :Union {
    substructures = [
        :Key {types = @a/list, structure = @component.attribute_modifiers:list},
        :Key {types = @a/compound, structure = inherit temp/SortedKeymap.nbt {
            keys = {
                "modifiers" = :Key {types = @a/list, structure = @component.attribute_modifiers:list}
            }
        }},
    ]
}
component.attribute_modifiers:list inherit temp/Set.nbt {
    $ field = "attribute modifier"
    value_types = @a/compound
    value_structure = @component.attribute_modifiers:item
}
component.attribute_modifiers:item inherit temp/SortedKeymap.nbt {
    keys = {
        "type" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "slot" = :Key {types = @a/string}
        "id" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "amount" = :Key {types = @a/double}
        "operation" = :Key {types = @a/string}
    }
}
component.banner_patterns inherit temp/Sequence.nbt {
    $ field = "pattern"
    value_types = @a/compound
    value_structure = @misc/banner_pattern
}
component.blocks_attacks inherit temp/SortedKeymap.nbt {
    keys = {
        "block_delay_seconds" = :Key {types = @a/float}
        "disable_cooldown_scale" = :Key {types = @a/float}
        "damage_reductions" = :Key {types = @a/list, structure = @component.blocks_attacks:damage_reductions}
        "item_damage" = :Key {types = @a/compound, structure = @component.blocks_attacks:item_damage}
        "block_sound" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
        "disabled_sound" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
        "bypassed_by" = :Key {types = @a/string}
    }
}
component.blocks_attacks:damage_reductions inherit temp/Set.nbt {
    $ field = "damage reduction"
    value_types = @a/compound
    value_structure = @component.blocks_attacks:damage_reductions.item
}
component.blocks_attacks:damage_reductions.item inherit temp/SortedKeymap.nbt {
    keys = {
        "type" = :Key {types = [@a/string, @a/list], structure = @misc/named_list_or_item.nbt{$name = "damage type"}}
        "base" = :Key {types = @a/float}
        "factor" = :Key {types = @a/float}
        "horizontal_blocking_angle" = :Key {types = @a/float}
    }
}
component.blocks_attacks:item_damage inherit temp/SortedKeymap.nbt {
    keys = {
        "threshold" = :Key {types = @a/float}
        "base" = :Key {types = @a/float}
        "factor" = :Key {types = @a/float}
    }
}
component.bucket_entity_data inherit temp/SortedKeymap.nbt {
    keys = {
        "NoAI" = :Key {types = @a/bool}
        "Silent" = :Key {types = @a/bool}
        "NoGravity" = :Key {types = @a/bool}
        "Glowing" = :Key {types = @a/bool}
        "Invulnerable" = :Key {types = @a/bool}
        "Health" = :Key {types = @a/float}
        "Age" = :Key {types = @a/int}
        "Variant" = :Key {types = @a/int}
        "HuntingCooldown" = :Key {types = @a/long}
        "BucketVariantTag" = :Key {types = @a/int}
        "type" = :Key {types = @a/string}
    }
}
component.can_break:union :Union {
    substructures = [
        :Key {types = @a/compound, structure = @component.can_break},
        :Key {types = @a/list, structure = @component.can_break:block},
    ]
}
component.can_break:block inherit temp/Set.nbt {
    $ field = "block"
    value_types = @a/compound
    value_structure = @component.can_break
}
component.can_break inherit temp/SortedKeymap.nbt {
    keys = {
        "blocks" = :Key {types = [@a/string, @a/list], structure = @misc/named_list_or_item.nbt{$name="block"}}
        "nbt" = :Key {types = @a/compound, structure = @structures/misc/block_entity/block_entity}
        "state" = :Key {types = @a/compound, structure = @structures/misc/block_state/properties}
    }
}
component.consumable inherit temp/SortedKeymap.nbt {
    keys = {
        "consume_seconds" = :Key {types = @a/float}
        "animation" = :Key {types = @a/string}
        "sound" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
        "has_consume_particles" = :Key {types = @a/bool}
        "on_consume_effects" = :Key {types = @a/list, structure = @misc/consume_effect_list}
    }
}
component.contacts_messages inherit temp/List.nbt {
    $ field = "item"
    this_types = @a/long_array
    value_types = @a/long
    value_structure = null
}
component.container inherit temp/Set.nbt {
    $ field = "item"
    value_types = @a/compound
    value_structure = @component.container:item
}
component.container:item inherit temp/SortedKeymap.nbt {
    keys = {
        "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "slot" = :Key {types = @a/int}
    }
}
component.container_loot inherit temp/SortedKeymap.nbt {
    keys = {
        "loot_table" = :Key {types = @a/string}
        "seed" = :Key {types = @a/long}
    }
}
component.custom_data :Union {
    substructures = [
        :Key {types = @a/string},
        :Key {types = @a/compound, structure = @misc/any_nbt.compound},
    ]
}
component.custom_model_data inherit temp/SortedKeymap.nbt {
    keys = {
        "floats" = :Key {types = @a/list, structure = @component.custom_model_data:floats}
        "flags" = :Key {types = @a/list, structure = @component.custom_model_data:flags}
        "strings" = :Key {types = @a/list, structure = @component.custom_model_data:strings}
        "colors" = :Key {types = @a/list, structure = @component.custom_model_data:colors}
    }
}
component.custom_model_data:floats inherit temp/Sequence.nbt {
    $ field = "float"
    value_types = @a/float
    value_structure = null
}
component.custom_model_data:flags inherit temp/Sequence.nbt {
    $ field = "flag"
    value_types = @a/bool
    value_structure = null
}
component.custom_model_data:strings inherit temp/Sequence.nbt {
    $ field = "misc/string"
    value_types = @a/string
    value_structure = @misc/string.nbt
}
component.custom_model_data:colors inherit temp/Sequence.nbt {
    $ field = "color"
    value_types = [@a/int, @a/list]
    value_structure = @misc/color
}
component.damage_resistant inherit temp/SortedKeymap.nbt {
    keys = {
        "types" = :Key {types = @a/string}
    }
}
component.debug_stick_state inherit temp/Dict.nbt {
    $ field = "block"
    value_types = @a/string
    key_structure = @misc/string.nbt
    value_structure = null
}
component.death_protection inherit temp/SortedKeymap.nbt {
    keys = {
        "death_effects" = :Key {types = @a/list, structure = @misc/consume_effect_list}
    }
}
component.enchantable inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/int}
    }
}
component.enchantments :Switch {
    switch_function = :Function {
        function = %scripts/normalizers/normalizers/data_component_enchantments_switch // detects if "levels" key is present
    }
    substructures = {
        "old" = :Key {types = @a/compound, structure = @component.enchantments:old, tags = @t/outdated}
        "new" = :Key {types = @a/compound, structure = @component.enchantments:new}
    }
}
component.enchantments:old inherit temp/SortedKeymap.nbt {
    keys = {
        "levels" = :Key {types = @a/compound, structure = @component.enchantments:new}
    }
}
component.enchantments:new inherit temp/Dict.nbt {
    $ field = "enchantment"
    value_types = @a/int
    key_structure = @misc/string.nbt
    value_structure = null
}
component.equippable inherit temp/SortedKeymap.nbt {
    keys = {
        "slot" = :Key {types = @a/string}
        "equip_sound" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
        "asset_id" = :Key {types = @a/string, structure = @misc/string.nbt}
        "allowed_entities" = :Key {types = [@a/string, @a/list], structure = @misc/named_list_or_item.nbt{$name = "entity"}}
        "dispensable" = :Key {types = @a/bool}
        "swappable" = :Key {types = @a/bool}
        "damage_on_hurt" = :Key {types = @a/bool}
        "equip_on_interact" = :Key {types = @a/bool}
        "camera_overlay" = :Key {types = @a/string}
    }
}
component.fireworks inherit temp/SortedKeymap.nbt {
    keys = {
        "explosions" = :Key {types = @a/list, structure = @misc/firework_explosion_list}
        "flight_duration" = :Key {types = @a/byte}
    }
}
component.fletching inherit temp/SortedKeymap.nbt {
    keys = {
        "quality" = :Key {types = @a/string}
        "impurities" = :Key {types = @a/string}
        "next_level_impurities" = :Key {types = @a/string}
        "processs_time" = :Key {types = @a/short} // according to MCW, has three "s"es.
        "explored" = :Key {types = @a/bool}
    }
}
component.food inherit temp/SortedKeymap.nbt {
    keys = {
        "nutrition" = :Key {types = @a/int}
        "saturation" = :Key {types = @a/float}
        "can_always_eat" = :Key {types = @a/bool}
    }
}
component.heat inherit temp/SortedKeymap.nbt {
    keys = {
        "heat" = :Key {types = @a/int}
        "slot" = :Key {types = @a/int}
        "owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    }
}
component.instrument:union :Union {
    substructures = [
        :Key {types = @a/string},
        :Key {types = @a/compound, structure = @component.instrument},
    ]
}
component.instrument inherit temp/SortedKeymap.nbt {
    keys = {
        "description" = :Key {types = @structures/misc/text_component/root_type, structure = @structures/misc/text_component/root}
        "sound_event" = :Key {types = [@a/string, @a/compound], structure = @misc/sound_event}
        "use_duration" = :Key {types = @a/float}
        "range" = :Key {types = @a/float}
    }
}
component.lodestone_tracker inherit temp/SortedKeymap.nbt {
    keys = {
        "target" = :Key {types = @a/compound, structure = @misc/position_dimension}
        "tracked" = :Key {types = @a/bool}
    }
}
component.lubrication inherit temp/SortedKeymap.nbt {
    keys = {
        "level" = :Key {types = @a/int}
    }
}
component.map_decorations inherit temp/Dict.nbt {
    $ field = "decoration"
    value_types = @a/compound
    value_structure = @component.map_decorations:decoration
}
component.map_decorations:decoration inherit temp/SortedKeymap.nbt {
    keys = {
        "type" = :Key {types = @a/string}
        "x" = :Key {types = @a/double}
        "z" = :Key {types = @a/double}
        "rotation" = :Key {types = @a/float}
    }
}
component.potato_bane inherit temp/SortedKeymap.nbt {
    keys = {
        "damage_boost" = :Key {types = @a/float}
    }
}
component.potion_contents:union :Union {
    substructures = [
        :Key {types = @a/string},
        :Key {types = @a/compound, structure = @component.potion_contents},
    ]
}
component.potion_contents inherit temp/SortedKeymap.nbt {
    keys = {
        "potion" = :Key {types = @a/string}
        "custom_color" = :Key {types = @a/int}
        "custom_name" = :Key {types = @a/string}
        "custom_effects" = :Key {types = @a/list, structure = @misc/effect_data_list}
    }
}
component.resin inherit temp/SortedKeymap.nbt {
    keys = {
        "quality" = :Key {types = @a/string}
        "impurities" = :Key {types = @a/string}
    }
}
component.snek inherit temp/SortedKeymap.nbt {
    keys = {
        "revealed" = :Key {types = @a/bool}
    }
}
component.suspicious_stew_effects inherit temp/Set.nbt {
    $ field = "effect"
    value_types = @a/compound
    value_structure = @component.suspicious_stew_effects:effect
}
component.suspicious_stew_effects:effect inherit temp/SortedKeymap.nbt {
    keys = {
        "id" = :Key {types = @a/string}
        "duration" = :Key {types = @a/int}
    }
}
component.tool inherit temp/SortedKeymap.nbt {
    keys = {
        "default_mining_speed" = :Key {types = @a/float}
        "damage_per_block" = :Key {types = @a/int}
        "can_destroy_blocks_in_creative" = :Key {types = @a/bool}
        "rules" = :Key {types = @a/list, structure = @component.tools:rules}
    }
}
component.tools:rules inherit temp/Set.nbt {
    $ field = "rule"
    value_types = @a/compound
    value_structure = @component.tools:rules.rule
}
component.tools:rules.rule inherit temp/SortedKeymap.nbt {
    keys = {
        "blocks" = :Key {types = [@a/string, @a/list], structure = @misc/named_list_or_item.nbt{$name = "block"}}
        "speed" = :Key {types = @a/float}
        "correct_for_drops" = :Key {types = @a/bool}
    }
}
component.tooltip_display inherit temp/SortedKeymap.nbt {
    keys = {
        "hide_tooltip" = :Key {types = @a/bool}
        "hidden_components" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="component"}}
    }
}
component.trim inherit temp/SortedKeymap.nbt {
    keys = {
        "pattern" = :Key {types = @a/string}
        "material" = :Key {types = @a/string}
    }
}
component.use_cooldown inherit temp/SortedKeymap.nbt {
    keys = {
        "seconds" = :Key {types = @a/float}
        "cooldown_group" = :Key {types = @a/string}
    }
}
component.weapon inherit temp/SortedKeymap.nbt {
    keys = {
        "item_damage_per_attack" = :Key {types = @a/int}
        "can_disable_blocking" = :Key {types = @a/bool, tags = @t/outdated}
        "disable_blocking_for_seconds" = :Key {types = @a/float}
    }
}
component.writable_book_content inherit temp/SortedKeymap.nbt {
    keys = {
        "pages" = :Key {types = @a/list, structure = @component.writable_book_content:pages}
    }
}
component.writable_book_content:pages inherit temp/Set.nbt {
    $ field = "page"
    value_types = [@a/compound, @a/string]
    value_structure = :Union {
        substructures = [
            :Key {types = @a/string},
            :Key {types = @a/compound, structure = @misc/filterable_text.nbt},
        ]
    }
}
component.written_book_content inherit temp/SortedKeymap.nbt {
    keys = {
        "pages" = :Key {types = @a/list, structure = @component.written_book_content:pages}
        "title" = :Key {types = @a/compound, structure = @misc/filterable_text.nbt}
        "author" = :Key {types = @a/string}
        "generation" = :Key {types = @a/int}
        "resolved" = :Key {types = @a/bool}
    }
}
component.written_book_content:pages inherit temp/Set.nbt {
    $ field = "page"
    value_types = [@a/compound]
    value_structure = @misc/filterable_text.nbt{$types=@tc/root_type, $structure=@tc/root}
}