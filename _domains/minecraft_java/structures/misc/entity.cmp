/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        a = @structures/misc/types/
        block_entity = @structures/misc/block_entity/
        block_state = @structures/misc/block_state/
        misc = @structures/misc/misc/
        particles = @structures/data/particles/particles/
        t = @structure_tags/
        tc = @structures/misc/text_component/
        temp = @structures/misc/template/
        vector = @structures/misc/vector/
    }
}
entity_list inherit temp/Set.nbt {
    $ field = "entity"
    value_types = @a/compound
    value_structure = @entity
}
entity :Switch {
    switch_function = :Function {
        function = %get_get_key
        arguments = {"key" = "id", "default" = "minecraft:player"}
    }
    substructures = {
        "minecraft:allay" = :Key {types = @a/compound, structure = @entity.allay}
        "minecraft:area_effect_cloud" = :Key {types = @a/compound, structure = @entity.area_effect_cloud}
        "minecraft:armadillo" = :Key {types = @a/compound, structure = @entity.armadillo}
        "minecraft:armor_stand" = :Key {types = @a/compound, structure = @entity.armor_stand}
        "minecraft:arrow" = :Key {types = @a/compound, structure = @entity.arrow}
        "minecraft:axolotl" = :Key {types = @a/compound, structure = @entity.axolotl}
        "minecraft:bat" = :Key {types = @a/compound, structure = @entity.bat}
        "minecraft:bee" = :Key {types = @a/compound, structure = @entity.bee}
        "minecraft:blaze" = :Key {types = @a/compound, structure = @entity.blaze}
        "minecraft:block_display" = :Key {types = @a/compound, structure = @entity.block_display}
        "minecraft:boat" = :Key {types = @a/compound, structure = @entity.boat}
        "minecraft:bogged" = :Key {types = @a/compound, structure = @entity.bogged}
        "minecraft:breeze" = :Key {types = @a/compound, structure = @entity.breeze}
        "minecraft:breeze_wind_charge" = :Key {types = @a/compound, structure = @entity.breeze_wind_charge}
        "minecraft:camel" = :Key {types = @a/compound, structure = @entity.camel}
        "minecraft:cat" = :Key {types = @a/compound, structure = @entity.cat}
        "minecraft:cave_spider" = :Key {types = @a/compound, structure = @entity.cave_spider}
        "minecraft:chest_boat" = :Key {types = @a/compound, structure = @entity.chest_boat}
        "minecraft:chest_minecart" = :Key {types = @a/compound, structure = @entity.chest_minecart}
        "minecraft:chicken" = :Key {types = @a/compound, structure = @entity.chicken}
        "minecraft:cod" = :Key {types = @a/compound, structure = @entity.cod}
        "minecraft:command_block_minecart" = :Key {types = @a/compound, structure = @entity.command_block_minecart}
        "minecraft:cow" = :Key {types = @a/compound, structure = @entity.cow}
        "minecraft:creaking" = :Key {types = @a/compound, structure = @entity.creaking}
        "minecraft:creeper" = :Key {types = @a/compound, structure = @entity.creeper}
        "minecraft:dolphin" = :Key {types = @a/compound, structure = @entity.dolphin}
        "minecraft:donkey" = :Key {types = @a/compound, structure = @entity.donkey}
        "minecraft:dragon_fireball" = :Key {types = @a/compound, structure = @entity.dragon_fireball}
        "minecraft:drowned" = :Key {types = @a/compound, structure = @entity.drowned}
        "minecraft:egg" = :Key {types = @a/compound, structure = @entity.egg}
        "minecraft:elder_guardian" = :Key {types = @a/compound, structure = @entity.elder_guardian}
        "minecraft:end_crystal" = :Key {types = @a/compound, structure = @entity.end_crystal}
        "minecraft:ender_dragon" = :Key {types = @a/compound, structure = @entity.ender_dragon}
        "minecraft:ender_pearl" = :Key {types = @a/compound, structure = @entity.ender_pearl}
        "minecraft:endermite" = :Key {types = @a/compound, structure = @entity.endermite}
        "minecraft:enderman" = :Key {types = @a/compound, structure = @entity.enderman}
        "minecraft:evoker" = :Key {types = @a/compound, structure = @entity.evoker}
        "minecraft:evoker_fangs" = :Key {types = @a/compound, structure = @entity.evoker_fangs}
        "minecraft:experience_bottle" = :Key {types = @a/compound, structure = @entity.experience_bottle}
        "minecraft:experience_orb" = :Key {types = @a/compound, structure = @entity.experience_orb}
        "minecraft:eye_of_ender" = :Key {types = @a/compound, structure = @entity.eye_of_ender}
        "minecraft:falling_block" = :Key {types = @a/compound, structure = @entity.falling_block}
        "minecraft:fireball" = :Key {types = @a/compound, structure = @entity.fireball}
        "minecraft:firework_rocket" = :Key {types = @a/compound, structure = @entity.firework_rocket}
        "minecraft:fishing_bobber" = :Key {types = @a/compound, structure = @entity.fishing_bobber}
        "minecraft:fox" = :Key {types = @a/compound, structure = @entity.fox}
        "minecraft:frog" = :Key {types = @a/compound, structure = @entity.frog}
        "minecraft:furnace_minecart" = :Key {types = @a/compound, structure = @entity.furnace_minecart}
        "minecraft:ghast" = :Key {types = @a/compound, structure = @entity.ghast}
        "minecraft:giant" = :Key {types = @a/compound, structure = @entity.giant}
        "minecraft:glow_squid" = :Key {types = @a/compound, structure = @entity.glow_squid}
        "minecraft:glow_item_frame" = :Key {types = @a/compound, structure = @entity.glow_item_frame}
        "minecraft:goat" = :Key {types = @a/compound, structure = @entity.goat}
        "minecraft:guardian" = :Key {types = @a/compound, structure = @entity.guardian}
        "minecraft:happy_ghast" = :Key {types = @a/compound, structure = @entity.happy_ghast}
        "minecraft:hoglin" = :Key {types = @a/compound, structure = @entity.hoglin}
        "minecraft:hopper_minecart" = :Key {types = @a/compound, structure = @entity.hopper_minecart}
        "minecraft:horse" = :Key {types = @a/compound, structure = @entity.horse}
        "minecraft:husk" = :Key {types = @a/compound, structure = @entity.husk}
        "minecraft:illusioner" = :Key {types = @a/compound, structure = @entity.illusioner}
        "minecraft:interaction" = :Key {types = @a/compound, structure = @entity.interaction}
        "minecraft:iron_golem" = :Key {types = @a/compound, structure = @entity.iron_golem}
        "minecraft:item" = :Key {types = @a/compound, structure = @entity.item}
        "minecraft:item_display" = :Key {types = @a/compound, structure = @entity.item_display}
        "minecraft:item_frame" = :Key {types = @a/compound, structure = @entity.item_frame}
        "minecraft:leash_knot" = :Key {types = @a/compound, structure = @entity.leash_knot}
        "minecraft:lightning_bolt" = :Key {types = @a/compound, structure = @entity.lightning_bolt}
        "minecraft:lingering_potion" = :Key {types = @a/compound, structure = @entity.lingering_potion}
        "minecraft:llama" = :Key {types = @a/compound, structure = @entity.llama}
        "minecraft:llama_spit" = :Key {types = @a/compound, structure = @entity.llama_spit}
        "minecraft:magma_cube" = :Key {types = @a/compound, structure = @entity.magma_cube}
        "minecraft:marker" = :Key {types = @a/compound, structure = @entity.marker}
        "minecraft:minecart" = :Key {types = @a/compound, structure = @entity.minecart}
        "minecraft:mooshroom" = :Key {types = @a/compound, structure = @entity.mooshroom}
        "minecraft:mule" = :Key {types = @a/compound, structure = @entity.mule}
        "minecraft:ocelot" = :Key {types = @a/compound, structure = @entity.ocelot}
        "minecraft:ominous_item_spawner" = :Key {types = @a/compound, structure = @entity.ominous_item_spawner}
        "minecraft:painting" = :Key {types = @a/compound, structure = @entity.painting}
        "minecraft:panda" = :Key {types = @a/compound, structure = @entity.panda}
        "minecraft:parrot" = :Key {types = @a/compound, structure = @entity.parrot}
        "minecraft:phantom" = :Key {types = @a/compound, structure = @entity.phantom}
        "minecraft:pig" = :Key {types = @a/compound, structure = @entity.pig}
        "minecraft:piglin" = :Key {types = @a/compound, structure = @entity.piglin}
        "minecraft:piglin_brute" = :Key {types = @a/compound, structure = @entity.piglin_brute}
        "minecraft:pillager" = :Key {types = @a/compound, structure = @entity.pillager}
        "minecraft:player" = :Key {types = @a/compound, structure = @entity.player}
        "minecraft:polar_bear" = :Key {types = @a/compound, structure = @entity.polar_bear}
        "minecraft:pufferfish" = :Key {types = @a/compound, structure = @entity.pufferfish}
        "minecraft:rabbit" = :Key {types = @a/compound, structure = @entity.rabbit}
        "minecraft:ravager" = :Key {types = @a/compound, structure = @entity.ravager}
        "minecraft:salmon" = :Key {types = @a/compound, structure = @entity.salmon}
        "minecraft:sheep" = :Key {types = @a/compound, structure = @entity.sheep}
        "minecraft:shulker" = :Key {types = @a/compound, structure = @entity.shulker}
        "minecraft:shulker_bullet" = :Key {types = @a/compound, structure = @entity.shulker_bullet}
        "minecraft:silverfish" = :Key {types = @a/compound, structure = @entity.silverfish}
        "minecraft:skeleton" = :Key {types = @a/compound, structure = @entity.skeleton}
        "minecraft:skeleton_horse" = :Key {types = @a/compound, structure = @entity.skeleton_horse}
        "minecraft:slime" = :Key {types = @a/compound, structure = @entity.slime}
        "minecraft:small_fireball" = :Key {types = @a/compound, structure = @entity.small_fireball}
        "minecraft:sniffer" = :Key {types = @a/compound, structure = @entity.sniffer}
        "minecraft:snow_golem" = :Key {types = @a/compound, structure = @entity.snow_golem}
        "minecraft:snowball" = :Key {types = @a/compound, structure = @entity.snowball}
        "minecraft:spawner_minecart" = :Key {types = @a/compound, structure = @entity.spawner_minecart}
        "minecraft:spectral_arrow" = :Key {types = @a/compound, structure = @entity.spectral_arrow}
        "Spider" = :Key {types = @a/compound, structure = @entity.spider, tags = @t/outdated}
        "minecraft:spider" = :Key {types = @a/compound, structure = @entity.spider}
        "minecraft:splash_potion" = :Key {types = @a/compound, structure = @entity.splash_potion}
        "minecraft:strider" = :Key {types = @a/compound, structure = @entity.strider}
        "minecraft:squid" = :Key {types = @a/compound, structure = @entity.squid}
        "minecraft:stray" = :Key {types = @a/compound, structure = @entity.stray}
        "minecraft:tadpole" = :Key {types = @a/compound, structure = @entity.tadpole}
        "minecraft:text_display" = :Key {types = @a/compound, structure = @entity.text_display}
        "minecraft:tnt" = :Key {types = @a/compound, structure = @entity.tnt}
        "minecraft:tnt_minecart" = :Key {types = @a/compound, structure = @entity.tnt_minecart}
        "minecraft:trader_llama" = :Key {types = @a/compound, structure = @entity.trader_llama}
        "minecraft:trident" = :Key {types = @a/compound, structure = @entity.trident}
        "minecraft:tropical_fish" = :Key {types = @a/compound, structure = @entity.tropical_fish}
        "minecraft:turtle" = :Key {types = @a/compound, structure = @entity.turtle}
        "minecraft:vex" = :Key {types = @a/compound, structure = @entity.vex}
        "Villager" = :Key {types = @a/compound, structure = @entity.villager, tags = @t/outdated}
        "minecraft:villager" = :Key {types = @a/compound, structure = @entity.villager}
        "minecraft:vindicator" = :Key {types = @a/compound, structure = @entity.vindicator}
        "minecraft:wandering_trader" = :Key {types = @a/compound, structure = @entity.wandering_trader}
        "minecraft:warden" = :Key {types = @a/compound, structure = @entity.warden}
        "minecraft:wind_charge" = :Key {types = @a/compound, structure = @entity.wind_charge}
        "minecraft:witch" = :Key {types = @a/compound, structure = @entity.witch}
        "minecraft:wither" = :Key {types = @a/compound, structure = @entity.wither}
        "minecraft:wither_skeleton" = :Key {types = @a/compound, structure = @entity.wither_skeleton}
        "minecraft:wither_skull" = :Key {types = @a/compound, structure = @entity.wither_skull}
        "minecraft:wolf" = :Key {types = @a/compound, structure = @entity.wolf}
        "minecraft:zoglin" = :Key {types = @a/compound, structure = @entity.zoglin}
        "Zombie" = :Key {types = @a/compound, structure = @entity.zombie, tags = @t/outdated}
        "minecraft:zombie" = :Key {types = @a/compound, structure = @entity.zombie}
        "minecraft:zombie_horse" = :Key {types = @a/compound, structure = @entity.zombie_horse}
        "minecraft:zombie_villager" = :Key {types = @a/compound, structure = @entity.zombie_villager}
        "minecraft:zombified_piglin" = :Key {types = @a/compound, structure = @entity.zombified_piglin}
    }
}
class.entity {
    "id" = :Key {types = @a/string, structure = @misc/string.nbt}
    "Air" = :Key {types = @a/short}
    "CustomName" = :Key {types = @tc/root_type, structure = @tc/root}
    "CustomNameVisible" = :Key {types = @a/bool}
    "data" = :Key {types = @a/compound, structure = @misc/any_nbt.compound}
    "Dimension" = :Key {types = @a/int, tags = @t/outdated} // is it actually outdated??
    "fall_distance" = :Key {types = @a/double}
    "FallDistance" = :Key {types = @a/float, tags = @t/outdated}
    "Fire" = :Key {types = @a/short}
    "Glowing" = :Key {types = @a/bool}
    "HasVisualFire" = :Key {types = @a/bool}
    "Invulnerable" = :Key {types = @a/bool}
    "Motion" = :Key {types = @a/list, structure = @vector/vector.tag_double}
    "NoGravity" = :Key {types = @a/bool}
    "OnGround" = :Key {types = @a/bool}
    "Passengers" = :Key {types = @a/list, structure = @entity_list}
    "PortalCooldown" = :Key {types = @a/int}
    "Pos" = :Key {types = @a/list, structure = @vector/vector.tag_double}
    "Rotation" = :Key {types = @a/list, structure = @vector/vector.tag_float}
    "Silent" = :Key {types = @a/bool}
    "Tags" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="tag"}}
    "TicksFrozen" = :Key {types = @a/int}
    "UUIDLeast" = :Key {types = @a/long, tags = @t/outdated}
    "UUIDMost" = :Key {types = @a/long, tags = @t/outdated}
    "UUID" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
}
class.display @class.entity + {
    "billboard" = :Key {types = @a/string}
    "brightness" = :Key {types = @a/compound, structure = @class.display:brightness}
    "glow_color_override" = :Key {types = @a/int}
    "height" = :Key {types = @a/float}
    "width" = :Key {types = @a/float}
    "interpolation_duration" = :Key {types = @a/int}
    "teleport_duration" = :Key {types = @a/int}
    "start_interpolation" = :Key {types = @a/int}
    "shadow_radius" = :Key {types = @a/float}
    "shadow_strength" = :Key {types = @a/float}
    "view_range" = :Key {types = @a/float}
    "transformation" = :Key {types = [@a/list, @a/compound], structure = @class.display:transformation.union}
}
class.display:brightness inherit temp/SortedKeymap.nbt {
    keys = {
        "block" = :Key {types = @a/int}
        "sky" = :Key {types = @a/int}
    }
}
class.display:transformation.union :Union {
    substructures = [
        :Key {types = @a/list, structure = @vector/vector.tag_float},
        :Key {types = @a/compound, structure = @class.display:transformation},
    ]
}
class.display:transformation inherit temp/SortedKeymap.nbt {
    keys = {
        "right_rotation" = :Key {types = [@a/list, @a/compound], structure = @class.display:transformation.rotation.union}
        "scale" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "left_rotation" = :Key {types = [@a/list, @a/compound], structure = @class.display:transformation.rotation.union}
        "translation" = :Key {types = @a/list, structure = @vector/vector.tag_float}
    }
}
class.display:transformation.rotation.union :Union {
    substructures = [
        :Key {types = @a/list, structure = @vector/vector.tag_float},
        :Key {types = @a/compound, structure = @class.display:transformation.rotation},
    ]
}
class.display:transformation.rotation inherit temp/SortedKeymap.nbt {
    keys = {
        "angle" = :Key {types = @a/float}
        "axis" = :Key {types = @a/list, structure = @vector/vector.tag_float}
    }
}
class.hanging_entity @class.entity + {
    "facing" = :Key {types = @a/byte} // for paintings only, for some reason. No, I'm not making a separate class/interface just for paintings.
    "Facing" = :Key {types = @a/byte}
    "block_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array} // wiki says it's of type #int, but that makes no sense.
}

class.living_entity abstract @class.entity + {
    $ (dict) brain_imports
    "AbsorptionAmount" = :Key {types = @a/float}
    "active_effects" = :Key {types = @a/list, structure = @class.living_entity:active_effects}
    "attributes" = :Key {types = @a/list, structure = @class.living_entity:attributes}
    "Attributes" = :Key {types = @a/list, structure = @class.living_entity:attributes}
    "Brain" = :Key {types = @a/compound, structure = @brain{$imports=brain_imports}}
    "brain" = :Key {types = @a/compound, structure = @brain{$imports=brain_imports}, tags = @t/outdated}
    "DeathTime" = :Key {types = @a/short}
    "ArmorDropChances" = :Key {types = @a/list, structure = @class.living_entity:drop_chances.list, tags = @t/outdated}
    "HandDropChances" = :Key {types = @a/list, structure = @class.living_entity:drop_chances.list, tags = @t/outdated}
    "drop_chances" = :Key {types = @a/compound, structure = @class.living_entity:drop_chances}
    "ArmorItems" = :Key {types = @a/list, structure = @misc/item_data_slotless_list, tags = @t/outdated}
    "equipment" = :Key {types = @a/compound, structure = @class.living_entity:equipment}
    "FallFlying" = :Key {types = @a/bool}
    "HandItems" = :Key {types = @a/list, structure = @misc/item_data_slotless_list, tags = @t/outdated}
    "Health" = :Key {types = @a/float}
    "home_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    "home_radius" = :Key {types = @a/int}
    "HurtByTimestamp" = :Key {types = @a/int}
    "HurtTime" = :Key {types = @a/short}
    "locator_bar_icon" = :Key {types = @a/compound, structure = @class.living_entity:locator_bar_icon}
    "sleeping_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    "Team" = :Key {types = @a/string}
}
class.living_entity:active_effects inherit temp/Set.nbt {
    $ field = "effect"
    value_types = @a/compound
    value_structure = @misc/effect_data
}
class.living_entity:attributes inherit temp/Set.nbt {
    $ field = "attribute"
    value_types = @a/compound
    value_structure = @class.living_entity:attribute
}
class.living_entity:attribute inherit temp/SortedKeymap.nbt {
    keys = {
        "Name" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}, tags = @t/outdated}
        "id" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "Base" = :Key {types = @a/double, tags = @t/outdated}
        "base" = :Key {types = @a/double}
        "Modifiers" = :Key {types = @a/list, structure = @class.living_entity:attribute.modifiers, tags = @t/outdated}
        "modifiers" = :Key {types = @a/list, structure = @class.living_entity:attribute.modifiers}
    }
}
class.living_entity:attribute.modifiers inherit temp/Set.nbt {
    $ field = "modifier"
    value_types = @a/compound
    value_structure = @class.living_entity:attribute.modifier
}
class.living_entity:attribute.modifier inherit temp/SortedKeymap.nbt {
    keys = {
        "Amount" = :Key {types = @a/double, delegate_arguments = {"always_print" = true}, tags = @t/outdated}
        "amount" = :Key {types = @a/double, delegate_arguments = {"always_print" = true}}
        "Name" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}, tags = @t/outdated}
        "id" = :Key {types = @a/string, structure = @misc/string.nbt, delegate_arguments = {"always_print" = true}}
        "Operation" = :Key {types = @a/int, delegate_arguments = {"always_print" = true}, tags = @t/outdated}
        "operation" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
        "UUIDLeast" = :Key {types = @a/long, tags = @t/outdated}
        "UUIDMost" = :Key {types = @a/long, tags = @t/outdated}
        "UUID" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt, tags = @t/outdated}
    }
}
class.living_entity:drop_chances inherit temp/SortedKeymap.nbt {
    keys = {
        "head" = :Key {types = @a/float}
        "chest" = :Key {types = @a/float}
        "legs" = :Key {types = @a/float}
        "feet" = :Key {types = @a/float}
        "mainhand" = :Key {types = @a/float}
        "offhand" = :Key {types = @a/float}
        "body" = :Key {types = @a/float}
        "saddle" = :Key {types = @a/float}
    }
}
class.living_entity:drop_chances.list inherit temp/List.nbt {
    $ field = "slot"
    value_types = @a/float
    value_structure = null
}
class.living_entity:equipment inherit temp/SortedKeymap.nbt {
    keys = {
        "head" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "chest" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "legs" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "feet" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "mainhand" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "offhand" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "body" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "saddle" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
    }
}
class.living_entity:locator_bar_icon inherit temp/SortedKeymap.nbt {
    keys = {
        "color" = :Key {types = @a/int}
        "style" = :Key {types = @a/string}
    }
}
class.mob abstract @class.living_entity{$ (dict) brain_imports = brain_imports} + {
    "CanPickUpLoot" = :Key {types = @a/bool}
    "DeathLootTable" = :Key {types = @a/string}
    "DeathLootTableSeed" = :Key {types = @a/long}
    "LeftHanded" = :Key {types = @a/bool}
    "NoAI" = :Key {types = @a/bool}
    "leash" = :Key {types = [@a/compound, @a/int_array], structure = @class.mob:leash}
    "Leashed" = :Key {types = @a/bool, tags = @t/outdated}
    "PersistenceRequired" = :Key {types = @a/bool}
}
class.mob:leash :Union {
    substructures = [
        :Key {types = @a/int_array, structure = @vector/vector.tag_int_array},
        :Key {types = @a/compound, structure = inherit temp/SortedKeymap.nbt {
            keys = {
                "UUID" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
            }
        }},
    ]
}
class.ageable_mob abstract @class.mob{$ (dict) brain_imports = brain_imports} + {
    "Age" = :Key {types = @a/int}
    "ForcedAge" = :Key {types = @a/int}
    "InLove" = :Key {types = @a/int}
    "LoveCause" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
}
class.abstract_villager abstract @class.ageable_mob{$ (dict) brain_imports = brain_imports} + {
    "Offers" = :Key {types = @a/compound, structure = @class.abstract_villager:offers}
}
class.abstract_villager:offers inherit temp/SortedKeymap.nbt {
    keys = {
        "Recipes" = :Key {types = @a/list, structure = @class.abstract_villager:recipes}
    }
}
class.abstract_villager:recipes inherit temp/Sequence.nbt {
    $ field = "offer"
    value_types = @a/compound
    value_structure = @class.abstract_villager:recipe
}
class.abstract_villager:recipe inherit temp/SortedKeymap.nbt {
    keys = {
        "buy" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "buyB" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "demand" = :Key {types = @a/int}
        "maxUses" = :Key {types = @a/int}
        "priceMultiplier" = :Key {types = @a/float}
        "rewardExp" = :Key {types = @a/bool}
        "sell" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "specialPrice" = :Key {types = @a/int}
        "uses" = :Key {types = @a/int}
        "xp" = :Key {types = @a/int}
    }
}
class.abstract_horse abstract @class.ageable_mob{$ (dict) brain_imports = brain_imports} + {
    "Bred" = :Key {types = @a/bool}
    "EatingHaystack" = :Key {types = @a/bool}
    "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    "Tame" = :Key {types = @a/bool}
    "Temper" = :Key {types = @a/int}
}
class.abstract_chested_horse abstract @class.abstract_horse{$ (dict) brain_imports = brain_imports} + {
    "ChestedHorse" = :Key {types = @a/bool}
    "Items" = :Key {types = @a/list, structure = @misc/item_data_list}
}
class.tamable_animal abstract @class.ageable_mob{$ (dict) brain_imports = brain_imports} + {
    "OwnerUUID" = :Key {types = @a/string, tags = @t/outdated}
    "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    "Sitting" = :Key {types = @a/bool}
}
class.abstract_piglin abstract @class.mob{$ (dict) brain_imports = brain_imports} + {
    "IsImmuneToZombification" = :Key {types = @a/bool}
    "TimeInOverworld" = :Key {types = @a/int}
}
class.raider abstract @class.mob{$ (dict) brain_imports = brain_imports} + {
    "CanJoinRaid" = :Key {types = @a/bool}
    "PatrolLeader" = :Key {types = @a/bool}
    "Patrolling" = :Key {types = @a/bool}
    "patrol_target" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    "RaidId" = :Key {types = @a/int}
    "Wave" = :Key {types = @a/int}
}
class.spellcaster_illager abstract @class.raider{$ (dict) brain_imports = brain_imports} + {
    "SpellTicks" = :Key {types = @a/int}
}
class.projectile @class.entity + {
    "HasBeenShot" = :Key {types = @a/bool}
    "LeftOwner" = :Key {types = @a/bool}
    "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
}
class.abstract_arrow @class.projectile + {
    "crit" = :Key {types = @a/bool}
    "damage" = :Key {types = @a/double}
    "inBlockState" = :Key {types = @a/compound, structure = @block_state/block_state}
    "inGround" = :Key {types = @a/bool}
    "life" = :Key {types = @a/short}
    "pickup" = :Key {types = @a/byte}
    "PierceLevel" = :Key {types = @a/byte}
    "shake" = :Key {types = @a/byte}
    "ShotFromCrossbow" = :Key {types = @a/bool}
    "SoundEvent" = :Key {types = @a/string}
    "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
    "weapon" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
}
class.hurting_projectile @class.projectile + {
    "acceleration_power" = :Key {types = @a/double}
}
class.abstract_minecart @class.entity + {
    "DisplayOffset" = :Key {types = @a/int}
    "DisplayState" = :Key {types = @a/compound, structure = @block_state/block_state}
}
interface.bucketable {
    "FromBucket" = :Key {types = @a/bool}
}
interface.container_entity {
    "Items" = :Key {types = @a/list, structure = @misc/item_data_list}
    "LootTable" = :Key {types = @a/string}
    "LootTableSeed" = :Key {types = @a/string}
}
interface.inventory_carrier {
    "Inventory" = :Key {types = @a/list, structure = @misc/item_data_slotless_list}
}
interface.item_supplier {
    "Item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
}
interface.neutral_mob {
    "AngerTime" = :Key {types = @a/int}
    "AngryAt" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
}
interface.saddleable {
    "Saddle" = :Key {types = @a/bool}
}
interface.villager_data_holder {
    "Career" = :Key {types = @a/int, tags = @t/outdated}
    "CareerLevel" = :Key {types = @a/int, tags = @t/outdated}
    "Profession" = :Key {types = @a/int, tags = @t/outdated}
    "FoodLevel" = :Key {types = @a/int, tags = @t/outdated}
    "food_level" = :Key {types = @a/int, tags = @t/outdated}
    "lastRestock" = :Key {types = @a/int}
    "Gossips" = :Key {types = @a/list, structure = @interface.villager_data_holder:gossips}
    "VillagerData" = :Key {types = @a/compound, structure = @interface.villager_data_holder:villager_data}
    "Xp" = :Key {types = @a/int}
}
interface.villager_data_holder:gossips inherit temp/Set.nbt {
    $ field = "gossip"
    value_types = @a/compound
    value_structure = @interface.villager_data_holder:gossip
}
interface.villager_data_holder:gossip inherit temp/SortedKeymap.nbt {
    keys = {
        "Value" = :Key {types = @a/int}
        "Target" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "Type" = :Key {types = @a/string, delegate_arguments = {"always_print" = true}}
    }
}
interface.villager_data_holder:villager_data inherit temp/SortedKeymap.nbt {
    keys = {
        "level" = :Key {types = @a/int}
        "profession" = :Key {types = @a/string}
        "type" = :Key {types = @a/string}
    }
}
brain abstract inherit temp/SortedKeymap.nbt {
    $ (dict) imports
    keys = {
        "memories" = :Key {types = @a/compound, structure = @brain:memory:abstract{$imports=imports}}
        "registered_memories" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="memory"}, tags = @t/outdated}
        "registered_sensors" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="sensor"}, tags = @t/outdated}
    }
}
brain:empty {}
brain.allay {
    "minecraft:item_pickup_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:liked_noteblock" = :Key {types = @a/compound, structure = @brain:memory.position}
    "minecraft:liked_noteblock_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:liked_player" = :Key {types = @a/compound, structure = @brain:memory.uuid}
}
brain.axolotl {
    "minecraft:has_hunting_cooldown" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:is_tempted" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:play_dead_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:temptation_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
}
brain.camel {
    "minecraft:gaze_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:is_tempted" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:temptation_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
}
brain.frog { // Oh no, I have Brain Frog /j
    "minecraft:is_in_water" = :Key {types = @a/compound, structure = @brain:memory.empty}
    "minecraft:is_pregnant" = :Key {types = @a/compound, structure = @brain:memory.empty}
}
brain.goat {
    "minecraft:is_tempted" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:long_jump_cooling_down" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:ram_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
    "minecraft:temptation_cooldown_ticks" = :Key {types = @a/compound, structure = @brain:memory.int}
}
brain.piglin_abstract {
    "minecraft:angry_at" = :Key {types = @a/compound, structure = @brain:memory.uuid}
}
brain.piglin @brain.piglin_abstract + {
    "minecraft:admiring_disabled" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:admiring_item" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:hunted_recently" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:universal_anger" = :Key {types = @a/compound, structure = @brain:memory.boolean}
}
brain.piglin_brute @brain.piglin_abstract + {
    "minecraft:home" = :Key {types = @a/compound, structure = @brain:memory.position}
}
brain.sniffer {
    "minecraft:sniff_cooldown" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:sniffer_explored_positions" = :Key {types = @a/compound, structure = @brain:memory.position_list}
}
brain.villager {
    "minecraft:home" = :Key {types = @a/compound, structure = @brain:memory.position}
    "minecraft:job_site" = :Key {types = @a/compound, structure = @brain:memory.position}
    "minecraft:last_slept" = :Key {types = @a/compound, structure = @brain:memory.long}
    "minecraft:last_woken" = :Key {types = @a/compound, structure = @brain:memory.long}
    "minecraft:last_worked_at_poi" = :Key {types = @a/compound, structure = @brain:memory.long}
    "minecraft:meeting_point" = :Key {types = @a/compound, structure = @brain:memory.position}
    "minecraft:potential_job_site" = :Key {types = @a/compound, structure = @brain:memory.position}
    "minecraft:golem_detected_recently" = :Key {types = @a/compound, structure = @brain:memory.boolean}
}
brain.warden {
    "minecraft:is_emerging" = :Key {types = @a/compound, structure = @brain:memory.empty}
    "minecraft:dig_cooldown" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
    "minecraft:is_sniffing" = :Key {types = @a/compound, structure = @brain:memory.empty}
    "minecraft:recent_projectile" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
    "minecraft:roar_sound_cooldown" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
    "minecraft:roar_sound_delay" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
    "minecraft:sniff_cooldown" = :Key {types = @a/compound, structure = @brain:memory.boolean}
    "minecraft:touch_cooldown" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
    "minecraft:vibration_cooldown" = :Key {types = @a/compound, structure = @brain:memory.empty_forgettable}
}
brain:memory:abstract abstract inherit temp/SortedKeymap.nbt {
    $ (dict) imports
    keys = imports
}
brain:memory.boolean inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/bool}
        "ttl" = :Key {types = @a/long}
    }
}
brain:memory.empty inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/compound, structure = @misc/empty_compound}
    }
}
brain:memory.empty_forgettable inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/compound, structure = @misc/empty_compound}
        "ttl" = :Key {types = @a/long}
    }
}
brain:memory.int inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/int}
    }
}
brain:memory.long inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/long}
    }
}
brain:memory.position inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/compound, structure = @misc/position_dimension}
    }
}
brain:memory.position_list inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
brain:memory.uuid inherit temp/SortedKeymap.nbt {
    keys = {
        "value" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "ttl" = :Key {types = @a/long}
    }
}
entity.allay inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain.allay} + {
        "DuplicationCooldown" = :Key {types = @a/long}
        "listener" = :Key {types = @a/compound, structure = @misc/event_listener.entity}
    } + @interface.inventory_carrier
}
entity.area_effect_cloud inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "Age" = :Key {types = @a/int}
        "Color" = :Key {types = @a/int}
        "Duration" = :Key {types = @a/int}
        "DurationOnUse" = :Key {types = @a/int}
        "potion_contents" = :Key {types = @a/compound, structure = @entity.area_effect_cloud:potion_contents}
        "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "custom_particle" = :Key {types = @a/compound, structure = @particles/particle}
        "Potion" = :Key {types = @a/string}
        "potion_duration_scale" = :Key {types = @a/float}
        "Radius" = :Key {types = @a/float}
        "RadiusOnUse" = :Key {types = @a/float}
        "RadiusPerTick" = :Key {types = @a/float}
        "ReapplicationDelay" = :Key {types = @a/int}
        "WaitTime" = :Key {types = @a/int}
    }
}
entity.area_effect_cloud:potion_contents inherit temp/SortedKeymap.nbt {
    keys = {
        "potion" = :Key {types = @a/string}
        "custom_color" = :Key {types = @a/int}
        "custom_effects" = :Key {types = @a/list, structure = @misc/effect_data_list}
    }
}
entity.armadillo inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "scute_time" = :Key {types = @a/int}
        "state" = :Key {types = @a/string}
    }
}
entity.armor_stand inherit temp/SortedKeymap.nbt {
    keys = @class.living_entity{$ (dict) brain_imports = @brain:empty} + {
        "DisabledSlots" = :Key {types = @a/int}
        "Invisible" = :Key {types = @a/bool}
        "Marker" = :Key {types = @a/bool}
        "NoBasePlate" = :Key {types = @a/bool}
        "Pose" = :Key {types = @a/compound, structure = @entity.armor_stand:pose}
        "ShowArms" = :Key {types = @a/bool}
        "Small" = :Key {types = @a/bool}
    }
}
entity.armor_stand:pose inherit temp/SortedKeymap.nbt {
    keys = {
        "Body" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "Head" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "LeftArm" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "LeftLeg" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "RightArm" = :Key {types = @a/list, structure = @vector/vector.tag_float}
        "RightLeg" = :Key {types = @a/list, structure = @vector/vector.tag_float}
    }
}
entity.arrow inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_arrow
}
entity.axolotl inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain.axolotl} + {
        "Variant" = :Key {types = @a/int}
    } + @interface.bucketable
}
entity.bat inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "BatFlags" = :Key {types = @a/bool}
    }
}
entity.bee inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "CannotEnterHiveTicks" = :Key {types = @a/int}
        "CropsGrownSincePollination" = :Key {types = @a/int}
        "flower_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "HasNectar" = :Key {types = @a/bool}
        "HasStung" = :Key {types = @a/bool}
        "hive_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "TicksSincePollination" = :Key {types = @a/int}
    } + @interface.neutral_mob
}
entity.blaze inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.block_display inherit temp/SortedKeymap.nbt {
    keys = @class.display + {
        "block_state" = :Key {types = @a/compound, structure = @block_state/block_state}
    }
}
entity.boat:keys @class.entity + {
    "Type" = :Key {types = @a/string}
}
entity.boat inherit temp/SortedKeymap.nbt {
    keys = @entity.boat:keys
}
entity.bogged inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.breeze inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.breeze_wind_charge inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile
}
entity.camel inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_horse{$ (dict) brain_imports = @brain.camel} + {
        "LastPoseTick" = :Key {types = @a/long}
    }
}
entity.cat inherit temp/SortedKeymap.nbt {
    keys = @class.tamable_animal{$ (dict) brain_imports = @brain:empty} + {
        "CatType" = :Key {types = @a/int, tags = @t/outdated}
        "CollarColor" = :Key {types = @a/bool}
        "variant" = :Key {types = @a/string}
    }
}
entity.cave_spider inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.chest_boat inherit temp/SortedKeymap.nbt {
    keys = @entity.boat:keys + @interface.container_entity
}
entity.chest_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + @interface.container_entity
}
entity.chicken inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "EggLayTime" = :Key {types = @a/int}
        "IsChickenJockey" = :Key {types = @a/bool}
        "variant" = :Key {types = @a/string}
    }
}
entity.cod inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + @interface.bucketable
}
entity.command_block_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + {
        "Command" = :Key {types = @a/string}
        "LastOutput" = :Key {types = @a/string}
        "SuccessCount" = :Key {types = @a/int}
        "TrackOutput" = :Key {types = @a/bool}
    }
}
entity.cow inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "variant" = :Key {types = @a/string}
    }
}
entity.creaking inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "home_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
entity.creeper inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "ExplosionRadius" = :Key {types = @a/byte}
        "Fuse" = :Key {types = @a/short}
        "ignited" = :Key {types = @a/bool}
        "powered" = :Key {types = @a/bool}
    }
}
entity.dolphin inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "Moistness" = :Key {types = @a/int}
        "GotFish" = :Key {types = @a/bool}
    }
}
entity.donkey inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_chested_horse{$ (dict) brain_imports = @brain:empty}
}
entity.dragon_fireball inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile
}
entity.drowned inherit temp/SortedKeymap.nbt {
    keys = @entity.zombie:keys
}
entity.egg inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.elder_guardian inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.end_crystal inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "beam_target" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "ShowBottom" = :Key {types = @a/bool}
    }
}
entity.ender_dragon inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "DragonPhase" = :Key {types = @a/int}
    }
}
entity.ender_pearl inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.enderman inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "carriedBlockState" = :Key {types = @a/compound, structure = @block_state/block_state}
    } + @interface.neutral_mob
}
entity.endermite inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Lifetime" = :Key {types = @a/int}
    }
}
entity.evoker inherit temp/SortedKeymap.nbt {
    keys = @class.spellcaster_illager{$ (dict) brain_imports = @brain:empty}
}
entity.evoker_fangs inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "Warmup" = :Key {types = @a/int}
    }
}
entity.experience_bottle inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.experience_orb inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "Age" = :Key {types = @a/short}
        "Count" = :Key {types = @a/int}
        "Health" = :Key {types = @a/short}
        "Value" = :Key {types = @a/short}
    }
}
entity.eye_of_ender inherit temp/SortedKeymap.nbt {
    keys = @class.entity + @interface.item_supplier
}
entity.falling_block inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "BlockState" = :Key {types = @a/compound, structure = @block_state/block_state}
        "CancelDrop" = :Key {types = @a/bool}
        "DropItem" = :Key {types = @a/bool}
        "FallHurtAmount" = :Key {types = @a/float}
        "FallHurtMax" = :Key {types = @a/int}
        "HurtEntities" = :Key {types = @a/bool}
        "TileEntityData" = :Key {types = @a/compound, structure = @block_entity/block_entity}
        "Time" = :Key {types = @a/int}
    }
}
entity.fireball inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile + {
        "ExplosionPower" = :Key {types = @a/byte}
    } + @interface.item_supplier
}
entity.firework_rocket inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + {
        "FireworksItem" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "Life" = :Key {types = @a/int}
        "LifeTime" = :Key {types = @a/int}
        "ShotAtAngle" = :Key {types = @a/bool}
    }
}
entity.fishing_bobber inherit temp/SortedKeymap.nbt {
    keys = @class.entity
}
entity.fox inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "Crouching" = :Key {types = @a/bool}
        "Sitting" = :Key {types = @a/bool}
        "Sleeping" = :Key {types = @a/bool}
        "Trusted" = :Key {types = @a/list, structure = @misc/uuid_list_list.nbt{$field="player"}}
        "Type" = :Key {types = @a/string}
    }
}
entity.frog inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain.frog} + {
        "variant" = :Key {types = @a/string}
    }
}
entity.furnace_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + {
        "Fuel" = :Key {types = @a/short}
        "PushX" = :Key {types = @a/double}
        "PushZ" = :Key {types = @a/double}
    }
}
entity.ghast inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "ExplosionPower" = :Key {types = @a/byte}
    }
}
entity.giant inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.glow_item_frame inherit temp/SortedKeymap.nbt {
    keys = @entity.item_frame:keys
}
entity.glow_squid inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "DarkTicksRemaining" = :Key {types = @a/int}
    }
}
entity.goat inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain.goat} + {
        "HasleftHorn" = :Key {types = @a/bool}
        "HasRightHorn" = :Key {types = @a/bool}
        "IsScreamingGoat" = :Key {types = @a/bool}
    }
}
entity.guardian inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.happy_ghast inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty}
}
entity.hoglin inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "CannotBeHunted" = :Key {types = @a/bool}
        "IsImmuneToZombification" = :Key {types = @a/bool}
        "TimeInOverworld" = :Key {types = @a/int}
    }
}
entity.hopper_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + {
        "Enabled" = :Key {types = @a/bool}
    } + @interface.container_entity
}
entity.horse inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_horse{$ (dict) brain_imports = @brain:empty} + {
        "Variant" = :Key {types = @a/int}
    }
}
entity.husk inherit temp/SortedKeymap.nbt {
    keys = @entity.zombie:keys
}
entity.illusioner inherit temp/SortedKeymap.nbt {
    keys = @class.spellcaster_illager{$ (dict) brain_imports = @brain:empty}
}
entity.interaction inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "width" = :Key {types = @a/float}
        "height" = :Key {types = @a/float}
        "response" = :Key {types = @a/bool}
        "attack" = :Key {types = @a/compound, structure = @entity.interaction:interaction}
        "interaction" = :Key {types = @a/compound, structure = @entity.interaction:interaction}
    }
}
entity.interaction:interaction inherit temp/SortedKeymap.nbt {
    keys = {
        "player" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "timestamp" = :Key {types = @a/long}
    }
}
entity.iron_golem inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "PlayerCreated" = :Key {types = @a/bool}
    } + @interface.neutral_mob
}
entity.item inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "Age" = :Key {types = @a/short}
        "Health" = :Key {types = @a/short}
        "Item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "Owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "PickupDelay" = :Key {types = @a/short}
        "Thrower" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    }
}
entity.item_display inherit temp/SortedKeymap.nbt {
    keys = @class.display + {
        "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "item_display" = :Key {types = @a/string}
    }
}
entity.item_frame:keys @class.hanging_entity + {
    "Fixed" = :Key {types = @a/bool}
    "Invisible" = :Key {types = @a/bool}
    "Item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
    "ItemDropChance" = :Key {types = @a/float}
    "ItemRotation" = :Key {types = @a/byte}
}
entity.item_frame inherit temp/SortedKeymap.nbt {
    keys = @entity.item_frame:keys
}
entity.leash_knot inherit temp/SortedKeymap.nbt {
    keys = @class.entity
}
entity.lightning_bolt inherit temp/SortedKeymap.nbt {
    keys = @class.entity
}
entity.lingering_potion inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.llama:keys @class.abstract_chested_horse{$ (dict) brain_imports = @brain:empty} + {
    "Strength" = :Key {types = @a/int}
    "Variant" = :Key {types = @a/int}
}
entity.llama inherit temp/SortedKeymap.nbt {
    keys = @entity.llama:keys
}
entity.llama_spit inherit temp/SortedKeymap.nbt {
    keys = @class.projectile
}
entity.magma_cube inherit temp/SortedKeymap.nbt {
    keys = @entity.slime:keys
}
entity.marker inherit temp/SortedKeymap.nbt {
    keys = @class.entity
}
entity.minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart
}
entity.mooshroom inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "stew_effects" = :Key {types = @a/list, structure = @misc/effect_data_list}
        "Type" = :Key {types = @a/string}
    }
}
entity.mule inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_chested_horse{$ (dict) brain_imports = @brain:empty}
}
entity.ocelot inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "Trusting" = :Key {types = @a/bool}
    }
}
entity.ominous_item_spawner inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "item" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "spawn_item_after_ticks" = :Key {types = @a/long}
    }
}
entity.painting inherit temp/SortedKeymap.nbt {
    keys = @class.hanging_entity + {
        "variant" = :Key {types = @a/string}
    }
}
entity.panda inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "HiddenGene" = :Key {types = @a/string}
        "MainGene" = :Key {types = @a/string}
    }
}
entity.parrot inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "Variant" = :Key {types = @a/int}
    }
}
entity.phantom inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "size" = :Key {types = @a/int}
        "anchor_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    }
}
entity.pig inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "variant" = :Key {types = @a/string}
    } + @interface.saddleable
}
entity.piglin inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_piglin{$ (dict) brain_imports = @brain.piglin} + {
        "CannotHunt" = :Key {types = @a/bool}
        "IsBaby" = :Key {types = @a/bool}
    } + @interface.inventory_carrier
}
entity.piglin_brute inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_piglin{$ (dict) brain_imports = @brain.piglin_brute} + {
        "CannotHunt" = :Key {types = @a/bool, tags = @t/outdated}
    }
}
entity.pillager inherit temp/SortedKeymap.nbt {
    keys = @class.raider{$ (dict) brain_imports = @brain:empty} + @interface.inventory_carrier
}
entity.player inherit temp/SortedKeymap.nbt {
    keys = @class.living_entity{$ (dict) brain_imports = @brain:empty} + {
        "abilities" = :Key {types = @a/compound, structure = @entity.player:abilities}
        "current_explosion_impact_pos" = :Key {types = @a/list, structure = @vector/vector.tag_double} // not explained what the type inside the list is
        "DataVersion" = :Key {types = @a/int}
        "Dimension" = :Key {types = @a/string}
        "EnderItems" = :Key {types = @a/list, structure = @misc/item_data_list}
        "entered_nether_pos" = :Key {types = @a/list, structure = @vector/vector.tag_double}
        "foodExhaustionLevel" = :Key {types = @a/float}
        "foodLevel" = :Key {types = @a/int}
        "foodSaturationLevel" = :Key {types = @a/float}
        "foodTickTimer" = :Key {types = @a/int}
        "ignore_fall_damage_from_current_explosion" = :Key {types = @a/bool}
        "Inventory" = :Key {types = @a/list, structure = @misc/item_data_list}
        "LastDeathLocation" = :Key {types = @a/compound, structure = @misc/position_dimension}
        "playerGameType" = :Key {types = @a/int}
        "previousPlayerGameType" = :Key {types = @a/int}
        "recipeBook" = :Key {types = @a/compound, structure = @entity.player:recipe_book}
        "respawn" = :Key {types = @a/compound, structure = @entity.player:respawn}
        "RootVehicle" = :Key {types = @a/compound, structure = @entity.player:root_vehicle}
        "Score" = :Key {types = @a/int}
        "seenCredits" = :Key {types = @a/bool}
        "SelectedItem" = :Key {types = @a/compound, structure = @misc/item_data_slotless}
        "SelectedItemSlot" = :Key {types = @a/int}
        "ShoulderEntityLeft" = :Key {types = @a/compound, structure = @entity}
        "ShoulderEntityRight" = :Key {types = @a/compound, structure = @entity}
        "SleepTimer" = :Key {types = @a/short}
        "warden_spawn_tracker" = :Key {types = @a/compound, structure = @entity.player:warden_spawn_tracker}
        "XpLevel" = :Key {types = @a/int}
        "XpP" = :Key {types = @a/float}
        "XpSeed" = :Key {types = @a/int}
        "XpTotal" = :Key {types = @a/int}
    }
}
entity.player:abilities inherit temp/SortedKeymap.nbt {
    keys = {
        "flying" = :Key {types = @a/bool}
        "flySpeed" = :Key {types = @a/float}
        "instabuild" = :Key {types = @a/bool}
        "invulernable" = :Key {types = @a/bool}
        "mayBuild" = :Key {types = @a/bool}
        "mayfly" = :Key {types = @a/bool}
        "walkSpeed" = :Key {types = @a/float}
    }
}
entity.player:recipe_book inherit temp/SortedKeymap.nbt {
    keys = {
        "recipes" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="recipe"}}
        "toBeDisplayed" = :Key {types = @a/list, structure = @misc/named_list.nbt{$name="recipe"}}
        "isFilteringCraftable" = :Key {types = @a/bool}
        "isGuiOpen" = :Key {types = @a/bool}
        "isFurnaceFilteringCraftable" = :Key {types = @a/bool}
        "isFurnaceGuiOpen" = :Key {types = @a/bool}
        "isBlastingFurnaceFilteringCraftable" = :Key {types = @a/bool}
        "isBlastingFurnaceGuiOpen" = :Key {types = @a/bool}
        "isSmokerFilteringCraftable" = :Key {types = @a/bool}
        "isSmokerGuiOpen" = :Key {types = @a/bool}
    }
}
entity.player:respawn inherit temp/SortedKeymap.nbt {
    keys = {
        "pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "angle" = :Key {types = @a/float}
        "dimension" = :Key {types = @a/string}
        "forced" = :Key {types = @a/bool}
    }
}
entity.player:root_vehicle inherit temp/SortedKeymap.nbt {
    keys = {
        "Attach" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
        "Entity" = :Key {types = @a/compound, structure = @entity}
    }
}
entity.player:warden_spawn_tracker inherit temp/SortedKeymap.nbt {
    keys = {
        "warning_level" = :Key {types = @a/int}
        "cooldown_ticks" = :Key {types = @a/int}
        "ticks_since_last_warning" = :Key {types = @a/int}
    }
}
entity.polar_bear inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + @interface.neutral_mob
}
entity.pufferfish inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "PuffState" = :Key {types = @a/int}
    } + @interface.bucketable
}
entity.rabbit inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "MoreCarrotTicks" = :Key {types = @a/int}
        "RabbitType" = :Key {types = @a/int}
    }
}
entity.ravager inherit temp/SortedKeymap.nbt {
    keys = @class.raider{$ (dict) brain_imports = @brain:empty} + {
        "AttackTick" = :Key {types = @a/int}
        "RoarTick" = :Key {types = @a/int}
        "StunTick" = :Key {types = @a/int}
    }
}
entity.salmon inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "type" = :Key {types = @a/string}
    } + @interface.bucketable
}
entity.sheep inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "Color" = :Key {types = @a/byte}
        "Sheared" = :Key {types = @a/bool}
    }
}
entity.shulker inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "AttachFace" = :Key {types = @a/byte}
        "Color" = :Key {types = @a/byte}
        "Peek" = :Key {types = @a/byte}
    }
}
entity.shulker_bullet inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + {
        "Steps" = :Key {types = @a/int}
        "Target" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "TXD" = :Key {types = @a/double}
        "TYD" = :Key {types = @a/double}
        "TZD" = :Key {types = @a/double}
    }
}
entity.silverfish inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.skeleton inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "StrayConversionTime" = :Key {types = @a/int}
    }
}
entity.skeleton_horse inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_horse{$ (dict) brain_imports = @brain:empty} + {
        "SkeletonTrap" = :Key {types = @a/bool}
        "SkeletonTrapTime" = :Key {types = @a/int}
    }
}
entity.slime:keys @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Size" = :Key {types = @a/int}
        "wasOnGround" = :Key {types = @a/bool}
    }
entity.slime inherit temp/SortedKeymap.nbt {
    keys = @entity.slime:keys
}
entity.small_fireball inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile + @interface.item_supplier
}
entity.sniffer inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain.sniffer}
}
entity.snow_golem inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Pumpkin" = :Key {types = @a/bool}
    }
}
entity.snowball inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.spawner_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + @block_entity/block_entity.mob_spawner:keys
}
entity.spectral_arrow inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_arrow + {
        "Duration" = :Key {types = @a/int}
    }
}
entity.spider inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.splash_potion inherit temp/SortedKeymap.nbt {
    keys = @class.projectile + @interface.item_supplier
}
entity.strider inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + @interface.saddleable
}
entity.squid inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.stray inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.tadpole inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Age" = :Key {types = @a/int}
    } + @interface.bucketable
}
entity.text_display inherit temp/SortedKeymap.nbt {
    keys = @class.display + {
        "alignment" = :Key {types = @a/string}
        "background" = :Key {types = @a/int}
        "default_background" = :Key {types = @a/bool}
        "line_width" = :Key {types = @a/int}
        "see_through" = :Key {types = @a/bool}
        "shadow" = :Key {types = @a/bool}
        "text" = :Key {types = @a/string}
        "text_opacity" = :Key {types = @a/byte}
    }
}
entity.tnt inherit temp/SortedKeymap.nbt {
    keys = @class.entity + {
        "fuse" = :Key {types = @a/short}
        "block_state" = :Key {types = @a/compound, structure = @block_state/block_state}
        "explosion_power" = :Key {types = @a/float}
        "owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    }
}
entity.tnt_minecart inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_minecart + {
        "fuse" = :Key {types = @a/int}
        "explosion_power" = :Key {types = @a/float}
        "explosion_speed_factor" = :Key {types = @a/float}
    }
}
entity.trader_llama inherit temp/SortedKeymap.nbt {
    keys = @entity.llama:keys + {
        "DespawnDelay" = :Key {types = @a/int}
    }
}
entity.trident inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_arrow + {
        "DealtDamage" = :Key {types = @a/bool} // item is in class.abstract_arrow
    }
}
entity.tropical_fish inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Variant" = :Key {types = @a/int}
    } + @interface.bucketable
}
entity.turtle inherit temp/SortedKeymap.nbt {
    keys = @class.ageable_mob{$ (dict) brain_imports = @brain:empty} + {
        "has_egg" = :Key {types = @a/bool} // home_pos is already in class.living_entity
    }
}
entity.vex inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "bound_pos" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
        "life_ticks" = :Key {types = @a/int}
        "owner" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    }
}
entity.villager inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_villager{$ (dict) brain_imports = @brain.villager} + {
        "LastRestock" = :Key {types = @a/long}
        "LastGossipDecay" = :Key {types = @a/long}
        "RestocksToday" = :Key {types = @a/int}
        "Riches" = :Key {types = @a/int, tags = @t/outdated}
        "Willing" = :Key {types = @a/bool}
    } + @interface.inventory_carrier + @interface.villager_data_holder
}
entity.vindicator inherit temp/SortedKeymap.nbt {
    keys = @class.raider{$ (dict) brain_imports = @brain:empty} + {
        "Johnny" = :Key {types = @a/bool}
    }
}
entity.wandering_trader inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_villager{$ (dict) brain_imports = @brain:empty} + {
        "DespawnDelay" = :Key {types = @a/int}
        "wander_target" = :Key {types = @a/int_array, structure = @vector/vector.tag_int_array}
    } + @interface.inventory_carrier
}
entity.warden inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain.warden} + {
        "anger" = :Key {types = @a/compound, structure = @entity.warden:anger}
    }
}
entity.warden:anger inherit temp/SortedKeymap.nbt {
    keys = {
        "suspects" = :Key {types = @a/list, structure = @entity.warden:suspects}
    }
}
entity.warden:suspects inherit temp/Set.nbt {
    $ field = "suspect"
    value_types = @a/compound
    value_structure = @entity.warden:suspect
}
entity.warden:suspect inherit temp/SortedKeymap.nbt {
    keys = {
        "anger" = :Key {types = @a/int}
        "uuid" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    }
}
entity.wind_charge inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile
}
entity.witch inherit temp/SortedKeymap.nbt {
    keys = @class.raider{$ (dict) brain_imports = @brain:empty}
}
entity.wither inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "Invul" = :Key {types = @a/int}
    }
}
entity.wither_skeleton inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty}
}
entity.wither_skull inherit temp/SortedKeymap.nbt {
    keys = @class.hurting_projectile + {
        "dangerous" = :Key {types = @a/bool}
    }
}
entity.wolf inherit temp/SortedKeymap.nbt {
    keys = @class.tamable_animal{$ (dict) brain_imports = @brain:empty} + {
        "CollarColor" = :Key {types = @a/byte}
        "variant" = :Key {types = @a/string}
        "sound_variant" = :Key {types = @a/string}
    } + @interface.neutral_mob
}
entity.zoglin inherit temp/SortedKeymap.nbt {
    keys = @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "IsBaby" = :Key {types = @a/bool}
    }
}
entity.zombie:keys @class.mob{$ (dict) brain_imports = @brain:empty} + {
        "ConversionTime" = :Key {types = @a/int, tags = @t/outdated}
        "IsVillager" = :Key {types = @a/bool, tags = @t/outdated}
        "VillagerProfession" = :Key {types = @a/int}
        "CanBreakDoors" = :Key {types = @a/bool}
        "DrownedConversionTime" = :Key {types = @a/int}
        "InWaterTime" = :Key {types = @a/int}
        "IsBaby" = :Key {types = @a/bool}
    }
entity.zombie inherit temp/SortedKeymap.nbt {
    keys = @entity.zombie:keys
}
entity.zombie_horse inherit temp/SortedKeymap.nbt {
    keys = @class.abstract_horse{$ (dict) brain_imports = @brain:empty}
}
entity.zombie_villager inherit temp/SortedKeymap.nbt {
    keys = @entity.zombie:keys + {
        "Age" = :Key {types = @a/int, tags = @t/outdated}
        "ForcedAge" = :Key {types = @a/int, tags = @t/outdated}
        "ConversionTime" = :Key {types = @a/int}
        "ConversionPlayer" = :Key {types = @a/int_array, structure = @misc/uuid_list.nbt}
    } + @interface.inventory_carrier + @interface.villager_data_holder
}
entity.zombified_piglin inherit temp/SortedKeymap.nbt {
    keys = @entity.zombie:keys + @interface.neutral_mob
}