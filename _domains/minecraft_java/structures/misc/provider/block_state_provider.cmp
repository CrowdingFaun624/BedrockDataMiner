/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        a = @structures/misc/types/
        misc = @structures/misc/misc/
        temp = @structures/misc/template/
        bs = @structures/misc/block_state/
        int_provider = @structures/misc/provider/int_provider/
        noise = @structures/data/generation/noise/
        vector = @structures/misc/vector/
    }
}
range_int :Union {
    substructures = [
        :Key {types = #int},
        :Key {types = #list, structure = @vector/vector.int},
        :Key {types = #dict, structure = inherit temp/SortedKeymap {
            keys = {
                "min_inclusive" = :Key {types = #int}
                "max_inclusive" = :Key {types = #int}
            }
        }},
    ]
}
block_state_provider :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:simple_state_provider" = :Key {types = #dict, structure = @block_state_provider.simple_state_provider}
        "minecraft:rotated_block_provider" = :Key {types = #dict, structure = @block_state_provider.rotated_block_provider}
        "minecraft:weighted_state_provider" = :Key {types = #dict, structure = @block_state_provider.weighted_state_provider}
        "minecraft:randomized_int_state_provider" = :Key {types = #dict, structure = @block_state_provider.randomized_int_state_provider}
        "minecraft:noise_provider" = :Key {types = #dict, structure = @block_state_provider.noise_provider}
        "minecraft:dual_noise_provider" = :Key {types = #dict, structure = @block_state_provider.dual_noise_provider}
        "minecraft:noise_threshold_provider" = :Key {types = #dict, structure = @block_state_provider.noise_threshold_provider}
    }
}
block_state_provider:all {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
}
block_state_provider.simple_state_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "state" = :Key {types = @a/compound, structure = @bs/block_state}
    }
}
block_state_provider.rotated_block_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "state" = :Key {types = @a/compound, structure = @bs/block_state}
    }
}
block_state_provider.weighted_state_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "entries" = :Key {types = #list, structure = @block_state_provider.weighted_state_provider:entries}
    }
}
block_state_provider.weighted_state_provider:entries inherit temp/Set {
    $ field = "block state"
    value_types = #dict
    value_structure = @block_state_provider.weighted_state_provider:entry
}
block_state_provider.weighted_state_provider:entry inherit temp/SortedKeymap {
    keys = {
        "data" = :Key {types = @a/compound, structure = @bs/block_state}
        "weight" = :Key {types = #int}
    }
}
block_state_provider.randomized_int_state_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "property" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "values" = :Key {types = [#int, #dict], structure = @int_provider/int_provider}
        "source" = :Key {types = #dict, structure = @block_state_provider}
    }
}
block_state_provider.noise_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "seed" = :Key {types = #int}
        "noise" = :Key {types = #dict, structure = @noise/noise}
        "scale" = :Key {types = @misc/decimal}
        "states" = :Key {types = @a/list, structure = @bs/block_state_list}
    }
}
block_state_provider.dual_noise_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "seed" = :Key {types = #int}
        "noise" = :Key {types = #dict, structure = @noise/noise}
        "scale" = :Key {types = @misc/decimal}
        "slow_noise" = :Key {types = #dict, structure = @noise/noise}
        "slow_scale" = :Key {types = @misc/decimal}
        "variety" = :Key {types = [#int, #list, #dict], structure = @range_int}
        "states" = :Key {types = @a/list, structure = @bs/block_state_list}
    }
}
block_state_provider.noise_threshold_provider inherit temp/SortedKeymap {
    keys = @block_state_provider:all + {
        "seed" = :Key {types = #int}
        "noise" = :Key {types = #dict, structure = @noise/noise}
        "scale" = :Key {types = @misc/decimal}
        "threshold" = :Key {types = @misc/decimal}
        "high_chance" = :Key {types = @misc/decimal}
        "default_state" = :Key {types = @a/compound, structure = @bs/block_state}
        "low_states" = :Key {types = @a/list, structure = @bs/block_state_list}
        "high_states" = :Key {types = @a/list, structure = @bs/block_state_list}
    }
}