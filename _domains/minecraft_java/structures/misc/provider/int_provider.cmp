/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        misc = @structures/misc/misc/
        t = @structure_tags/
        temp = @structures/misc/template/
    }
}
int_provider :Switch {
    switch_function = :Function {
        function = %scripts/normalizers/normalizers/provider_switch
        arguments = {"key" = "type", "default" = "minecraft:constant_int"}
    }
    substructures = {
        "minecraft:constant_int" = :Key {types = #int} // not a real type
        "minecraft:constant" = :Key {types = #dict, structure = @int_provider.constant}
        "minecraft:uniform" = :Key {types = #dict, structure = @int_provider.uniform}
        "minecraft:biased_to_bottom" = :Key {types = #dict, structure = @int_provider.biased_to_bottom}
        "minecraft:clamped" = :Key {types = #dict, structure = @int_provider.clamped}
        "minecraft:clamped_normal" = :Key {types = #dict, structure = @int_provider.clamped_normal}
        "minecraft:weighted_list" = :Key {types = #dict, structure = @int_provider.weighted_list}
    }
}
int_provider:all  {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
}
int_provider:abstract abstract inherit temp/SortedKeymap {
    $ (:Structure) keys
    keys = @int_provider:all + keys + {
        "value" = :Key {types = #dict, structure = inherit temp/SortedKeymap {
            keys = keys
        }}
    }
}
int_provider.constant inherit temp/SortedKeymap { // does not inherit from int_provider:abstract
    keys = @int_provider:all + {
        "value" = :Key {types = #int}
    }
}
int_provider.uniform inherit int_provider:abstract {
    $ keys = {
        "min_inclusive" = :Key {types = #int}
        "max_inclusive" = :Key {types = #int}
        "base" = :Key {types = #int}
        "spread" = :Key {types = #int}
    }
}
int_provider.biased_to_bottom inherit int_provider:abstract {
    $ keys = {
        "min_inclusive" = :Key {types = #int}
        "max_inclusive" = :Key {types = #int}
    }
}
int_provider.clamped inherit int_provider:abstract {
    $ keys = {
        "min_inclusive" = :Key {types = #int}
        "max_inclusive" = :Key {types = #int}
        "source" = :Key {types = [#int, #dict], structure = @int_provider}
    }
}
int_provider.clamped_normal inherit int_provider:abstract {
    $ keys = {
        "min_inclusive" = :Key {types = #int}
        "max_inclusive" = :Key {types = #int}
        "mean" = :Key {types = @misc/decimal}
        "deviation" = :Key {types = @misc/decimal}
    }
}
int_provider.weighted_list inherit int_provider:abstract {
    $ keys = {
        "distribution" = :Key {types = #list, structure = @int_provider.weighted_list:distribution}
    }
}
int_provider.weighted_list:distribution inherit temp/Set {
    $ field = "entry"
    value_types = #dict
    value_structure = @int_provider.weighted_list:distribution.entry
}
int_provider.weighted_list:distribution.entry inherit temp/SortedKeymap {
    keys = {
        "data" = :Key {types = [#int, #dict], structure = @int_provider}
        "weight" = :Key {types = #int}
    }
}
int_provider:forced_uniform :Union {
    substructures = [
        :Key {types = #int},
        :Key {types = #dict, structure = @int_provider.uniform},
    ]
}