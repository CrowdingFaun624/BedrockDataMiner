/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        misc = @structures/misc/misc/
        temp = @structures/misc/template/
        s = @serializers/
        t = @structure_tags/
    }
}
base inherit temp/base_multiple_pack_files {
    $ name = "item_model_definitions"
    $ pack_type = "resource pack"
    $ structure = @root
}
root inherit temp/SortedKeymap {
    keys = {
        "model" = :Key {types = #dict, structure = @model}
    }
}
color :Union {
    substructures = [
        :Key {types = #int},
        :Key {types = #list, structure = inherit temp/Dict {
            allow_key_moves = false
            key_weight = 0
            key_types = #int
            this_types = #list
            value_types = #int
            value_structure = null
            delegate = :Delegate {
                delegate_class = %DefaultDelegate
                arguments = {"field" = "channel", "print_flat" = true, "print_all" = true}
            }
        }},
    ]
}
model_list inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @model
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "model", "show_item_key" = false, "measure_length" = true}
    }
}
tints inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @tint
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "tint", "show_item_key" = false, "measure_length" = true}
    }
}
tint :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:constant" = :Key {types = #dict, structure = @tint.constant}
        "minecraft:custom_model_data" = :Key {types = #dict, structure = @tint.custom_model_data}
        "minecraft:dye" = :Key {types = #dict, structure = @tint.dye}
        "minecraft:firework" = :Key {types = #dict, structure = @tint.firework}
        "minecraft:grass" = :Key {types = #dict, structure = @tint.grass}
        "minecraft:map_color" = :Key {types = #dict, structure = @tint.map_color}
        "minecraft:potion" = :Key {types = #dict, structure = @tint.potion}
        "minecaft:team" = :Key {types = #dict, structure = @tint.team}
    }
}
tint.constant inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "value" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.custom_model_data inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "index" = :Key {types = #int}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.dye inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.firework inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.grass inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "temperature" = :Key {types = @misc/decimal}
        "downfall" = :Key {types = @misc/decimal}
    }
}
tint.map_color inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.potion inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
tint.team inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "default" = :Key {types = [#int, #list], structure = @color}
    }
}
model :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:bundle/selected_item" = :Key {types = #dict, structure = @model.bundle_selected_item}
        "minecraft:composite" = :Key {types = #dict, structure = @model.composite}
        "minecraft:condition" = :Key {types = #dict, structure = @model.condition}
        "minecraft:empty" = :Key {types = #dict, structure = @model.empty}
        "minecraft:model" = :Key {types = #dict, structure = @model.model}
        "minecraft:range_dispatch" = :Key {types = #dict, structure = @model.range_dispatch}
        "minecraft:select" = :Key {types = #dict, structure = @model.select}
        "minecraft:special" = :Key {types = #dict, structure = @model.special}
    }
}
model.bundle_selected_item inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.composite inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "models" = :Key {types = #list, structure = @model_list}
    }
}
model.condition :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "property"}
    }
    substructures = {
        "minecraft:broken" = :Key {types = #dict, structure = @model.condition.broken}
        "minecraft:bundle/has_selected_item" = :Key {types = #dict, structure = @model.condition.bundle_has_selected_item}
        "minecraft:carried" = :Key {types = #dict, structure = @model.condition.carried}
        "minecraft:custom_model_data" = :Key {types = #dict, structure = @model.condition.custom_model_data}
        "minecraft:damaged" = :Key {types = #dict, structure = @model.condition.damaged}
        "minecraft:extended_view" = :Key {types = #dict, structure = @model.condition.extended_view}
        "minecraft:fishing_rod/cast" = :Key {types = #dict, structure = @model.condition.fishing_rod_cast}
        "minecraft:has_component" = :Key {types = #dict, structure = @model.condition.has_component}
        "minecraft:keybind_down" = :Key {types = #dict, structure = @model.condition.keybind_down}
        "minecraft:selected" = :Key {types = #dict, structure = @model.condition.selected}
        "minecraft:using_item" = :Key {types = #dict, structure = @model.condition.using_item}
        "minecraft:view_entity" = :Key {types = #dict, structure = @model.condition.view_entity}
        "minecraft:xmas" = :Key {types = #dict, structure = @model.condition.xmas, tags = @t/outdated}
    }
}
model.condition:common {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "property" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "on_true" = :Key {types = #dict, structure = @model}
    "on_false" = :Key {types = #dict, structure = @model}
}
model.condition.broken inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.bundle_has_selected_item inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.carried inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.custom_model_data inherit temp/SortedKeymap {
    keys = @model.condition:common + {
        "index" = :Key {types = #int}
    }
}
model.condition.damaged inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.extended_view inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.fishing_rod_cast inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.has_component inherit temp/SortedKeymap {
    keys = @model.condition:common + {
        "component" = :Key {types = #str}
        "ignore_default" = :Key {types = #str}
    }
}
model.condition.keybind_down inherit temp/SortedKeymap {
    keys = @model.condition:common + {
        "keybind" = :Key {types = #str}
    }
}
model.condition.selected inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.using_item inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.view_entity inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.condition.xmas inherit temp/SortedKeymap {
    keys = @model.condition:common
}
model.empty inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.model inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "model" = :Key {types = #str, structure = @misc/string}
        "tints" = :Key {types = #list, structure = @tints}
    }
}
model.range_dispatch :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "property"}
    }
    substructures = {
        "minecraft:bundle/fullness" = :Key {types = #dict, structure = @model.range_dispatch.bundle_fullness}
        "minecraft:compass" = :Key {types = #dict, structure = @model.range_dispatch.compass}
        "minecraft:cooldown" = :Key {types = #dict, structure = @model.range_dispatch.cooldown}
        "minecraft:count" = :Key {types = #dict, structure = @model.range_dispatch.count}
        "minecraft:crossbow/pull" = :Key {types = #dict, structure = @model.range_dispatch.crossbow_pull}
        "minecraft:custom_model_data" = :Key {types = #dict, structure = @model.range_dispatch.custom_model_data}
        "minecraft:damage" = :Key {types = #dict, structure = @model.range_dispatch.damage}
        "minecraft:time" = :Key {types = #dict, structure = @model.range_dispatch.time}
        "minecraft:use_cycle" = :Key {types = #dict, structure = @model.range_dispatch.use_cycle}
        "minecraft:use_duration" = :Key {types = #dict, structure = @model.range_dispatch.use_duration}
    }
}
model.range_dispatch:common {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "property" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "scale" = :Key {types = @misc/decimal}
    "entries" = :Key {types = #list, structure = @model.range_dispatch:entries}
    "fallback" = :Key {types = #dict, structure = @model}
}
model.range_dispatch:entries inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @model.range_dispatch:entry
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "entry", "show_item_key" = false, "measure_length" = true}
    }
}
model.range_dispatch:entry inherit temp/SortedKeymap {
    keys = {
        "threshold" = :Key {types = @misc/decimal}
        "model" = :Key {types = #dict, structure = @model}
    }
}
model.range_dispatch.bundle_fullness inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common
}
model.range_dispatch.compass inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "target" = :Key {types = #str}
        "wobble" = :Key {types = #bool}
    }
}
model.range_dispatch.cooldown inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common
}
model.range_dispatch.count inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "normalize" = :Key {types = #bool}
    }
}
model.range_dispatch.crossbow_pull inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common
}
model.range_dispatch.custom_model_data inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "index" = :Key {types = #int}
    }
}
model.range_dispatch.damage inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "normalize" = :Key {types = #bool}
    }
}
model.range_dispatch.time inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "source" = :Key {types = #str}
        "wobble" = :Key {types = #bool}
    }
}
model.range_dispatch.use_cycle inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "period" = :Key {types = @misc/decimal}
    }
}
model.range_dispatch.use_duration inherit temp/SortedKeymap {
    keys = @model.range_dispatch:common + {
        "remaining" = :Key {types = #bool}
    }
}
model.select :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "property"}
    }
    substructures = {
        "minecraft:block_state" = :Key {types = #dict, structure = @model.select.block_state}
        "minecraft:charge_type" = :Key {types = #dict, structure = @model.select.charge_type}
        "minecraft:context_dimension" = :Key {types = #dict, structure = @model.select.context_dimension}
        "minecraft:context_entity_type" = :Key {types = #dict, structure = @model.select.context_entity_type}
        "minecraft:custom_model_data" = :Key {types = #dict, structure = @model.select.custom_model_data}
        "minecraft:display_context" = :Key {types = #dict, structure = @model.select.display_context}
        "minecraft:local_time" = :Key {types = #dict, structure = @model.select.local_time}
        "minecraft:main_hand" = :Key {types = #dict, structure = @model.select.main_hand}
        "minecraft:trim_material" = :Key {types = #dict, structure = @model.select.trim_material}
    }
}
model.select:common {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "property" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    "cases" = :Key {types = #list, structure = @model.select:cases}
    "fallback" = :Key {types = #dict, structure = @model}
}
model.select:cases inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @model.select:case
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "case", "show_item_key" = false, "measure_length" = true}
    }
}
model.select:case inherit temp/SortedKeymap {
    keys = {
        "when" = :Key {types = [#str, #list], structure = @model.select:when}
        "model" = :Key {types = #dict, structure = @model}
    }
}
model.select:when :Union {
    substructures = [
        :Key {types = #str},
        :Key {types = #list, structure = inherit temp/Dict {
            key_weight = 0
            key_types = #int
            this_types = #list
            value_types = #str
            value_structure = @misc/string
            delegate = :Delegate {
                delegate_class = %DefaultDelegate
                arguments = {"field" = "condition", "show_item_key" = false, "measure_length" = true}
            }
        }},
    ]
}
model.select.block_state inherit temp/SortedKeymap {
    keys = @model.select:common + {
        "block_state_property" = :Key {types = #str}
    }
}
model.select.charge_type inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.select.context_dimension inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.select.context_entity_type inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.select.custom_model_data inherit temp/SortedKeymap {
    keys = @model.select:common + {
        "index" = :Key {types = #int}
    }
}
model.select.display_context inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.select.local_time inherit temp/SortedKeymap {
    keys = @model.select:common + {
        "locale" = :Key {types = #str, structure = @misc/string}
        "time_zone" = :Key {types = #str}
        "pattern" = :Key {types = #str}
    }
}
model.select.main_hand inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.select.trim_material inherit temp/SortedKeymap {
    keys = @model.select:common
}
model.special inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "base" = :Key {types = #str, structure = @misc/string}
        "model" = :Key {types = #dict, structure = @model.special:model}
    }
}
model.special:model :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:banner" = :Key {types = #dict, structure = @model.special.banner}
        "minecraft:bed" = :Key {types = #dict, structure = @model.special.bed}
        "minecraft:chest" = :Key {types = #dict, structure = @model.special.chest}
        "minecraft:conduit" = :Key {types = #dict, structure = @model.special.conduit}
        "minecraft:copper_golem_statue" = :Key {types = #dict, structure = @model.special.copper_golem_statue}
        "minecraft:decorated_pot" = :Key {types = #dict, structure = @model.special.decorated_pot}
        "minecraft:hanging_sign" = :Key {types = #dict, structure = @model.special.hanging_sign}
        "minecraft:head" = :Key {types = #dict, structure = @model.special.head}
        "minecraft:player_head" = :Key {types = #dict, structure = @model.special.player_head}
        "minecraft:shield" = :Key {types = #dict, structure = @model.special.shield}
        "minecraft:shulker_box" = :Key {types = #dict, structure = @model.special.shulker_box}
        "minecraft:standing_sign" = :Key {types = #dict, structure = @model.special.standing_sign}
        "minecraft:trident" = :Key {types = #dict, structure = @model.special.trident}
    }
}
model.special.bed inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "texture" = :Key {types = #str, structure = @misc/string}
    }
}
model.special.banner inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "color" = :Key {types = #str}
    }
}
model.special.chest inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "texture" = :Key {types = #str, structure = @misc/string}
        "openness" = :Key {types = @misc/decimal}
    }
}
model.special.conduit inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.special.copper_golem_statue inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "texture" = :Key {types = #str}
    }
}
model.special.decorated_pot inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.special.hanging_sign inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "wood_type" = :Key {types = #str}
        "texture" = :Key {types = #str, structure = @misc/string}
    }
}
model.special.head inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "kind" = :Key {types = #str}
        "texture" = :Key {types = #str, structure = @misc/string}
        "animation" = :Key {types = @misc/decimal}
    }
}
model.special.player_head inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.special.shield inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}
model.special.shulker_box inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "texture" = :Key {types = #str, structure = @misc/string}
        "openness" = :Key {types = @misc/decimal}
        "orientation" = :Key {types = #str}
    }
}
model.special.standing_sign inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "wood_type" = :Key {types = #str}
        "texture" = :Key {types = #str, structure = @misc/string}
    }
}
model.special.trident inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
    }
}