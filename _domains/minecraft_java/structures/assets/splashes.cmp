/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        misc = @structures/misc/misc/
        s = @serializers/
        temp = @structures/misc/template/
    }
}
base :StructureBase {
    this_types = #dict
    structure = @resource_packs
    delegate = :Delegate {
        delegate_class = %DefaultBaseDelegate
        arguments = {"name" = "splashes"}
    }
}
resource_packs inherit temp/Dict {
    value_types = #file
    value_structure = @cache
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "resource pack", "measure_length" = true}
    }
}
cache :Cache {
    this_types = #file
    structure = :Converging {
        within_structure_depth = 1
        end_structure = @splashes
        this_types = #file
        structure = :Condition {
            substructures = [
                :Key {types = #file, structure = @file{$serializer=@s/cp1252_lines_serializer}, filter = :EqFilter {
                    key = "repair_aaa"
                    value = true
                }},
                :Key {types = #file, structure = @file{$serializer=@s/lines_serializer}, filter = :EqFilter {
                    key = "repair_aaa"
                    value = false
                    default = true
                }},
            ]
        }
    }
}
file abstract :File {
    $ (:Serializer) serializer
    serializer = serializer
    outer_types = #file
    inner_types = #list
    structure = @splashes
}
splashes inherit temp/Set {
    $ field = "splash"
    value_types = #str
    value_structure = @misc/string
}