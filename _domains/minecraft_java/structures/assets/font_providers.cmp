/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        misc = @structures/misc/misc/
        temp = @structures/misc/template/
        s = @serializers/
    }
}
base inherit temp/base_multiple_pack_files {
    $ name = "font_providers"
    $ pack_type = "resource pack"
    $ structure = @root
}
root inherit temp/SortedKeymap {
    keys = {
        "providers" = :Key {types = #list, structure = @providers}
    }
}
providers inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @provider_switch
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "provider", "show_item_key" = false, "measure_length" = true}
    }
}
provider_switch :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "bitmap" = :Key {types = #dict, structure = @provider.bitmap}
        "legacy_unicode" = :Key {types = #dict, structure = @provider.legacy_unicode}
        "reference" = :Key {types = #dict, structure = @provider.reference}
        "space" = :Key {types = #dict, structure = @provider.space}
        "ttf" = :Key {types = #dict, structure = @provider.ttf}
        "unihex" = :Key {types = #dict, structure = @provider.unihex}
    }
}
provider_common {
    "filter" = :Key {types = #dict, structure = @filter}
}
filter inherit temp/SortedKeymap {
    keys = {
        "uniform" = :Key {types = #bool}
        "jp" = :Key {types = #bool}
    }
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"sort" = %sort_by_component_order, "field" = "option"}
    }
}
provider.bitmap inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "ascent" = :Key {types = #int}
        "chars" = :Key {types = #list, structure = @provider.bitmap:chars}
        "file" = :Key {types = #str, structure = @misc/string, delegate_arguments = {"always_print" = true}}
        "height" = :Key {types = #int}
    }
}
provider.bitmap:chars inherit temp/Dict {
    allow_key_moves = false
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #str
    value_structure = @misc/string
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "line", "measure_length" = true}
    }
}
provider.legacy_unicode inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "template" = :Key {types = #str, structure = @misc/string, delegate_arguments = {"always_print" = true}}
        "sizes" = :Key {types = #str, structure = @misc/string}
    }
}
provider.reference inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "id" = :Key {types = #str, structure = @misc/string, delegate_arguments = {"always_print" = true}}
    }
}
provider.space inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "advances" = :Key {types = #dict, structure = @provider.space:advances}
    }
}
provider.space:advances inherit temp/Dict {
    value_types = #int
    value_structure = null
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"sort" = %sort_by_key, "field" = "character", "measure_length" = true}
    }
}
provider.ttf inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "file" = :Key {types = #str, structure = @misc/string, delegate_arguments = {"always_print" = true}}
        "shift" = :Key {types = #list, structure = @provider.ttf:shift}
        "scale" = :Key {types = #int}
        "oversample" = :Key {types = #int}
        "skip" = :Key {types = [#list, #str], structure = @provider.ttf:skip}
    }
}
provider.ttf:shift inherit temp/Dict {
    allow_key_moves = false
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #int
    value_structure = null
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "shift", "print_flat" = true}
    }
}
provider.ttf:skip :Normalizer {
    outer_types = [#list, #str]
    inner_types = #list
    functions = :Function {
        function = %scripts/normalizers/normalizers/font_providers_normalize_skip
    }
    structure = inherit temp/Dict {
        key_weight = 0
        key_types = #int
        this_types = #list
        value_types = #str
        value_structure = null
        delegate = :Delegate {
            delegate_class = %DefaultDelegate
            arguments = {"field" = "character", "show_item_key" = false, "measure_length" = true}
        }
    }
}
provider.unihex inherit temp/SortedKeymap {
    keys = @provider_common + {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "hex_file" = :Key {types = #str, structure = @misc/string, delegate_arguments = {"always_print" = true}}
        "size_overrides" = :Key {types = #list, structure = @provider.unihex:size_overrides}
    }
}
provider.unihex:size_overrides inherit temp/Dict {
    key_weight = 0
    key_types = #int
    this_types = #list
    value_types = #dict
    value_structure = @provider.unihex:size_overrides.item
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"field" = "range", "show_item_key" = false, "measure_length" = true}
    }
}
provider.unihex:size_overrides.item inherit temp/SortedKeymap {
    keys = {
        "from" = :Key {types = #str}
        "to" = :Key {types = #str}
        "left" = :Key {types = #int}
        "right" = :Key {types = #int}
    }
    delegate = :Delegate {
        delegate_class = %DefaultDelegate
        arguments = {"sort" = %sort_by_component_order, "print_all" = true}
    }
}