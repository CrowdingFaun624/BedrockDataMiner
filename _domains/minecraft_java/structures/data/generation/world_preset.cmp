/* Converted by CmpMigrator 0.1.9 */
settings {
    aliases {
        flgp = @structures/data/generation/flat_level_generator_preset/
        misc = @structures/misc/misc/
        ns = @structures/data/generation/noise_settings/
        temp = @structures/misc/template/
    }
}
base inherit temp/base_multiple_pack_files {
    $ name = "world_preset"
    $ pack_type = "data pack"
    $ structure = @world_preset
}
world_preset inherit temp/SortedKeymap {
    keys = {
        "dimensions" = :Key {types = #dict, structure = @dimensions}
    }
}
dimensions inherit temp/Dict {
    $ field = "dimension"
    value_types = #dict
    value_structure = @dimension
}
dimension inherit temp/SortedKeymap {
    keys = {
        "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "generator" = :Key {types = #dict, structure = @generator}
    }
}
generator :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:debug" = :Key {types = #dict, structure = @generator.debug}
        "minecraft:flat" = :Key {types = #dict, structure = @generator.flat}
        "minecraft:noise" = :Key {types = #dict, structure = @generator.noise}
    }
}
generator:all {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
}
generator.debug inherit temp/SortedKeymap {
    keys = @generator:all
}
generator.flat inherit temp/SortedKeymap {
    keys = @generator:all + {
        "settings" = :Key {types = #dict, structure = @flgp/settings}
    }
}
generator.noise inherit temp/SortedKeymap {
    keys = @generator:all + {
        "settings" = :Key {types = [#str, #dict], structure = @ns/noise_settings_or_id}
        "biome_source" = :Key {types = #dict, structure = @biome_source}
    }
}
biome_source :Switch {
    switch_function = :Function {
        function = %get_key
        arguments = {"key" = "type"}
    }
    substructures = {
        "minecraft:checkerboard" = :Key {types = #dict, structure = @biome_source.checkerboard}
        "minecraft:fixed" = :Key {types = #dict, structure = @biome_source.fixed}
        "minecraft:multi_noise" = :Key {types = #dict, structure = @biome_source.multi_noise}
        "minecraft:the_end" = :Key {types = #dict, structure = @biome_source.the_end}
    }
}
biome_source:all {
    "type" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
}
biome_source.checkerboard inherit temp/SortedKeymap {
    keys = @biome_source:all + {
        "biomes" = :Key {types = [#str, #list], structure = @misc/named_list_or_item{$name="biome"}}
        "scale" = :Key {types = #int}
    }
}
biome_source.fixed inherit temp/SortedKeymap {
    keys = @biome_source:all + {
        "biome" = :Key {types = #str}
    }
}
biome_source.multi_noise inherit temp/SortedKeymap {
    keys = @biome_source:all + {
        "preset" = :Key {types = #str}
        "biomes" = :Key {types = #list, structure = @biome_source.multi_noise:biomes}
    }
}
biome_source.multi_noise:biomes inherit temp/Set {
    $ field = "biome"
    value_types = #dict
    value_structure = @biome_source.multi_noise:biome
}
biome_source.multi_noise:biome inherit temp/SortedKeymap {
    keys = {
        "biome" = :Key {types = #str, delegate_arguments = {"always_print" = true}}
        "parameters" = :Key {types = #dict, structure = @ns/noise_parameter}
    }
}
biome_source.the_end inherit temp/SortedKeymap {
    keys = @biome_source:all
}