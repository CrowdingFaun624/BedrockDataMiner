Difference of "text_packs" between "21w08b" (snapshot of "1.17") and "21w10a" (snapshot of "1.17").

Changed resource pack "minecraft":
	Total file: 63 (+53, -0)
	Changed file "program/blit.vsh":
		Total line: 15 (+3, -3)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 OutSize;
		 7  7   
		    8 + out vec2 texCoord;
		 8    - varying vec2 texCoord;
		 9  9   
		10 10   void main(){
		11 11       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		12 12       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		13 13   
		        ...
		        '''
	Changed file "program/blobs.vsh":
		Total line: 17 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   
		    8 + out vec2 texCoord;
		    9 + out vec2 oneTexel;
		 8    - varying vec2 texCoord;
		 9    - varying vec2 oneTexel;
		10 10   
		11 11   void main(){
		12 12       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		13 13       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		14 14   
		        ...
		        '''
	Changed file "program/bumpy.vsh":
		Total line: 17 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   
		    8 + out vec2 texCoord;
		    9 + out vec2 oneTexel;
		 8    - varying vec2 texCoord;
		 9    - varying vec2 oneTexel;
		10 10   
		11 11   void main(){
		12 12       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		13 13       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		14 14   
		        ...
		        '''
	Changed file "program/downscale.vsh":
		Total line: 18 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   uniform vec2 OutSize;
		 8  8   
		    9 + out vec2 texCoord;
		   10 + out vec2 oneTexel;
		 9    - varying vec2 texCoord;
		10    - varying vec2 oneTexel;
		11 11   
		12 12   void main(){
		13 13       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		14 14       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		15 15   
		        ...
		        '''
	Changed file "program/flip.vsh":
		Total line: 23 (+3, -3)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   uniform vec2 OutSize;
		 8  8   uniform vec2 ScreenSize;
		 9  9   
		   10 + out vec2 texCoord;
		10    - varying vec2 texCoord;
		11 11   
		12 12   void main(){
		13 13       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		14 14       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		15 15   
		        ...
		        '''
	Changed file "program/fxaa.vsh":
		Total line: 20 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 OutSize;
		 7  7   
		 8  8   uniform float SubPixelShift;
		 9  9   
		   10 + out vec2 texCoord;
		   11 + out vec4 posPos;
		10    - varying vec2 texCoord;
		11    - varying vec4 posPos;
		12 12   
		13 13   void main() {
		14 14       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		15 15       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		16 16   
		        ...
		        '''
	Changed file "program/invert.vsh":
		Total line: 20 (+3, -3)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   uniform vec2 OutSize;
		 8  8   
		    9 + out vec2 texCoord;
		 9    - varying vec2 texCoord;
		10 10   
		11 11   void main(){
		12 12       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		13 13       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		14 14   
		        ...
		        '''
	Changed file "program/rotscale.vsh":
		Total line: 30 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   uniform vec2 OutSize;
		 8  8   
		 9  9   uniform vec2 InScale;
		10 10   uniform vec2 InOffset;
		11 11   uniform float InRotation;
		12 12   uniform float Time;
		13 13   
		   14 + out vec2 texCoord;
		   15 + out vec2 scaledCoord;
		14    - varying vec2 texCoord;
		15    - varying vec2 scaledCoord;
		16 16   
		17 17   void main(){
		18 18       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		19 19       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		20 20   
		        ...
		        '''
	Changed file "program/screenquad.vsh":
		Total line: 14 (+3, -3)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 OutSize;
		 7  7   
		    8 + out vec2 texCoord;
		 8    - varying vec2 texCoord;
		 9  9   
		10 10   void main() {
		11 11       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		12 12       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		13 13       texCoord = Position.xy / OutSize;
		        ...
		        '''
	Changed file "program/sobel.vsh":
		Total line: 19 (+4, -4)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		    3 + in vec4 Position;
		 3    - attribute vec4 Position;
		 4  4   
		 5  5   uniform mat4 ProjMat;
		 6  6   uniform vec2 InSize;
		 7  7   uniform vec2 OutSize;
		 8  8   
		    9 + out vec2 texCoord;
		   10 + out vec2 oneTexel;
		 9    - varying vec2 texCoord;
		10    - varying vec2 oneTexel;
		11 11   
		12 12   void main(){
		13 13       vec4 outPos = ProjMat * vec4(Position.xy, 0.0, 1.0);
		14 14       gl_Position = vec4(outPos.xy, 0.2, 1.0);
		15 15   
		        ...
		        '''
	Added file "core/blit_screen.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV;
		in vec4 Color;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec2 texCoord;
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texCoord = UV;
		    vertexColor = Color;
		}
		'''
	Added file "core/block.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/new_entity.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/particle.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		in vec4 Color;
		in ivec2 UV2;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = UV0;
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		}
		'''
	Added file "core/position.vsh":
		'''
		#version 150
		
		in vec3 Position;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out float vertexDistance;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		}
		'''
	Added file "core/position_color.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		}
		'''
	Added file "core/position_color_lightmap.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord2;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord2 = UV2;
		}
		'''
	Added file "core/position_color_normal.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ModelViewProjMat;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 normal;
		
		void main() {
		    gl_Position = ModelViewProjMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = Color;
		    normal = ModelViewProjMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/position_color_tex.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		}
		'''
	Added file "core/position_color_tex_lightmap.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		}
		'''
	Added file "core/position_tex.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texCoord0 = UV0;
		}
		'''
	Added file "core/position_tex_color.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		in vec4 Color;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec2 texCoord0;
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texCoord0 = UV0;
		    vertexColor = Color;
		}
		'''
	Added file "core/position_tex_color_normal.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		in vec4 Color;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec2 texCoord0;
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texCoord0 = UV0;
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = Color;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/position_tex_lightmap_color.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		in vec2 UV2;
		in vec4 Color;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    vertexColor = Color;
		}
		'''
	Added file "core/rendertype_armor_cutout_no_cull.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_armor_entity_glint.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_armor_glint.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_beacon_beam.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_crumbling.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_cutout.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec3 ChunkOffset;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position + ChunkOffset, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position + ChunkOffset, 1.0)).xyz);
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_cutout_mipped.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec3 ChunkOffset;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position + ChunkOffset, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position + ChunkOffset, 1.0)).xyz);
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_end_portal.vsh":
		'''
		#version 150
		
		#moj_import <projection.glsl>
		
		in vec3 Position;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 texProj0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    texProj0 = projection_from_position(gl_Position);
		}
		'''
	Added file "core/rendertype_energy_swirl.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_alpha.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_cutout.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 overlayColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    overlayColor = texelFetch(Sampler1, UV1, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_cutout_no_cull.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 overlayColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    overlayColor = texelFetch(Sampler1, UV1, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_cutout_no_cull_z_offset.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_decal.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_glint.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_entity_glint_direct.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_entity_no_outline.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_shadow.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_smooth_cutout.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 overlayColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    overlayColor = texelFetch(Sampler1, UV1, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_solid.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_translucent.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec4 overlayColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    overlayColor = texelFetch(Sampler1, UV1, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_entity_translucent_cull.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color) * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_eyes.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_glint.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_glint_direct.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_glint_translucent.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform mat4 TextureMat;
		
		out float vertexDistance;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    texCoord0 = (TextureMat * vec4(UV0, 0.0, 1.0)).xy;
		}
		'''
	Added file "core/rendertype_item_entity_translucent_cull.vsh":
		'''
		#version 150
		
		#moj_import <light.glsl>
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV1;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		uniform vec3 Light0_Direction;
		uniform vec3 Light1_Direction;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord1;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = minecraft_mix_light(Light0_Direction, Light1_Direction, Normal, Color);
		    texCoord0 = UV0;
		    texCoord1 = UV1;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_leash.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in ivec2 UV2;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec4 ColorModulator;
		
		flat out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color * ColorModulator * texelFetch(Sampler2, UV2 / 16, 0);
		}
		'''
	Added file "core/rendertype_lightning.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		}
		'''
	Added file "core/rendertype_lines.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform float LineWidth;
		uniform vec2 ScreenSize;
		
		out vec4 vertexColor;
		
		void main() {
		    vec4 linePosStart = ProjMat * ModelViewMat * vec4(Position, 1.0);
		    vec4 linePosEnd = ProjMat * ModelViewMat * vec4(Position + Normal, 1.0);
		
		    vec3 ndc1 = linePosStart.xyz / linePosStart.w;
		    vec3 ndc2 = linePosEnd.xyz / linePosEnd.w;
		
		    vec2 lineScreenDirection = normalize((ndc2.xy - ndc1.xy) * ScreenSize);
		    vec2 lineOffset = vec2(-lineScreenDirection.y, lineScreenDirection.x) * LineWidth / ScreenSize;
		
		    if (gl_VertexID % 2 == 0) {
		        gl_Position = vec4((ndc1 + vec3(lineOffset, 0.0)) * linePosStart.w, linePosStart.w);
		    } else {
		        gl_Position = vec4((ndc1 - vec3(lineOffset, 0.0)) * linePosStart.w, linePosStart.w);
		    }
		
		    vertexColor = Color;
		}
		'''
	Added file "core/rendertype_outline.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		}
		'''
	Added file "core/rendertype_solid.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec3 ChunkOffset;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position + ChunkOffset, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position + ChunkOffset, 1.0)).xyz);
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_text.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV2;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position, 1.0)).xyz);
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		}
		'''
	Added file "core/rendertype_text_see_through.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		}
		'''
	Added file "core/rendertype_translucent.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in ivec2 UV2;
		in vec3 Normal;
		
		uniform sampler2D Sampler2;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec3 ChunkOffset;
		
		out float vertexDistance;
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position + ChunkOffset, 1.0);
		
		    vertexDistance = length((ModelViewMat * vec4(Position + ChunkOffset, 1.0)).xyz);
		    vertexColor = Color * texelFetch(Sampler2, UV2 / 16, 0);
		    texCoord0 = UV0;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_translucent_moving_block.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_translucent_no_crumbling.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_tripwire.vsh":
		'''
		#version 150
		
		in vec3 Position;
		in vec4 Color;
		in vec2 UV0;
		in vec2 UV2;
		in vec3 Normal;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		uniform vec3 ChunkOffset;
		
		out vec4 vertexColor;
		out vec2 texCoord0;
		out vec2 texCoord2;
		out vec4 normal;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position + ChunkOffset, 1.0);
		
		    vertexColor = Color;
		    texCoord0 = UV0;
		    texCoord2 = UV2;
		    normal = ProjMat * ModelViewMat * vec4(Normal, 0.0);
		}
		'''
	Added file "core/rendertype_water_mask.vsh":
		'''
		#version 150
		
		in vec3 Position;
		
		uniform mat4 ModelViewMat;
		uniform mat4 ProjMat;
		
		void main() {
		    gl_Position = ProjMat * ModelViewMat * vec4(Position, 1.0);
		}
		'''