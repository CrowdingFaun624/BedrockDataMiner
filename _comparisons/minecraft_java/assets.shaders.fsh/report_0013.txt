Difference of "text_packs" between "21w08b" (snapshot of "1.17") and "21w10a" (snapshot of "1.17").

Changed resource pack "minecraft":
	Total file: 80 (+53, -0)
	Changed file "program/antialias.fsh":
		Total line: 31 (+9, -7)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 c  = texture (DiffuseSampler, texCoord);
		   12 +     vec4 u1 = texture (DiffuseSampler, texCoord + vec2 (              0.0, -oneTexel.y      ));
		 9    -     vec4 c  = texture2D (DiffuseSampler, texCoord);
		10    -     vec4 u1 = texture2D (DiffuseSampler, texCoord + vec2 (              0.0, -oneTexel.y      ));
		   13 +     vec4 u2 = texture (DiffuseSampler, texCoord + vec2 (              0.0, -oneTexel.y * 2.0));
		   14 +     vec4 d1 = texture (DiffuseSampler, texCoord + vec2 (              0.0,  oneTexel.y      ));
		   15 +     vec4 d2 = texture (DiffuseSampler, texCoord + vec2 (              0.0,  oneTexel.y * 2.0));
		   16 +     vec4 l1 = texture (DiffuseSampler, texCoord + vec2 (-oneTexel.x,                     0.0));
		   17 +     vec4 l2 = texture (DiffuseSampler, texCoord + vec2 (-oneTexel.x * 2.0,               0.0));
		   18 +     vec4 r1 = texture (DiffuseSampler, texCoord + vec2 ( oneTexel.x,                     0.0));
		   19 +     vec4 r2 = texture (DiffuseSampler, texCoord + vec2 ( oneTexel.x * 2.0,               0.0));
		11    -     vec4 u2 = texture2D (DiffuseSampler, texCoord + vec2 (              0.0, -oneTexel.y * 2.0));
		12    -     vec4 d1 = texture2D (DiffuseSampler, texCoord + vec2 (              0.0,  oneTexel.y      ));
		13    -     vec4 d2 = texture2D (DiffuseSampler, texCoord + vec2 (              0.0,  oneTexel.y * 2.0));
		14    -     vec4 l1 = texture2D (DiffuseSampler, texCoord + vec2 (-oneTexel.x,                     0.0));
		15    -     vec4 l2 = texture2D (DiffuseSampler, texCoord + vec2 (-oneTexel.x * 2.0,               0.0));
		16    -     vec4 r1 = texture2D (DiffuseSampler, texCoord + vec2 ( oneTexel.x,                     0.0));
		17    -     vec4 r2 = texture2D (DiffuseSampler, texCoord + vec2 ( oneTexel.x * 2.0,               0.0));
		18 20   
		19 21       vec4 v1 = mix (c, mix (l1, l2, 0.667), 0.75);
		20 22       vec4 v2 = mix (c, mix (r1, r2, 0.667), 0.75);
		21 23       vec4 v3 = mix (c, mix (u1, u2, 0.667), 0.75);
		22 24       vec4 v4 = mix (c, mix (d1, d2, 0.667), 0.75);
		23 25   
		24 26       vec4 v5 = mix (v1, v2, 0.5);
		25 27       vec4 v6 = mix (v3, v4, 0.5);
		26 28   
		27 29       vec4 color = mix (v5, v6, 0.5);
		   30 +     fragColor = vec4(color.rgb, 1.0);
		28    -     gl_FragColor = vec4(color.rgb, 1.0);
		29 31   }
		        '''
	Changed file "program/bits.fsh":
		Total line: 29 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   uniform float Resolution;
		11 11   uniform float Saturation;
		12 12   uniform float MosaicSize;
		   13 + 
		   14 + out vec4 fragColor;
		13 15   
		14 16   void main() {
		15 17       vec2 mosaicInSize = InSize / MosaicSize;
		16 18       vec2 fractPix = fract(texCoord * mosaicInSize) / mosaicInSize;
		17 19   
		   20 +     vec4 baseTexel = texture(DiffuseSampler, texCoord - fractPix);
		18    -     vec4 baseTexel = texture2D(DiffuseSampler, texCoord - fractPix);
		19 21   
		20 22       vec3 fractTexel = baseTexel.rgb - fract(baseTexel.rgb * Resolution) / Resolution;
		21 23       float luma = dot(fractTexel, vec3(0.3, 0.59, 0.11));
		22 24       vec3 chroma = (fractTexel - luma) * Saturation;
		23 25       baseTexel.rgb = luma + chroma;
		24 26       baseTexel.a = 1.0;
		25 27   
		   28 +     fragColor = baseTexel;
		26    -     gl_FragColor = baseTexel;
		27 29   }
		        '''
	Changed file "program/blit.fsh":
		Total line: 13 (+7, -5)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + uniform vec4 ColorModulate;
		 3    - uniform sampler2D DiffuseSampler;
		 4  6   
		    7 + in vec2 texCoord;
		 5    - uniform vec4 ColorModulate;
		 6  8   
		    9 + out vec4 fragColor;
		 7    - varying vec2 texCoord;
		 8 10   
		 9 11   void main(){
		   12 +     fragColor = texture(DiffuseSampler, texCoord) * ColorModulate;
		10    -     gl_FragColor = texture2D(DiffuseSampler, texCoord) * ColorModulate;
		11 13   }
		        '''
	Changed file "program/blobs.fsh":
		Total line: 45 (+14, -12)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 u  = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		   12 +     vec4 d  = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		 9    -     vec4 u  = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		10    -     vec4 d  = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		   13 +     vec4 l  = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		   14 +     vec4 r  = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		11    -     vec4 l  = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		12    -     vec4 r  = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		13 15   
		14 16       vec4 v1 = min(l, r);
		15 17       vec4 v2 = min(u, d);
		16 18       vec4 v3 = min(v1, v2);
		17 19   
		   20 +     vec4 ul = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x, -oneTexel.y));
		   21 +     vec4 dr = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,  oneTexel.y));
		18    -     vec4 ul = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x, -oneTexel.y));
		19    -     vec4 dr = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,  oneTexel.y));
		   22 +     vec4 dl = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,  oneTexel.y));
		   23 +     vec4 ur = texture(DiffuseSampler, texCoord + vec2( oneTexel.x, -oneTexel.y));
		20    -     vec4 dl = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,  oneTexel.y));
		21    -     vec4 ur = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x, -oneTexel.y));
		22 24   
		23 25       vec4 v4 = min(ul, dr);
		24 26       vec4 v5 = min(ur, dl);
		25 27       vec4 v6 = min(v4, v5);
		26 28   
		27 29       vec4 v7 = min(v3, v6);
		28 30   
		   31 +     vec4 uu = texture(DiffuseSampler, texCoord + vec2(              0.0, -oneTexel.y * 2.0));
		   32 +     vec4 dd = texture(DiffuseSampler, texCoord + vec2(              0.0,  oneTexel.y * 2.0));
		29    -     vec4 uu = texture2D(DiffuseSampler, texCoord + vec2(              0.0, -oneTexel.y * 2.0));
		30    -     vec4 dd = texture2D(DiffuseSampler, texCoord + vec2(              0.0,  oneTexel.y * 2.0));
		   33 +     vec4 ll = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x * 2.0,               0.0));
		   34 +     vec4 rr = texture(DiffuseSampler, texCoord + vec2( oneTexel.x * 2.0,               0.0));
		31    -     vec4 ll = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x * 2.0,               0.0));
		32    -     vec4 rr = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x * 2.0,               0.0));
		33 35   
		34 36       vec4 v8 = min(uu, dd);
		35 37       vec4 v9 = min(ll, rr);
		36 38       vec4 v10 = min(v8, v9);
		37 39   
		38 40       vec4 v11 = min(v7, v10);
		39 41   
		   42 +     vec4 c  = texture(DiffuseSampler, texCoord);
		40    -     vec4 c  = texture2D(DiffuseSampler, texCoord);
		41 43       vec4 color = min(c, v11);
		   44 +     fragColor = vec4(color.rgb, 1.0);
		42    -     gl_FragColor = vec4(color.rgb, 1.0);
		43 45   }
		        '''
	Changed file "program/blobs2.fsh":
		Total line: 32 (+11, -9)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + uniform float Radius;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		   10 + out vec4 fragColor;
		 8    - uniform float Radius;
		 9 11   
		10 12   void main(){
		   13 +     vec4 c  = texture(DiffuseSampler, texCoord);
		11    -     vec4 c  = texture2D(DiffuseSampler, texCoord);
		12 14       vec4 maxVal = c;
		13 15       for(float u = 0.0; u <= Radius; u += 1.0) {
		14 16           for(float v = 0.0; v <= Radius; v += 1.0) {
		15 17               float weight = (((sqrt(u * u + v * v) / (Radius)) > 1.0) ? 0.0 : 1.0);
		16 18   
		   19 +             vec4 s0 = texture(DiffuseSampler, texCoord + vec2(-u * oneTexel.x, -v * oneTexel.y));
		   20 +             vec4 s1 = texture(DiffuseSampler, texCoord + vec2( u * oneTexel.x,  v * oneTexel.y));
		17    -             vec4 s0 = texture2D(DiffuseSampler, texCoord + vec2(-u * oneTexel.x, -v * oneTexel.y));
		18    -             vec4 s1 = texture2D(DiffuseSampler, texCoord + vec2( u * oneTexel.x,  v * oneTexel.y));
		   21 +             vec4 s2 = texture(DiffuseSampler, texCoord + vec2(-u * oneTexel.x,  v * oneTexel.y));
		   22 +             vec4 s3 = texture(DiffuseSampler, texCoord + vec2( u * oneTexel.x, -v * oneTexel.y));
		19    -             vec4 s2 = texture2D(DiffuseSampler, texCoord + vec2(-u * oneTexel.x,  v * oneTexel.y));
		20    -             vec4 s3 = texture2D(DiffuseSampler, texCoord + vec2( u * oneTexel.x, -v * oneTexel.y));
		21 23   
		22 24               vec4 o0 = max(s0, s1);
		23 25               vec4 o1 = max(s2, s3);
		24 26               vec4 tempMax = max(o0, o1);
		25 27               maxVal = mix(maxVal, max(maxVal, tempMax), weight);
		26 28           }
		27 29       }
		28 30   
		   31 +     fragColor = vec4(maxVal.rgb, 1.0);
		29    -     gl_FragColor = vec4(maxVal.rgb, 1.0);
		30 32   }
		        '''
	Changed file "program/blur.fsh":
		Total line: 33 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   uniform vec2 BlurDir;
		11 11   uniform float Radius;
		   12 + 
		   13 + out vec4 fragColor;
		12 14   
		13 15   void main() {
		14 16       vec4 blurred = vec4(0.0);
		15 17       float totalStrength = 0.0;
		16 18       float totalAlpha = 0.0;
		17 19       float totalSamples = 0.0;
		18 20       for(float r = -Radius; r <= Radius; r += 1.0) {
		   21 +         vec4 sampleValue = texture(DiffuseSampler, texCoord + oneTexel * r * BlurDir);
		19    -         vec4 sampleValue = texture2D(DiffuseSampler, texCoord + oneTexel * r * BlurDir);
		20 22   
		21 23   		// Accumulate average alpha
		22 24           totalAlpha = totalAlpha + sampleValue.a;
		23 25           totalSamples = totalSamples + 1.0;
		24 26   
		25 27   		// Accumulate smoothed blur
		26 28           float strength = 1.0 - abs(r / Radius);
		27 29           totalStrength = totalStrength + strength;
		28 30           blurred = blurred + sampleValue;
		29 31       }
		   32 +     fragColor = vec4(blurred.rgb / (Radius * 2.0 + 1.0), totalAlpha);
		30    -     gl_FragColor = vec4(blurred.rgb / (Radius * 2.0 + 1.0), totalAlpha);
		31 33   }
		        '''
	Changed file "program/bumpy.fsh":
		Total line: 36 (+9, -7)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 c = texture(DiffuseSampler, texCoord);
		   12 +     vec4 u = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		 9    -     vec4 c = texture2D(DiffuseSampler, texCoord);
		10    -     vec4 u = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		   13 +     vec4 d = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		   14 +     vec4 l = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		   15 +     vec4 r = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		11    -     vec4 d = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		12    -     vec4 l = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		13    -     vec4 r = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		14 16   
		15 17       vec4 nc = normalize(c);
		16 18       vec4 nu = normalize(u);
		17 19       vec4 nd = normalize(d);
		18 20       vec4 nl = normalize(l);
		        ...
		28 30       float f = 1.0;
		29 31       f += (du * i) - (dd * i);
		30 32       f += (dr * i) - (dl * i);
		31 33   
		32 34       vec4 color = c * clamp(f, 0.5, 2.0);
		   35 +     fragColor = vec4(color.rgb, 1.0);
		33    -     gl_FragColor = vec4(color.rgb, 1.0);
		34 36   }
		        '''
	Changed file "program/color_convolve.fsh":
		Total line: 38 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   uniform vec3 Gray;
		11 11   uniform vec3 RedMatrix;
		12 12   uniform vec3 GreenMatrix;
		13 13   uniform vec3 BlueMatrix;
		14 14   uniform vec3 Offset;
		15 15   uniform vec3 ColorScale;
		16 16   uniform float Saturation;
		   17 + 
		   18 + out vec4 fragColor;
		17 19   
		18 20   void main() {
		   21 +     vec4 InTexel = texture(DiffuseSampler, texCoord);
		19    -     vec4 InTexel = texture2D(DiffuseSampler, texCoord);
		20 22   
		21 23       // Color Matrix
		22 24       float RedValue = dot(InTexel.rgb, RedMatrix);
		23 25       float GreenValue = dot(InTexel.rgb, GreenMatrix);
		24 26       float BlueValue = dot(InTexel.rgb, BlueMatrix);
		        ...
		30 32       // Saturation
		31 33       float Luma = dot(OutColor, Gray);
		32 34       vec3 Chroma = OutColor - Luma;
		33 35       OutColor = (Chroma * Saturation) + Luma;
		34 36   
		   37 +     fragColor = vec4(OutColor, 1.0);
		35    -     gl_FragColor = vec4(OutColor, 1.0);
		36 38   }
		        '''
	Changed file "program/deconverge.fsh":
		Total line: 30 (+8, -6)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   uniform vec3 ConvergeX;
		11 11   uniform vec3 ConvergeY;
		12 12   uniform vec3 RadialConvergeX;
		13 13   uniform vec3 RadialConvergeY;
		   14 + 
		   15 + out vec4 fragColor;
		14 16   
		15 17   void main() {
		16 18       vec3 CoordX = texCoord.x * RadialConvergeX;
		17 19       vec3 CoordY = texCoord.y * RadialConvergeY;
		18 20   
		19 21       CoordX += ConvergeX * oneTexel.x - (RadialConvergeX - 1.0) * 0.5;
		20 22       CoordY += ConvergeY * oneTexel.y - (RadialConvergeY - 1.0) * 0.5;
		21 23   
		   24 +     float RedValue   = texture(DiffuseSampler, vec2(CoordX.x, CoordY.x)).r;
		   25 +     float GreenValue = texture(DiffuseSampler, vec2(CoordX.y, CoordY.y)).g;
		22    -     float RedValue   = texture2D(DiffuseSampler, vec2(CoordX.x, CoordY.x)).r;
		23    -     float GreenValue = texture2D(DiffuseSampler, vec2(CoordX.y, CoordY.y)).g;
		   26 +     float BlueValue  = texture(DiffuseSampler, vec2(CoordX.z, CoordY.z)).b;
		   27 +     float AlphaValue  = texture(DiffuseSampler, texCoord).a;
		24    -     float BlueValue  = texture2D(DiffuseSampler, vec2(CoordX.z, CoordY.z)).b;
		25    -     float AlphaValue  = texture2D(DiffuseSampler, texCoord).a;
		26 28   
		   29 +     fragColor = vec4(RedValue, GreenValue, BlueValue, 1.0);
		27    -     gl_FragColor = vec4(RedValue, GreenValue, BlueValue, 1.0);
		28 30   }
		        '''
	Changed file "program/downscale.fsh":
		Total line: 19 (+10, -8)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + uniform vec2 InSize;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		   10 + out vec4 fragColor;
		 8    - uniform vec2 InSize;
		 9 11   
		10 12   void main() {
		   13 +     vec3 Texel0 = texture(DiffuseSampler, texCoord).rgb;
		   14 +     vec3 Texel1 = texture(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0)).rgb;
		11    -     vec3 Texel0 = texture2D(DiffuseSampler, texCoord).rgb;
		12    -     vec3 Texel1 = texture2D(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0)).rgb;
		   15 +     vec3 Texel2 = texture(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y)).rgb;
		   16 +     vec3 Texel3 = texture(DiffuseSampler, texCoord + oneTexel).rgb;
		13    -     vec3 Texel2 = texture2D(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y)).rgb;
		14    -     vec3 Texel3 = texture2D(DiffuseSampler, texCoord + oneTexel).rgb;
		15 17   
		   18 +     fragColor = vec4((Texel0 + Texel1 + Texel2 + Texel3) * 0.25, 1.0);
		16    -     gl_FragColor = vec4((Texel0 + Texel1 + Texel2 + Texel3) * 0.25, 1.0);
		17 19   }
		        '''
	Changed file "program/entity_sobel.fsh":
		Total line: 23 (+9, -7)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 center = texture(DiffuseSampler, texCoord);
		   12 +     vec4 left = texture(DiffuseSampler, texCoord - vec2(oneTexel.x, 0.0));
		 9    -     vec4 center = texture2D(DiffuseSampler, texCoord);
		10    -     vec4 left = texture2D(DiffuseSampler, texCoord - vec2(oneTexel.x, 0.0));
		   13 +     vec4 right = texture(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0));
		   14 +     vec4 up = texture(DiffuseSampler, texCoord - vec2(0.0, oneTexel.y));
		   15 +     vec4 down = texture(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y));
		11    -     vec4 right = texture2D(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0));
		12    -     vec4 up = texture2D(DiffuseSampler, texCoord - vec2(0.0, oneTexel.y));
		13    -     vec4 down = texture2D(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y));
		14 16       float leftDiff  = abs(center.a - left.a);
		15 17       float rightDiff = abs(center.a - right.a);
		16 18       float upDiff    = abs(center.a - up.a);
		17 19       float downDiff  = abs(center.a - down.a);
		18 20       float total = clamp(leftDiff + rightDiff + upDiff + downDiff, 0.0, 1.0);
		19 21       vec3 outColor = center.rgb * center.a + left.rgb * left.a + right.rgb * right.a + up.rgb * up.a + down.rgb * down.a;
		   22 +     fragColor = vec4(outColor * 0.2, total);
		20    -     gl_FragColor = vec4(outColor * 0.2, total);
		21 23   }
		        '''
	Changed file "program/fxaa.fsh":
		Total line: 73 (+12, -24)
		        '''
		 1    - #version 110
		 2    - #extension GL_EXT_gpu_shader4 : enable
		 3    - 
		 4    - uniform sampler2D DiffuseSampler;
		 5    - uniform vec2 OutSize;
		 6    - 
		 7    - uniform float VxOffset;
		 8    - uniform float SpanMax;
		 9    - uniform float ReduceMul;
		10    - 
		11    - varying vec2 texCoord;
		    1 + #version 150
		12    - varying vec4 posPos;
		13  2   
		    3 + uniform sampler2D DiffuseSampler;
		    4 + uniform vec2 OutSize;
		14    - #define FxaaTex(t, p) texture2D(t, p)
		15  5   
		    6 + uniform float VxOffset;
		16    - #if __VERSION__ >= 130
		17    -     #define OffsetVec(a, b) ivec2(a, b)
		18    -     #define FxaaTexOff(t, p, o, r) textureOffset(t, p, o)
		    7 + uniform float SpanMax;
		    8 + uniform float ReduceMul;
		    9 + 
		   10 + in vec2 texCoord;
		   11 + in vec4 posPos;
		   12 + 
		   13 + out vec4 fragColor;
		19    - #elif defined(GL_EXT_gpu_shader4)
		20    -     #define OffsetVec(a, b) ivec2(a, b)
		21    -     #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)
		22    - #else
		23    -     #define OffsetVec(a, b) vec2(a, b)
		24    -     #define FxaaTexOff(t, p, o, r) texture2D(t, p + o * r)
		25    - #endif
		26 14   
		27 15   vec3 FxaaPixelShader(
		28 16     vec4 posPos,   // Output of FxaaVertexShader interpolated across screen.
		29 17     sampler2D tex, // Input texture.
		30 18     vec2 rcpFrame) // Constant {1.0/frameWidth, 1.0/frameHeight}.
		        ...
		32 20   
		33 21       #define FXAA_REDUCE_MIN   (1.0/128.0)
		34 22       //#define FXAA_REDUCE_MUL   (1.0/8.0)
		35 23       //#define FXAA_SPAN_MAX     8.0
		36 24   
		   25 +     vec3 rgbNW = texture(tex, posPos.zw).xyz;
		   26 +     vec3 rgbNE = textureOffset(tex, posPos.zw, ivec2(1,0)).xyz;
		37    -     vec3 rgbNW = FxaaTex(tex, posPos.zw).xyz;
		38    -     vec3 rgbNE = FxaaTexOff(tex, posPos.zw, OffsetVec(1,0), rcpFrame.xy).xyz;
		   27 +     vec3 rgbSW = textureOffset(tex, posPos.zw, ivec2(0,1)).xyz;
		   28 +     vec3 rgbSE = textureOffset(tex, posPos.zw, ivec2(1,1)).xyz;
		39    -     vec3 rgbSW = FxaaTexOff(tex, posPos.zw, OffsetVec(0,1), rcpFrame.xy).xyz;
		40    -     vec3 rgbSE = FxaaTexOff(tex, posPos.zw, OffsetVec(1,1), rcpFrame.xy).xyz;
		41 29   
		   30 +     vec3 rgbM  = texture(tex, posPos.xy).xyz;
		42    -     vec3 rgbM  = FxaaTex(tex, posPos.xy).xyz;
		43 31   
		44 32       vec3 luma = vec3(0.299, 0.587, 0.114);
		45 33       float lumaNW = dot(rgbNW, luma);
		46 34       float lumaNE = dot(rgbNE, luma);
		47 35       float lumaSW = dot(rgbSW, luma);
		        ...
		62 50       dir = min(vec2( SpanMax,  SpanMax),
		63 51             max(vec2(-SpanMax, -SpanMax),
		64 52             dir * rcpDirMin)) * rcpFrame.xy;
		65 53   
		66 54       vec3 rgbA = (1.0/2.0) * (
		   55 +     texture(tex, posPos.xy + dir * vec2(1.0/3.0 - 0.5)).xyz +
		   56 +     texture(tex, posPos.xy + dir * vec2(2.0/3.0 - 0.5)).xyz);
		67    -         FxaaTex(tex, posPos.xy + dir * vec2(1.0/3.0 - 0.5)).xyz +
		68    -         FxaaTex(tex, posPos.xy + dir * vec2(2.0/3.0 - 0.5)).xyz);
		69 57       vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
		   58 +     texture(tex, posPos.xy + dir * vec2(0.0/3.0 - 0.5)).xyz +
		   59 +     texture(tex, posPos.xy + dir * vec2(3.0/3.0 - 0.5)).xyz);
		70    -         FxaaTex(tex, posPos.xy + dir * vec2(0.0/3.0 - 0.5)).xyz +
		71    -         FxaaTex(tex, posPos.xy + dir * vec2(3.0/3.0 - 0.5)).xyz);
		72 60   
		73 61       float lumaB = dot(rgbB, luma);
		74 62   
		75 63       if ((lumaB < lumaMin) || (lumaB > lumaMax)) {
		76 64           return rgbA;
		        ...
		78 66           return rgbB;
		79 67       }
		80 68   }
		81 69   
		82 70   void main() {
		   71 +     vec4 baseTexel = texture(DiffuseSampler, posPos.xy);
		   72 +     fragColor = vec4(FxaaPixelShader(posPos, DiffuseSampler, 1.0 / OutSize), 1.0);
		83    -     vec4 baseTexel = texture2D(DiffuseSampler, posPos.xy);
		84    -     gl_FragColor = vec4(FxaaPixelShader(posPos, DiffuseSampler, 1.0 / OutSize), 1.0);
		85 73   }
		        '''
	Changed file "program/invert.fsh":
		Total line: 16 (+8, -6)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		 3    - uniform sampler2D DiffuseSampler;
		 4  6   
		    7 + uniform float InverseAmount;
		 5    - varying vec2 texCoord;
		 6  8   
		    9 + out vec4 fragColor;
		 7    - uniform float InverseAmount;
		 8 10   
		 9 11   void main(){
		   12 +     vec4 diffuseColor = texture(DiffuseSampler, texCoord);
		10    -     vec4 diffuseColor = texture2D(DiffuseSampler, texCoord);
		11 13       vec4 invertColor = 1.0 - diffuseColor;
		12 14       vec4 outColor = mix(diffuseColor, invertColor, InverseAmount);
		   15 +     fragColor = vec4(outColor.rgb, 1.0);
		13    -     gl_FragColor = vec4(outColor.rgb, 1.0);
		14 16   }
		        '''
	Changed file "program/notch.fsh":
		Total line: 25 (+8, -6)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D DitherSampler;
		    5 + 
		    6 + in vec2 texCoord;
		 5  7   
		    8 + uniform vec2 InSize;
		 6    - varying vec2 texCoord;
		 7  9   
		   10 + out vec4 fragColor;
		 8    - uniform vec2 InSize;
		 9 11   
		10 12   void main() {
		11 13       vec2 halfSize = InSize * 0.5;
		12 14   
		13 15       vec2 steppedCoord = texCoord;
		14 16       steppedCoord.x = float(int(steppedCoord.x*halfSize.x)) / halfSize.x;
		15 17       steppedCoord.y = float(int(steppedCoord.y*halfSize.y)) / halfSize.y;
		16 18   
		   19 +     vec4 noise = texture(DitherSampler, steppedCoord * halfSize / 4.0);
		   20 +     vec4 col = texture(DiffuseSampler, steppedCoord) + noise * vec4(1.0/12.0, 1.0/12.0, 1.0/6.0, 1.0);
		17    -     vec4 noise = texture2D(DitherSampler, steppedCoord * halfSize / 4.0);
		18    -     vec4 col = texture2D(DiffuseSampler, steppedCoord) + noise * vec4(1.0/12.0, 1.0/12.0, 1.0/6.0, 1.0);
		19 21       float r = float(int(col.r*8.0))/8.0;
		20 22       float g = float(int(col.g*8.0))/8.0;
		21 23       float b = float(int(col.b*4.0))/4.0;
		   24 +     fragColor = vec4(r, g, b, 1.0);
		22    -     gl_FragColor = vec4(r, g, b, 1.0);
		23 25   }
		        '''
	Changed file "program/ntsc_decode.fsh":
		Total line: 134 (+8, -6)
		          '''
		      1 + #version 150
		  1     - #version 110
		  2   2   
		  3   3   uniform sampler2D DiffuseSampler;
		  4   4   uniform sampler2D BaseSampler;
		  5   5   
		      6 + in vec2 texCoord;
		      7 + in vec2 oneTexel;
		  6     - varying vec2 texCoord;
		  7     - varying vec2 oneTexel;
		  8   8   
		  9   9   uniform vec2 InSize;
		 10  10   
		 11  11   const vec4 Zero = vec4(0.0);
		 12  12   const vec4 One = vec4(1.0);
		          ...
		 31  31   const vec4 MinC = vec4(-1.1183);
		 32  32   const vec4 CRange = vec4(3.2366);
		 33  33   const float Pi2Length = Pi2 / 83.0;
		 34  34   const vec4 NotchOffset = vec4(0.0, 1.0, 2.0, 3.0);
		 35  35   const vec4 W = vec4(Pi2 * CCFrequency * ScanTime);
		     36 + 
		     37 + out vec4 fragColor;
		 36  38   
		 37  39   void main() {
		 38  40       vec4 YAccum = Zero;
		 39  41       vec4 IAccum = Zero;
		 40  42       vec4 QAccum = Zero;
		          ...
		 61  63       float Fc_y3_2 = Fc_y3 * 2.0;
		 62  64       float Fc_i_2 = Fc_i * 2.0;
		 63  65       float Fc_q_2 = Fc_q * 2.0;
		 64  66       vec4 CoordY = vec4(texCoord.y);
		 65  67   
		     68 +     vec4 BaseTexel = texture(DiffuseSampler, texCoord);
		 66     -     vec4 BaseTexel = texture2D(DiffuseSampler, texCoord);
		 67  69       // 83 composite samples wide, 4 composite pixels per texel
		 68  70       for (float n = -41.0; n < 42.0; n += 4.0)
		 69  71       {
		 70  72           vec4 n4 = n + NotchOffset;
		 71  73           vec4 CoordX = texCoord.x + oneTexel.x * n4 * 0.25;
		 72  74           vec2 TexCoord = vec2(CoordX.x, CoordY.y);
		     75 +         vec4 C = texture(DiffuseSampler, TexCoord) * CRange + MinC;
		 73     -         vec4 C = texture2D(DiffuseSampler, TexCoord) * CRange + MinC;
		 74  76           vec4 WT = W * (CoordX + A2 * CoordY * InSize.y + B);
		 75  77           vec4 Cosine = 0.54 + 0.46 * cos(Pi2Length * n4);
		 76  78   
		 77  79           vec4 SincYIn1 = Pi2Fc_y1 * n4;
		 78  80           vec4 SincYIn2 = Pi2Fc_y2 * n4;
		          ...
		126 128       float Q = dot(QAccum, One) * 2.0;
		127 129   
		128 130       vec3 YIQ = vec3(Y, I, Q);
		129 131       vec3 OutRGB = vec3(dot(YIQ, YIQ2R), dot(YIQ, YIQ2G), dot(YIQ, YIQ2B));
		130 132   
		    133 +     fragColor = vec4(OutRGB, 1.0);
		131     -     gl_FragColor = vec4(OutRGB, 1.0);
		132 134   }
		          '''
	Changed file "program/ntsc_encode.fsh":
		Total line: 52 (+8, -6)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   const float Pi2 = 6.283185307;
		11 11   
		        ...
		18 18   const vec4 YTransform = vec4(0.299, 0.587, 0.114, 0.0);
		19 19   const vec4 ITransform = vec4(0.595716, -0.274453, -0.321263, 0.0);
		20 20   const vec4 QTransform = vec4(0.211456, -0.522591, 0.31135, 0.0);
		21 21   const vec4 MinC = vec4(-1.1183);
		22 22   const vec4 InvCRange = vec4(1.0 / 3.2366);
		   23 + 
		   24 + out vec4 fragColor;
		23 25   
		24 26   void main() {
		25 27       vec2 InverseP = vec2(P, 0.0) * oneTexel;
		26 28       
		27 29       // UVs for four linearly-interpolated samples spread 0.25 texels apart
		        ...
		30 32       vec2 C2 = texCoord + InverseP * 0.50;
		31 33       vec2 C3 = texCoord + InverseP * 0.75;
		32 34       vec4 Cx = vec4(C0.x, C1.x, C2.x, C3.x);
		33 35       vec4 Cy = vec4(C0.y, C1.y, C2.y, C3.y);
		34 36       
		   37 +     vec4 Texel0 = texture(DiffuseSampler, C0);
		   38 +     vec4 Texel1 = texture(DiffuseSampler, C1);
		35    -     vec4 Texel0 = texture2D(DiffuseSampler, C0);
		36    -     vec4 Texel1 = texture2D(DiffuseSampler, C1);
		   39 +     vec4 Texel2 = texture(DiffuseSampler, C2);
		   40 +     vec4 Texel3 = texture(DiffuseSampler, C3);
		37    -     vec4 Texel2 = texture2D(DiffuseSampler, C2);
		38    -     vec4 Texel3 = texture2D(DiffuseSampler, C3);
		39 41   
		40 42       // Calculate the expected time of the sample.
		41 43       vec4 T = A2 * Cy * vec4(InSize.y) + B + Cx;
		42 44       vec4 W = vec4(Pi2ScanTime * CCFrequency);
		43 45       vec4 TW = T * W;
		44 46       vec4 Y = vec4(dot(Texel0, YTransform), dot(Texel1, YTransform), dot(Texel2, YTransform), dot(Texel3, YTransform));
		45 47       vec4 I = vec4(dot(Texel0, ITransform), dot(Texel1, ITransform), dot(Texel2, ITransform), dot(Texel3, ITransform));
		46 48       vec4 Q = vec4(dot(Texel0, QTransform), dot(Texel1, QTransform), dot(Texel2, QTransform), dot(Texel3, QTransform));
		47 49       
		48 50       vec4 Encoded = Y + I * cos(TW) + Q * sin(TW);
		   51 +     fragColor = (Encoded - MinC) * InvCRange;
		49    -     gl_FragColor = (Encoded - MinC) * InvCRange;
		50 52   }
		        '''
	Changed file "program/outline.fsh":
		Total line: 23 (+9, -7)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 center = texture(DiffuseSampler, texCoord);
		   12 +     vec4 up     = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		 9    -     vec4 center = texture2D(DiffuseSampler, texCoord);
		10    -     vec4 up     = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		   13 +     vec4 down   = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		   14 +     vec4 left   = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		   15 +     vec4 right  = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		11    -     vec4 down   = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		12    -     vec4 left   = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		13    -     vec4 right  = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		14 16       vec4 uDiff = center - up;
		15 17       vec4 dDiff = center - down;
		16 18       vec4 lDiff = center - left;
		17 19       vec4 rDiff = center - right;
		18 20       vec4 sum = uDiff + dDiff + lDiff + rDiff;
		19 21       vec3 clamped = clamp(center.rgb - sum.rgb, 0.0, 1.0);
		   22 +     fragColor = vec4(clamped, 1.0);
		20    -     gl_FragColor = vec4(clamped, 1.0);
		21 23   }
		        '''
	Changed file "program/outline_combine.fsh":
		Total line: 15 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D OutlineSampler;
		    5 + 
		    6 + in vec2 texCoord;
		    7 + in vec2 oneTexel;
		 5  8   
		    9 + out vec4 fragColor;
		 6    - varying vec2 texCoord;
		 7    - varying vec2 oneTexel;
		 8 10   
		 9 11   void main(){
		   12 +     vec4 diffuseTexel = texture(DiffuseSampler, texCoord);
		   13 +     vec4 outlineTexel = texture(OutlineSampler, texCoord);
		10    -     vec4 diffuseTexel = texture2D(DiffuseSampler, texCoord);
		11    -     vec4 outlineTexel = texture2D(OutlineSampler, texCoord);
		   14 +     fragColor = vec4(diffuseTexel.rgb + diffuseTexel.rgb * outlineTexel.rgb * vec3(0.75), 1.0);
		12    -     gl_FragColor = vec4(diffuseTexel.rgb + diffuseTexel.rgb * outlineTexel.rgb * vec3(0.75), 1.0);
		13 15   }
		        '''
	Changed file "program/outline_soft.fsh":
		Total line: 48 (+8, -6)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform float LumaRamp;
		 9  9   uniform float LumaLevel;
		   10 + 
		   11 + out vec4 fragColor;
		10 12   
		11 13   void main(){
		   14 +     vec4 center = texture(DiffuseSampler, texCoord);
		   15 +     vec4 up     = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		12    -     vec4 center = texture2D(DiffuseSampler, texCoord);
		13    -     vec4 up     = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		   16 +     vec4 up2    = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y) * 2.0);
		   17 +     vec4 down   = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		   18 +     vec4 down2  = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0) * 2.0);
		   19 +     vec4 left   = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		   20 +     vec4 left2  = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0) * 2.0);
		   21 +     vec4 right  = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		   22 +     vec4 right2 = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y) * 2.0);
		14    -     vec4 up2    = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y) * 2.0);
		15    -     vec4 down   = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		16    -     vec4 down2  = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0) * 2.0);
		17    -     vec4 left   = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		18    -     vec4 left2  = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0) * 2.0);
		19    -     vec4 right  = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		20    -     vec4 right2 = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y) * 2.0);
		21 23       vec4 uDiff = abs(center - up);
		22 24       vec4 dDiff = abs(center - down);
		23 25       vec4 lDiff = abs(center - left);
		24 26       vec4 rDiff = abs(center - right);
		25 27       vec4 u2Diff = abs(center - up2);
		        ...
		40 42       centerLuma = centerLuma * (LumaLevel / (LumaLevel - 1.0));
		41 43   
		42 44       // Blend with outline
		43 45       centerLuma = centerLuma * sumLuma;
		44 46   
		   47 +     fragColor = vec4(centerLuma, centerLuma, centerLuma, 1.0);
		45    -     gl_FragColor = vec4(centerLuma, centerLuma, centerLuma, 1.0);
		46 48   }
		        '''
	Changed file "program/outline_watercolor.fsh":
		Total line: 43 (+10, -8)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + uniform float LumaRamp;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		   10 + out vec4 fragColor;
		 8    - uniform float LumaRamp;
		 9 11   
		10 12   void main(){
		   13 +     vec4 center = texture(DiffuseSampler, texCoord);
		   14 +     vec4 up     = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		11    -     vec4 center = texture2D(DiffuseSampler, texCoord);
		12    -     vec4 up     = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y));
		   15 +     vec4 up2    = texture(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y) * 2.0);
		   16 +     vec4 down   = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		   17 +     vec4 down2  = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0) * 2.0);
		   18 +     vec4 left   = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		   19 +     vec4 left2  = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0) * 2.0);
		   20 +     vec4 right  = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		   21 +     vec4 right2 = texture(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y) * 2.0);
		   22 +     vec4 ul     = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x, -oneTexel.y));
		   23 +     vec4 ur     = texture(DiffuseSampler, texCoord + vec2( oneTexel.x, -oneTexel.y));
		   24 +     vec4 bl     = texture(DiffuseSampler, texCoord + vec2(-oneTexel.x,  oneTexel.y));
		   25 +     vec4 br     = texture(DiffuseSampler, texCoord + vec2( oneTexel.x,  oneTexel.y));
		13    -     vec4 up2    = texture2D(DiffuseSampler, texCoord + vec2(        0.0, -oneTexel.y) * 2.0);
		14    -     vec4 down   = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0));
		15    -     vec4 down2  = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,         0.0) * 2.0);
		16    -     vec4 left   = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0));
		17    -     vec4 left2  = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,         0.0) * 2.0);
		18    -     vec4 right  = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y));
		19    -     vec4 right2 = texture2D(DiffuseSampler, texCoord + vec2(        0.0,  oneTexel.y) * 2.0);
		20    -     vec4 ul     = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x, -oneTexel.y));
		21    -     vec4 ur     = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x, -oneTexel.y));
		22    -     vec4 bl     = texture2D(DiffuseSampler, texCoord + vec2(-oneTexel.x,  oneTexel.y));
		23    -     vec4 br     = texture2D(DiffuseSampler, texCoord + vec2( oneTexel.x,  oneTexel.y));
		24 26       vec4 gray = vec4(0.3, 0.59, 0.11, 0.0);
		25 27       float uDiff = dot(abs(center - up), gray);
		26 28       float dDiff = dot(abs(center - down), gray);
		27 29       float lDiff = dot(abs(center - left), gray);
		28 30       float rDiff = dot(abs(center - right), gray);
		        ...
		35 37       float blDiff = dot(abs(center - bl), gray);
		36 38       float brDiff = dot(abs(center - br), gray);
		37 39       float sum = uDiff + dDiff + lDiff + rDiff + u2Diff + d2Diff + l2Diff + r2Diff + ulDiff + urDiff + blDiff + brDiff;
		38 40       float sumLuma = clamp(sum, 0.0, 1.0);
		39 41   
		   42 +     fragColor = vec4(sumLuma, sumLuma, sumLuma, 1.0);
		40    -     gl_FragColor = vec4(sumLuma, sumLuma, sumLuma, 1.0);
		41 43   }
		        '''
	Changed file "program/overlay.fsh":
		Total line: 29 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D OverlaySampler;
		 5  5   
		 6  6   uniform vec2 InSize;
		 7  7   
		    8 + in vec2 texCoord;
		 8    - varying vec2 texCoord;
		 9  9   
		10 10   uniform float MosaicSize;
		11 11   uniform vec3 RedMatrix;
		12 12   uniform vec3 GreenMatrix;
		13 13   uniform vec3 BlueMatrix;
		   14 + 
		   15 + out vec4 fragColor;
		14 16   
		15 17   void main(){
		16 18       vec2 mosaicInSize = InSize / MosaicSize;
		17 19       vec2 fractPix = fract(texCoord * mosaicInSize) / mosaicInSize;
		18 20   
		   21 +     vec4 baseTexel = texture(DiffuseSampler, texCoord - fractPix);
		19    -     vec4 baseTexel = texture2D(DiffuseSampler, texCoord - fractPix);
		20 22       float red = dot(baseTexel.rgb, RedMatrix);
		21 23       float green = dot(baseTexel.rgb, GreenMatrix);
		22 24       float blue = dot(baseTexel.rgb, BlueMatrix);
		23 25   
		   26 +     vec4 overlayTexel = texture(OverlaySampler, vec2(texCoord.x, 1.0 - texCoord.y));
		24    -     vec4 overlayTexel = texture2D(OverlaySampler, vec2(texCoord.x, 1.0 - texCoord.y));
		25 27       overlayTexel.a = 1.0;
		   28 +     fragColor = mix(vec4(red, green, blue, 1.0), overlayTexel, overlayTexel.a);
		26    -     gl_FragColor = mix(vec4(red, green, blue, 1.0), overlayTexel, overlayTexel.a);
		27 29   }
		        '''
	Changed file "program/phosphor.fsh":
		Total line: 20 (+10, -8)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D PrevSampler;
		    5 + 
		    6 + in vec2 texCoord;
		    7 + in vec2 oneTexel;
		 5  8   
		    9 + uniform vec2 InSize;
		 6    - varying vec2 texCoord;
		 7    - varying vec2 oneTexel;
		 8 10   
		   11 + uniform vec3 Phosphor;
		 9    - uniform vec2 InSize;
		10 12   
		   13 + out vec4 fragColor;
		11    - uniform vec3 Phosphor;
		12 14   
		13 15   void main() {
		   16 +     vec4 CurrTexel = texture(DiffuseSampler, texCoord);
		   17 +     vec4 PrevTexel = texture(PrevSampler, texCoord);
		14    -     vec4 CurrTexel = texture2D(DiffuseSampler, texCoord);
		15    -     vec4 PrevTexel = texture2D(PrevSampler, texCoord);
		16 18   
		   19 +     fragColor = vec4(max(PrevTexel.rgb * Phosphor, CurrTexel.rgb), 1.0);
		17    -     gl_FragColor = vec4(max(PrevTexel.rgb * Phosphor, CurrTexel.rgb), 1.0);
		18 20   }
		        '''
	Changed file "program/scan_pincushion.fsh":
		Total line: 66 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   const vec4 Zero = vec4(0.0);
		11 11   const vec4 Half = vec4(0.5);
		        ...
		21 21   const float ScanlineBrightScale = 1.0;
		22 22   const float ScanlineBrightOffset = 0.0;
		23 23   const float ScanlineOffset = 0.0;
		24 24   const vec3 Floor = vec3(0.05, 0.05, 0.05);
		25 25   const vec3 Power = vec3(0.8, 0.8, 0.8);
		   26 + 
		   27 + out vec4 fragColor;
		26 28   
		27 29   void main() {
		   30 +     vec4 InTexel = texture(DiffuseSampler, texCoord);
		28    -     vec4 InTexel = texture2D(DiffuseSampler, texCoord);
		29 31   
		30 32       vec2 PinUnitCoord = texCoord * Two.xy - One.xy;
		31 33       float PincushionR2 = pow(length(PinUnitCoord), 2.0);
		32 34       vec2 PincushionCurve = PinUnitCoord * PincushionAmount * PincushionR2;
		33 35       vec2 ScanCoord = texCoord;
		        ...
		58 60       // -- Color Compression (increasing the floor of the signal without affecting the ceiling) --
		59 61       ScanlineTexel = Floor + (One.xyz - Floor) * ScanlineTexel;
		60 62   
		61 63       ScanlineTexel.rgb = pow(ScanlineTexel.rgb, Power);
		62 64   
		   65 +     fragColor = vec4(ScanlineTexel.rgb, 1.0);
		63    -     gl_FragColor = vec4(ScanlineTexel.rgb, 1.0);
		64 66   }
		        '''
	Changed file "program/sobel.fsh":
		Total line: 22 (+9, -7)
		        '''
		    1 + #version 150
		    2 + 
		    3 + uniform sampler2D DiffuseSampler;
		 1    - #version 110
		 2  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 3    - uniform sampler2D DiffuseSampler;
		 4  7   
		    8 + out vec4 fragColor;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  9   
		 8 10   void main(){
		   11 +     vec4 center = texture(DiffuseSampler, texCoord);
		   12 +     vec4 left   = texture(DiffuseSampler, texCoord - vec2(oneTexel.x, 0.0));
		 9    -     vec4 center = texture2D(DiffuseSampler, texCoord);
		10    -     vec4 left   = texture2D(DiffuseSampler, texCoord - vec2(oneTexel.x, 0.0));
		   13 +     vec4 right  = texture(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0));
		   14 +     vec4 up     = texture(DiffuseSampler, texCoord - vec2(0.0, oneTexel.y));
		   15 +     vec4 down   = texture(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y));
		11    -     vec4 right  = texture2D(DiffuseSampler, texCoord + vec2(oneTexel.x, 0.0));
		12    -     vec4 up     = texture2D(DiffuseSampler, texCoord - vec2(0.0, oneTexel.y));
		13    -     vec4 down   = texture2D(DiffuseSampler, texCoord + vec2(0.0, oneTexel.y));
		14 16       vec4 leftDiff  = center - left;
		15 17       vec4 rightDiff = center - right;
		16 18       vec4 upDiff    = center - up;
		17 19       vec4 downDiff  = center - down;
		18 20       vec4 total = clamp(leftDiff + rightDiff + upDiff + downDiff, 0.0, 1.0);
		   21 +     fragColor = vec4(total.rgb, 1.0);
		19    -     gl_FragColor = vec4(total.rgb, 1.0);
		20 22   }
		        '''
	Changed file "program/spiderclip.fsh":
		Total line: 33 (+8, -6)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D BlurSampler;
		 5  5   
		    6 + in vec2 texCoord;
		    7 + in vec2 scaledCoord;
		 6    - varying vec2 texCoord;
		 7    - varying vec2 scaledCoord;
		 8  8   
		 9  9   uniform vec2 InSize;
		10 10   uniform vec4 Scissor;
		11 11   uniform vec4 Vignette;
		   12 + 
		   13 + out vec4 fragColor;
		12 14   
		13 15   void main() {
		   16 +     vec4 ScaledTexel = texture(DiffuseSampler, scaledCoord);
		   17 +     vec4 BlurTexel = texture(BlurSampler, texCoord);
		14    -     vec4 ScaledTexel = texture2D(DiffuseSampler, scaledCoord);
		15    -     vec4 BlurTexel = texture2D(BlurSampler, texCoord);
		16 18       vec4 OutTexel = ScaledTexel;
		17 19   
		18 20       // -- Alpha Clipping --
		19 21       if (scaledCoord.x < Scissor.x) OutTexel = BlurTexel;
		20 22       if (scaledCoord.y < Scissor.y) OutTexel = BlurTexel;
		        ...
		25 27   
		26 28       if (scaledCoord.x < Vignette.x) OutTexel = mix(BlurTexel, OutTexel, (Scissor.x - scaledCoord.x) / (Scissor.x - Vignette.x));
		27 29       if (scaledCoord.y < Vignette.y) OutTexel = mix(BlurTexel, OutTexel, (Scissor.y - scaledCoord.y) / (Scissor.y - Vignette.y));
		28 30       if (scaledCoord.x > Vignette.z) OutTexel = mix(BlurTexel, OutTexel, (Scissor.z - scaledCoord.x) / (Scissor.z - Vignette.z));
		29 31       if (scaledCoord.y > Vignette.w) OutTexel = mix(BlurTexel, OutTexel, (Scissor.w - scaledCoord.y) / (Scissor.w - Vignette.w));
		   32 +     fragColor = vec4(OutTexel.rgb, 1.0);
		30    -     gl_FragColor = vec4(OutTexel.rgb, 1.0);
		31 33   }
		        '''
	Changed file "program/transparency.fsh":
		Total line: 70 (+9, -7)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   uniform sampler2D DiffuseDepthSampler;
		 5  5   uniform sampler2D TranslucentSampler;
		 6  6   uniform sampler2D TranslucentDepthSampler;
		        ...
		11 11   uniform sampler2D WeatherSampler;
		12 12   uniform sampler2D WeatherDepthSampler;
		13 13   uniform sampler2D CloudsSampler;
		14 14   uniform sampler2D CloudsDepthSampler;
		15 15   
		   16 + in vec2 texCoord;
		16    - varying vec2 texCoord;
		17 17   
		18 18   #define NUM_LAYERS 6
		19 19   
		20 20   vec4 color_layers[NUM_LAYERS];
		21 21   float depth_layers[NUM_LAYERS];
		22 22   int active_layers = 0;
		   23 + 
		   24 + out vec4 fragColor;
		23 25   
		24 26   void try_insert( vec4 color, float depth ) {
		25 27       if ( color.a == 0.0 ) {
		26 28           return;
		27 29       }
		        ...
		47 49   vec3 blend( vec3 dst, vec4 src ) {
		48 50       return ( dst * ( 1.0 - src.a ) ) + src.rgb;
		49 51   }
		50 52   
		51 53   void main() {
		   54 +     color_layers[0] = vec4( texture( DiffuseSampler, texCoord ).rgb, 1.0 );
		   55 +     depth_layers[0] = texture( DiffuseDepthSampler, texCoord ).r;
		52    -     color_layers[0] = vec4( texture2D( DiffuseSampler, texCoord ).rgb, 1.0 );
		53    -     depth_layers[0] = texture2D( DiffuseDepthSampler, texCoord ).r;
		54 56       active_layers = 1;
		55 57   
		   58 +     try_insert( texture( TranslucentSampler, texCoord ), texture( TranslucentDepthSampler, texCoord ).r );
		   59 +     try_insert( texture( ItemEntitySampler, texCoord ), texture( ItemEntityDepthSampler, texCoord ).r );
		56    -     try_insert( texture2D( TranslucentSampler, texCoord ), texture2D( TranslucentDepthSampler, texCoord ).r );
		57    -     try_insert( texture2D( ItemEntitySampler, texCoord ), texture2D( ItemEntityDepthSampler, texCoord ).r );
		   60 +     try_insert( texture( ParticlesSampler, texCoord ), texture( ParticlesDepthSampler, texCoord ).r );
		   61 +     try_insert( texture( WeatherSampler, texCoord ), texture( WeatherDepthSampler, texCoord ).r );
		   62 +     try_insert( texture( CloudsSampler, texCoord ), texture( CloudsDepthSampler, texCoord ).r );
		58    -     try_insert( texture2D( ParticlesSampler, texCoord ), texture2D( ParticlesDepthSampler, texCoord ).r );
		59    -     try_insert( texture2D( WeatherSampler, texCoord ), texture2D( WeatherDepthSampler, texCoord ).r );
		60    -     try_insert( texture2D( CloudsSampler, texCoord ), texture2D( CloudsDepthSampler, texCoord ).r );
		61 63   
		62 64       vec3 texelAccum = color_layers[0].rgb;
		63 65       for ( int ii = 1; ii < active_layers; ++ii ) {
		64 66           texelAccum = blend( texelAccum, color_layers[ii] );
		65 67       }
		66 68   
		   69 +     fragColor = vec4( texelAccum.rgb, 1.0 );
		67    -     gl_FragColor = vec4( texelAccum.rgb, 1.0 );
		68 70   }
		        '''
	Changed file "program/wobble.fsh":
		Total line: 60 (+7, -5)
		        '''
		    1 + #version 150
		 1    - #version 110
		 2  2   
		 3  3   uniform sampler2D DiffuseSampler;
		 4  4   
		    5 + in vec2 texCoord;
		    6 + in vec2 oneTexel;
		 5    - varying vec2 texCoord;
		 6    - varying vec2 oneTexel;
		 7  7   
		 8  8   uniform vec2 InSize;
		 9  9   
		10 10   uniform float Time;
		11 11   uniform vec2 Frequency;
		12 12   uniform vec2 WobbleAmount;
		   13 + 
		   14 + out vec4 fragColor;
		13 15   
		14 16   vec3 hue(float h)
		15 17   {
		16 18       float r = abs(h * 6.0 - 3.0) - 1.0;
		17 19       float g = 2.0 - abs(h * 6.0 - 2.0);
		        ...
		49 51   
		50 52   void main() {
		51 53       float xOffset = sin(texCoord.y * Frequency.x + Time * 3.1415926535 * 2.0) * WobbleAmount.x;
		52 54       float yOffset = cos(texCoord.x * Frequency.y + Time * 3.1415926535 * 2.0) * WobbleAmount.y;
		53 55       vec2 offset = vec2(xOffset, yOffset);
		   56 +     vec4 rgb = texture(DiffuseSampler, texCoord + offset);
		54    -     vec4 rgb = texture2D(DiffuseSampler, texCoord + offset);
		55 57       vec3 hsv = RGBtoHSV(rgb.rgb);
		56 58       hsv.x = fract(hsv.x + Time);
		   59 +     fragColor = vec4(HSVtoRGB(hsv), 1.0);
		57    -     gl_FragColor = vec4(HSVtoRGB(hsv), 1.0);
		58 60   }
		        '''
	Added file "core/blit_screen.fsh":
		'''
		#version 150
		
		uniform sampler2D DiffuseSampler;
		
		uniform vec4 ColorModulator;
		
		in vec2 texCoord;
		in vec4 vertexColor;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(DiffuseSampler, texCoord) * vertexColor;
		
		    // blit final output of compositor into displayed back buffer
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/block.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/new_entity.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/particle.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		in vec4 vertexColor;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/position.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		
		out vec4 fragColor;
		
		void main() {
		    fragColor = linear_fog(ColorModulator, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/position_color.fsh":
		'''
		#version 150
		
		in vec4 vertexColor;
		
		uniform vec4 ColorModulator;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = vertexColor;
		    if (color.a == 0.0) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_color_lightmap.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord2;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler2, texCoord2) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_color_normal.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/position_color_tex.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_color_tex_lightmap.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_tex.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a == 0.0) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_tex_color.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		
		in vec2 texCoord0;
		in vec4 vertexColor;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/position_tex_color_normal.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in vec2 texCoord0;
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/position_tex_lightmap_color.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 vertexColor;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_armor_cutout_no_cull.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_armor_entity_glint.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_armor_glint.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_beacon_beam.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_crumbling.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_cutout.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_cutout_mipped.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_end_portal.fsh":
		'''
		#version 150
		
		#moj_import <matrix.glsl>
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		
		uniform float GameTime;
		uniform int EndPortalLayers;
		
		in vec4 texProj0;
		
		const vec3[] COLORS = vec3[](
		    vec3(0.022087, 0.098399, 0.110818),
		    vec3(0.011892, 0.095924, 0.089485),
		    vec3(0.027636, 0.101689, 0.100326),
		    vec3(0.046564, 0.109883, 0.114838),
		    vec3(0.064901, 0.117696, 0.097189),
		    vec3(0.063761, 0.086895, 0.123646),
		    vec3(0.084817, 0.111994, 0.166380),
		    vec3(0.097489, 0.154120, 0.091064),
		    vec3(0.106152, 0.131144, 0.195191),
		    vec3(0.097721, 0.110188, 0.187229),
		    vec3(0.133516, 0.138278, 0.148582),
		    vec3(0.070006, 0.243332, 0.235792),
		    vec3(0.196766, 0.142899, 0.214696),
		    vec3(0.047281, 0.315338, 0.321970),
		    vec3(0.204675, 0.390010, 0.302066),
		    vec3(0.080955, 0.314821, 0.661491)
		);
		
		const mat4 SCALE_TRANSLATE = mat4(
		    0.5, 0.0, 0.0, 0.25,
		    0.0, 0.5, 0.0, 0.25,
		    0.0, 0.0, 1.0, 0.0,
		    0.0, 0.0, 0.0, 1.0
		);
		
		mat4 end_portal_layer(float layer) {
		    mat4 translate = mat4(
		        1.0, 0.0, 0.0, 17.0 / layer,
		        0.0, 1.0, 0.0, (2.0 + layer / 1.5) * (GameTime * 1.5),
		        0.0, 0.0, 1.0, 0.0,
		        0.0, 0.0, 0.0, 1.0
		    );
		
		    mat2 rotate = mat2_rotate_z(radians((layer * layer * 4321.0 + layer * 9.0) * 2.0));
		
		    mat2 scale = mat2(4.5 - layer / 4.0);
		
		    return mat4(scale * rotate) * translate * SCALE_TRANSLATE;
		}
		
		out vec4 fragColor;
		
		void main() {
		    vec3 color = textureProj(Sampler0, texProj0).rgb * COLORS[0];
		    for (int i = 0; i < EndPortalLayers; i++) {
		        color += textureProj(Sampler1, texProj0 * end_portal_layer(float(i + 1))).rgb * COLORS[i];
		    }
		    fragColor = vec4(color, 1.0);
		}
		'''
	Added file "core/rendertype_energy_swirl.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_entity_alpha.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a < vertexColor.a) {
		        discard;
		    }
		    fragColor = color;
		}
		'''
	Added file "core/rendertype_entity_cutout.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 overlayColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a < 0.1) {
		        discard;
		    }
		    color.rgb = mix(overlayColor.rgb, color.rgb, overlayColor.a);
		    color *= vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_entity_cutout_no_cull.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 overlayColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a < 0.1) {
		        discard;
		    }
		    color.rgb = mix(overlayColor.rgb, color.rgb, overlayColor.a);
		    color *= vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_entity_cutout_no_cull_z_offset.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_entity_decal.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_entity_glint.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_entity_glint_direct.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_entity_no_outline.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_entity_shadow.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, clamp(texCoord0, 0.0, 1.0)) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_entity_smooth_cutout.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 overlayColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a < 0.1) {
		        discard;
		    }
		    color.rgb = mix(overlayColor.rgb, color.rgb, overlayColor.a);
		    color *= vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_entity_solid.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_entity_translucent.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec4 overlayColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0);
		    if (color.a < 0.1) {
		        discard;
		    }
		    color.rgb = mix(overlayColor.rgb, color.rgb, overlayColor.a);
		    color *= vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_entity_translucent_cull.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_eyes.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_glint.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_glint_direct.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_glint_translucent.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    float fade = linear_fog_fade(vertexDistance, FogStart, FogEnd);
		    fragColor = vec4(color.rgb * fade, color.a);
		}
		'''
	Added file "core/rendertype_item_entity_translucent_cull.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler1;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord1;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_leash.fsh":
		'''
		#version 150
		
		flat in vec4 vertexColor;
		
		out vec4 fragColor;
		
		void main() {
		    fragColor = vertexColor;
		}
		'''
	Added file "core/rendertype_lightning.fsh":
		'''
		#version 150
		
		in vec4 vertexColor;
		
		uniform vec4 ColorModulator;
		
		out vec4 fragColor;
		
		void main() {
		    fragColor = vertexColor * ColorModulator;
		}
		'''
	Added file "core/rendertype_lines.fsh":
		'''
		#version 150
		
		in vec4 vertexColor;
		
		uniform vec4 ColorModulator;
		
		out vec4 fragColor;
		
		void main() {
		    fragColor = vertexColor * ColorModulator;
		}
		'''
	Added file "core/rendertype_outline.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = ColorModulator;
		}
		'''
	Added file "core/rendertype_solid.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_text.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_text_see_through.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_translucent.fsh":
		'''
		#version 150
		
		#moj_import <fog.glsl>
		
		uniform sampler2D Sampler0;
		
		uniform vec4 ColorModulator;
		uniform float FogStart;
		uniform float FogEnd;
		uniform vec4 FogColor;
		
		in float vertexDistance;
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor * ColorModulator;
		    fragColor = linear_fog(color, vertexDistance, FogStart, FogEnd, FogColor);
		}
		'''
	Added file "core/rendertype_translucent_moving_block.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_translucent_no_crumbling.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_tripwire.fsh":
		'''
		#version 150
		
		uniform sampler2D Sampler0;
		uniform sampler2D Sampler2;
		
		uniform vec4 ColorModulator;
		
		in vec4 vertexColor;
		in vec2 texCoord0;
		in vec2 texCoord2;
		in vec4 normal;
		
		out vec4 fragColor;
		
		void main() {
		    vec4 color = texture(Sampler0, texCoord0) * vertexColor;
		    if (color.a < 0.1) {
		        discard;
		    }
		    fragColor = color * ColorModulator;
		}
		'''
	Added file "core/rendertype_water_mask.fsh":
		'''
		#version 150
		
		uniform vec4 ColorModulator;
		
		out vec4 fragColor;
		
		void main() {
		    fragColor = ColorModulator;
		}
		'''