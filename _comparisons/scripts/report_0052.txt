Difference of "scripts" between "1.19.20.22" (beta of "1.19.20") and "1.19.20.23" (beta of "1.19.20").

Changed behavior pack "vanilla_gametest":
	Changed script "APITests.js":
		Total line: 1907 (+2, -2)
		            '''
		            ...
		1862 1862     const lampLoc = new BlockLocation(2, 3, 7);
		1863 1863     await test.idle(2);
		1864 1864     let arrowLoc = arrow.location;
		1865 1865     arrowLoc.x -= 1;
		1866 1866     arrow.teleport(arrowLoc, arrow.dimension, 0, 0, true);
		     1867 +   test.succeedWhen(() => {
		     1868 +     test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		1867      -   await test.idle(20);
		1868      -   test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		     1869 +   });
		1869      -   test.succeed();
		1870 1870   })
		1871 1871     .structureName("SimulatedPlayerTests:target_practice")
		1872 1872     .tag(GameTest.Tags.suiteDefault);
		1873 1873   
		1874 1874   GameTest.registerAsync(`APITests`, `teleport_keep_velocity_mob`, async (test) => {
		            ...
		            '''
	Changed script "VibrationTests.js":
		Total line: 828 (+89, -79)
		          '''
		          ...
		299 299   
		300 300       failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		301 301   })
		302 302       .tag(GameTest.Tags.suiteDefault);
		303 303   
		    304 + // Tests that a vibration dampening entity (Warden) does not produce vibrations when moving.
		    305 + GameTest.register("VibrationTests", "event_entity_move_dampening", (test) => {
		    306 +     const sensorPos = new BlockLocation(9, 2, 9);
		    307 + 
		    308 +     const spawnPos = new Location(16.5, 2, 7.5);
		    309 +     const warden = test.spawnWithoutBehaviorsAtLocation("minecraft:warden", spawnPos);
		    310 + 
		    311 +     const targetPos = new BlockLocation(2, 2, 7);
		    312 +     test.walkTo(warden, targetPos, 1);
		    313 + 
		    314 +     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		    315 + })
		    316 +     .tag(GameTest.Tags.suiteDefault);
		    317 + 
		    318 + // Tests that an entity standing still in Scaffolding does not produce vibrations.
		    319 + GameTest.register("VibrationTests", "event_entity_move_scaffolding", (test) => {
		304     - // Tests that a vibration dampering entity (Warden) does not produce vibrations when moving.
		305     - GameTest.register("VibrationTests", "event_entity_move_dampering", (test) => {
		306 320       const sensorPos = new BlockLocation(9, 2, 9);
		    321 + 
		    322 +     const spawnPos = new Location(9.5, 3, 7.5);
		    323 +     const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		307 324   
		    325 +     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		    326 + })
		308     -     const spawnPos = new Location(16.5, 2, 7.5);
		    327 +     .tag(GameTest.Tags.suiteDefault);
		309     -     const warden = test.spawnWithoutBehaviorsAtLocation("minecraft:warden", spawnPos);
		310 328   
		    329 + // Tests that a moving player does not produce vibrations when sneaking, but does otherwise.
		    330 + GameTest.register("VibrationTests", "event_entity_move_sneaking", (test) => {
		    331 +     const sensorPos = new BlockLocation(9, 2, 9);
		    332 +     const comparatorPos = new BlockLocation(9, 2, 10);
		    333 +     const expectedFrequency = 1;
		311     -     const targetPos = new BlockLocation(2, 2, 7);
		312     -     test.walkTo(warden, targetPos, 1);
		313 334   
		    335 +     const spawnPos = new BlockLocation(11, 2, 7);
		    336 +     const targetPos = new BlockLocation(7, 2, 7);
		314     -     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		315     - })
		    337 +     const player = test.spawnSimulatedPlayer(spawnPos, "Gordon");
		316     -     .tag(GameTest.Tags.suiteDefault);
		317 338   
		    339 +     test.startSequence().thenExecute(() => {
		    340 +         player.isSneaking = true;
		318     - // Tests that an entity standing still in Scaffolding does not produce vibrations.
		    341 +         player.moveToBlock(targetPos);
		    342 +     }).thenExecuteFor(TicksPerSecond * 5, () => {
		    343 +         const testEx = new GameTestExtensions(test);
		    344 +         testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    345 +     }).thenExecute(() => {
		    346 +         player.isSneaking = false;
		    347 +         player.moveToBlock(spawnPos);
		    348 +     }).thenWait(() => {
		    349 +         const testEx = new GameTestExtensions(test);
		    350 +         testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    351 +         test.assertRedstonePower(comparatorPos, expectedFrequency);
		    352 +     }).thenSucceed();
		    353 + })
		    354 +     .maxTicks(TicksPerSecond * 30)
		    355 +     .tag(GameTest.Tags.suiteDefault);
		319     - GameTest.register("VibrationTests", "event_entity_move_scaffolding", (test) => {
		320     -     const sensorPos = new BlockLocation(9, 2, 9);
		321     - 
		322     -     const spawnPos = new Location(9.5, 3, 7.5);
		323     -     const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		324     - 
		325     -     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		326     - })
		327     -     .tag(GameTest.Tags.suiteDefault);
		328     - 
		329     - // Tests that a moving player does not produce vibrations when sneaking, but does otherwise.
		330     - GameTest.register("VibrationTests", "event_entity_move_sneaking", (test) => {
		331     -     const sensorPos = new BlockLocation(9, 2, 9);
		332     -     const comparatorPos = new BlockLocation(9, 2, 10);
		333     -     const expectedFrequency = 1;
		334 356   
		    357 + // Tests that a Sculk Sensor can receive vibrations from a sneaking entity only if the entity is moving on top of it.
		    358 + GameTest.register("VibrationTests", "event_entity_move_sneaking_on_sensor", (test) => {
		335     -     const spawnPos = new BlockLocation(11, 2, 7);
		    359 +     const sneakOnSensorPos = new BlockLocation(9, 2, 9);
		    360 +     const unaffectedSensorPos = new BlockLocation(9, 5, 9);
		336     -     const targetPos = new BlockLocation(7, 2, 7);
		337     -     const player = test.spawnSimulatedPlayer(spawnPos, "Gordon");
		338 361   
		    362 +     const spawnPos = new Location(7.5, 2, 9.5);
		339     -     test.startSequence().thenExecute(() => {
		340     -         player.isSneaking = true;
		    363 +     const targetPos = new BlockLocation(11, 2, 9);
		    364 +     // Using a Pig as for some reason Simulated Players do not trigger onStandOn.
		    365 +     const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		    366 + 
		    367 +     test.startSequence().thenExecute(() => {
		    368 +         pig.isSneaking = true;
		    369 +         test.walkTo(pig, targetPos, 1);
		341     -         player.moveToBlock(targetPos);
		342     -     }).thenExecuteFor(TicksPerSecond * 5, () => {
		343     -         const testEx = new GameTestExtensions(test);
		344     -         testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		345     -     }).thenExecute(() => {
		346     -         player.isSneaking = false;
		347     -         player.moveToBlock(spawnPos);
		348 370       }).thenWait(() => {
		349 371           const testEx = new GameTestExtensions(test);
		350     -         testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		351     -         test.assertRedstonePower(comparatorPos, expectedFrequency);
		352     -     }).thenSucceed();
		    372 +         testEx.assertBlockProperty("powered_bit", 1, sneakOnSensorPos);
		    373 +     }).thenExecuteFor(TicksPerSecond * 5, () => {
		    374 +         const testEx = new GameTestExtensions(test);
		    375 +         testEx.assertBlockProperty("powered_bit", 0, unaffectedSensorPos);
		    376 +     }).thenSucceed();
		    377 + })
		    378 +     .maxTicks(TicksPerSecond * 30)
		    379 +     .tag(GameTest.Tags.suiteDefault);
		353     - })
		354     -     .maxTicks(TicksPerSecond * 30)
		355     -     .tag(GameTest.Tags.suiteDefault);
		356     - 
		357     - // Tests that a Sculk Sensor can receive vibrations from a sneaking entity only if the entity is moving on top of it.
		358     - GameTest.register("VibrationTests", "event_entity_move_sneaking_on_sensor", (test) => {
		359     -     const sneakOnSensorPos = new BlockLocation(9, 2, 9);
		360     -     const unaffectedSensorPos = new BlockLocation(9, 5, 9);
		361 380   
		    381 + // Tests that a flying parrot produces vibrations of the expected frequency.
		    382 + GameTest.register("VibrationTests", "event_flap_parrot", (test) => {
		362     -     const spawnPos = new Location(7.5, 2, 9.5);
		    383 +     const sensorPos = new BlockLocation(9, 2, 9);
		    384 +     const comparatorPos = new BlockLocation(9, 2, 10);
		    385 +     const expectedFrequency = 2;
		363     -     const targetPos = new BlockLocation(11, 2, 9);
		364     -     // Using a Pig as for some reason Simulated Players do not trigger onStandOn.
		365     -     const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		366 386   
		367     -     test.startSequence().thenExecute(() => {
		368     -         pig.isSneaking = true;
		369     -         test.walkTo(pig, targetPos, 1);
		    387 +     const spawnPos = new Location(11.5, 2, 9.5);
		    388 +     const parrot = test.spawnWithoutBehaviorsAtLocation("minecraft:parrot", spawnPos);
		    389 + 
		    390 +     const targetPos = new BlockLocation(7, 2, 9);
		    391 +     test.walkTo(parrot, targetPos, 1);
		    392 + 
		    393 +     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		370     -     }).thenWait(() => {
		371     -         const testEx = new GameTestExtensions(test);
		372     -         testEx.assertBlockProperty("powered_bit", 1, sneakOnSensorPos);
		373     -     }).thenExecuteFor(TicksPerSecond * 5, () => {
		374     -         const testEx = new GameTestExtensions(test);
		375     -         testEx.assertBlockProperty("powered_bit", 0, unaffectedSensorPos);
		376     -     }).thenSucceed();
		377 394   })
		378     -     .maxTicks(TicksPerSecond * 30)
		379 395       .tag(GameTest.Tags.suiteDefault);
		380 396   
		    397 + // Tests that a flying bee produces vibrations of the expected frequency.
		    398 + GameTest.register("VibrationTests", "event_flap_bee", (test) => {
		381     - // Tests that a flying parrot produces vibrations of the expected frequency.
		382     - GameTest.register("VibrationTests", "event_flap_parrot", (test) => {
		383 399       const sensorPos = new BlockLocation(9, 2, 9);
		384 400       const comparatorPos = new BlockLocation(9, 2, 10);
		385 401       const expectedFrequency = 2;
		386 402   
		387 403       const spawnPos = new Location(11.5, 2, 9.5);
		    404 +     const bee = test.spawnWithoutBehaviorsAtLocation("minecraft:bee", spawnPos);
		388     -     const parrot = test.spawnWithoutBehaviorsAtLocation("minecraft:parrot", spawnPos);
		389 405   
		390 406       const targetPos = new BlockLocation(7, 2, 9);
		    407 +     test.walkTo(bee, targetPos, 1);
		391     -     test.walkTo(parrot, targetPos, 1);
		392 408   
		393 409       succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		394 410   })
		395 411       .tag(GameTest.Tags.suiteDefault);
		396 412   
		    413 + // Tests that a falling chicken produces vibrations of the expected frequency.
		    414 + GameTest.register("VibrationTests", "event_flap_chicken", (test) => {
		397     - // Tests that a flying bee produces vibrations of the expected frequency.
		398     - GameTest.register("VibrationTests", "event_flap_bee", (test) => {
		399 415       const sensorPos = new BlockLocation(9, 2, 9);
		400 416       const comparatorPos = new BlockLocation(9, 2, 10);
		401 417       const expectedFrequency = 2;
		402     - 
		403     -     const spawnPos = new Location(11.5, 2, 9.5);
		404     -     const bee = test.spawnWithoutBehaviorsAtLocation("minecraft:bee", spawnPos);
		405 418   
		    419 +     const spawnPos = new Location(9.5, 5, 7.5);
		    420 +     test.spawnWithoutBehaviorsAtLocation("minecraft:chicken", spawnPos);
		406     -     const targetPos = new BlockLocation(7, 2, 9);
		407     -     test.walkTo(bee, targetPos, 1);
		408 421   
		409 422       succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		410 423   })
		411 424       .tag(GameTest.Tags.suiteDefault);
		412 425   
		    426 + // Tests that a swimming entity produces vibrations of the expected frequency.
		    427 + GameTest.register("VibrationTests", "event_swim", (test) => {
		413     - // Tests that a falling chicken produces vibrations of the expected frequency.
		414     - GameTest.register("VibrationTests", "event_flap_chicken", (test) => {
		415 428       const sensorPos = new BlockLocation(9, 2, 9);
		416 429       const comparatorPos = new BlockLocation(9, 2, 10);
		    430 +     const expectedFrequency = 3;
		417     -     const expectedFrequency = 2;
		418 431   
		    432 +     const spawnPos = new Location(11.5, 2, 9.5);
		    433 +     const fish = test.spawnWithoutBehaviorsAtLocation("minecraft:tropicalfish", spawnPos);
		419     -     const spawnPos = new Location(9.5, 5, 7.5);
		420     -     test.spawnWithoutBehaviorsAtLocation("minecraft:chicken", spawnPos);
		421 434   
		    435 +     const targetPos = new BlockLocation(7, 2, 9);
		422     -     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		423     - })
		    436 +     test.walkTo(fish, targetPos, 1);
		424     -     .tag(GameTest.Tags.suiteDefault);
		425 437   
		    438 +     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		426     - // Tests that a swimming entity produces vibrations of the expected frequency.
		427     - GameTest.register("VibrationTests", "event_swim", (test) => {
		428     -     const sensorPos = new BlockLocation(9, 2, 9);
		    439 + })
		    440 +     .tag(GameTest.Tags.suiteDefault);
		429     -     const comparatorPos = new BlockLocation(9, 2, 10);
		430     -     const expectedFrequency = 3;
		431 441   
		    442 + // Tests that a swimming entity staying still in water does not produce vibrations.
		    443 + GameTest.register("VibrationTests", "event_swim_still", (test) => {
		432     -     const spawnPos = new Location(11.5, 2, 9.5);
		    444 +     const sensorPos = new BlockLocation(9, 2, 9);
		433     -     const fish = test.spawnWithoutBehaviorsAtLocation("minecraft:tropicalfish", spawnPos);
		434 445   
		    446 +     const spawnPos = new Location(9.5, 2, 7.5);
		    447 +     test.spawnAtLocation("minecraft:tropicalfish", spawnPos);
		435     -     const targetPos = new BlockLocation(7, 2, 9);
		436     -     test.walkTo(fish, targetPos, 1);
		437 448   
		    449 +     // When the fish is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		    450 +     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 1, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		438     -     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		439 451   })
		440 452       .tag(GameTest.Tags.suiteDefault);
		441 453   
		    454 + // Tests that a Boat moving on water produces vibrations of the expected frequency.
		    455 + GameTest.register("VibrationTests", "event_swim_boat", (test) => {
		442     - // Tests that a swimming entity staying still in water does not produce vibrations.
		443     - GameTest.register("VibrationTests", "event_swim_still", (test) => {
		444 456       const sensorPos = new BlockLocation(9, 2, 9);
		    457 +     const comparatorPos = new BlockLocation(9, 2, 10);
		    458 +     const expectedFrequency = 3;
		445 459   
		    460 +     const spawnPos = new Location(11.5, 3, 6.5);
		    461 +     const boat = test.spawnAtLocation("minecraft:boat", spawnPos);
		446     -     const spawnPos = new Location(9.5, 2, 7.5);
		447     -     test.spawnAtLocation("minecraft:tropicalfish", spawnPos);
		448 462   
		    463 +     const targetPos = new BlockLocation(6, 3, 7);
		449     -     // When the fish is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		450     -     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 1, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		451     - })
		    464 +     test.walkTo(boat, targetPos, 1);
		452     -     .tag(GameTest.Tags.suiteDefault);
		453 465   
		    466 +     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		454     - // Tests that a Boat moving on water produces vibrations of the expected frequency.
		455     - GameTest.register("VibrationTests", "event_swim_boat", (test) => {
		456     -     const sensorPos = new BlockLocation(9, 2, 9);
		    467 + })
		    468 +     .tag(GameTest.Tags.suiteDefault);
		457     -     const comparatorPos = new BlockLocation(9, 2, 10);
		458     -     const expectedFrequency = 3;
		459 469   
		    470 + // Tests that a Boat staying still on water does not produce vibrations.
		    471 + GameTest.register("VibrationTests", "event_swim_boat_still", (test) => {
		460     -     const spawnPos = new Location(11.5, 3, 6.5);
		    472 +     const sensorPos = new BlockLocation(9, 2, 9);
		461     -     const boat = test.spawnAtLocation("minecraft:boat", spawnPos);
		462 473   
		    474 +     const spawnPos = new Location(9.5, 3, 6.5);
		    475 +     test.spawnAtLocation("minecraft:boat", spawnPos);
		463     -     const targetPos = new BlockLocation(6, 3, 7);
		464     -     test.walkTo(boat, targetPos, 1);
		465 476   
		    477 +     // When the Boat is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		    478 +     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 4, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		466     -     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		467 479   })
		    480 +     .tag(GameTest.Tags.suiteDefault)
		    481 +     .maxTicks(TicksPerSecond * 5 + SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		468     -     .tag(GameTest.Tags.suiteDefault);
		469 482   
		    483 + // Tests that an entity hitting ground produces vibrations of the expected frequency.
		    484 + GameTest.register("VibrationTests", "event_hit_ground", (test) => {
		470     - // Tests that a Boat staying still on water does not produce vibrations.
		471     - GameTest.register("VibrationTests", "event_swim_boat_still", (test) => {
		472 485       const sensorPos = new BlockLocation(9, 2, 9);
		    486 +     const comparatorPos = new BlockLocation(9, 2, 10);
		    487 +     const expectedFrequency = 5;
		473 488   
		    489 +     const spawnPos = new Location(9.5, 5, 7.5);
		    490 +     test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		474     -     const spawnPos = new Location(9.5, 3, 6.5);
		475     -     test.spawnAtLocation("minecraft:boat", spawnPos);
		476 491   
		    492 +     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		477     -     // When the Boat is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		478     -     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 4, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		479 493   })
		    494 +     .tag(GameTest.Tags.suiteDefault);
		480     -     .tag(GameTest.Tags.suiteDefault)
		481     -     .maxTicks(TicksPerSecond * 5 + SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		482 495   
		    496 + // [Bug 734008] Tests that a vibration dampening item (a Wool block, ejected by powering a Dispenser containing it) does not produce vibrations when hitting ground.
		    497 + GameTest.register("VibrationTests", "event_hit_ground_dampening", (test) => {
		483     - // Tests that an entity hitting ground produces vibrations of the expected frequency.
		484     - GameTest.register("VibrationTests", "event_hit_ground", (test) => {
		485 498       const sensorPos = new BlockLocation(9, 2, 9);
		486     -     const comparatorPos = new BlockLocation(9, 2, 10);
		487     -     const expectedFrequency = 5;
		488 499   
		    500 +     const placeAtPos = new BlockLocation(9, 6, 6);
		    501 +     test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		489     -     const spawnPos = new Location(9.5, 5, 7.5);
		490     -     test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		491 502   
		    503 +     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		492     -     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		493 504   })
		494 505       .tag(GameTest.Tags.suiteDefault);
		495 506   
		    507 + // Tests that an entity falling on Wool does not produce vibrations.
		    508 + GameTest.register("VibrationTests", "event_hit_ground_wool", (test) => {
		496     - // [Bug 734008] Tests that a vibration dampering item (a Wool block, ejected by powering a Dispenser containing it) does not produce vibrations when hitting ground.
		497     - GameTest.register("VibrationTests", "event_hit_ground_dampering", (test) => {
		498 509       const sensorPos = new BlockLocation(9, 2, 9);
		499 510   
		    511 +     const spawnPos = new Location(9.5, 5, 7.5);
		    512 +     test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		500     -     const placeAtPos = new BlockLocation(9, 6, 6);
		501     -     test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		502 513   
		503 514       failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		504 515   })
		505 516       .tag(GameTest.Tags.suiteDefault);
		506 517   
		    518 + // Tests that a Sculk Sensor detects Wool in item form (retrieved from the .mcstructure) lying on top of it.
		    519 + GameTest.register("VibrationTests", "event_sculk_touch_wool", (test) => {
		507     - // Tests that an entity falling on Wool does not produce vibrations.
		508     - GameTest.register("VibrationTests", "event_hit_ground_wool", (test) => {
		509 520       const sensorPos = new BlockLocation(9, 2, 9);
		    521 +     const comparatorPos = new BlockLocation(9, 2, 10);
		510     - 
		511     -     const spawnPos = new Location(9.5, 5, 7.5);
		    522 +     const expectedFrequency = 1;
		512     -     test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		513 523   
		    524 +     succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		514     -     failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		515 525   })
		516 526       .tag(GameTest.Tags.suiteDefault);
		517 527   
		518 528   // Tests that an entity falling in Water produces vibrations of the expected frequency.
		519 529   GameTest.register("VibrationTests", "event_splash", (test) => {
		          ...
		          '''