Difference of "shaders_resource_packs" between "1.19.80.20" (beta of "1.19.80") and "1.19.80.21" (beta of "1.19.80").

Added resource pack "pattern.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "fragmentVersionCentroid.h"
		#include "uniformShaderConstants.h"
		#include "uniformPatternConstants.h"
		
		LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
		LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;
		
		#if __VERSION__ >= 300
		_centroid varying vec4 uv;
		#else
		varying vec4 uv;
		#endif
		
		#ifdef ENABLE_FOG
		varying vec4 fogColor;
		#endif
		
		#ifdef ENABLE_LIGHT
		varying vec4 light;
		#endif
		
		vec4 getPatternColor(int layer, vec2 texcoord) {
			vec2 tex = (PATTERN_UV_OFFSETS_AND_SCALES[layer].zw * texcoord) + PATTERN_UV_OFFSETS_AND_SCALES[layer].xy;
			vec4 resultColor = PATTERN_COLORS[layer];
			return texture2D(TEXTURE_2, tex) * resultColor;
		}
		
		vec4 getBaseColor(vec2 texcoord) {
			return texture2D(TEXTURE_0, texcoord);
		}
		
		vec4 getAppliedPatternColor(vec2 texcoord0) {
			vec4 resultColor = getBaseColor(texcoord0);
		#ifndef DISABLE_TINTING
			int patternCount = int(PATTERN_COUNT);
			for (int i = 0; i < patternCount; i++) {
				vec4 pattern = getPatternColor(i, texcoord0);
				resultColor = mix(resultColor, pattern, pattern.a);
			}
			resultColor.a = 1.0;
		#endif
		
			return resultColor;
		}
		
		#ifdef GLINT
			varying vec2 layer1UV;
			varying vec2 layer2UV;
			varying vec4 tileLightColor;
			varying vec4 glintColor;
		
		vec4 glintBlend(vec4 dest, vec2 layer1UV, vec2 layer2UV, vec4 tileLightColor, vec4 glintColor) {
			vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
			vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
			vec4 glint = (layer1 + layer2) * tileLightColor;
			return vec4(glint.rgb * glint.rgb, abs(glint.a)) + dest;
		}
		#endif
		
		void main()
		{
			vec4 diffuse = getAppliedPatternColor(uv.xy);
		
		#ifdef ENABLE_LIGHT
			diffuse.rgb *= light.rgb;
		#endif
		
		#ifdef ENABLE_FOG
			//apply fog
			diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		#endif
		
		#ifdef GLINT
			diffuse = glintBlend(diffuse, layer1UV, layer2UV, tileLightColor, glintColor);
		#endif
		
		#ifdef UI_ENTITY
			diffuse.a *= HUD_OPACITY;
		#endif
			gl_FragColor = diffuse;
		}
		'''
Added resource pack "pattern.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "vertexVersionCentroid.h"
		
		#include "uniformWorldConstants.h"
		#include "uniformEntityConstants.h"
		#include "uniformPerFrameConstants.h"
		#ifdef USE_SKINNING
		#include "uniformAnimationConstants.h"
		#endif
		
		attribute mediump vec4 POSITION;
		attribute vec2 TEXCOORD_0;
		attribute vec4 NORMAL;
		#if defined(USE_SKINNING)
		#ifdef MCPE_PLATFORM_NX
		attribute uint BONEID_0;
		#else
		attribute float BONEID_0;
		#endif
		#endif
		
		#if __VERSION__ >= 300
		_centroid varying vec4 uv;
		#else
		varying vec4 uv;
		#endif
		
		#ifdef ENABLE_FOG
		varying vec4 fogColor;
		#endif
		
		#ifdef ENABLE_LIGHT
		varying vec4 light;
		#endif
		
		#ifdef GLINT
			varying vec2 layer1UV;
			varying vec2 layer2UV;
			varying vec4 tileLightColor;
			varying vec4 glintColor;
		#endif
		
		const float AMBIENT = 0.45;
		
		const float XFAC = -0.1;
		const float ZFAC = 0.1;
		
		float lightIntensity() {
		#ifdef FANCY
		#ifdef USE_SKINNING
		#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		    vec3 N = normalize(BONES[int(BONEID_0)] * NORMAL).xyz;
		#else
		    vec3 N = normalize(BONE * NORMAL).xyz;
		#endif
		#else
		    vec3 N = normalize(WORLD * NORMAL).xyz;
		#endif
		
		    N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		
		    //take care of double sided polygons on materials without culling
		#ifdef FLIP_BACKFACES
		#ifdef USE_SKINNING
		#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		    vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		#else
			vec3 viewDir = normalize((BONE * POSITION).xyz);
		#endif
		#else
		    vec3 viewDir = normalize((WORLD * POSITION).xyz);
		#endif
		    if( dot(N, viewDir) > 0.0 ) {
		        N *= -1.0;
		    }
		#endif
		
		    float yLight = (1.0+N.y) * 0.5;
		    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		#else
		    return 1.0;
		#endif
		}
		
		#ifdef GLINT
		vec2 calculateLayerUV(float offset, float rotation) {
			vec2 uv = TEXCOORD_0;
			uv -= 0.5;
			float rsin = sin(rotation);
			float rcos = cos(rotation);
			uv = mat2(rcos, -rsin, rsin, rcos) * uv;
			uv.x += offset;
			uv += 0.5;
		
			return uv * GLINT_UV_SCALE;
		}
		#endif
		
		void main()
		{
		    uv = vec4(TEXCOORD_0.xy, 1.0, 1.0);
		#ifdef USE_SKINNING
		#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		    POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		#else
			POS4 pos = WORLDVIEWPROJ * BONE * POSITION;
		#endif
		#else
		    POS4 pos = WORLDVIEWPROJ * POSITION;
		#endif
		    gl_Position = pos;
		
		#ifdef ENABLE_LIGHT
		    float L = lightIntensity();
		    light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		#endif
		
		#ifdef GLINT
			glintColor = GLINT_COLOR;
			layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
			layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
			tileLightColor = TILE_LIGHT_COLOR;
		#endif
		
		#ifdef ENABLE_FOG
		//fog
		    fogColor.rgb = FOG_COLOR.rgb;
		    fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		#endif
		}
		'''
Added resource pack "uniformPatternConstants.h":
	file "vanilla":
		'''
		
		// Copyright (c) Microsoft Corporation. All rights reserved.
		
		#ifndef _UNIFORM_PATTERN_CONSTANTS_H
		#define _UNIFORM_PATTERN_CONSTANTS_H
		
		#include "uniformMacro.h"
		
		#ifdef MCPE_PLATFORM_NX
		uniform PatternConstants {
		#endif
			// BEGIN_UNIFORM_BLOCK(PatternConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
			UNIFORM vec4 PATTERN_COLORS[7];
			UNIFORM vec4 PATTERN_UV_OFFSETS_AND_SCALES[7];
			UNIFORM float PATTERN_COUNT;
			END_UNIFORM_BLOCK
		
		#endif
		'''