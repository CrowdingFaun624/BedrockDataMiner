Difference of "shaders_resource_packs" between "1.0.9" and "1.1.0.0" (beta of "1.1.0").

Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 154 (+0, -0)
		          '''
		          ...
		 73  73   #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
		 74  74   #else
		 75  75   #ifndef USE_COLOR_MASK
		 76  76   #define NEEDS_DISCARD(C)	(C.a < 0.5)
		 77  77   #else
		     78 + #define NEEDS_DISCARD(C)	(C.a <= 0.0)
		 78     - #define NEEDS_DISCARD(C)	(C.a == 0.0)
		 79  79   #endif
		 80  80   #endif
		 81  81   
		 82  82   void main()
		 83  83   {
		          ...
		          '''
Removed resource pack "hologram_sr.fragment":
	file "vanilla":
		'''
		// __multiversion__
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		#if __VERSION__ >= 300
		#define varying in
		out vec4 FragColor;
		#define gl_FragColor FragColor
		#endif
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Removed resource pack "hologram_sr.vertex":
	file "vanilla":
		'''
		// __multiversion__
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Removed resource pack "holoroom_inner_skirt.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Removed resource pack "holoroom_inner_skirt.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Removed resource pack "holoroom_tableSurface.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Removed resource pack "holoroom_tableSurface.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Removed resource pack "holoroom_terrain_endcap.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Removed resource pack "holoroom_terrain_endcap.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 121 (+2, -0)
		          '''
		          ...
		 85  85   	#endif
		 86  86   	if(diffuse.a < alphaThreshold)
		 87  87   		discard;
		 88  88   #endif
		 89  89   	
		     90 + #if !defined(ALWAYS_LIT)
		 90  91   	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
		     92 + #endif
		 91  93   
		 92  94   #ifndef SEASONS
		 93  95   
		 94  96   #if !defined(ALPHA_TEST) && !defined(BLEND)
		 95  97   	diffuse.a = inColor.a;
		          ...
		          '''
Added resource pack "shadow_stencil_overlay.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		
		uniform vec4 CURRENT_COLOR;
		
		varying vec4 color;
		
		void main()
		{
		  gl_FragColor.rgb = mix(color.rgb, CURRENT_COLOR.rgb, color.a);
		  gl_FragColor.a = 1.0;
		}
		'''