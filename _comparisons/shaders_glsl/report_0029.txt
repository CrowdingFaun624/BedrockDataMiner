Difference of "shaders_resource_packs" between "a0.16.0_build4" (beta of "a0.16.0") and "a0.16.0_build5" (beta of "a0.16.0").

Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 85 (+0, -6)
		        '''
		        ...
		29 29   uniform vec2 UV_OFFSET;
		30 30   uniform vec2 UV_ROTATION;
		31 31   uniform vec2 GLINT_UV_SCALE;
		32 32   uniform vec4 FOG_COLOR;
		33 33   uniform vec2 FOG_CONTROL;
		34    - uniform int FOG_MODE;
		35 34   uniform float RENDER_DISTANCE;
		36 35   uniform vec4 TILE_LIGHT_COLOR;
		37 36   
		38 37   attribute mediump vec4 POSITION;
		39 38   attribute vec4 COLOR;
		        ...
		67 66   	gl_Position = WORLDVIEWPROJ * POSITION;
		68 67   
		69 68   	color = COLOR;
		70 69   	uv = TEXCOORD_0;
		71 70   
		72    - #ifdef ENABLE_FOG
		73    - 	//fog
		74    -     fogColor.rgb = FOG_COLOR.rgb;
		75    - 	if(FOG_MODE == 0) {
		   71 + #ifdef ENABLE_FOG
		   72 + 	//fog
		   73 +     fogColor.rgb = FOG_COLOR.rgb;
		   74 + 	fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		76    - 		fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		77    - 	}
		78    - 	else {
		79    - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		80    - 	}
		81 75   #endif
		82 76   
		83 77   #ifdef USE_LIGHTING
		84 78   	color *= vec4(TILE_LIGHT_COLOR.xyz, 1.0);
		85 79   #endif
		        ...
		        '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 143 (+1, -1)
		          '''
		          ...
		 92  92   	#endif
		 93  93   #endif
		 94  94   
		 95  95   #ifdef USE_COLOR_MASK
		 96  96   	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		     97 + 	color.a *= changeColor.a;
		 97     - 	color.a = 1.0;
		 98  98   #endif
		 99  99   
		100 100   #ifdef ITEM_IN_HAND
		101 101   	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
		102 102   #endif
		          ...
		121 121   
		122 122   #ifdef USE_EMISSIVE
		123 123   	//make glowy stuff
		124 124   	color *= mix(vec4(1.0), light, color.a );
		125 125   #else
		    126 + 	color.rgb *= light.rgb;
		126     - 	color *= light;
		127 127   #endif
		128 128   
		129 129   	//apply fog
		130 130   	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
		131 131   
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 144 (+0, -6)
		          '''
		          ...
		 27  27   uniform vec4 OVERLAY_COLOR;
		 28  28   uniform vec4 CHANGE_COLOR;
		 29  29   uniform vec4 GLINT_COLOR;
		 30  30   uniform vec4 FOG_COLOR;
		 31  31   uniform vec2 FOG_CONTROL;
		 32     - uniform int FOG_MODE;
		 33  32   uniform float RENDER_DISTANCE;
		 34  33   uniform vec4 UV_ANIM;
		 35  34   uniform vec2 UV_OFFSET;
		 36  35   uniform vec2 UV_ROTATION;
		 37  36   uniform vec2 GLINT_UV_SCALE;
		          ...
		138 137       tileLightColor = TILE_LIGHT_COLOR;
		139 138   #endif
		140 139   
		141 140   
		142 141   //fog
		143     -     fogColor.rgb = FOG_COLOR.rgb;
		144     - 	if(FOG_MODE == 0) {
		145     - 		fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		146     - 	}
		    142 +     fogColor.rgb = FOG_COLOR.rgb;
		    143 + 	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		147     - 	else {
		148     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		149     - 	}
		150 144   }
		          '''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 98 (+15, -21)
		          '''
		          ...
		 27  27   uniform vec4	FORWARD;
		 28  28   uniform vec4	UV_INFO;
		 29  29   uniform vec4	PARTICLE_BOX;
		 30  30   uniform vec4	FOG_COLOR;
		 31  31   uniform vec2	FOG_CONTROL;
		 32     - uniform int		FOG_MODE;
		 33     - uniform float	RENDER_DISTANCE;
		 34     - 
		 35     - attribute mediump vec4 POSITION;
		 36     - attribute vec2 TEXCOORD_0;
		     32 + uniform float	RENDER_DISTANCE;
		 37     - attribute vec4 COLOR;
		 38  33   
		 39     - varying vec2 uv;
		     34 + attribute mediump vec4 POSITION;
		     35 + attribute vec2 TEXCOORD_0;
		     36 + attribute vec4 COLOR;
		 40     - varying vec4 color;
		 41     - varying vec4 worldPosition;
		 42     - varying vec4 fogColor;
		 43  37   
		     38 + varying vec2 uv;
		 44     - void main()
		 45     - {
		     39 + varying vec4 color;
		     40 + varying vec4 worldPosition;
		     41 + varying vec4 fogColor;
		 46     - 	float spriteSelector = COLOR.x*255.0;
		 47     - 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		 48     - 	uv.x += spriteSelector * UV_INFO.z;
		 49  42   
		 50     - 	vec3 pos = POSITION.xyz;
		 51     - 		
		 52     - 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		 53     - 	pos.xyz += POSITION_OFFSET.xyz;
		     43 + void main()
		     44 + {
		     45 + 	float spriteSelector = COLOR.x*255.0;
		     46 + 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		     47 + 	uv.x += spriteSelector * UV_INFO.z;
		     48 + 
		     49 + 	vec3 pos = POSITION.xyz;
		     50 + 		
		 54     - 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		 55     - 	
		 56     - 	// centre box on origin
		 57     - 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		 58     - 	
		 59     - 	// push along view vector so box is positioned more infront of camera
		 60     - 	pos.xyz += FORWARD.xyz;
		 61     - 	
		 62     - 	// get world position
		     51 + 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		     52 + 	pos.xyz += POSITION_OFFSET.xyz;
		     53 + 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		     54 + 	
		     55 + 	// centre box on origin
		     56 + 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		 63     - 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		 64     - 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		 65     - 
		 66     - 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		 67     - 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		 68     - 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		 69  57   	
		     58 + 	// push along view vector so box is positioned more infront of camera
		 70     - 	// get 2d vector in screenspace between top and bottom of particle
		     59 + 	pos.xyz += FORWARD.xyz;
		 71     - 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 72  60   	
		     61 + 	// get world position
		     62 + 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		 73     - 	// get 2d vector perpendicular to velocity
		     63 + 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		 74     - 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 75  64   
		     65 + 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		     66 + 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		 76     - 	// choose either the top or bottom projected position using uv.y
		     67 + 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		     68 + 	
		     69 + 	// get 2d vector in screenspace between top and bottom of particle
		     70 + 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 77     - 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		 78     - 	 	
		 79     - 	// offset the position of each side of the particle using uv.x 
		 80     - 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		 81  71   	
		     72 + 	// get 2d vector perpendicular to velocity
		     73 + 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 82     - 	color = ALPHA.rgba;
		 83  74   
		     75 + 	// choose either the top or bottom projected position using uv.y
		     76 + 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		     77 + 	 	
		     78 + 	// offset the position of each side of the particle using uv.x 
		     79 + 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		     80 + 	
		 84     - #if defined(COMFORT_MODE) && defined(VR_MODE)
		 85     - 	if (gl_Position.z < 2.0) {
		 86     - 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		 87     - 	}
		     81 + 	color = ALPHA.rgba;
		 88     - #endif
		 89  82   
		     83 + #if defined(COMFORT_MODE) && defined(VR_MODE)
		 90     - 	//fog
		 91     -     fogColor.rgb = FOG_COLOR.rgb;
		     84 + 	if (gl_Position.z < 2.0) {
		     85 + 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		 92     - 	if(FOG_MODE == 0) {
		 93     - 		fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 94  86   	}
		     87 + #endif
		     88 + 
		     89 + 	//fog
		     90 +     fogColor.rgb = FOG_COLOR.rgb;
		     91 + 	fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 95     - 	else {
		 96     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		 97     - 	}
		 98  92   
		 99  93   	worldPositionBottom.xz *= 1.0 / 64.0;	// Scale by 1/TextureDimensions to get values between
		100  94   	worldPositionBottom.xz += 0.5;			// Offset so that center of view is in the center of occlusion texture
		101  95   	worldPositionBottom.y += VIEW_POSITION.y - 0.5;
		102  96   	worldPositionBottom.y *= 1.0/255.0;
		          ...
		          '''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 119 (+16, -6)
		          '''
		          ...
		  6   6   // varying to out when in vertex shaders or in when in fragment shaders
		  7   7   // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8   8   // texture2D to texture
		  9   9   #if __VERSION__ >= 300
		 10  10   
		     11 + 	// version 300 code
		 11     - // version 300 code
		 12  12   
		     13 + 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		     14 + 		#define _centroid centroid
		     15 + 	#else
		     16 + 		#define _centroid
		     17 + 	#endif
		 13     - #ifdef MSAA_FRAMEBUFFER_ENABLED
		 14     - #define _centroid centroid
		 15     - #else
		 16     - #define _centroid
		 17     - #endif
		 18  18   
		     19 + 	#ifndef BYPASS_PIXEL_SHADER
		     20 + 		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		     21 + 			_centroid in highp vec2 uv0;
		     22 + 			_centroid in highp vec2 uv1;
		     23 + 		#else
		     24 + 			_centroid in vec2 uv0;
		     25 + 			_centroid in vec2 uv1;
		 19     - #if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		 20     - _centroid in highp vec2 uv0;
		 21     - _centroid in highp vec2 uv1;
		 22     - #else
		 23     - _centroid in vec2 uv0;
		 24     - _centroid in vec2 uv1;
		     26 + 		#endif
		     27 + 	#endif
		 25     - #endif
		 26  28   
		     29 + 	#define varying in
		     30 + 	#define texture2D texture
		     31 + 	out vec4 FragColor;
		     32 + 	#define gl_FragColor FragColor
		 27     - #define varying in
		 28     - #define texture2D texture
		 29     - out vec4 FragColor;
		 30     - #define gl_FragColor FragColor
		     33 + #else
		 31  34   
		     35 + 	// version 100 code
		 32     - #else
		 33  36   
		     37 + 	#ifndef BYPASS_PIXEL_SHADER
		 34     - // version 100 code
		     38 + 		varying vec2 uv0;
		     39 + 		varying vec2 uv1;
		 35     - varying vec2 uv0;
		 36     - varying vec2 uv1;
		     40 + 	#endif
		 37     - 
		 38  41   #endif
		 39  42   
		 40  43   
		 41  44   varying vec4 color;
		 42  45   
		          ...
		 45  48   #endif
		 46  49   
		 47  50   #ifdef NEAR_WATER
		 48  51   varying float cameraDist;
		 49  52   #endif
		     53 + 
		     54 + #include "shaders/util.h"
		 50  55   
		     56 + uniform sampler2D TEXTURE_0;
		     57 + uniform sampler2D TEXTURE_1;
		     58 + uniform sampler2D TEXTURE_2;
		 51     - #include "shaders/util.h"
		 52  59   
		     60 + void main()
		     61 + {
		     62 + #ifdef BYPASS_PIXEL_SHADER
		     63 + 	gl_FragColor = vec4(0, 0, 0, 0);
		     64 + 	return;
		     65 + #else 
		 53     - uniform sampler2D TEXTURE_0;
		 54     - uniform sampler2D TEXTURE_1;
		 55     - uniform sampler2D TEXTURE_2;
		 56  66   
		 57     - void main()
		 58     - {
		 59  67   #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		 60  68   	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
		 61  69   #else
		 62  70   	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
		 63  71   #endif
		          ...
		102 110   #endif
		103 111   
		104 112   #ifdef FOG
		105 113   	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		106 114   #endif
		    115 + 
		    116 + 	gl_FragColor = diffuse;
		107 117   
		    118 + #endif // BYPASS_PIXEL_SHADER
		108     - 	gl_FragColor = diffuse;
		109 119   }
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 144 (+9, -10)
		          '''
		          ...
		  5   5   // attribute to in
		  6   6   // varying to out when in vertex shaders or in when in fragment shaders
		  7   7   // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8   8   // texture2D to texture
		  9   9   #if __VERSION__ >= 300
		     10 + 	#define attribute in
		     11 + 	#define varying out
		 10     - #define attribute in
		 11     - #define varying out
		 12  12   
		     13 + 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		     14 + 		#define _centroid centroid
		     15 + 	#else
		     16 + 		#define _centroid
		     17 + 	#endif
		 13     - #ifdef MSAA_FRAMEBUFFER_ENABLED
		 14     - #define _centroid centroid
		 15     - #else
		 16     - #define _centroid
		 17     - #endif
		 18  18   
		     19 + 	#ifndef BYPASS_PIXEL_SHADER
		     20 + 		_centroid out vec2 uv0;
		     21 + 		_centroid out vec2 uv1;
		 19     - _centroid out vec2 uv0;
		 20     - _centroid out vec2 uv1;
		     22 + 	#endif
		 21     - 
		 22  23   #else
		     24 + 	#ifndef BYPASS_PIXEL_SHADER
		 23     - 
		     25 + 		varying vec2 uv0;
		     26 + 		varying vec2 uv1;
		 24     - varying vec2 uv0;
		 25     - varying vec2 uv1;
		     27 + 	#endif
		     28 + #endif
		 26  29   
		     30 + #ifndef BYPASS_PIXEL_SHADER
		     31 + 	varying vec4 color;
		 27  32   #endif
		 28     - 
		 29  33   
		 30     - varying vec4 color;
		 31  34   #ifdef FOG
		 32  35   	varying vec4 fogColor;
		 33  36   #endif
		 34  37   
		 35  38   #ifdef NEAR_WATER
		 36  39   	varying float cameraDist;
		 37  40   #endif
		 38  41   
		 39  42   #ifdef AS_ENTITY_RENDERER
		     43 + 	uniform MAT4 WORLDVIEWPROJ;
		 40     - uniform MAT4 WORLDVIEWPROJ;
		 41  44   #else
		     45 + 	uniform MAT4 WORLDVIEW;
		     46 + 	uniform MAT4 PROJ;
		 42     - uniform MAT4 WORLDVIEW;
		 43     - uniform MAT4 PROJ;
		 44  47   #endif
		 45  48   uniform vec4 FOG_COLOR;
		 46  49   uniform vec2 FOG_CONTROL;
		 47     - uniform int FOG_MODE;
		 48  50   uniform float RENDER_DISTANCE;
		 49  51   uniform vec2 VIEWPORT_DIMENSION;
		 50  52   uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		 51  53   uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		 52  54   uniform POS3 VIEW_POS;
		          ...
		 78  80       POS4 pos = WORLDVIEW * worldPos;
		 79  81       pos = PROJ * pos;
		 80  82   #endif
		 81  83       gl_Position = pos;
		 82  84   
		     85 + #ifndef BYPASS_PIXEL_SHADER
		 83  86       uv0 = TEXCOORD_0;
		 84  87       uv1 = TEXCOORD_1;
		 85  88   	color = COLOR;
		     89 + #endif
		 86  90   
		 87  91   ///// find distance from the camera
		 88  92   
		 89  93   #if defined(FOG) || defined(NEAR_WATER)
		 90  94   	#ifdef FANCY
		          ...
		109 113   	float len = cameraDepth / RENDER_DISTANCE;
		110 114   	#ifdef ALLOW_FADE
		111 115   		len += CURRENT_COLOR.r;
		112 116   	#endif
		113 117   
		114     -     fogColor.rgb = FOG_COLOR.rgb;
		115     - 	if(FOG_MODE == 0) {
		116     - 		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		117     - 	}
		    118 +     fogColor.rgb = FOG_COLOR.rgb;
		    119 + 	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		118     - 	else {
		119     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * cameraDepth), 0.0, 1.0);
		120     - 	}
		121 120   #endif
		122 121   
		123 122   ///// water magic
		124 123   #ifdef NEAR_WATER
		125 124   	#ifdef FANCY  /////enhance water
		          ...
		          '''
Added resource pack "uv_blend_flipbook.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid out vec2 uv;
		_centroid out vec2 uv1;
		
		#else
		
		varying vec2 uv;
		varying vec2 uv1;
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		uniform float V_OFFSET;
		uniform float V_BLEND_OFFSET;
		
		attribute POS4 POSITION;
		attribute vec2 TEXCOORD_0;
		
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = TEXCOORD_0;
			uv.y += V_OFFSET;
		    uv1 = TEXCOORD_0;
			uv1.y += V_BLEND_OFFSET;
		}
		'''