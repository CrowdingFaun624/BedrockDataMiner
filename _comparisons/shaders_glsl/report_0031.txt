Difference of "shaders_resource_packs" between "a0.17.0.2" (beta of "1.0.0") and "a1.0.0.0" (beta of "1.0.0").

Changed resource pack "end_portal.fragment":
	Changed file "vanilla":
		Total line: 119 (+11, -9)
		          '''
		          ...
		 37  37   	#endif
		 38  38   #endif
		 39  39   
		 40  40   
		 41  41   #ifndef BYPASS_PIXEL_SHADER
		 42     - 	varying vec4 color;
		     42 + 	varying lowp vec4 encodedPlane;
		 43     - 	varying POS4 encodedPlane;
		 44  43   	varying POS3 eyePositionInWorld;
		 45  44   	varying POS3 surfacePositionInWorld;
		 46  45   
		 47  46   	#ifdef FOG
		 48  47   		varying vec4 fogColor;
		          ...
		 50  49   #endif
		 51  50   
		 52  51   uniform sampler2D TEXTURE_0;
		 53  52   uniform sampler2D TEXTURE_1;
		 54  53   
		     54 + uniform highp float TIME;
		 55     - uniform float TIME;
		 56  55   
		 57  56   const float MAX_LAYER_DEPTH = 32.0;
		 58  57   
		 59  58   void main()
		 60  59   {
		 61  60   	#ifdef BYPASS_PIXEL_SHADER
		 62  61   		gl_FragColor = vec4(0, 0, 0, 0);
		 63  62   	#else
		 64  63   
		     64 + 	///// Decode Input Values
		     65 + 	// Decode parallax plane data
		     66 + 	lowp vec3 planeNormal = (encodedPlane.xyz - vec3(0.5,0.5,0.5)) * 2.0;
		     67 + 	mediump float planeDistance = encodedPlane.w * MAX_LAYER_DEPTH;
		 65     - 		///// Decode Input Values
		 66     - 		// Decode parallax plane data
		 67     - 		vec3 planeNormal = normalize((encodedPlane.xyz - vec3(0.5,0.5,0.5)) * 2.0);
		 68     - 		float planeDistance = encodedPlane.w * MAX_LAYER_DEPTH;
		     68 + 
		     69 + 	// Calculate view direction from the surface position and the eye position
		 69     - 		// Calculate view direction from the surface position and the eye position
		 70     - 		POS3 viewDirection = normalize(surfacePositionInWorld - eyePositionInWorld);
		 71     - 		// Find any point on the parallax plane, some distance from the actual surface
		     70 + 	POS3 viewDirection = surfacePositionInWorld - eyePositionInWorld;
		 72     - 		POS3 parallaxPlaneOrigin = surfacePositionInWorld.xyz - (planeDistance * planeNormal);
		     71 + 
		 73     - 		
		     72 + 	///// Ray-cast for parallax-offset UV
		     73 + 	// Perform ray-plane intersection to find the position on the parallax plane
		     74 + 	mediump float t = (dot(viewDirection - (planeDistance * planeNormal), planeNormal)) / dot(viewDirection, planeNormal);
		     75 + 	POS3 parallaxSurfacePosition = eyePositionInWorld + (t * viewDirection);
		 74     - 		///// Ray-cast for parallax-offset UV
		 75     - 		// Perform ray-plane intersection to find the position on the parallax plane
		 76     - 		highp float t = (dot(parallaxPlaneOrigin - eyePositionInWorld, planeNormal)) / dot(viewDirection, planeNormal);
		 77     - 		POS3 parallaxSurfacePosition = eyePositionInWorld + (t * viewDirection);
		 78  76   
		 79     - 		///// Ridiculous UV-remapping
		 80     - 		highp vec2 possibleUVResults[3];
		 81     - 		possibleUVResults[0] = parallaxSurfacePosition.yz;
		 82     - 		possibleUVResults[1] = parallaxSurfacePosition.xz;
		     77 + 	///// Ridiculous UV-remapping
		     78 + 	lowp vec3 absNormal = floor(abs(planeNormal) + vec3(0.5,0.5,0.5));
		     79 + 	// Since all normals are orthonormal on <x,y,z>, mask out the correct uv result
		     80 + 	highp vec2 raycastUV = parallaxSurfacePosition.yz * absNormal[0] + parallaxSurfacePosition.xz * absNormal[1] + parallaxSurfacePosition.xy * absNormal[2];
		 83     - 		possibleUVResults[2] = parallaxSurfacePosition.xy;
		 84     - 		vec3 absNormal = floor(abs(planeNormal) + vec3(0.5,0.5,0.5));
		 85     - 		// Since all normals are orthonormal on <x,y,z>, mask out the correct uv result
		 86     - 		highp vec2 raycastUV = possibleUVResults[0] * absNormal[0] + possibleUVResults[1] * absNormal[1] + possibleUVResults[2] * absNormal[2];
		     81 + 
		     82 + 	// Scale the UVs to Minecraft pixel size
		 87     - 		// Scale the UVs to Minecraft pixel size
		     83 + 	raycastUV = fract(raycastUV / 16.0);
		 88     - 		raycastUV /= 16.0;
		 89  84   
		     85 + 	///// Color Lookup
		     86 + 	lowp vec4 colorSample = texture2D(TEXTURE_1, colorLookupUV);
		 90     - 		///// Color Lookup
		 91     - 		vec4 colorSample = texture2D(TEXTURE_1, colorLookupUV);
		 92  87   
		     88 + 	///// UV Scrolling
		 93     - 		///// UV Scrolling
		     89 + 	// Scroll direction based on a value unique to the layer (derived from color)
		     90 + 	mediump vec2 scrollDirection = normalize(vec2(colorSample.g - colorSample.b, colorSample.r - (colorSample.g - colorSample.b)));
		     91 + 	highp vec2 resultUV = mat2(vec2(scrollDirection.x, scrollDirection.y), vec2(-scrollDirection.y, scrollDirection.x)) * raycastUV;
		     92 + 	// Offset rotation based on a value unique to the layer (still derived from color)
		 94     - 		mediump float scaledTime = TIME / 256.0;
		 95     - 		// Scroll direction based on a value unique to the layer (derived from color)
		     93 + 	resultUV += fract(scrollDirection * dot(colorSample, colorSample) * 128.0);
		     94 + 	resultUV.y += fract(TIME / 256.0);
		     95 + 
		     96 + 	///// Color assembly
		     97 + 	lowp vec4 textureSample = texture2D(TEXTURE_0, resultUV);
		     98 + 	lowp float brightness = 1.0 - (encodedPlane.w);
		     99 + 	lowp vec3 result = textureSample.rgb * colorSample.rgb * brightness;
		 96     - 		mediump vec2 scrollDirection = normalize(vec2(colorSample.g - colorSample.b, colorSample.r - (colorSample.g - colorSample.b)));
		 97     - 		mediump mat2 rot = mat2(vec2(scrollDirection.x, scrollDirection.y), vec2(-scrollDirection.y, scrollDirection.x));
		 98     - 		mediump vec2 resultUV = rot * raycastUV;
		 99     - 		// Offset rotation based on a value unique to the layer (still derived from color)
		100     - 		resultUV += scrollDirection * dot(colorSample, colorSample) * 128.0;
		101     - 		resultUV.y += scaledTime;
		102 100   
		    101 + 	#ifdef FOG
		    102 + 		if(planeDistance > MAX_LAYER_DEPTH - 1.0) {
		    103 + 			gl_FragColor = vec4(mix(vec3(0,0,0), fogColor.rgb, fogColor.a), 0);
		    104 + 		}
		    105 + 		else {
		    106 + 			gl_FragColor = vec4(result * (1.0 - fogColor.a), 1);
		    107 + 		}
		    108 + 	#else
		103     - 		///// Color assembly
		104     - 		vec4 textureSample = texture2D(TEXTURE_0, resultUV);
		105     - 		float brightness = 1.0 - (encodedPlane.w);
		106     - 		vec3 result = textureSample.rgb * colorSample.rgb * color.rgb * brightness;
		107     - 
		108 109   		// Look for hard-coded value to clear the portal first
		109 110   		if(planeDistance > MAX_LAYER_DEPTH - 1.0) {
		110 111   			gl_FragColor = vec4(0, 0, 0, 0);
		111 112   		}
		112 113   		else {
		113 114   			gl_FragColor = vec4(result, 1);
		114 115   		}
		    116 + 	#endif
		115 117   
		116 118   	#endif
		117 119   }
		          '''
Changed resource pack "end_portal.vertex":
	Changed file "vanilla":
		Total line: 97 (+0, -2)
		        '''
		        ...
		25 25   		varying vec2 colorLookupUV;
		26 26   	#endif
		27 27   #endif
		28 28   
		29 29   #ifndef BYPASS_PIXEL_SHADER
		30    - 	varying vec4 color;
		   30 + 	varying lowp vec4 encodedPlane;
		31    - 	varying POS4 encodedPlane;
		32 31   	varying POS3 eyePositionInWorld;
		33 32   	varying POS3 surfacePositionInWorld;
		34 33   
		35 34   	#ifdef FOG
		36 35   		varying vec4 fogColor;
		        ...
		64 63   	POS4 pos = PROJ * (WORLDVIEW * worldPos);
		65 64   	gl_Position = pos;
		66 65   
		67 66   	#ifndef BYPASS_PIXEL_SHADER
		68 67   		///// End Portal Data
		69    - 		color = vec4(1,1,1,1);
		70 68   		colorLookupUV = TEXCOORD_0;
		71 69   		encodedPlane = COLOR; // See BlockTessellator::tessellateEndPortalInWorld(...)
		72 70   		eyePositionInWorld = VIEW_POS;
		73 71   		surfacePositionInWorld = worldPos.xyz + VIEW_POS;
		74 72   
		75 73   		///// Fog
		   74 + 		#ifdef FOG
		76    - 		#if defined(FOG)
		77 75   			#ifdef FANCY
		78 76   				vec3 relPos = -worldPos.xyz;
		79 77   				float cameraDepth = length(relPos);
		80 78   				#ifdef NEAR_WATER
		81 79   					cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		        ...
		        '''
Added resource pack "festive_foliage.fragment":
	file "festivemashup2016":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
			// version 300 code
		
			#ifdef MSAA_FRAMEBUFFER_ENABLED
				#define _centroid centroid
			#else
				#define _centroid
			#endif
		
			#ifndef BYPASS_PIXEL_SHADER
				#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
					_centroid in highp vec2 uv0;
					_centroid in highp vec2 uv1;
				#else
					_centroid in vec2 uv0;
					_centroid in vec2 uv1;
				#endif
			#endif
		
			#define varying in
			#define texture2D texture
			out vec4 FragColor;
			#define gl_FragColor FragColor
		#else
		
			// version 100 code
		
			#ifndef BYPASS_PIXEL_SHADER
				varying vec2 uv0;
				varying vec2 uv1;
			#endif
		#endif
		
		
		varying vec4 color;
		
		#ifdef FOG
		varying vec4 fogColor;
		#endif
		
		#ifdef NEAR_WATER
		varying float cameraDist;
		#endif
		
		#include "shaders/util.h"
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		uniform sampler2D TEXTURE_2;
		
		void main()
		{
			vec4 diffuse = texture2D( TEXTURE_0, uv0 );
		
			vec4 inColor = color;
			
		#ifdef SEASONS_FAR
			diffuse.a = 1.0;
			inColor.b = 1.0;
		#endif
		
			if(diffuse.a <= 0.0)
				discard;
			
			diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
		
		#ifndef SEASONS
		
			diffuse.rgb *= mix(vec3(1.0, 1.0, 1.0), inColor.rgb, diffuse.a);
			diffuse.a = 1.0;
			
		#else
			vec2 uv = inColor.xy;
			inColor.b = mix(0.0, color.b, diffuse.a);
			diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
			diffuse.rgb *= inColor.aaa;
			diffuse.a = 1.0;
		#endif
		
		#ifdef FOG
			diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		#endif
		
			gl_FragColor = diffuse;
		}
		'''
Removed resource pack "stitch_blit.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
			// version 300 code
		
			#ifdef MSAA_FRAMEBUFFER_ENABLED
				#define _centroid centroid
			#else
				#define _centroid
			#endif
		
			_centroid in vec2 uv;
			#define varying in
			#define texture2D texture
			out vec4 FragColor;
			#define gl_FragColor FragColor
		
		#else
			// version 100 code
			varying vec2 uv;
		#endif
		
		
		#ifndef BLUR_RADIUS
			#define BLUR_RADIUS 1 //base size
		#endif
		
		//HACK do not build higher res versions on gles2
		#if __VERSION__ < 300 && BLUR_RADIUS > 2
			#undef BLUR_RADIUS
			#define BLUR_RADIUS 2
		#endif
		
		const int R = BLUR_RADIUS / 2;
		
		uniform vec3 TEXTURE_DIMENSIONS;
		uniform vec4 CURRENT_COLOR;
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
		    #if BLUR_RADIUS == 1
		        vec4 color = texture2D( TEXTURE_0, uv);
		    #else
		  		vec2 pixelSide = vec2(1.0 / TEXTURE_DIMENSIONS.xy);
		
		        vec4 color = vec4(0.0);
		        for(int i = -R; i < R; ++i) {
		            for(int j = -R; j < R; ++j) {
		                vec2 sampleUV = uv + pixelSide * vec2(j, i);
		    			sampleUV = mod(sampleUV, vec2(1.0));
		    
		                color += texture2D( TEXTURE_0, sampleUV);
		            }
		        }
		
		        color /= float(BLUR_RADIUS * BLUR_RADIUS);
		    #endif
		
			color.rgb = mix(color.rgb, CURRENT_COLOR.rgb * color.rgb, color.a * CURRENT_COLOR.a);
		    if(CURRENT_COLOR.a > 0.0) {
		        //the alpha in diffuse is a mask
		        color.a = 1.0;
		    }
		
			gl_FragColor = color;
		}
		'''
Removed resource pack "stitch_blit.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid out vec2 uv;
		#else
		
		varying vec2 uv;
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute POS4 POSITION;
		attribute vec2 TEXCOORD_0;
		
		
		void main()
		{
			vec4 pos = POSITION;
			pos.z = 0.0;
		    gl_Position = WORLDVIEWPROJ * pos;
		
		    //position Z contains the padding % to apply
		    uv = TEXCOORD_0 + 2.0 * POSITION.z * (TEXCOORD_0 - vec2(0.5, 0.5));
		}
		'''