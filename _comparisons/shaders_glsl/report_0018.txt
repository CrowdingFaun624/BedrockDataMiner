Difference of "shaders_resource_packs" between "a0.14.1" and "a0.14.2".

Changed resource pack "cloud.vertex":
	Changed file "vanilla":
		Total line: 48 (+19, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   
		 3 18   uniform MAT4 WORLDVIEWPROJ;
		   19 + uniform MAT4 WORLD;
		 4 20   uniform float RENDER_DISTANCE;
		 5 21   uniform vec4 FOG_COLOR;
		 6 22   uniform vec4 CURRENT_COLOR;
		 7 23   
		 8 24   attribute mediump vec4 POSITION;
		        ...
		16 32   const float ambient = 0.7;
		17 33   
		18 34   void main()
		19 35   {
		20 36       POS4 pos = WORLDVIEWPROJ * POSITION;
		   37 + 	POS4 worldPos = WORLD * POSITION;
		21 38    	gl_Position = pos;
		22 39   
		23 40    	color = COLOR * CURRENT_COLOR;
		24 41   
		   42 +  	float depth = min(1.0, length(worldPos.xyz) / RENDER_DISTANCE);
		25    -  	float depth = pos.z / RENDER_DISTANCE;
		26 43    	float fog = max(depth - fogNear, 0.0);
		27 44   
		   45 + 	float alpha = color.a;
		   46 + 	color = mix(color, FOG_COLOR, (1.0 - fog));
		   47 +  	color.a = alpha * (1.0 - fog);
		28    -  	color.a *= 1.0 - fog;
		29    - 
		30 48   }
		        '''
Changed resource pack "color.fragment":
	Changed file "vanilla":
		Total line: 29 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   
		 3 24   varying vec4 color;
		 4 25   
		 5 26   void main()
		 6 27   {
		        ...
		        '''
Changed resource pack "color.vertex":
	Changed file "vanilla":
		Total line: 30 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   
		 3 18   uniform MAT4 WORLDVIEWPROJ;
		 4 19   
		 5 20   attribute mediump vec4 POSITION;
		 6 21   attribute vec4 COLOR;
		        ...
		        '''
Changed resource pack "color_ex.fragment":
	Changed file "vanilla":
		Total line: 31 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   
		 3 24   uniform vec4 CURRENT_COLOR;
		 4 25   
		 5 26   varying vec4 color;
		 6 27   
		        ...
		        '''
Changed resource pack "color_texture.fragment":
	Changed file "vanilla":
		Total line: 106 (+31, -2)
		          '''
		      1 + // __multiversion__
		      2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		      3 + 
		      4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		      5 + // attribute to in
		      6 + // varying to out when in vertex shaders or in when in fragment shaders
		      7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		      8 + // texture2D to texture
		      9 + #if __VERSION__ >= 300
		     10 + 
		     11 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		     12 + #define _centroid centroid
		     13 + #else
		     14 + #define _centroid
		     15 + #endif
		     16 + 
		     17 + // version 300 code
		     18 + _centroid in vec2 uv;
		     19 + 
		     20 + #define varying in
		     21 + #define texture2D texture
		     22 + out vec4 FragColor;
		     23 + #define gl_FragColor FragColor
		     24 + 
		     25 + #else
		     26 + 
		     27 + // version 100 code
		     28 + varying vec2 uv;
		     29 + 
		     30 + #endif
		     31 + 
		  1     - #version 100
		  2  32   uniform sampler2D TEXTURE_0;
		  3  33   uniform sampler2D TEXTURE_1;
		  4  34   uniform vec4 OVERLAY_COLOR;
		  5  35   
		  6  36   #ifdef ENABLE_VERTEX_TINT_MASK
		          ...
		 10  40   #ifdef GLINT
		 11  41   uniform vec4 GLINT_COLOR;
		 12  42   #endif
		 13  43   
		 14  44   varying vec4 color;
		 15     - varying vec2 uv;
		 16  45   
		 17  46   #ifdef ENABLE_FOG
		 18  47   varying vec4 fogColor;
		 19  48   #endif
		 20  49   
		          ...
		          '''
Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 80 (+24, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid out vec2 uv;
		   20 + 
		   21 + #else
		   22 + 
		   23 + varying vec2 uv;
		   24 + 
		   25 + #endif
		 1    - #version 100
		 2 26   
		 3 27   uniform MAT4 WORLDVIEWPROJ;
		 4 28   
		 5 29   uniform vec2 UV_OFFSET;
		 6 30   uniform vec2 UV_ROTATION;
		        ...
		12 36   attribute mediump vec4 POSITION;
		13 37   attribute vec4 COLOR;
		14 38   attribute vec2 TEXCOORD_0;
		15 39   
		16 40   varying vec4 color;
		17    - varying vec2 uv;
		18 41   
		19 42   #ifdef ENABLE_FOG
		20 43   varying vec4 fogColor;
		21 44   #endif
		22 45   
		        ...
		        '''
Changed resource pack "current_color.fragment":
	Changed file "vanilla":
		Total line: 33 (+27, -2)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		   23 + 
		   24 + uniform vec4 CURRENT_COLOR;
		 1    - #version 100
		 2 25   
		   26 + void main()
		   27 + {
		   28 + 	gl_FragColor = CURRENT_COLOR;
		 3    - uniform vec4 CURRENT_COLOR;
		 4 29   
		   30 + #ifdef FORCE_DEPTH_ZERO
		 5    - void main()
		 6    - {
		   31 + 	gl_FragDepth = 0.0;
		 7    - 	gl_FragColor = CURRENT_COLOR;
		   32 + #endif
		 8 33   }
		        '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 131 (+45, -3)
		          '''
		      1 + // __multiversion__
		      2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		      3 + 
		      4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		      5 + // attribute to in
		      6 + // varying to out when in vertex shaders or in when in fragment shaders
		      7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		      8 + // texture2D to texture
		      9 + #if __VERSION__ >= 300
		     10 + 
		     11 + // version 300 code
		     12 + #define varying in
		     13 + #define texture2D texture
		     14 + out vec4 FragColor;
		     15 + #define gl_FragColor FragColor
		     16 + 
		     17 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		     18 + #define _centroid centroid
		     19 + #else
		     20 + #define _centroid
		     21 + #endif
		     22 + 
		     23 + 
		     24 + #ifndef COLOR_BASED
		     25 + 	_centroid in vec2 uv;
		     26 + #endif
		     27 + 
		     28 + #else
		     29 + 
		     30 + // version 100 code
		     31 + #ifndef COLOR_BASED
		     32 + #if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		     33 + 	varying highp vec2 uv;
		     34 + #else
		     35 + 	varying vec2 uv;
		     36 + #endif
		     37 + #endif
		     38 + 
		     39 + #endif
		     40 + 
		     41 + #include "shaders/util.h"
		     42 + 
		  1     - #version 100
		  2  43   uniform sampler2D TEXTURE_0;
		  3  44   uniform sampler2D TEXTURE_1;
		  4  45   
		  5  46   varying vec4 light;
		  6  47   varying vec4 fogColor;
		  7  48   
		  8     - #ifndef COLOR_BASED
		  9     - 	varying vec2 uv;
		 10     - #endif
		 11  49   #ifdef USE_OVERLAY
		 12  50   	varying vec4 overlayColor;
		 13  51   #endif
		 14  52   
		 15  53   #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND)
		          ...
		 41  79   void main()
		 42  80   {
		 43  81   	vec4 color = vec4(1.0);
		 44  82   
		 45  83   #ifndef COLOR_BASED
		     84 + #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		     85 + 	color = texture2D( TEXTURE_0, uv );
		     86 + #else
		     87 + 	color = texture2D_AA(TEXTURE_0, uv);
		 46     - 	color = texture2D( TEXTURE_0, uv );
		     88 + #endif
		 47  89   
		 48  90   	#ifdef ALPHA_TEST
		 49  91   		if(NEEDS_DISCARD(color))
		 50  92   			discard;
		 51  93   	#endif
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 146 (+27, -2)
		          '''
		      1 + // __multiversion__
		      2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		      3 + 
		      4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		      5 + // attribute to in
		      6 + // varying to out when in vertex shaders or in when in fragment shaders
		      7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		      8 + // texture2D to texture
		      9 + #if __VERSION__ >= 300
		     10 + 
		     11 + #define attribute in
		     12 + #define varying out
		     13 + 
		     14 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		     15 + #define _centroid centroid
		     16 + #else
		     17 + #define _centroid
		     18 + #endif
		     19 + 
		     20 + _centroid out vec2 uv;
		     21 + 
		     22 + #else
		     23 + 
		     24 + varying vec2 uv;
		     25 + 
		     26 + #endif
		     27 + 
		  1     - #version 100
		  2  28   uniform MAT4 WORLDVIEWPROJ;
		  3  29   uniform MAT4 WORLD;
		  4  30   uniform vec4 TILE_LIGHT_COLOR;
		  5  31   uniform vec4 OVERLAY_COLOR;
		  6  32   uniform vec4 CHANGE_COLOR;
		          ...
		 19  45   
		 20  46   #ifdef COLOR_BASED
		 21  47   	attribute vec4 COLOR;
		 22  48   #endif
		 23  49   
		 24     - varying vec2 uv;
		 25  50   varying vec4 light;
		 26  51   varying vec4 fogColor;
		 27  52   
		 28  53   #ifdef USE_OVERLAY
		 29  54   varying vec4 overlayColor;
		          ...
		          '''
Changed resource pack "flat_white.fragment":
	Changed file "vanilla":
		Total line: 27 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   
		 3 24   void main()
		 4 25   {
		 5 26   	gl_FragColor = vec4(1.0);
		 6 27   }
		        '''
Changed resource pack "hologram_texture_stereo.fragment":
	Changed file "vanilla":
		Total line: 30 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   //This file is purely here to let the code compile. It is used only for HoloWall, which currently runs only on DX11 compatible devices
		 3 24   
		 4 25   
		 5 26   void main()
		 6 27   {
		        ...
		        '''
Changed resource pack "holoroom_inner_skirt.fragment":
	Changed file "vanilla":
		Total line: 30 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 24   
		 4 25   varying vec4 color;
		 5 26   
		 6 27   void main()
		        ...
		        '''
Changed resource pack "holoroom_inner_skirt.vertex":
	Changed file "vanilla":
		Total line: 31 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 18   
		 4 19   uniform MAT4 WORLDVIEWPROJ;
		 5 20   
		 6 21   attribute mediump vec4 POSITION;
		        ...
		        '''
Changed resource pack "holoroom_tableSurface.fragment":
	Changed file "vanilla":
		Total line: 30 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 24   
		 4 25   varying vec4 color;
		 5 26   
		 6 27   void main()
		        ...
		        '''
Changed resource pack "holoroom_tableSurface.vertex":
	Changed file "vanilla":
		Total line: 31 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 18   
		 4 19   uniform MAT4 WORLDVIEWPROJ;
		 5 20   
		 6 21   attribute mediump vec4 POSITION;
		        ...
		        '''
Changed resource pack "holoroom_terrain_endcap.fragment":
	Changed file "vanilla":
		Total line: 30 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 24   
		 4 25   varying vec4 color;
		 5 26   
		 6 27   void main()
		        ...
		        '''
Changed resource pack "holoroom_terrain_endcap.vertex":
	Changed file "vanilla":
		Total line: 31 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   //This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		 3 18   
		 4 19   uniform MAT4 WORLDVIEWPROJ;
		 5 20   
		 6 21   attribute mediump vec4 POSITION;
		        ...
		        '''
Changed resource pack "iteminhand.fragment":
	Changed file "vanilla":
		Total line: 35 (+23, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		   23 + 
		 1    - #version 100
		 2 24   uniform vec4 OVERLAY_COLOR;
		 3 25   
		 4 26   varying vec4 light;
		 5 27   
		 6 28   void main()
		        ...
		        '''
Changed resource pack "normal_as_color.vertex":
	Changed file "vanilla":
		Total line: 31 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   
		 3 18   uniform MAT4 WORLDVIEWPROJ;
		 4 19   
		 5 20   attribute mediump vec4 POSITION;
		 6 21   attribute vec4 NORMAL;
		        ...
		        '''
Changed resource pack "position.vertex":
	Changed file "vanilla":
		Total line: 24 (+14, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + #endif
		 1    - #version 100
		 2 16   
		 3 17   uniform MAT4 WORLDVIEWPROJ;
		 4 18   
		 5 19   attribute mediump vec4 POSITION;
		 6 20   
		        ...
		        '''
Changed resource pack "rain_snow.fragment":
	Changed file "vanilla":
		Total line: 63 (+23, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		   23 + 
		 1    - #version 100
		 2 24   uniform sampler2D TEXTURE_0;
		 3 25   uniform sampler2D TEXTURE_1;
		 4 26   
		 5 27   varying vec2 uv;
		 6 28   varying vec4 color;
		        ...
		        '''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 90 (+17, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		   17 + 
		 1    - #version 100
		 2 18   uniform MAT4	WORLDVIEWPROJ;
		 3 19   uniform vec4	POSITION_OFFSET;
		 4 20   uniform vec4	VELOCITY;
		 5 21   uniform vec4	ALPHA;
		 6 22   uniform vec4	VIEW_POSITION;
		        ...
		        '''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 104 (+54, -4)
		          '''
		      1 + // __multiversion__
		      2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		      3 + 
		      4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		      5 + // attribute to in
		      6 + // varying to out when in vertex shaders or in when in fragment shaders
		      7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		      8 + // texture2D to texture
		      9 + #if __VERSION__ >= 300
		     10 + 
		     11 + // version 300 code
		     12 + 
		     13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		     14 + #define _centroid centroid
		     15 + #else
		     16 + #define _centroid
		     17 + #endif
		     18 + 
		     19 + #if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		     20 + _centroid in highp vec2 uv0;
		     21 + _centroid in highp vec2 uv1;
		     22 + #else
		     23 + _centroid in vec2 uv0;
		     24 + _centroid in vec2 uv1;
		     25 + #endif
		     26 + 
		     27 + #define varying in
		     28 + #define texture2D texture
		     29 + out vec4 FragColor;
		     30 + #define gl_FragColor FragColor
		     31 + 
		     32 + #else
		     33 + 
		     34 + // version 100 code
		     35 + varying vec2 uv0;
		     36 + varying vec2 uv1;
		     37 + 
		     38 + #endif
		     39 + 
		     40 + 
		     41 + varying vec4 color;
		  1     - #version 100
		  2  42   
		     43 + #ifdef FOG
		  3     - varying vec2 uv0;
		  4     - varying vec2 uv1;
		     44 + varying vec4 fogColor;
		  5     - varying vec4 color;
		     45 + #endif
		  6  46   
		     47 + #ifdef NEAR_WATER
		  7     - #ifdef FOG
		     48 + varying float cameraDist;
		  8     - 	varying vec4 fogColor;
		  9  49   #endif
		     50 + 
		     51 + #include "shaders/util.h"
		 10  52   
		 11  53   uniform sampler2D TEXTURE_0;
		 12  54   uniform sampler2D TEXTURE_1;
		 13  55   uniform sampler2D TEXTURE_2;
		 14  56   
		 15  57   void main()
		 16  58   {
		     59 + #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		     60 + 	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
		     61 + #else
		     62 + 	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
		 17     - 	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
		     63 + #endif
		     64 + 
		 18  65   	vec4 inColor = color;
		 19  66   	
		 20  67   #ifdef SEASONS_FAR
		 21  68   	diffuse.a = 1.0;
		 22  69   	inColor.b = 1.0;
		          ...
		 30  77   	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
		 31  78   
		 32  79   #ifndef SEASONS
		 33  80   
		 34  81   #if !defined(ALPHA_TEST) && !defined(BLEND)
		     82 + 	diffuse.a = inColor.a;
		     83 + #elif defined(BLEND)
		     84 + 	diffuse.a *= inColor.a;
		 35     - 	diffuse.a = inColor.a;
		     85 + 	#ifdef NEAR_WATER
		     86 + 		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		     87 + 		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
		     88 + 	#endif
		 36     - #elif defined(BLEND)
		 37     - 	diffuse.a *= inColor.a;
		 38  89   #endif	
		 39  90   	
		 40  91   	diffuse.rgb *= inColor.rgb;
		 41  92   #else
		 42  93   	vec2 uv = inColor.xy;
		 43     - 	uv.y += 1.0 / 512.0;
		 44  94   	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
		 45  95   	diffuse.rgb *= inColor.aaa;
		 46  96   	diffuse.a = 1.0;
		 47  97   #endif
		 48  98   
		          ...
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 132 (+57, -9)
		          '''
		      1 + // __multiversion__
		      2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		      3 + 
		      4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		      5 + // attribute to in
		      6 + // varying to out when in vertex shaders or in when in fragment shaders
		      7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		      8 + // texture2D to texture
		      9 + #if __VERSION__ >= 300
		     10 + #define attribute in
		     11 + #define varying out
		     12 + 
		     13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		     14 + #define _centroid centroid
		     15 + #else
		     16 + #define _centroid
		     17 + #endif
		     18 + 
		     19 + _centroid out vec2 uv0;
		     20 + _centroid out vec2 uv1;
		     21 + 
		     22 + #else
		     23 + 
		     24 + varying vec2 uv0;
		     25 + varying vec2 uv1;
		     26 + 
		     27 + #endif
		     28 + 
		     29 + 
		     30 + varying vec4 color;
		     31 + #ifdef FOG
		     32 + 	varying vec4 fogColor;
		     33 + #endif
		     34 + 
		     35 + #ifdef NEAR_WATER
		     36 + 	varying float cameraDist;
		     37 + #endif
		     38 + 
		     39 + uniform MAT4 WORLDVIEW;
		     40 + uniform MAT4 PROJ;
		     41 + uniform vec4 FOG_COLOR;
		     42 + uniform vec2 FOG_CONTROL;
		     43 + uniform float RENDER_DISTANCE;
		     44 + uniform vec2 VIEWPORT_DIMENSION;
		     45 + uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		     46 + uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		     47 + uniform POS3 VIEW_POS;
		     48 + uniform float FAR_CHUNKS_DISTANCE;
		  1     - #version 100
		  2     - uniform MAT4 WORLDVIEWPROJ;
		     49 + 
		     50 + attribute POS4 POSITION;
		     51 + attribute vec4 COLOR;
		     52 + attribute vec2 TEXCOORD_0;
		     53 + attribute vec2 TEXCOORD_1;
		  3     - uniform vec4 FOG_COLOR;
		  4     - uniform vec2 FOG_CONTROL;
		  5     - uniform float RENDER_DISTANCE;
		  6     - uniform vec2 VIEWPORT_DIMENSION;
		     54 + 
		     55 + const float rA = 1.0;
		     56 + const float rB = 1.0;
		     57 + const vec3 UNIT_Y = vec3(0,1,0);
		     58 + const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		  7     - uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		  8     - uniform POS3 CHUNK_ORIGIN;
		  9     - uniform POS3 VIEW_POS;
		 10     - uniform float FAR_CHUNKS_DISTANCE;
		 11  59   
		     60 + void main()
		     61 + {
		 12     - attribute POS4 POSITION;
		     62 +     POS4 worldPos;
		     63 +     worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
		     64 +     worldPos.w = 1.0;
		 13     - attribute vec4 COLOR;
		 14     - attribute vec2 TEXCOORD_0;
		 15     - attribute vec2 TEXCOORD_1;
		 16  65   
		     66 +     // Transform to view space before projection instead of all at once to avoid floating point errors
		     67 +     // Not required for entities because they are already offset by camera translation before rendering
		 17     - varying vec2 uv0;
		     68 +     // World position here is calculated above and can get huge
		     69 +     POS4 pos = WORLDVIEW * worldPos;
		 18     - varying vec2 uv1;
		 19     - varying vec4 color;
		 20     - 
		     70 +     pos = PROJ * pos;
		     71 +     
		     72 +     gl_Position = pos;
		 21     - #ifdef FOG
		 22     - 	varying vec4 fogColor;
		 23     - #endif
		 24  73   
		     74 +     uv0 = TEXCOORD_0;
		 25     - const float rA = 1.0;
		 26     - const float rB = 1.0;
		     75 +     uv1 = TEXCOORD_1;
		     76 + 	color = COLOR;
		 27     - const vec3 UNIT_Y = vec3(0,1,0);
		 28     - const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		 29  77   
		 30     - void main()
		 31     - {
		 32     -     POS4 pos = WORLDVIEWPROJ * POSITION;
		     78 + ///// find distance from the camera
		 33     -     gl_Position = pos;
		 34  79   
		     80 + #if defined(FOG) || defined(NEAR_WATER)
		     81 + 		#ifdef FANCY
		 35     -     uv0 = TEXCOORD_0;
		     82 + 			vec3 relPos = VIEW_POS - worldPos.xyz;
		     83 + 			float cameraDepth = length(relPos);
		     84 + 			#ifdef NEAR_WATER
		     85 + 				cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		     86 + 			#endif
		     87 + 		#else
		     88 + 			#ifdef NEAR_WATER
		     89 + 				vec3 relPos = VIEW_POS - worldPos.xyz;
		     90 + 				float camDist = length(relPos);
		 36     -     uv1 = TEXCOORD_1;
		 37     - 	color = COLOR;
		 38     - 
		 39     - ///// find distance from the camera
		 40     - 
		 41     - #if defined(FOG) || defined(NEAR_WATER)
		 42     - 		#ifdef FANCY
		 43     - 			vec3 relPos = VIEW_POS - (POSITION.xyz + CHUNK_ORIGIN);
		 44     - 			float cameraDepth = length(relPos);
		     91 + 				cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		     92 + 			#endif
		 45     - 		#else
		     93 + 
		 46  94   			float cameraDepth = pos.z;
		 47  95   		#endif
		 48  96   #endif
		 49  97   
		 50  98   ///// apply fog
		          ...
		          '''
Changed resource pack "sky.vertex":
	Changed file "vanilla":
		Total line: 34 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   
		 3 18   uniform MAT4 WORLDVIEWPROJ;
		 4 19   uniform vec4 FOG_COLOR;
		 5 20   uniform vec4 CURRENT_COLOR;
		 6 21   
		        ...
		        '''
Added resource pack "stars.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		
		varying vec4 color;
		
		uniform vec4 CURRENT_COLOR;
		
		void main()
		{
			gl_FragColor = vec4(color.rgb * CURRENT_COLOR.rgb * color.a, color.a);
		}
		'''
Changed resource pack "text.fragment":
	Changed file "vanilla":
		Total line: 46 (+32, -2)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid in vec2 uv;
		   20 + 
		   21 + #define varying in
		   22 + #define texture2D texture
		   23 + out vec4 FragColor;
		   24 + #define gl_FragColor FragColor
		   25 + 
		   26 + #else
		   27 + 
		   28 + // version 100 code
		   29 + varying vec2 uv;
		   30 + 
		   31 + #endif
		   32 + 
		 1    - #version 100
		 2 33   uniform sampler2D TEXTURE_0;
		 3 34   uniform vec4 DARKEN;
		 4 35   
		 5 36   varying vec4 color;
		 6    - varying vec2 uv;
		 7 37   
		 8 38   void main()
		 9 39   {
		10 40   	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		11 41   
		        ...
		        '''
Changed resource pack "texture.fragment":
	Changed file "vanilla":
		Total line: 45 (+29, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid in vec2 uv;
		   20 + 
		   21 + #define varying in
		   22 + #define texture2D texture
		   23 + out vec4 FragColor;
		   24 + #define gl_FragColor FragColor
		   25 + 
		   26 + #else
		   27 + 
		   28 + // version 100 code
		 1    - #version 100
		   29 + varying vec2 uv;
		 2 30   
		   31 + #endif
		 3    - varying vec2 uv;
		 4 32   
		 5 33   uniform sampler2D TEXTURE_0;
		 6 34   
		 7 35   void main()
		 8 36   {
		        ...
		        '''
Added resource pack "texture_blend.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid in vec2 uv;
		_centroid in vec2 uv1;
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		varying vec2 uv;
		varying vec2 uv1;
		
		#endif
		
		uniform sampler2D TEXTURE_0;
		uniform vec4 CURRENT_COLOR;
		
		void main()
		{
			vec4 color = texture2D( TEXTURE_0, uv );
			vec4 color1 = texture2D( TEXTURE_0, uv1 );
		
			if (color.a < 0.01)
			{
				color = color1;
			}
			else if (color.b > 0.01) {
				color = mix(color, color1, CURRENT_COLOR.a);
			}
		
			gl_FragColor = color;
		}
		'''
Changed resource pack "texture_ccolor.fragment":
	Changed file "vanilla":
		Total line: 46 (+29, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid in vec2 uv;
		   20 + 
		   21 + #define varying in
		   22 + #define texture2D texture
		   23 + out vec4 FragColor;
		   24 + #define gl_FragColor FragColor
		   25 + 
		   26 + #else
		   27 + 
		   28 + // version 100 code
		 1    - #version 100
		   29 + varying vec2 uv;
		 2 30   
		   31 + #endif
		 3    - varying vec2 uv;
		 4 32   
		 5 33   uniform vec4 CURRENT_COLOR;
		 6 34   uniform sampler2D TEXTURE_0;
		 7 35   
		 8 36   void main()
		        ...
		        '''
Changed resource pack "texture_cutout.fragment":
	Changed file "vanilla":
		Total line: 43 (+29, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid in vec2 uv;
		   20 + 
		   21 + #define varying in
		   22 + #define texture2D texture
		   23 + out vec4 FragColor;
		   24 + #define gl_FragColor FragColor
		   25 + 
		   26 + #else
		   27 + 
		   28 + // version 100 code
		 1    - #version 100
		 2 29   varying vec2 uv;
		   30 + 
		   31 + #endif
		 3 32   
		 4 33   uniform vec4 CURRENT_COLOR;
		 5 34   uniform sampler2D TEXTURE_0;
		 6 35   
		 7 36   void main()
		        ...
		        '''
Added resource pack "util.h":
	file "vanilla":
		'''
		#if __VERSION__ >= 300
		
		uniform highp vec2 ATLAS_FACE_SIZE;
		uniform highp vec3 TEXTURE_DIMENSIONS;
		
		highp vec2 clampUVsForMipLevel(in highp vec2 uv, in highp float mipLevel, in highp float textureWidth, in highp float textureHeight)
		{
			highp vec2 uvClamped;
		
			// Clamp UVs to atlas face so that neighboring faces don't bleed across
			highp vec2 numAtlasFaces = vec2(textureWidth, textureHeight) / ATLAS_FACE_SIZE;
			highp vec2 faceUV = fract(uv * numAtlasFaces);
			uvClamped = (uv * numAtlasFaces) - faceUV;
			highp vec2 halfTexel = vec2(.5f, .5f) / (ATLAS_FACE_SIZE / pow(2.0f, mipLevel));
			faceUV = clamp(faceUV, halfTexel, vec2(1.0f, 1.0f) - halfTexel);
			uvClamped += faceUV;
			uvClamped /= numAtlasFaces;
		
			return uvClamped;
		}
		
		vec4 texture2D_AA(in sampler2D tex, in highp vec2 uv)
		{
			// Texture antialiasing
			//
			// The texture coordinates are modified so that the bilinear filter will be one pixel wide instead of one texel wide. 
		
			// Get the UV deltas
			highp vec2 dUVdx = dFdx(uv) * TEXTURE_DIMENSIONS.xy;
			highp vec2 dUVdy = dFdy(uv) * TEXTURE_DIMENSIONS.xy;
			highp vec2 dU = vec2(dUVdx.x, dUVdy.x);
			highp vec2 dV = vec2(dUVdx.y, dUVdy.y);
		
			highp float duUV = sqrt(dot(dU, dU));
			highp float dvUV = sqrt(dot(dV, dV));
		
			// Determine mip map LOD
			highp float d = max(dot(dUVdx, dUVdx), dot(dUVdy, dUVdy));
			highp float mipLevel = .5f * log2(d);
			mipLevel = mipLevel + .5f;	// Mip bias to reduce aliasing
			mipLevel = clamp(mipLevel, 0.0f, TEXTURE_DIMENSIONS.z);
		
			highp vec2 uvModified;
			if( mipLevel >= 1.0f)
			{
				uvModified = uv;
			}
			else
			{
				// First scale the uv so that each texel has a uv range of [0,1]
				highp vec2 texelUV = fract(uv * TEXTURE_DIMENSIONS.xy);
		
				// Initially set uvModified to the floor of the texel position
				uvModified = (uv * TEXTURE_DIMENSIONS.xy) - texelUV;
		
				// Modify the texelUV to push the uvs toward the edges.
				//          |                 |       |                   |
				//          |         _/      |       |           /       |
				//  Change  | U     _/        |  to   | U     ___/        |
				//          |     _/          |       |     /             |
				//          |    /            |       |    /              |
				//          |         X       |       |         X         |
				highp float scalerU = 1.0f / (duUV);
				highp float scalerV = 1.0f / (dvUV);
				highp vec2 scaler = max(vec2(scalerU, scalerV), 1.0f);
				texelUV = clamp(texelUV * scaler, 0.0f, .5f) + clamp(texelUV*scaler - (scaler - .5f), 0.0f, .5f);
				uvModified += texelUV;
				uvModified /= TEXTURE_DIMENSIONS.xy;
			}
		#ifdef ATLAS_TEXTURE
			//Clamp UVs to atlas face
		
			highp float mipLevel0 = clamp(floor(mipLevel), 0.0f, TEXTURE_DIMENSIONS.z);
			highp float mipLevel1 = clamp(floor(mipLevel+1.0f), 0.0f, TEXTURE_DIMENSIONS.z);
		
			highp vec2 uvLOD0 = clampUVsForMipLevel(uvModified, mipLevel0, TEXTURE_DIMENSIONS.x, TEXTURE_DIMENSIONS.y);
			highp vec2 uvLOD1 = clampUVsForMipLevel(uvModified, mipLevel1, TEXTURE_DIMENSIONS.x, TEXTURE_DIMENSIONS.y);
		
			vec4 diffuse0 = textureLod(tex, uvLOD0, mipLevel0);
			vec4 diffuse1 = textureLod(tex, uvLOD1, mipLevel1);
		
			vec4 diffuse = mix(diffuse0, diffuse1, fract(mipLevel));
		#else
			vec4 diffuse = texture2D(tex, uvModified);
		#endif
			return diffuse;
		
		}
		
		#endif //__VERSION__ >= 300
		'''
Changed resource pack "uv.vertex":
	Changed file "vanilla":
		Total line: 38 (+24, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid out vec2 uv;
		   20 + 
		   21 + #else
		   22 + 
		   23 + varying vec2 uv;
		   24 + 
		   25 + #endif
		 1    - #version 100
		 2 26   
		 3 27   uniform MAT4 WORLDVIEWPROJ;
		 4 28   
		   29 + attribute POS4 POSITION;
		 5    - attribute mediump vec4 POSITION;
		 6 30   attribute vec2 TEXCOORD_0;
		 7 31   
		 8    - varying vec2 uv;
		 9 32   
		10 33   void main()
		11 34   {
		12 35       gl_Position = WORLDVIEWPROJ * POSITION;
		13 36   
		        ...
		        '''
Changed resource pack "uv_as_color.fragment":
	Changed file "vanilla":
		Total line: 29 (+23, -1)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		   23 + 
		 1    - #version 100
		 2 24   varying vec2 uv;
		 3 25   
		 4 26   void main()
		 5 27   {
		 6 28   	gl_FragColor = vec4(uv.x, uv.y,0.0,1.0);
		        ...
		        '''
Added resource pack "uv_blend.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid out vec2 uv;
		_centroid out vec2 uv1;
		
		#else
		
		varying vec2 uv;
		varying vec2 uv1;
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute POS4 POSITION;
		attribute vec2 TEXCOORD_0;
		attribute vec2 TEXCOORD_1;
		
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = TEXCOORD_0;
		    uv1 = TEXCOORD_1;
		}
		'''
Changed resource pack "uv_scale.vertex":
	Changed file "vanilla":
		Total line: 38 (+24, -2)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #ifdef MSAA_FRAMEBUFFER_ENABLED
		   14 + #define _centroid centroid
		   15 + #else
		   16 + #define _centroid
		   17 + #endif
		   18 + 
		   19 + _centroid out vec2 uv;
		   20 + 
		   21 + #else
		   22 + 
		   23 + varying vec2 uv;
		   24 + 
		   25 + #endif
		 1    - #version 100
		 2 26   
		 3 27   uniform MAT4 WORLDVIEWPROJ;
		 4 28   uniform vec2 GLINT_UV_SCALE;
		 5 29   
		 6 30   attribute mediump vec4 POSITION;
		 7 31   attribute vec2 TEXCOORD_0;
		 8    - 
		 9    - varying vec2 uv;
		10 32   
		11 33   void main()
		12 34   {
		13 35       gl_Position = WORLDVIEWPROJ * POSITION;
		14 36   
		        ...
		        '''
Changed resource pack "weather.fragment":
	Changed file "vanilla":
		Total line: 50 (+21, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + 
		   11 + // version 300 code
		   12 + 
		   13 + #define varying in
		   14 + #define texture2D texture
		   15 + out vec4 FragColor;
		   16 + #define gl_FragColor FragColor
		   17 + 
		   18 + #else
		   19 + 
		   20 + // version 100 code
		   21 + 
		   22 + #endif
		 1    - #version 100
		 2 23   
		 3 24   varying vec2 uv0;
		 4 25   varying vec2 uv1;
		 5 26   varying vec4 color;
		 6 27   
		        ...
		        '''
Changed resource pack "weather.vertex":
	Changed file "vanilla":
		Total line: 37 (+15, -0)
		        '''
		    1 + // __multiversion__
		    2 + // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		    3 + 
		    4 + // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		    5 + // attribute to in
		    6 + // varying to out when in vertex shaders or in when in fragment shaders
		    7 + // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		    8 + // texture2D to texture
		    9 + #if __VERSION__ >= 300
		   10 + #define attribute in
		   11 + #define varying out
		   12 + 
		   13 + #else
		   14 + 
		   15 + 
		   16 + #endif
		 1    - #version 100
		 2 17   
		 3 18   uniform MAT4 WORLDVIEWPROJ;
		 4 19   
		 5 20   attribute mediump vec4 POSITION;
		 6 21   attribute vec4 COLOR;
		        ...
		        '''