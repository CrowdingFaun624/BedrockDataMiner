Difference of "shaders_resource_packs" between "1.16.40" and "1.16.100.50" (beta of "1.16.100").
Unable to create data files for 4 files between: "1.16.42", "1.16.50", "1.16.60", "1.16.61"

Changed resource pack "hb_text.fragment":
	Changed file "vanilla":
		Total line: 42 (+20, -3)
		        '''
		        ...
		 4  4   // some numbers and values seem arbitrary or "magic".
		 5  5   
		 6  6   #include "fragmentVersionSimple.h"
		 7  7   #include "uniformMacro.h"
		 8  8   
		    9 + #include "uniformUITextPSConstants.h"
		   10 + 
		   11 + varying vec4 ColorOut;
		   12 + varying vec4 AdditionalOut;
		   13 + // We need this here even if we do not use it as some drivers require
		   14 + // the verying variables to match between the vertex and fragment shaders.
		   15 + varying vec3 ScreenNormalPosition;
		   16 + 
		   17 + LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
		   18 + 
		   19 + float GetLuminance(vec3 color) {
		   20 + 	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		   21 + }
		   22 + 
		   23 + void main() {
		   24 + 	float dfValue = texture2D(TEXTURE_1, AdditionalOut.xy).r;
		 9    - varying vec4 ColorOut;
		10    - varying vec4 AdditionalOut;
		11    - // We need this here even if we do not use it as some drivers require
		12    - // the verying variables to match between the vertex and fragment shaders.
		13    - varying vec3 ScreenNormalPosition;
		14 25   
		   26 + 	if (BITMAP >= 0.5) {
		   27 + 		vec4 fragColor = vec4(dfValue);
		15    - LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
		16 28   
		   29 + 		const float center = 0.4;
		   30 + 		const float radius = 0.1;
		   31 + 		fragColor = smoothstep(center - radius, center + radius, fragColor);
		   32 + 	
		   33 + 		fragColor = ColorOut * fragColor;
		17    - float GetLuminance(vec3 color) {
		18    - 	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		19    - }
		20 34   
		   35 + 		gl_FragColor = fragColor;		
		21    - void main() {
		   36 + 	} else {
		   37 + 		float lum = 1.45 - GetLuminance(ColorOut.xyz);
		22    - 	float dfValue = texture2D(TEXTURE_1, AdditionalOut.xy).r;
		23    - 	float lum = 1.45 - GetLuminance(ColorOut.xyz);
		   38 + 		vec4 fragColor = ColorOut * pow(dfValue, lum);
		   39 + 
		   40 + 		gl_FragColor = fragColor;		
		24    - 	gl_FragColor = ColorOut * pow(dfValue, lum);
		   41 + 	}
		25 42   }
		        '''
Added resource pack "uniformUITextPSConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_UI_TEXT_PS_CONSTANTS_H
		#define _UNIFORM_UI_TEXT_PS_CONSTANTS_H
		
		#include "uniformMacro.h"
		
		#ifdef MCPE_PLATFORM_NX
		#extension GL_ARB_enhanced_layouts : enable
		layout(binding = 3) uniform UITextPSConstants {
		#endif
		// BEGIN_UNIFORM_BLOCK(UITextPSConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		UNIFORM float BITMAP;
		END_UNIFORM_BLOCK
		
		#endif
		'''