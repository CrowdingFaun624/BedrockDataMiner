Difference of "shaders_resource_packs" between "a0.16.0_build1" (beta of "a0.16.0") and "a0.16.0_build3" (beta of "a0.16.0").
Unable to create data files for 1 file between: "a0.16.0_build2"

Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 80 (+10, -21)
		          '''
		          ...
		 29  29   uniform vec2 UV_OFFSET;
		 30  30   uniform vec2 UV_ROTATION;
		 31  31   uniform vec2 GLINT_UV_SCALE;
		 32  32   uniform vec4 FOG_COLOR;
		 33  33   uniform vec2 FOG_CONTROL;
		 34     - uniform int FOG_MODE;
		 35     - uniform float RENDER_DISTANCE;
		 36     - uniform vec4 TILE_LIGHT_COLOR;
		 37     - 
		 38     - attribute mediump vec4 POSITION;
		 39     - attribute vec4 COLOR;
		 40     - attribute vec2 TEXCOORD_0;
		 41     - 
		 42     - varying vec4 color;
		 43     - 
		 44     - #ifdef ENABLE_FOG
		 45     - varying vec4 fogColor;
		     34 + uniform float RENDER_DISTANCE;
		 46     - #endif
		 47  35   
		     36 + attribute mediump vec4 POSITION;
		 48     - #ifdef GLINT
		     37 + attribute vec4 COLOR;
		     38 + attribute vec2 TEXCOORD_0;
		 49     - varying vec2 layer1UV;
		 50     - varying vec2 layer2UV;
		 51  39   
		 52     - vec2 calculateLayerUV(float offset, float rotation) {
		 53     - 	vec2 uv = TEXCOORD_0;
		 54     - 	uv -= 0.5;
		     40 + varying vec4 color;
		     41 + 
		     42 + #ifdef ENABLE_FOG
		     43 + varying vec4 fogColor;
		     44 + #endif
		 55     - 	float rsin = sin(rotation);
		 56     - 	float rcos = cos(rotation);
		 57     - 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		 58     - 	uv.x += offset;
		 59     - 	uv += 0.5;
		 60  45   
		     46 + #ifdef GLINT
		     47 + varying vec2 layer1UV;
		 61     - 	return uv * GLINT_UV_SCALE;
		 62     - }
		     48 + varying vec2 layer2UV;
		 63     - #endif
		 64  49   
		     50 + vec2 calculateLayerUV(float offset, float rotation) {
		     51 + 	vec2 uv = TEXCOORD_0;
		     52 + 	uv -= 0.5;
		     53 + 	float rsin = sin(rotation);
		 65     - void main()
		 66     - {
		     54 + 	float rcos = cos(rotation);
		     55 + 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		     56 + 	uv.x += offset;
		     57 + 	uv += 0.5;
		 67     - 	gl_Position = WORLDVIEWPROJ * POSITION;
		 68     - 
		 69     - 	color = COLOR;
		 70     - 	uv = TEXCOORD_0;
		 71  58   
		     59 + 	return uv * GLINT_UV_SCALE;
		 72     - #ifdef ENABLE_FOG
		 73     - 	//fog
		     60 + }
		     61 + #endif
		     62 + 
		     63 + void main()
		     64 + {
		     65 + 	gl_Position = WORLDVIEWPROJ * POSITION;
		 74     -     fogColor.rgb = FOG_COLOR.rgb;
		 75     - 	if(FOG_MODE == 0) {
		 76     - 		fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 77     - 	}
		 78     - 	else {
		 79     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		     66 + 
		     67 + 	color = COLOR;
		     68 + 	uv = TEXCOORD_0;
		 80     - 	}
		 81     - #endif
		 82  69   
		     70 + #ifdef ENABLE_FOG
		     71 + 	//fog
		     72 +     fogColor.rgb = FOG_COLOR.rgb;
		     73 +     fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 83     - #ifdef USE_LIGHTING
		 84     - 	color *= vec4(TILE_LIGHT_COLOR.xyz, 1.0);
		 85  74   #endif
		 86  75   
		 87  76   #ifdef GLINT
		 88  77   	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		 89  78   	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 144 (+0, -6)
		          '''
		          ...
		 27  27   uniform vec4 OVERLAY_COLOR;
		 28  28   uniform vec4 CHANGE_COLOR;
		 29  29   uniform vec4 GLINT_COLOR;
		 30  30   uniform vec4 FOG_COLOR;
		 31  31   uniform vec2 FOG_CONTROL;
		 32     - uniform int FOG_MODE;
		 33  32   uniform float RENDER_DISTANCE;
		 34  33   uniform vec4 UV_ANIM;
		 35  34   uniform vec2 UV_OFFSET;
		 36  35   uniform vec2 UV_ROTATION;
		 37  36   uniform vec2 GLINT_UV_SCALE;
		          ...
		138 137       tileLightColor = TILE_LIGHT_COLOR;
		139 138   #endif
		140 139   
		141 140   
		142 141   //fog
		143     -     fogColor.rgb = FOG_COLOR.rgb;
		144     - 	if(FOG_MODE == 0) {
		145     - 		fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		146     - 	}
		    142 +     fogColor.rgb = FOG_COLOR.rgb;
		    143 +     fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		147     - 	else {
		148     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		149     - 	}
		150 144   }
		          '''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 98 (+15, -21)
		          '''
		          ...
		 27  27   uniform vec4	FORWARD;
		 28  28   uniform vec4	UV_INFO;
		 29  29   uniform vec4	PARTICLE_BOX;
		 30  30   uniform vec4	FOG_COLOR;
		 31  31   uniform vec2	FOG_CONTROL;
		 32     - uniform int		FOG_MODE;
		 33     - uniform float	RENDER_DISTANCE;
		 34     - 
		 35     - attribute mediump vec4 POSITION;
		 36     - attribute vec2 TEXCOORD_0;
		     32 + uniform float	RENDER_DISTANCE;
		 37     - attribute vec4 COLOR;
		 38  33   
		 39     - varying vec2 uv;
		     34 + attribute mediump vec4 POSITION;
		     35 + attribute vec2 TEXCOORD_0;
		     36 + attribute vec4 COLOR;
		 40     - varying vec4 color;
		 41     - varying vec4 worldPosition;
		 42     - varying vec4 fogColor;
		 43  37   
		     38 + varying vec2 uv;
		 44     - void main()
		 45     - {
		     39 + varying vec4 color;
		     40 + varying vec4 worldPosition;
		     41 + varying vec4 fogColor;
		 46     - 	float spriteSelector = COLOR.x*255.0;
		 47     - 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		 48     - 	uv.x += spriteSelector * UV_INFO.z;
		 49  42   
		 50     - 	vec3 pos = POSITION.xyz;
		 51     - 		
		 52     - 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		 53     - 	pos.xyz += POSITION_OFFSET.xyz;
		     43 + void main()
		     44 + {
		     45 + 	float spriteSelector = COLOR.x*255.0;
		     46 + 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		     47 + 	uv.x += spriteSelector * UV_INFO.z;
		     48 + 
		     49 + 	vec3 pos = POSITION.xyz;
		     50 + 		
		 54     - 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		 55     - 	
		 56     - 	// centre box on origin
		 57     - 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		 58     - 	
		 59     - 	// push along view vector so box is positioned more infront of camera
		 60     - 	pos.xyz += FORWARD.xyz;
		 61     - 	
		 62     - 	// get world position
		     51 + 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		     52 + 	pos.xyz += POSITION_OFFSET.xyz;
		     53 + 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		     54 + 	
		     55 + 	// centre box on origin
		     56 + 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		 63     - 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		 64     - 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		 65     - 
		 66     - 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		 67     - 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		 68     - 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		 69  57   	
		     58 + 	// push along view vector so box is positioned more infront of camera
		 70     - 	// get 2d vector in screenspace between top and bottom of particle
		     59 + 	pos.xyz += FORWARD.xyz;
		 71     - 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 72  60   	
		     61 + 	// get world position
		     62 + 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		 73     - 	// get 2d vector perpendicular to velocity
		     63 + 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		 74     - 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 75  64   
		     65 + 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		     66 + 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		 76     - 	// choose either the top or bottom projected position using uv.y
		     67 + 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		     68 + 	
		     69 + 	// get 2d vector in screenspace between top and bottom of particle
		     70 + 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 77     - 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		 78     - 	 	
		 79     - 	// offset the position of each side of the particle using uv.x 
		 80     - 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		 81  71   	
		     72 + 	// get 2d vector perpendicular to velocity
		     73 + 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 82     - 	color = ALPHA.rgba;
		 83  74   
		     75 + 	// choose either the top or bottom projected position using uv.y
		     76 + 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		     77 + 	 	
		     78 + 	// offset the position of each side of the particle using uv.x 
		     79 + 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		     80 + 	
		 84     - #if defined(COMFORT_MODE) && defined(VR_MODE)
		 85     - 	if (gl_Position.z < 2.0) {
		 86     - 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		 87     - 	}
		     81 + 	color = ALPHA.rgba;
		 88     - #endif
		 89  82   
		     83 + #if defined(COMFORT_MODE) && defined(VR_MODE)
		 90     - 	//fog
		 91     -     fogColor.rgb = FOG_COLOR.rgb;
		     84 + 	if (gl_Position.z < 2.0) {
		     85 + 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		 92     - 	if(FOG_MODE == 0) {
		 93     - 		fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 94  86   	}
		     87 + #endif
		     88 + 
		     89 + 	//fog
		     90 +     fogColor.rgb = FOG_COLOR.rgb;
		     91 +     fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 95     - 	else {
		 96     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		 97     - 	}
		 98  92   
		 99  93   	worldPositionBottom.xz *= 1.0 / 64.0;	// Scale by 1/TextureDimensions to get values between
		100  94   	worldPositionBottom.xz += 0.5;			// Offset so that center of view is in the center of occlusion texture
		101  95   	worldPositionBottom.y += VIEW_POSITION.y - 0.5;
		102  96   	worldPositionBottom.y *= 1.0/255.0;
		          ...
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 139 (+0, -6)
		          '''
		          ...
		 42  42   uniform MAT4 WORLDVIEW;
		 43  43   uniform MAT4 PROJ;
		 44  44   #endif
		 45  45   uniform vec4 FOG_COLOR;
		 46  46   uniform vec2 FOG_CONTROL;
		 47     - uniform int FOG_MODE;
		 48  47   uniform float RENDER_DISTANCE;
		 49  48   uniform vec2 VIEWPORT_DIMENSION;
		 50  49   uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		 51  50   uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		 52  51   uniform POS3 VIEW_POS;
		          ...
		109 108   	float len = cameraDepth / RENDER_DISTANCE;
		110 109   	#ifdef ALLOW_FADE
		111 110   		len += CURRENT_COLOR.r;
		112 111   	#endif
		113 112   
		114     -     fogColor.rgb = FOG_COLOR.rgb;
		115     - 	if(FOG_MODE == 0) {
		116     - 		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		117     - 	}
		    113 +     fogColor.rgb = FOG_COLOR.rgb;
		    114 + 	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		118     - 	else {
		119     - 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * cameraDepth), 0.0, 1.0);
		120     - 	}
		121 115   #endif
		122 116   
		123 117   ///// water magic
		124 118   #ifdef NEAR_WATER
		125 119   	#ifdef FANCY  /////enhance water
		          ...
		          '''