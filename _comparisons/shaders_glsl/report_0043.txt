Difference of "shaders_resource_packs" between "1.1.7" and "1.2.0.2" (beta of "1.2.0").

Added resource pack "banner.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		
		uniform sampler2D TEXTURE_0;
		
		#ifdef ENABLE_FOG
		varying vec4 fogColor;
		#endif
		
		#ifdef ENABLE_LIGHT
		varying vec4 light;
		#endif
		
		#ifndef DISABLE_TINTING
		varying vec4 color;
		#endif
		
		void main()
		{
			vec4 diffuse = texture2D(TEXTURE_0, uv);
		
		#ifndef DISABLE_TINTING
			diffuse.a = mix(diffuse.r * diffuse.a, diffuse.a, color.a);
			diffuse.rgb *= color.rgb;
		#endif
		
		#ifdef ENABLE_LIGHT
			diffuse.rgb *= light.rgb;
		#endif
		
		#ifdef ENABLE_FOG
			//apply fog
			diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		#endif
		
			gl_FragColor = diffuse;
		}
		'''
Added resource pack "banner.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionCentroidUV.h"
		
		#include "shaders/uniformWorldConstants.h"
		#include "shaders/uniformEntityConstants.h"
		#include "shaders/uniformPerFrameConstants.h"
		#include "shaders/uniformBannerConstants.h"
		
		attribute mediump vec4 POSITION;
		attribute vec2 TEXCOORD_0;
		attribute vec4 NORMAL;
		attribute vec4 COLOR;
		
		#ifdef ENABLE_LIGHT
			varying vec4 light;
		#endif
			
			varying vec4 color;
			
		#ifdef ENABLE_FOG
			varying vec4 fogColor;
		#endif
		
		const float AMBIENT = 0.45;
		
		const float XFAC = -0.1;
		const float ZFAC = 0.1;
		
		float lightIntensity() {
		#ifdef FANCY
		    vec3 N = normalize( WORLD * NORMAL ).xyz;
		
		    N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		
		    //take care of double sided polygons on materials without culling
		#ifdef FLIP_BACKFACES
		    vec3 viewDir = normalize((WORLD * POSITION).xyz);
		    if( dot(N, viewDir) > 0.0 )
		        N *= -1.0;
		#endif
		
		    float yLight = (1.0+N.y) * 0.5;
		    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		#else
		    return 1.0;
		#endif
		}
		
		
		void main()
		{
		    POS4 pos = WORLDVIEWPROJ * POSITION;
		    gl_Position = pos;
		
		#ifdef ENABLE_LIGHT
		    float L = lightIntensity();
		    light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		#endif
		   
			int frameIndex = int((COLOR.a * 255.0) + 0.5);
			uv.xy = TEXCOORD_0.xy + BANNER_UV_OFFSETS[frameIndex].xy;
		
		#ifndef DISABLE_TINTING
			color = BANNER_COLORS[frameIndex];
			color.a = 1.0;
			if (frameIndex > 0) {
				color.a = 0.0;
			}
		#endif
		    
		#ifdef ENABLE_FOG
		//fog
		    fogColor.rgb = FOG_COLOR.rgb;
		    fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		#endif
		}
		'''
Changed resource pack "cloud.vertex":
	Changed file "vanilla":
		Total line: 32 (+0, -14)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		15    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		16    - #endif
		17  5   
		18    - uniform MAT4 WORLDVIEWPROJ;
		19    - uniform MAT4 WORLD;
		    6 + #include "shaders/uniformWorldConstants.h"
		    7 + #include "shaders/uniformPerFrameConstants.h"
		    8 + #include "shaders/uniformShaderConstants.h"
		20    - uniform float RENDER_DISTANCE;
		21    - uniform vec4 FOG_COLOR;
		22    - uniform vec4 CURRENT_COLOR;
		23  9   
		24 10   attribute mediump vec4 POSITION;
		25 11   attribute vec4 COLOR;
		26 12   
		27 13   varying vec4 color;
		        ...
		        '''
Changed resource pack "color.fragment":
	Changed file "vanilla":
		Total line: 11 (+0, -18)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		24  6   varying vec4 color;
		25  7   
		26  8   void main()
		27  9   {
		        ...
		        '''
Changed resource pack "color.vertex":
	Changed file "vanilla":
		Total line: 18 (+1, -13)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		15    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		16    - #endif
		17  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		18    - uniform MAT4 WORLDVIEWPROJ;
		19  7   
		20  8   attribute mediump vec4 POSITION;
		21  9   attribute vec4 COLOR;
		22 10   
		23 11   varying vec4 color;
		        ...
		        '''
Changed resource pack "color_ex.fragment":
	Changed file "vanilla":
		Total line: 13 (+1, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		24    - uniform vec4 CURRENT_COLOR;
		25  7   
		26  8   varying vec4 color;
		27  9   
		28 10   void main()
		29 11   {
		        ...
		        '''
Changed resource pack "color_grayscale.fragment":
	Changed file "vanilla":
		Total line: 25 (+1, -26)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		13    - #define _centroid centroid
		14    - #else
		15    - #define _centroid
		16    - #endif
		17    - 
		18    - _centroid in vec2 uv;
		19    - 
		20    - #define varying in
		21    - #define texture2D texture
		22    - out vec4 FragColor;
		23    - #define gl_FragColor FragColor
		24    - 
		25    - #else
		26    - 
		27    - // version 100 code
		    4 + #include "shaders/fragmentVersionCentroidUV.h"
		28    - varying vec2 uv;
		29  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		30    - #endif
		31  7   
		32    - uniform vec4 CURRENT_COLOR;
		33  8   uniform sampler2D TEXTURE_0;
		34  9   
		35 10   void main()
		36 11   {
		37 12   	vec4 diffuse = texture2D( TEXTURE_0, uv );
		        ...
		        '''
Changed resource pack "color_texture.fragment":
	Changed file "vanilla":
		Total line: 87 (+23, -42)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - 
		 11     - #ifdef MSAA_FRAMEBUFFER_ENABLED
		 12     - #define _centroid centroid
		 13     - #else
		 14     - #define _centroid
		 15     - #endif
		 16     - 
		 17     - // version 300 code
		      4 + #include "shaders/fragmentVersionCentroidUV.h"
		 18     - _centroid in vec2 uv;
		 19   5   
		 20     - #define varying in
		 21     - #define texture2D texture
		      6 + uniform sampler2D TEXTURE_0;
		      7 + uniform sampler2D TEXTURE_1;
		 22     - out vec4 FragColor;
		 23     - #define gl_FragColor FragColor
		 24   8   
		      9 + #include "shaders/uniformEntityConstants.h"
		 25     - #else
		 26  10   
		     11 + #ifdef EFFECTS_OFFSET
		     12 + #include "shaders/uniformEffectsConstants.h"
		 27     - // version 100 code
		     13 + #endif
		 28     - varying vec2 uv;
		 29  14   
		     15 + varying vec4 color;
		 30     - #endif
		 31  16   
		     17 + #ifdef ENABLE_FOG
		 32     - uniform sampler2D TEXTURE_0;
		 33     - uniform sampler2D TEXTURE_1;
		     18 + varying vec4 fogColor;
		 34     - uniform vec4 OVERLAY_COLOR;
		     19 + #endif
		 35  20   
		     21 + #ifdef GLINT
		 36     - #ifdef ENABLE_VERTEX_TINT_MASK
		     22 + 	varying vec2 layer1UV;
		     23 + 	varying vec2 layer2UV;
		 37     - uniform vec4 CHANGE_COLOR;
		 38     - #endif
		 39  24   
		     25 + 	vec4 glintBlend(vec4 dest, vec4 source) {
		     26 + 		return vec4(source.rgb * source.rgb, 0.0) + dest;
		 40     - #ifdef GLINT
		     27 + 	}
		 41     - uniform vec4 GLINT_COLOR;
		 42  28   #endif
		 43     - 
		 44     - varying vec4 color;
		 45  29   
		     30 + void main()
		     31 + {
		     32 + #ifdef EFFECTS_OFFSET
		 46     - #ifdef ENABLE_FOG
		 47     - varying vec4 fogColor;
		     33 + 	vec4 diffuse = texture2D( TEXTURE_0,  uv + EFFECT_UV_OFFSET);
		 48     - #endif
		 49     - 
		     34 + #else
		     35 + 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		     36 + #endif
		 50     - #ifdef GLINT
		 51     - 	varying vec2 layer1UV;
		 52     - 	varying vec2 layer2UV;
		 53  37   
		     38 + #ifdef ALPHA_TEST
		     39 + #ifdef ENABLE_VERTEX_TINT_MASK
		     40 + 	if(diffuse.a <= 0.0)
		     41 + #else
		     42 + 	if(diffuse.a < 0.5)
		 54     - 	vec4 glintBlend(vec4 dest, vec4 source) {
		 55     - 		return vec4(source.rgb * source.rgb, 0.0) + dest;
		 56     - 	}
		 57  43   #endif
		     44 + 	 	discard;
		 58     - 
		 59     - void main()
		 60     - {
		     45 + #endif
		 61     - 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		 62  46   
		 63     - #ifdef ALPHA_TEST
		 64  47   #ifdef ENABLE_VERTEX_TINT_MASK
		     48 + 	diffuse.rgb = mix(diffuse.rgb, diffuse.rgb*color.rgb, diffuse.a);
		     49 + 	if (color.a > 0.0) {
		 65     - 	if(diffuse.a <= 0.0)
		 66     - #else
		     50 + 		diffuse.a = (diffuse.a > 0.0) ? 1.0 : 0.0;
		 67     - 	if(diffuse.a < 0.5)
		 68     - #endif
		     51 + 	}
		 69     - 	 	discard;
		 70  52   #endif
		 71  53   
		 72     - #ifdef ENABLE_VERTEX_TINT_MASK
		 73     - 	diffuse.rgb = mix(diffuse.rgb, diffuse.rgb*color.rgb, diffuse.a);
		     54 + #ifdef GLINT
		     55 + 	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * GLINT_COLOR;
		     56 + 	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * GLINT_COLOR;
		     57 + 	vec4 glint = (layer1 + layer2);
		 74     - 	if (color.a > 0.0) {
		 75     - 		diffuse.a = (diffuse.a > 0.0) ? 1.0 : 0.0;
		 76     - 	}
		 77     - #endif
		 78  58   
		     59 + 	#ifdef INVENTORY
		     60 + 		diffuse.rgb = glint.rgb;
		     61 + 	#else
		     62 + 		diffuse.rgb = glintBlend(diffuse, glint).rgb;
		     63 + 	#endif
		     64 + #endif
		 79     - #ifdef GLINT
		 80     - 	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * GLINT_COLOR;
		 81     - 	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * GLINT_COLOR;
		 82     - 	vec4 glint = (layer1 + layer2);
		 83  65   
		     66 + #ifdef USE_OVERLAY
		 84     - 	#ifdef INVENTORY
		 85     - 		diffuse.rgb = glint.rgb;
		     67 + 	//use either the diffuse or the OVERLAY_COLOR
		     68 + 	diffuse.rgb = mix(diffuse, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		 86     - 	#else
		 87     - 		diffuse.rgb = glintBlend(diffuse, glint).rgb;
		 88     - 	#endif
		 89  69   #endif
		 90  70   
		     71 + #ifdef ENABLE_FOG
		 91     - #ifdef USE_OVERLAY
		     72 + 	//apply fog
		     73 + 	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		 92     - 	//use either the diffuse or the OVERLAY_COLOR
		 93     - 	diffuse.rgb = mix(diffuse, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		 94  74   #endif
		     75 + 
		     76 + #ifdef ENABLE_VERTEX_TINT_MASK
		 95  77   
		     78 + #ifdef ENABLE_CURRENT_ALPHA_MULTIPLY
		     79 + 	gl_FragColor = diffuse * color.a;
		 96     - #ifdef ENABLE_FOG
		     80 + #else
		     81 + 	gl_FragColor = diffuse;
		 97     - 	//apply fog
		 98     - 	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		 99  82   #endif
		100  83   
		101     - #ifdef ENABLE_VERTEX_TINT_MASK
		102     - 	gl_FragColor = diffuse;
		103  84   #else
		104  85   	gl_FragColor = diffuse * color;
		105  86   #endif
		106  87   }
		          '''
Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 58 (+0, -27)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid out vec2 uv;
		20    - 
		21    - #else
		22    - 
		23    - varying vec2 uv;
		24    - 
		25    - #endif
		26    - 
		    4 + #include "shaders/vertexVersionCentroidUV.h"
		27    - uniform MAT4 WORLDVIEWPROJ;
		28  5   
		29    - uniform vec2 UV_OFFSET;
		30    - uniform vec2 UV_ROTATION;
		31    - uniform vec2 GLINT_UV_SCALE;
		32    - uniform vec4 FOG_COLOR;
		    6 + #include "shaders/uniformWorldConstants.h"
		    7 + #include "shaders/uniformEntityConstants.h"
		    8 + #include "shaders/uniformPerFrameConstants.h"
		33    - uniform vec2 FOG_CONTROL;
		34    - uniform float RENDER_DISTANCE;
		35    - uniform vec4 TILE_LIGHT_COLOR;
		36  9   
		37 10   attribute mediump vec4 POSITION;
		38 11   attribute vec4 COLOR;
		39 12   attribute vec2 TEXCOORD_0;
		40 13   
		        ...
		        '''
Changed resource pack "current_color.fragment":
	Changed file "vanilla":
		Total line: 15 (+1, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		24    - uniform vec4 CURRENT_COLOR;
		25  7   
		26  8   void main()
		27  9   {
		28 10   	gl_FragColor = CURRENT_COLOR;
		29 11   
		        ...
		        '''
Changed resource pack "end_portal.fragment":
	Changed file "vanilla":
		Total line: 65 (+1, -22)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - 	// version 300 code
		12    - 
		13    - 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - 		#define _centroid centroid
		15    - 	#else
		16    - 		#define _centroid
		    4 + #include "shaders/fragmentVersionCentroid.h"
		17    - 	#endif
		18  5   
		    6 + #if __VERSION__ >= 300
		19  7   	#ifndef BYPASS_PIXEL_SHADER
		20  8   		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		21    - 			_centroid in highp vec2 colorLookupUV;
		22    - 			_centroid in highp vec2 parallaxUV;
		23    - 		#else
		    9 + 			_centroid in highp vec2 colorLookupUV;
		24    - 			_centroid in vec2 colorLookupUV;
		25 10   			_centroid in highp vec2 parallaxUV;
		26    - 		#endif
		   11 + 		#else
		27    - 	#endif
		28    - 
		   12 + 			_centroid in vec2 colorLookupUV;
		   13 + 			_centroid in highp vec2 parallaxUV;
		   14 + 		#endif
		   15 + 	#endif
		29    - 	#define varying in
		30    - 	#define texture2D texture
		31    - 	out vec4 FragColor;
		32    - 	#define gl_FragColor FragColor
		33 16   #else
		34    - 
		35    - 	// version 100 code
		36    - 
		37 17   	#ifndef BYPASS_PIXEL_SHADER
		38 18   		varying vec2 colorLookupUV;
		39 19   		varying highp vec2 parallaxUV;
		40 20   	#endif
		41 21   #endif
		42    - 
		43 22   
		44 23   #ifndef BYPASS_PIXEL_SHADER
		45 24   	varying lowp vec4 encodedPlane;
		46 25   	#ifdef FOG
		47 26   		varying vec4 fogColor;
		        ...
		        '''
Changed resource pack "end_portal.vertex":
	Changed file "vanilla":
		Total line: 115 (+5, -21)
		          '''
		          ...
		  7   7   // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8   8   // texture2D to texture
		  9   9   
		 10  10   precision highp float;
		 11  11   
		 12     - #if __VERSION__ >= 300
		 13     - 	#define attribute in
		 14     - 	#define varying out
		 15     - 
		 16     - 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		 17     - 		#define _centroid centroid
		 18     - 	#else
		 19     - 		#define _centroid
		     12 + #include "shaders/vertexVersionCentroid.h"
		 20     - 	#endif
		 21  13   
		 22     - 	#ifndef BYPASS_PIXEL_SHADER
		 23     - 		_centroid out vec2 colorLookupUV;
		 24     - 		_centroid out vec2 parallaxUV;
		 25     - 	#endif
		     14 + #if __VERSION__ >= 300
		 26     - #else
		 27  15   	#ifndef BYPASS_PIXEL_SHADER
		     16 + 		_centroid out vec2 colorLookupUV;
		     17 + 		_centroid out vec2 parallaxUV;
		 28     - 		varying vec2 colorLookupUV;
		 29     - 		varying vec2 parallaxUV;
		 30     - 	#endif
		     18 + 	#endif
		 31     - #endif
		     19 + #else
		 32     - 
		     20 + 	#ifndef BYPASS_PIXEL_SHADER
		 33     - #ifndef BYPASS_PIXEL_SHADER
		     21 + 		varying vec2 colorLookupUV;
		 34     - 	varying lowp vec4 encodedPlane;
		 35     - 	#ifdef FOG
		     22 + 		varying vec2 parallaxUV;
		 36     - 		varying vec4 fogColor;
		 37     - 	#endif
		     23 + 	#endif
		 38     - #endif
		 39     - 
		 40     - uniform MAT4 WORLD;
		 41     - uniform MAT4 WORLDVIEW;
		     24 + #endif
		 42     - uniform MAT4 PROJ;
		 43  25   
		     26 + #ifndef BYPASS_PIXEL_SHADER
		 44     - uniform vec4 FOG_COLOR;
		     27 + 	varying lowp vec4 encodedPlane;
		     28 + 	#ifdef FOG
		     29 + 		varying vec4 fogColor;
		     30 + 	#endif
		     31 + #endif
		 45     - uniform vec2 FOG_CONTROL;
		 46     - uniform float RENDER_DISTANCE;
		 47     - uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		 48     - uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		 49     - uniform float FAR_CHUNKS_DISTANCE;
		 50  32   
		     33 + #include "shaders/uniformWorldConstants.h"
		     34 + #include "shaders/uniformPerFrameConstants.h"
		     35 + #include "shaders/uniformShaderConstants.h"
		     36 + #include "shaders/uniformRenderChunkConstants.h"
		 51     - uniform POS3 VIEW_POS;
		 52     - uniform highp float TIME;
		 53  37   
		 54  38   #ifndef BYPASS_PIXEL_SHADER
		 55  39   	attribute POS4 POSITION;
		 56  40   	attribute vec4 COLOR;
		 57  41   	attribute vec2 TEXCOORD_0;
		          ...
		          '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 139 (+2, -17)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - 	// version 300 code
		 11     - 	#define varying in
		 12     - 	#define texture2D texture
		 13     - 	out vec4 FragColor;
		 14     - 	#define gl_FragColor FragColor
		 15     - 
		 16     - 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		 17     - 		#define _centroid centroid
		 18     - 	#else
		 19     - 		#define _centroid
		      4 + #include "shaders/fragmentVersionCentroid.h"
		 20     - 	#endif
		 21   5   
		      6 + #if __VERSION__ >= 300
		 22   7   	#ifndef NO_TEXTURE
		 23   8   		_centroid in vec2 uv;
		 24   9   	#endif
		 25  10   #else
		 26     - 	// version 100 code
		 27  11   	#ifndef NO_TEXTURE
		 28  12   		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		 29  13   			varying highp vec2 uv;
		 30  14   		#else
		 31  15   			varying vec2 uv;
		 32  16   		#endif
		 33  17   	#endif
		 34  18   #endif
		 35  19   
		     20 + #include "shaders/uniformShaderConstants.h"
		 36  21   #include "shaders/util.h"
		 37  22   
		 38  23   uniform sampler2D TEXTURE_0;
		 39  24   uniform sampler2D TEXTURE_1;
		 40  25   
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 124 (+0, -29)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - 
		 11     - #define attribute in
		 12     - #define varying out
		 13     - #ifdef MSAA_FRAMEBUFFER_ENABLED
		 14     - #define _centroid centroid
		 15     - #else
		 16     - #define _centroid
		 17     - #endif
		 18     - _centroid out vec2 uv;
		 19     - 
		 20     - #else
		 21     - varying vec2 uv;
		 22     - #endif
		 23     - 
		 24     - uniform MAT4 WORLDVIEWPROJ;
		 25     - uniform MAT4 WORLD;
		 26     - uniform vec4 TILE_LIGHT_COLOR;
		 27     - uniform vec4 OVERLAY_COLOR;
		 28     - uniform vec4 CHANGE_COLOR;
		 29     - uniform vec4 GLINT_COLOR;
		 30     - uniform vec4 FOG_COLOR;
		 31     - uniform vec2 FOG_CONTROL;
		 32     - uniform int FOG_MODE;
		      4 + #include "shaders/vertexVersionCentroidUV.h"
		      5 + 
		      6 + #include "shaders/uniformWorldConstants.h"
		      7 + #include "shaders/uniformEntityConstants.h"
		      8 + #include "shaders/uniformPerFrameConstants.h"
		 33     - uniform float RENDER_DISTANCE;
		 34     - uniform vec4 UV_ANIM;
		 35     - uniform vec2 UV_OFFSET;
		 36     - uniform vec2 UV_ROTATION;
		 37     - uniform vec2 GLINT_UV_SCALE;
		 38   9   
		 39  10   attribute mediump vec4 POSITION;
		 40  11   attribute vec2 TEXCOORD_0;
		 41  12   attribute vec4 NORMAL;
		 42  13   
		          ...
		          '''
Changed resource pack "flat_white.fragment":
	Changed file "vanilla":
		Total line: 9 (+0, -18)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		24  6   void main()
		25  7   {
		26  8   	gl_FragColor = vec4(1.0);
		27  9   }
		        '''
Added resource pack "fragmentVersionCentroid.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#endif
		'''
Added resource pack "fragmentVersionCentroidUV.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		// version 300 code
		_centroid in vec2 uv;
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		varying vec2 uv;
		
		#endif
		'''
Added resource pack "fragmentVersionSimple.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		'''
Changed resource pack "hologram_texture_stereo.fragment":
	Changed file "vanilla":
		Total line: 11 (+0, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		20    - // version 100 code
		21  5   
		22    - #endif
		23  6   //This file is purely here to let the code compile. It is used only for HoloWall, which currently runs only on DX11 compatible devices
		24    - 
		25  7   
		26  8   void main()
		27  9   {
		28    - 
		29 10   	gl_FragColor = vec4(1,0,1,1);
		30 11   }
		        '''
Changed resource pack "iteminhand.fragment":
	Changed file "vanilla":
		Total line: 17 (+1, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		    6 + #include "shaders/uniformEntityConstants.h"
		24    - uniform vec4 OVERLAY_COLOR;
		25  7   
		26  8   varying vec4 light;
		27  9   
		28 10   void main()
		29 11   {
		        ...
		        '''
Changed resource pack "levelstage_copy_vr.fragment":
	Changed file "vanilla":
		Total line: 11 (+0, -18)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - out vec4 FragColor;
		15    - #define gl_FragColor FragColor
		16    - 
		17    - #else
		18    - 
		19    - // version 100 code
		20    - varying vec2 uv;
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		24  6   // This shader isn't actually used in OGL, we have to have an OGL shader since a material refers to the DX version
		25  7   // and thus this also needs to exist on the OGL side.
		26  8   void main()
		27  9   {
		        ...
		        '''
Changed resource pack "normal_as_color.vertex":
	Changed file "vanilla":
		Total line: 19 (+1, -13)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		15    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		16    - #endif
		17  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		18    - uniform MAT4 WORLDVIEWPROJ;
		19  7   
		20  8   attribute mediump vec4 POSITION;
		21  9   attribute vec4 NORMAL;
		22 10   
		23 11   varying vec4 color;
		        ...
		        '''
Added resource pack "nvn.h":
	file "vanilla":
		'''
		#define MCPE_PLATFORM_NX
		
		//#if __VERSION__ >= 300
		#define MAT4 highp mat4
		#define POS4 highp vec4
		#define POS3 highp vec3
		precision highp float;
		//#endif
		'''
Added resource pack "nxFragmentHeader.h":
	file "vanilla":
		'''
		#version 430
		
		#include "nvn.h"
		'''
Added resource pack "nxGeometryHeader.h":
	file "vanilla":
		'''
		#version 430
		
		#include "nvn.h"
		'''
Added resource pack "nxVertexHeader.h":
	file "vanilla":
		'''
		#version 430
		
		#include "nvn.h"
		
		out gl_PerVertex
		{
			vec4 gl_Position;
		};
		'''
Changed resource pack "placeholder.fragment":
	Changed file "vanilla":
		Total line: 9 (+0, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		22    - #endif
		    4 + #include "shaders/fragmentVersionSimple.h"
		23    - 
		24  5   
		25  6   void main()
		26  7   {
		27  8   	gl_FragColor = vec4(1,1,1,1);
		28  9   }
		        '''
Changed resource pack "placeholder.vertex":
	Changed file "vanilla":
		Total line: 13 (+1, -13)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		15    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		16    - #endif
		17  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		18    - uniform MAT4 WORLDVIEWPROJ;
		19  7   
		20  8   attribute mediump vec4 POSITION;
		21  9   
		22 10   void main()
		23 11   {
		        ...
		        '''
Changed resource pack "position.vertex":
	Changed file "vanilla":
		Total line: 13 (+1, -12)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		15    - #endif
		16  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		17    - uniform MAT4 WORLDVIEWPROJ;
		18  7   
		19  8   attribute mediump vec4 POSITION;
		20  9   
		21 10   void main()
		22 11   {
		        ...
		        '''
Changed resource pack "rain_snow.fragment":
	Changed file "vanilla":
		Total line: 63 (+19, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		11    - // version 300 code
		12  5   
		    6 + uniform sampler2D TEXTURE_0;
		13    - #define varying in
		14    - #define texture2D texture
		    7 + uniform sampler2D TEXTURE_1;
		    8 + uniform sampler2D TEXTURE_2;
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17  9   
		   10 + varying vec2 uv;
		   11 + varying vec4 color;
		   12 + varying vec4 worldPosition;
		   13 + varying vec4 fogColor;
		18    - #else
		19 14   
		   15 + void main()
		   16 + {
		   17 + 	vec4 albedo = texture2D( TEXTURE_0, uv);
		20    - // version 100 code
		21 18   
		   19 + #ifdef ALPHA_TEST
		   20 + 	if (albedo.a < 0.5)
		   21 + 		discard;
		22 22   #endif
		23 23   
		   24 + 	albedo.a *= color.a;
		24    - uniform sampler2D TEXTURE_0;
		25    - uniform sampler2D TEXTURE_1;
		26 25   
		27    - varying vec2 uv;
		28    - varying vec4 color;
		   26 + 	vec2 occlusionUV = worldPosition.xz;
		   27 + 	vec4 occlusionTexture = texture2D( TEXTURE_1, occlusionUV);
		29    - varying vec4 worldPosition;
		30    - varying vec4 fogColor;
		31 28   
		   29 + #ifndef FLIP_OCCLUSION
		   30 + #define OCCLUSION_OPERATOR <
		   31 + #else
		32    - void main()
		   32 + #define OCCLUSION_OPERATOR >
		   33 + #endif
		33    - {
		34    - 	vec4 albedo = texture2D( TEXTURE_0, uv);
		35 34   
		   35 + #ifdef SNOW
		   36 + #define OCCLUSION_HEIGHT occlusionTexture.g
		   37 + #define OCCLUSION_LUMINANCE occlusionTexture.r
		   38 + #else
		   39 + #define OCCLUSION_HEIGHT occlusionTexture.a
		   40 + #define OCCLUSION_LUMINANCE occlusionTexture.b
		36    - #ifdef ALPHA_TEST
		37    - 	if (albedo.a < 0.5)
		38    - 		discard;
		39 41   #endif
		40 42   
		   43 + 	// clamp the uvs
		   44 + 	if ( occlusionUV.x >= 0.0 && occlusionUV.x <= 1.0 && 
		   45 + 		 occlusionUV.y >= 0.0 && occlusionUV.y <= 1.0 && 
		   46 + 		 worldPosition.y OCCLUSION_OPERATOR OCCLUSION_HEIGHT) {
		41    - 	albedo.a *= color.a;
		42    - 
		   47 + 		albedo.a = 0.0;
		   48 + 	}
		43    - 	vec2 occlusionUV = worldPosition.xz;
		44    - 	vec4 occlusionTexture = texture2D( TEXTURE_1, occlusionUV);
		45 49   
		46    - 	// clamp the uvs
		47    - 	if ( occlusionUV.x >= 0.0 && occlusionUV.x <= 1.0 && 
		48    - 		 occlusionUV.y >= 0.0 && occlusionUV.y <= 1.0 && 
		   50 + 	float mixAmount = (worldPosition.y - OCCLUSION_HEIGHT)*25.0;
		   51 + 	vec2 lightingUVs = vec2(OCCLUSION_LUMINANCE, 1.0);
		   52 + 	lightingUVs.x = mix(lightingUVs.x, 0.0, mixAmount);
		49    - 		 worldPosition.y < occlusionTexture.a) {
		50    - 		albedo.a = 0.0;
		51    - 	}
		52 53   
		53    - 	float mixAmount = clamp ( (worldPosition.y - occlusionTexture.a)*10.0, 0.0, 1.0);
		   54 + 	vec3 lighting = texture2D( TEXTURE_2, lightingUVs ).rgb;
		54    - 	vec3 lighting = mix(occlusionTexture.rgb, color.rgb, mixAmount);
		55 55   	vec4 finalOutput = albedo;
		56 56   	finalOutput.rgb *= lighting.rgb;
		57 57   
		58 58   	//apply fog
		59 59   	gl_FragColor.rgb = mix( finalOutput.rgb, fogColor.rgb, fogColor.a );
		        ...
		        '''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 78 (+2, -22)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - #define attribute in
		 11     - #define varying out
		 12     - 
		 13     - #else
		 14     - 
		 15     - 
		 16     - #endif
		 17     - 
		 18     - precision highp float;
		 19     - 
		 20     - uniform MAT4	WORLDVIEWPROJ;
		 21     - uniform vec4	POSITION_OFFSET;
		 22     - uniform vec4	VELOCITY;
		 23     - uniform vec4	ALPHA;
		 24     - uniform vec4	VIEW_POSITION;
		 25     - uniform vec4	SIZE_SCALE;
		      4 + #include "shaders/vertexVersionSimple.h"
		      5 + 
		      6 + precision highp float;
		      7 + 
		      8 + #include "shaders/uniformWorldConstants.h"
		      9 + #include "shaders/uniformWeatherConstants.h"
		     10 + #include "shaders/uniformPerFrameConstants.h"
		 26     - uniform vec4	LIGHTING;
		 27     - uniform vec4	FORWARD;
		 28     - uniform vec4	UV_INFO;
		 29     - uniform vec4	PARTICLE_BOX;
		 30     - uniform vec4	FOG_COLOR;
		 31     - uniform vec2	FOG_CONTROL;
		 32     - uniform float	RENDER_DISTANCE;
		 33  11   
		 34  12   attribute mediump vec4 POSITION;
		 35  13   attribute vec2 TEXCOORD_0;
		 36  14   attribute vec4 COLOR;
		 37  15   
		          ...
		 42  20   
		 43  21   void main()
		 44  22   {
		 45  23   	float spriteSelector = COLOR.x*255.0;
		 46  24   	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		     25 + #ifndef NO_VARIETY
		 47  26   	uv.x += spriteSelector * UV_INFO.z;
		     27 + #endif
		 48  28   
		 49  29   	vec3 pos = POSITION.xyz;
		 50  30   		
		 51  31   	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		 52  32   	pos.xyz += POSITION_OFFSET.xyz;
		          ...
		          '''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 101 (+3, -23)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - 
		 11     - 	// version 300 code
		 12     - 
		 13     - 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		 14     - 		#define _centroid centroid
		 15     - 	#else
		 16     - 		#define _centroid
		      4 + #include "shaders/fragmentVersionCentroid.h"
		 17     - 	#endif
		 18   5   
		      6 + #if __VERSION__ >= 300
		 19   7   	#ifndef BYPASS_PIXEL_SHADER
		 20   8   		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		 21     - 			_centroid in highp vec2 uv0;
		 22     - 			_centroid in highp vec2 uv1;
		 23     - 		#else
		      9 + 			_centroid in highp vec2 uv0;
		     10 + 			_centroid in highp vec2 uv1;
		 24     - 			_centroid in vec2 uv0;
		 25     - 			_centroid in vec2 uv1;
		 26     - 		#endif
		     11 + 		#else
		 27     - 	#endif
		 28     - 
		     12 + 			_centroid in vec2 uv0;
		     13 + 			_centroid in vec2 uv1;
		     14 + 		#endif
		     15 + 	#endif
		 29     - 	#define varying in
		 30     - 	#define texture2D texture
		 31     - 	out vec4 FragColor;
		 32     - 	#define gl_FragColor FragColor
		 33  16   #else
		 34     - 
		 35     - 	// version 100 code
		 36     - 
		 37  17   	#ifndef BYPASS_PIXEL_SHADER
		 38  18   		varying vec2 uv0;
		 39  19   		varying vec2 uv1;
		 40  20   	#endif
		 41  21   #endif
		 42     - 
		 43  22   
		 44  23   varying vec4 color;
		 45  24   
		 46  25   #ifdef FOG
		 47  26   varying vec4 fogColor;
		          ...
		 49  28   
		 50  29   #ifdef NEAR_WATER
		 51  30   varying float cameraDist;
		 52  31   #endif
		 53  32   
		     33 + #include "shaders/uniformShaderConstants.h"
		 54  34   #include "shaders/util.h"
		 55  35   
		 56  36   uniform sampler2D TEXTURE_0;
		 57  37   uniform sampler2D TEXTURE_1;
		 58  38   uniform sampler2D TEXTURE_2;
		          ...
		 94  74   #ifndef SEASONS
		 95  75   
		 96  76   #if !defined(ALPHA_TEST) && !defined(BLEND)
		 97  77   	diffuse.a = inColor.a;
		 98  78   #elif defined(BLEND)
		 99     - 	diffuse.a *= inColor.a;
		100  79   	#ifdef NEAR_WATER
		     80 + 		diffuse.a *= inColor.a;
		101  81   		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		102  82   		diffuse.a = mix(diffuse.a, 1.0, alphaFadeOut);
		103  83   	#endif
		104  84   #endif	
		105  85   	
		          ...
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 124 (+5, -28)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		  4     - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		  5     - // attribute to in
		  6     - // varying to out when in vertex shaders or in when in fragment shaders
		  7     - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		  8     - // texture2D to texture
		  9     - #if __VERSION__ >= 300
		 10     - 	#define attribute in
		 11     - 	#define varying out
		 12     - 
		 13     - 	#ifdef MSAA_FRAMEBUFFER_ENABLED
		 14     - 		#define _centroid centroid
		 15     - 	#else
		 16     - 		#define _centroid
		 17     - 	#endif
		 18     - 
		 19     - 	#ifndef BYPASS_PIXEL_SHADER
		 20     - 		_centroid out vec2 uv0;
		 21     - 		_centroid out vec2 uv1;
		      4 + #include "shaders/vertexVersionCentroid.h"
		      5 + #if __VERSION__ >= 300
		 22     - 	#endif
		 23     - #else
		 24   6   	#ifndef BYPASS_PIXEL_SHADER
		      7 + 		_centroid out vec2 uv0;
		      8 + 		_centroid out vec2 uv1;
		 25     - 		varying vec2 uv0;
		 26     - 		varying vec2 uv1;
		 27     - 	#endif
		      9 + 	#endif
		 28     - #endif
		     10 + #else
		 29     - 
		     11 + 	#ifndef BYPASS_PIXEL_SHADER
		 30     - #ifndef BYPASS_PIXEL_SHADER
		     12 + 		varying vec2 uv0;
		     13 + 		varying vec2 uv1;
		 31     - 	varying vec4 color;
		     14 + 	#endif
		 32  15   #endif
		 33  16   
		     17 + #ifndef BYPASS_PIXEL_SHADER
		 34     - #ifdef FOG
		     18 + 	varying vec4 color;
		 35     - 	varying vec4 fogColor;
		 36  19   #endif
		 37  20   
		     21 + #ifdef FOG
		 38     - #ifdef NEAR_WATER
		     22 + 	varying vec4 fogColor;
		 39     - 	varying float cameraDist;
		 40  23   #endif
		 41  24   
		 42     - #ifdef AS_ENTITY_RENDERER
		 43     - 	uniform MAT4 WORLDVIEWPROJ;
		 44     - #else
		     25 + #ifdef NEAR_WATER
		     26 + 	varying float cameraDist;
		 45     - 	uniform MAT4 WORLDVIEW;
		 46     - 	uniform MAT4 PROJ;
		 47  27   #endif
		 48     - uniform vec4 FOG_COLOR;
		 49     - uniform vec2 FOG_CONTROL;
		 50     - uniform float RENDER_DISTANCE;
		     28 + 
		     29 + #include "shaders/uniformWorldConstants.h"
		     30 + #include "shaders/uniformPerFrameConstants.h"
		     31 + #include "shaders/uniformShaderConstants.h"
		     32 + #include "shaders/uniformRenderChunkConstants.h"
		 51     - uniform vec2 VIEWPORT_DIMENSION;
		 52     - uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		 53     - uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		 54     - uniform POS3 VIEW_POS;
		 55     - uniform float FAR_CHUNKS_DISTANCE;
		 56  33   
		 57  34   attribute POS4 POSITION;
		 58  35   attribute vec4 COLOR;
		 59  36   attribute vec2 TEXCOORD_0;
		 60  37   attribute vec2 TEXCOORD_1;
		          ...
		          '''
Added resource pack "selection_box.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		#include "shaders/uniformWorldConstants.h"
		
		attribute mediump vec4 POSITION;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    //this is to make it come closer to the camera and avoid z-fighting
		    gl_Position.z -= 0.0001;
		}
		'''
Changed resource pack "shadow_stencil_overlay.fragment":
	Changed file "vanilla":
		Total line: 14 (+1, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		24    - uniform vec4 CURRENT_COLOR;
		25  7   
		26  8   varying vec4 color;
		27  9   
		28 10   void main()
		29 11   {
		        ...
		        '''
Added resource pack "simple.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		#include "shaders/uniformWorldConstants.h"
		#include "shaders/uniformShaderConstants.h"
		
		attribute mediump vec4 POSITION;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = CURRENT_COLOR;
		}
		'''
Changed resource pack "sky.vertex":
	Changed file "vanilla":
		Total line: 22 (+1, -13)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #else
		14    - 
		15    - 
		    4 + #include "shaders/vertexVersionSimple.h"
		16    - #endif
		17  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		18    - uniform MAT4 WORLDVIEWPROJ;
		    7 + #include "shaders/uniformPerFrameConstants.h"
		    8 + #include "shaders/uniformShaderConstants.h"
		19    - uniform vec4 FOG_COLOR;
		20    - uniform vec4 CURRENT_COLOR;
		21  9   
		22 10   attribute mediump vec4 POSITION;
		23 11   attribute vec4 COLOR;
		24 12   
		25 13   varying vec4 color;
		        ...
		        '''
Changed resource pack "stars.fragment":
	Changed file "vanilla":
		Total line: 13 (+1, -19)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		20    - // version 100 code
		21  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		22    - #endif
		23  7   
		24  8   varying vec4 color;
		25    - 
		26    - uniform vec4 CURRENT_COLOR;
		27  9   
		28 10   void main()
		29 11   {
		30 12   	gl_FragColor = vec4(color.rgb * CURRENT_COLOR.rgb * color.a, color.a);
		31 13   }
		        '''
Changed resource pack "text.fragment":
	Changed file "vanilla":
		Total line: 65 (+2, -34)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid in vec2 uv;
		20    - 
		21    - #define varying in
		22    - #define texture2D texture
		23    - out vec4 FragColor;
		24    - #define gl_FragColor FragColor
		25    - 
		26    - #else
		27    - 
		28    - // version 100 code
		    4 + #include "shaders/fragmentVersionCentroidUV.h"
		29    - varying vec2 uv;
		30  5   
		    6 + uniform sampler2D TEXTURE_0;
		31    - #endif
		32  7   
		    8 + #include "shaders/uniformShaderConstants.h"
		33    - uniform sampler2D TEXTURE_0;
		34    - uniform vec4 DARKEN;
		35  9   
		36 10   varying vec4 color;
		37    - 
		38    - float median(float a, float b, float c) {
		39    -     return max(min(a, b), min(max(a, b), c));
		40    - }
		41 11   
		42    - uniform float GLYPH_SMOOTH_RADIUS;
		43    - uniform float GLYPH_CUTOFF;
		   12 + float median(float a, float b, float c) {
		   13 +     return max(min(a, b), min(max(a, b), c));
		   14 + }
		   15 + 
		   16 + #include "shaders/uniformTextConstants.h"
		44    - uniform float OUTLINE_CUTOFF;
		45    - uniform float SHADOW_SMOOTH_RADIUS;
		46    - uniform vec4 OUTLINE_COLOR;
		47    - uniform vec4 SHADOW_COLOR;
		48    - uniform vec2 SHADOW_OFFSET;
		49 17   
		50 18   const float GLYPH_UV_SIZE = 1.0 / 16.0;
		51 19   
		52 20   void main()
		53 21   {
		        ...
		        '''
Changed resource pack "texture.fragment":
	Changed file "vanilla":
		Total line: 18 (+0, -27)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid in vec2 uv;
		20    - 
		21    - #define varying in
		22    - #define texture2D texture
		23    - out vec4 FragColor;
		24    - #define gl_FragColor FragColor
		25    - 
		26    - #else
		27    - 
		28    - // version 100 code
		29    - varying vec2 uv;
		30    - 
		    4 + #include "shaders/fragmentVersionCentroidUV.h"
		31    - #endif
		32  5   
		33  6   uniform sampler2D TEXTURE_0;
		34  7   
		35  8   void main()
		36  9   {
		        ...
		        '''
Changed resource pack "texture_blend.fragment":
	Changed file "vanilla":
		Total line: 32 (+6, -26)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid in vec2 uv;
		20    - _centroid in vec2 uv1;
		21    - 
		22    - #define varying in
		23    - #define texture2D texture
		24    - out vec4 FragColor;
		    4 + #include "shaders/fragmentVersionCentroid.h"
		25    - #define gl_FragColor FragColor
		26  5   
		    6 + #if __VERSION__ >= 300
		    7 + _centroid in vec2 uv;
		    8 + _centroid in vec2 uv1;
		27  9   #else
		28    - 
		29    - // version 100 code
		30 10   varying vec2 uv;
		31 11   varying vec2 uv1;
		   12 + #endif
		32 13   
		   14 + uniform sampler2D TEXTURE_0;
		33    - #endif
		34 15   
		   16 + #include "shaders/uniformShaderConstants.h"
		35    - uniform sampler2D TEXTURE_0;
		36    - uniform vec4 CURRENT_COLOR;
		37 17   
		38 18   void main()
		39 19   {
		40 20   	vec4 color = texture2D( TEXTURE_0, uv );
		41 21   	vec4 color1 = texture2D( TEXTURE_0, uv1 );
		        ...
		        '''
Changed resource pack "texture_ccolor.fragment":
	Changed file "vanilla":
		Total line: 39 (+4, -21)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		13    - #define _centroid centroid
		14    - #else
		15    - #define _centroid
		16    - #endif
		17    - 
		18    - #if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		19    - _centroid in highp vec2 uv;
		20    - #else
		21    - _centroid in vec2 uv;
		    4 + #include "shaders/fragmentVersionCentroid.h"
		22    - #endif
		23  5   
		    6 + #if __VERSION__ >= 300
		24  7   
		    8 + #if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		    9 + _centroid in highp vec2 uv;
		25    - #define varying in
		   10 + #else
		   11 + _centroid in vec2 uv;
		   12 + #endif
		26    - #define texture2D texture
		27    - out vec4 FragColor;
		28    - #define gl_FragColor FragColor
		29 13   
		30 14   #else
		31 15   
		32    - // version 100 code
		33 16   varying vec2 uv;
		34 17   
		35 18   #endif
		36 19   
		   20 + #include "shaders/uniformShaderConstants.h"
		37 21   #include "shaders/util.h"
		38 22   
		39    - uniform vec4 CURRENT_COLOR;
		40 23   uniform sampler2D TEXTURE_0;
		41 24   
		42 25   void main()
		43 26   {
		44 27   #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		        ...
		        '''
Changed resource pack "texture_cutout.fragment":
	Changed file "vanilla":
		Total line: 17 (+1, -27)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid in vec2 uv;
		20    - 
		21    - #define varying in
		22    - #define texture2D texture
		23    - out vec4 FragColor;
		24    - #define gl_FragColor FragColor
		25    - 
		26    - #else
		27    - 
		28    - // version 100 code
		    4 + #include "shaders/fragmentVersionCentroidUV.h"
		29    - varying vec2 uv;
		30  5   
		    6 + #include "shaders/uniformShaderConstants.h"
		31    - #endif
		32  7   
		33    - uniform vec4 CURRENT_COLOR;
		34  8   uniform sampler2D TEXTURE_0;
		35  9   
		36 10   void main()
		37 11   {
		38 12   	vec4 diffuse = texture2D( TEXTURE_0, uv );
		        ...
		        '''
Added resource pack "texture_raw_alphatest.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroid.h"
		#if __VERSION__ >= 300
		
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
		_centroid in highp vec2 uv;
		#else
		_centroid in vec2 uv;
		#endif
		
		#else
		
		// version 100 code
		varying vec2 uv;
		
		#endif
		
		#include "shaders/uniformShaderConstants.h"
		#include "shaders/util.h"
		
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
		#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
			vec4 diffuse = texture2D( TEXTURE_0, uv );
		#else
			vec4 diffuse = texture2D_AA(TEXTURE_0, uv );
		#endif
		
		#ifdef ALPHA_TEST
			if(diffuse.a < 0.0625)
				discard;
		#endif
		
			gl_FragColor = diffuse;
		}
		'''
Added resource pack "uniformBannerConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_BANNER_CONSTANTS_H
		#define _UNIFORM_BANNER_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(BannerConstants)
		UNIFORM vec4 BANNER_COLORS[7];
		UNIFORM vec4 BANNER_UV_OFFSETS[7];
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformDebugConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_DEBUG_CONSTANTS_H
		#define _UNIFORM_DEBUG_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(DebugConstants)
		UNIFORM float TEXTURE_ARRAY_INDEX_0;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformEffectsConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_EFFECTS_CONSTANTS_H
		#define _UNIFORM_EFFECTS_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(EffectsConstants)
		UNIFORM vec2 EFFECT_UV_OFFSET;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformEntityConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_ENTITY_CONSTANTS_H
		#define _UNIFORM_ENTITY_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(EntityConstants)
		UNIFORM vec4 OVERLAY_COLOR;
		UNIFORM vec4 TILE_LIGHT_COLOR;
		UNIFORM vec4 CHANGE_COLOR;
		UNIFORM vec4 GLINT_COLOR;
		UNIFORM vec4 UV_ANIM;
		UNIFORM vec2 UV_OFFSET;
		UNIFORM vec2 UV_ROTATION;
		UNIFORM vec2 GLINT_UV_SCALE;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformFlipbookTextureConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_FLIPBOOK_TEXTURE_CONSTANTS_H
		#define _UNIFORM_FLIPBOOK_TEXTURE_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(FlipbookTextureConstants)
		UNIFORM float V_OFFSET;
		UNIFORM float V_BLEND_OFFSET;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformInterFrameConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_INTER_FRAME_CONSTANTS_H
		#define _UNIFORM_INTER_FRAME_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(InterFrameConstants)
		// in secs. This is reset every 1 hour. so the range is [0, 3600]
		// make sure your shader handles the case when it transitions from 3600 to 0
		UNIFORM float TOTAL_REAL_WORLD_TIME;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformMacro.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_MACRO_H
		#define _UNIFORM_MACRO_H
		
		#ifdef MCPE_PLATFORM_NX
		#define BEGIN_UNIFORM_BLOCK(x) uniform x {
		#define END_UNIFORM_BLOCK };
		#define UNIFORM 
		#else
		#define BEGIN_UNIFORM_BLOCK(x) 
		#define END_UNIFORM_BLOCK
		#define UNIFORM uniform 
		#endif
		
		#endif
		'''
Added resource pack "uniformPerFrameConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
		#define _UNIFORM_PER_FRAME_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(PerFrameConstants)
		UNIFORM vec3 VIEW_POS;
		UNIFORM float TIME;
		UNIFORM vec4 FOG_COLOR;
		UNIFORM vec2 FOG_CONTROL;
		UNIFORM float RENDER_DISTANCE;
		UNIFORM float FAR_CHUNKS_DISTANCE;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformRenderChunkConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_RENDER_CHUNK_CONSTANTS_H
		#define _UNIFORM_RENDER_CHUNK_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(RenderChunkConstants)
		UNIFORM POS4 CHUNK_ORIGIN_AND_SCALE;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformShaderConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_SHADER_CONSTANTS_H
		#define _UNIFORM_SHADER_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(ShaderConstants)
		UNIFORM vec4 CURRENT_COLOR;
		UNIFORM vec4 DARKEN;
		UNIFORM vec3 TEXTURE_DIMENSIONS;
		UNIFORM MAT4 UV_TRANSFORM;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformTextConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_TEXT_CONSTANTS_H
		#define _UNIFORM_TEXT_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(TextConstants)
		UNIFORM float GLYPH_SMOOTH_RADIUS;
		UNIFORM float GLYPH_CUTOFF;
		UNIFORM float OUTLINE_CUTOFF;
		UNIFORM vec4 OUTLINE_COLOR;
		UNIFORM float SHADOW_SMOOTH_RADIUS;
		UNIFORM vec4 SHADOW_COLOR;
		UNIFORM vec2 SHADOW_OFFSET;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformWeatherConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_WEATHER_CONSTANTS_H
		#define _UNIFORM_WEATHER_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(WeatherConstants)
		UNIFORM vec4 POSITION_OFFSET;
		UNIFORM vec4 VELOCITY;
		UNIFORM vec4 ALPHA;
		UNIFORM vec4 VIEW_POSITION;
		UNIFORM vec4 SIZE_SCALE;
		UNIFORM vec4 FORWARD;
		UNIFORM vec4 UV_INFO;
		UNIFORM vec4 PARTICLE_BOX;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Added resource pack "uniformWorldConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_WORLD_CONSTANTS_H
		#define _UNIFORM_WORLD_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		BEGIN_UNIFORM_BLOCK(WorldConstants)
		UNIFORM MAT4 WORLDVIEWPROJ;
		UNIFORM MAT4 WORLD;
		UNIFORM MAT4 WORLDVIEW;
		UNIFORM MAT4 PROJ;
		END_UNIFORM_BLOCK
		
		#endif
		'''
Changed resource pack "util.h":
	Changed file "vanilla":
		Total line: 58 (+1, -1)
		        '''
		 1  1   #if __VERSION__ >= 300
		 2  2   
		    3 + #include "shaders/uniformShaderConstants.h"
		 3    - uniform highp vec3 TEXTURE_DIMENSIONS;
		 4  4   
		 5  5   vec4 texture2D_AA(in sampler2D tex, in highp vec2 uv)
		 6  6   {
		 7  7   	// Texture antialiasing
		 8  8   	//
		        ...
		        '''
Changed resource pack "uv.vertex":
	Changed file "vanilla":
		Total line: 17 (+1, -22)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid out vec2 uv;
		20    - 
		21    - #else
		22    - 
		23    - varying vec2 uv;
		24    - 
		    4 + #include "shaders/vertexVersionCentroidUV.h"
		25    - #endif
		26  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		27    - uniform MAT4 WORLDVIEWPROJ;
		28  7   
		29  8   attribute POS4 POSITION;
		30  9   attribute vec2 TEXCOORD_0;
		31 10   
		32 11   
		        ...
		        '''
Changed resource pack "uv_as_color.fragment":
	Changed file "vanilla":
		Total line: 11 (+0, -18)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - 
		11    - // version 300 code
		12    - 
		13    - #define varying in
		14    - #define texture2D texture
		15    - out vec4 FragColor;
		16    - #define gl_FragColor FragColor
		17    - 
		18    - #else
		19    - 
		20    - // version 100 code
		21    - 
		    4 + #include "shaders/fragmentVersionSimple.h"
		22    - #endif
		23  5   
		24  6   varying vec2 uv;
		25  7   
		26  8   void main()
		27  9   {
		        ...
		        '''
Changed resource pack "uv_blend.vertex":
	Changed file "vanilla":
		Total line: 29 (+1, -14)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		    4 + #include "shaders/vertexVersionCentroid.h"
		    5 + #if __VERSION__ >= 300
		16    - #define _centroid
		17    - #endif
		18  6   
		19  7   _centroid out vec2 uv;
		20  8   _centroid out vec2 uv1;
		21  9   
		22 10   #else
		        ...
		24 12   varying vec2 uv;
		25 13   varying vec2 uv1;
		26 14   
		27 15   #endif
		28 16   
		   17 + #include "shaders/uniformWorldConstants.h"
		29    - uniform MAT4 WORLDVIEWPROJ;
		30 18   
		31 19   attribute POS4 POSITION;
		32 20   attribute vec2 TEXCOORD_0;
		33 21   attribute vec2 TEXCOORD_1;
		34    - 
		35 22   
		36 23   void main()
		37 24   {
		38 25       gl_Position = WORLDVIEWPROJ * POSITION;
		39 26   
		        ...
		        '''
Changed resource pack "uv_blend_flipbook.vertex":
	Changed file "vanilla":
		Total line: 33 (+3, -15)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		    4 + #include "shaders/vertexVersionCentroid.h"
		    5 + #if __VERSION__ >= 300
		16    - #define _centroid
		17    - #endif
		18  6   
		19  7   _centroid out vec2 uv;
		20  8   _centroid out vec2 uv1;
		21  9   
		22 10   #else
		23 11   
		24 12   varying vec2 uv;
		25 13   varying vec2 uv1;
		   14 + 
		   15 + #endif
		26 16   
		27    - #endif
		28 17   
		   18 + #include "shaders/uniformWorldConstants.h"
		29    - uniform MAT4 WORLDVIEWPROJ;
		30    - uniform float V_OFFSET;
		   19 + #include "shaders/uniformFlipbookTextureConstants.h"
		31    - uniform float V_BLEND_OFFSET;
		32 20   
		33 21   attribute POS4 POSITION;
		34 22   attribute vec2 TEXCOORD_0;
		35 23   
		36 24   
		        ...
		        '''
Changed resource pack "uv_repeat.vertex":
	Changed file "vanilla":
		Total line: 17 (+1, -22)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid out vec2 uv;
		20    - 
		21    - #else
		22    - 
		23    - varying vec2 uv;
		24    - 
		    4 + #include "shaders/vertexVersionCentroidUV.h"
		25    - #endif
		26  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		27    - uniform MAT4 WORLDVIEWPROJ;
		    7 + #include "shaders/uniformShaderConstants.h"
		28    - uniform mat4 UV_TRANSFORM;
		29  8   
		30  9   attribute POS4 POSITION;
		31 10   attribute vec2 TEXCOORD_0;
		32 11   
		33 12   void main()
		        ...
		        '''
Changed resource pack "uv_scale.vertex":
	Changed file "vanilla":
		Total line: 17 (+1, -22)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid out vec2 uv;
		20    - 
		21    - #else
		22    - 
		23    - varying vec2 uv;
		24    - 
		    4 + #include "shaders/vertexVersionCentroidUV.h"
		25    - #endif
		26  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		27    - uniform MAT4 WORLDVIEWPROJ;
		    7 + #include "shaders/uniformEntityConstants.h"
		28    - uniform vec2 GLINT_UV_SCALE;
		29  8   
		30  9   attribute mediump vec4 POSITION;
		31 10   attribute vec2 TEXCOORD_0;
		32 11   
		33 12   void main()
		        ...
		        '''
Changed resource pack "uv_selection_overlay.vertex":
	Changed file "vanilla":
		Total line: 18 (+1, -23)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4    - // To use centroid sampling we need to have version 300 es shaders, which requires changing:
		 5    - // attribute to in
		 6    - // varying to out when in vertex shaders or in when in fragment shaders
		 7    - // defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		 8    - // texture2D to texture
		 9    - #if __VERSION__ >= 300
		10    - #define attribute in
		11    - #define varying out
		12    - 
		13    - #ifdef MSAA_FRAMEBUFFER_ENABLED
		14    - #define _centroid centroid
		15    - #else
		16    - #define _centroid
		17    - #endif
		18    - 
		19    - _centroid out vec2 uv;
		20    - 
		21    - #else
		22    - 
		23    - varying vec2 uv;
		24    - 
		    4 + #include "shaders/vertexVersionCentroidUV.h"
		25    - #endif
		26  5   
		    6 + #include "shaders/uniformWorldConstants.h"
		27    - uniform MAT4 WORLDVIEW;
		28    - uniform MAT4 PROJ;
		29  7   
		30  8   attribute POS4 POSITION;
		31  9   attribute vec2 TEXCOORD_0;
		32 10   
		33 11   
		        ...
		        '''
Added resource pack "uv_time_rotate.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionCentroidUV.h"
		
		#include "shaders/uniformWorldConstants.h"
		#include "shaders/uniformInterFrameConstants.h"
		
		attribute POS4 POSITION;
		attribute vec2 TEXCOORD_0;
		
		
		void main() {
		#if defined(VR_MODE)
		    const float ROTATION_Y_SPEED = 0.0;
		    const float ROTATION_X_SPEED = 0.0;
		    const float ROTATION_X_SCALE = 0.0;
		    const float ROTATION_X_ADDITION = 0.0;
		#else
		    const float ROTATION_Y_SPEED = 1.5;
		    const float ROTATION_X_SPEED = 0.1;
		    const float ROTATION_X_SCALE = 7.0;
		    const float ROTATION_X_ADDITION = 20.0;
		#endif
		
		    float theta = radians(-TOTAL_REAL_WORLD_TIME * ROTATION_Y_SPEED);
		    float s = sin(theta);
		    float c = cos(theta);
		
		    MAT4 rotationY = mat4(
		        c, 0, -s, 0,
		        0, 1, 0, 0,
		        s, 0, c, 0,
		        0, 0, 0, 1);
		    
		    theta = radians(sin(TOTAL_REAL_WORLD_TIME * ROTATION_X_SPEED) * ROTATION_X_SCALE + ROTATION_X_ADDITION);
		    s = sin(theta);
		    c = cos(theta);
		    MAT4 rotationX = mat4(
		        1, 0, 0, 0,
		        0, c, s, 0,
		        0, -s, c, 0,
		        0, 0, 0, 1);
		    
		    gl_Position = WORLDVIEWPROJ * rotationX * rotationY * POSITION;
		
		    uv = TEXCOORD_0;
		}
		'''
Added resource pack "vertexVersionCentroid.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		#endif
		
		'''
Added resource pack "vertexVersionCentroidUV.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid out vec2 uv;
		
		#else
		
		varying vec2 uv;
		
		#endif
		
		'''
Added resource pack "vertexVersionSimple.h":
	file "vanilla":
		'''
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		
		'''
Removed resource pack "weather.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		
		varying vec2 uv0;
		varying vec2 uv1;
		varying vec4 color;
		
		#ifdef FOG
			varying vec4 fogColor;
		#endif
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		
		void main()
		{
			vec4 diffuse = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		
		#ifdef ALPHA_TEST
			if(diffuse.a < 0.5)
			 	discard;
		#endif
			diffuse *= color;
		
		#ifdef FOG
			diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		#endif
		
			gl_FragColor.rgba = diffuse;
		}
		'''
Removed resource pack "weather.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		attribute vec2 TEXCOORD_0;
		attribute vec2 TEXCOORD_1;
		
		varying vec4 color;
		varying vec2 uv0;
		varying vec2 uv1;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		    uv0.x = TEXCOORD_0.x * 2.0;
		    uv0.y = TEXCOORD_0.y * 10.0;
			uv1 = TEXCOORD_1;
		}
		'''