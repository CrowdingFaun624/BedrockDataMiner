Difference of "shaders_resource_packs" between "1.0.8" and "1.0.9".

Added resource pack "hologram_sr.fragment":
	file "vanilla":
		'''
		// __multiversion__
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		#if __VERSION__ >= 300
		#define varying in
		out vec4 FragColor;
		#define gl_FragColor FragColor
		#endif
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Added resource pack "hologram_sr.vertex":
	file "vanilla":
		'''
		// __multiversion__
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Added resource pack "holoroom_inner_skirt.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Added resource pack "holoroom_inner_skirt.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Added resource pack "holoroom_tableSurface.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Added resource pack "holoroom_tableSurface.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Added resource pack "holoroom_terrain_endcap.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		varying vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Added resource pack "holoroom_terrain_endcap.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		//This file is purely here to let the code compile. It is used only for Hololens, which currently runs only on DX11 compatible devices
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		
		varying vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 119 (+0, -2)
		          '''
		          ...
		 85  85   	#endif
		 86  86   	if(diffuse.a < alphaThreshold)
		 87  87   		discard;
		 88  88   #endif
		 89  89   	
		 90     - #if !defined(ALWAYS_LIT)
		 91  90   	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
		 92     - #endif
		 93  91   
		 94  92   #ifndef SEASONS
		 95  93   
		 96  94   #if !defined(ALPHA_TEST) && !defined(BLEND)
		 97  95   	diffuse.a = inColor.a;
		          ...
		          '''
Removed resource pack "shadow_stencil_overlay.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		
		uniform vec4 CURRENT_COLOR;
		
		varying vec4 color;
		
		void main()
		{
		  gl_FragColor.rgb = mix(color.rgb, CURRENT_COLOR.rgb, color.a);
		  gl_FragColor.a = 1.0;
		}
		'''
Changed resource pack "text.fragment":
	Changed file "vanilla":
		Total line: 53 (+3, -42)
		        '''
		        ...
		33 33   uniform sampler2D TEXTURE_0;
		34 34   uniform vec4 DARKEN;
		35 35   
		36 36   varying vec4 color;
		37 37   
		38    - float median(float a, float b, float c) {
		39    -     return max(min(a, b), min(max(a, b), c));
		40    - }
		41    - 
		42    - uniform float GLYPH_SMOOTH_RADIUS;
		43    - uniform float GLYPH_CUTOFF;
		44    - uniform float OUTLINE_CUTOFF;
		45    - uniform float SHADOW_SMOOTH_RADIUS;
		46    - uniform vec4 OUTLINE_COLOR;
		47    - uniform vec4 SHADOW_COLOR;
		48    - uniform vec2 SHADOW_OFFSET;
		49    - 
		50    - void main()
		51    - {
		52    - 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		53    - 
		54    - #ifdef SMOOTH
		55    - 	const float center = 0.4;
		56    - 	const float radius = 0.1;
		57    - 
		58    - 	diffuse = smoothstep(center - radius, center + radius, diffuse);
		59    - #endif
		60    - 
		61    - #ifdef ALPHA_TEST
		62    - 	if(diffuse.a < 0.5) {
		63    - 		discard;
		64    - 	}
		65    - #endif
		66    - 
		67    - #ifdef MSDF
		68    -     vec4 resultColor = color;
		69    - 
		70    -     float sampleDistance = median(diffuse.r, diffuse.g, diffuse.b);
		71    - 
		72    -     float innerEdgeAlpha = smoothstep(max(0.0, GLYPH_CUTOFF - GLYPH_SMOOTH_RADIUS), min(1.0, GLYPH_CUTOFF + GLYPH_SMOOTH_RADIUS), sampleDistance);
		73    -     // Apply fill cutoff
		74    -     resultColor = mix(OUTLINE_COLOR, resultColor, innerEdgeAlpha);
		75    - 
		   38 + void main()
		   39 + {
		   40 + 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		76    -     float outerEdgeAlpha = smoothstep(max(0.0, OUTLINE_CUTOFF - GLYPH_SMOOTH_RADIUS), min(1.0, OUTLINE_CUTOFF + GLYPH_SMOOTH_RADIUS), sampleDistance);
		77    -     // Apply stroke (outline) cutoff
		78    -     resultColor = vec4(resultColor.rgb, resultColor.a * outerEdgeAlpha);
		79 41   
		80    -     vec4 shadowSample = texture2D(TEXTURE_0, uv - SHADOW_OFFSET);
		81    -     float shadowDistance = shadowSample.a;
		   42 + #ifdef SMOOTH
		   43 + 	const float center = 0.4;
		   44 + 	const float radius = 0.1;
		82    -     float shadowAlpha = smoothstep(max(0.0, OUTLINE_CUTOFF - SHADOW_SMOOTH_RADIUS), min(1.0, OUTLINE_CUTOFF + SHADOW_SMOOTH_RADIUS), shadowDistance);
		83    -     // Apply shadow past the stroke
		84    -     resultColor = mix(vec4(SHADOW_COLOR.rgb, SHADOW_COLOR.a * shadowAlpha), resultColor, outerEdgeAlpha);
		85 45   
		86    - 	  diffuse = resultColor;
		87    - #else
		   46 + 	diffuse = smoothstep(center - radius, center + radius, diffuse);
		88    -     diffuse *= color;
		89 47   #endif
		   48 + 
		   49 + 	if(diffuse.a < 0.5)
		   50 + 		discard;
		90 51   
		   52 + 	gl_FragColor = diffuse * color * DARKEN;
		91    - 	gl_FragColor = diffuse * DARKEN;
		92 53   }
		        '''