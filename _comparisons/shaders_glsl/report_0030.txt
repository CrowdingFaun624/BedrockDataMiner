Difference of "shaders_resource_packs" between "a0.16.2" and "a0.17.0.1" (beta of "1.0.0").

Added resource pack "end_portal.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
			// version 300 code
		
			#ifdef MSAA_FRAMEBUFFER_ENABLED
				#define _centroid centroid
			#else
				#define _centroid
			#endif
		
			#ifndef BYPASS_PIXEL_SHADER
				#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
					_centroid in highp vec2 colorLookupUV;
				#else
					_centroid in vec2 colorLookupUV;
				#endif
			#endif
		
			#define varying in
			#define texture2D texture
			out vec4 FragColor;
			#define gl_FragColor FragColor
		#else
		
			// version 100 code
		
			#ifndef BYPASS_PIXEL_SHADER
				varying vec2 colorLookupUV;
			#endif
		#endif
		
		
		#ifndef BYPASS_PIXEL_SHADER
			varying vec4 color;
			varying POS4 encodedPlane;
			varying POS3 eyePositionInWorld;
			varying POS3 surfacePositionInWorld;
		
			#ifdef FOG
				varying vec4 fogColor;
			#endif
		#endif
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		
		uniform float TIME;
		
		const float MAX_LAYER_DEPTH = 32.0;
		
		void main()
		{
			#ifdef BYPASS_PIXEL_SHADER
				gl_FragColor = vec4(0, 0, 0, 0);
			#else
		
				///// Decode Input Values
				// Decode parallax plane data
				vec3 planeNormal = normalize((encodedPlane.xyz - vec3(0.5,0.5,0.5)) * 2.0);
				float planeDistance = encodedPlane.w * MAX_LAYER_DEPTH;
				// Calculate view direction from the surface position and the eye position
				POS3 viewDirection = normalize(surfacePositionInWorld - eyePositionInWorld);
				// Find any point on the parallax plane, some distance from the actual surface
				POS3 parallaxPlaneOrigin = surfacePositionInWorld.xyz - (planeDistance * planeNormal);
				
				///// Ray-cast for parallax-offset UV
				// Perform ray-plane intersection to find the position on the parallax plane
				highp float t = (dot(parallaxPlaneOrigin - eyePositionInWorld, planeNormal)) / dot(viewDirection, planeNormal);
				POS3 parallaxSurfacePosition = eyePositionInWorld + (t * viewDirection);
		
				///// Ridiculous UV-remapping
				highp vec2 possibleUVResults[3];
				possibleUVResults[0] = parallaxSurfacePosition.yz;
				possibleUVResults[1] = parallaxSurfacePosition.xz;
				possibleUVResults[2] = parallaxSurfacePosition.xy;
				vec3 absNormal = floor(abs(planeNormal) + vec3(0.5,0.5,0.5));
				// Since all normals are orthonormal on <x,y,z>, mask out the correct uv result
				highp vec2 raycastUV = possibleUVResults[0] * absNormal[0] + possibleUVResults[1] * absNormal[1] + possibleUVResults[2] * absNormal[2];
				// Scale the UVs to Minecraft pixel size
				raycastUV /= 16.0;
		
				///// Color Lookup
				vec4 colorSample = texture2D(TEXTURE_1, colorLookupUV);
		
				///// UV Scrolling
				mediump float scaledTime = TIME / 256.0;
				// Scroll direction based on a value unique to the layer (derived from color)
				mediump vec2 scrollDirection = normalize(vec2(colorSample.g - colorSample.b, colorSample.r - (colorSample.g - colorSample.b)));
				mediump mat2 rot = mat2(vec2(scrollDirection.x, scrollDirection.y), vec2(-scrollDirection.y, scrollDirection.x));
				mediump vec2 resultUV = rot * raycastUV;
				// Offset rotation based on a value unique to the layer (still derived from color)
				resultUV += scrollDirection * dot(colorSample, colorSample) * 128.0;
				resultUV.y += scaledTime;
		
				///// Color assembly
				vec4 textureSample = texture2D(TEXTURE_0, resultUV);
				float brightness = 1.0 - (encodedPlane.w);
				vec3 result = textureSample.rgb * colorSample.rgb * color.rgb * brightness;
		
				// Look for hard-coded value to clear the portal first
				if(planeDistance > MAX_LAYER_DEPTH - 1.0) {
					gl_FragColor = vec4(0, 0, 0, 0);
				}
				else {
					gl_FragColor = vec4(result, 1);
				}
		
			#endif
		}
		'''
Added resource pack "end_portal.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		
		#if __VERSION__ >= 300
			#define attribute in
			#define varying out
		
			#ifdef MSAA_FRAMEBUFFER_ENABLED
				#define _centroid centroid
			#else
				#define _centroid
			#endif
		
			#ifndef BYPASS_PIXEL_SHADER
				_centroid out vec2 colorLookupUV;
			#endif
		#else
			#ifndef BYPASS_PIXEL_SHADER
				varying vec2 colorLookupUV;
			#endif
		#endif
		
		#ifndef BYPASS_PIXEL_SHADER
			varying vec4 color;
			varying POS4 encodedPlane;
			varying POS3 eyePositionInWorld;
			varying POS3 surfacePositionInWorld;
		
			#ifdef FOG
				varying vec4 fogColor;
			#endif
		#endif
		
		uniform MAT4 WORLD;
		uniform MAT4 WORLDVIEW;
		uniform MAT4 PROJ;
		
		uniform vec4 FOG_COLOR;
		uniform vec2 FOG_CONTROL;
		uniform float RENDER_DISTANCE;
		uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		uniform POS3 VIEW_POS;
		uniform float FAR_CHUNKS_DISTANCE;
		
		#ifndef BYPASS_PIXEL_SHADER
			attribute POS4 POSITION;
			attribute vec4 COLOR;
			attribute vec2 TEXCOORD_0;
			attribute vec2 TEXCOORD_1;
		#endif
		
		const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		
		void main() {
			///// Vertex Transformation
			POS4 worldPos = vec4((POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz, 1);
			POS4 pos = PROJ * (WORLDVIEW * worldPos);
			gl_Position = pos;
		
			#ifndef BYPASS_PIXEL_SHADER
				///// End Portal Data
				color = vec4(1,1,1,1);
				colorLookupUV = TEXCOORD_0;
				encodedPlane = COLOR; // See BlockTessellator::tessellateEndPortalInWorld(...)
				eyePositionInWorld = VIEW_POS;
				surfacePositionInWorld = worldPos.xyz + VIEW_POS;
		
				///// Fog
				#if defined(FOG)
					#ifdef FANCY
						vec3 relPos = -worldPos.xyz;
						float cameraDepth = length(relPos);
						#ifdef NEAR_WATER
							cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
						#endif
					#else
						float cameraDepth = pos.z;
						#ifdef NEAR_WATER
							vec3 relPos = -worldPos.xyz;
							float camDist = length(relPos);
							cameraDist = camDist / FAR_CHUNKS_DISTANCE;
						#endif
					#endif
					float len = cameraDepth / RENDER_DISTANCE;
					#ifdef ALLOW_FADE
						len += CURRENT_COLOR.r;
					#endif
						fogColor.rgb = FOG_COLOR.rgb;
					fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
				#endif
			#endif
		}
		'''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 154 (+15, -4)
		          '''
		          ...
		 47  47   
		 48  48   #ifdef USE_OVERLAY
		 49  49   	varying vec4 overlayColor;
		 50  50   #endif
		 51  51   
		     52 + #ifdef TINTED_ALPHA_TEST
		     53 + varying float alphaTestMultiplier;
		     54 + #endif
		     55 + 
		 52  56   #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		 53  57   	varying vec4 changeColor;
		 54  58   #endif
		 55  59   
		 56  60   #ifdef GLINT
		          ...
		 70  74   #else
		 71  75   #ifndef USE_COLOR_MASK
		 72  76   #define NEEDS_DISCARD(C)	(C.a < 0.5)
		 73  77   #else
		 74  78   #define NEEDS_DISCARD(C)	(C.a <= 0.0)
		     79 + #endif
		 75  80   #endif
		     81 + 
		     82 + void main()
		     83 + {
		     84 + 	vec4 color = vec4(1.0);
		 76     - #endif
		 77  85   
		     86 + #ifndef NO_TEXTURE
		     87 + #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		 78     - void main()
		     88 + 	color = texture2D( TEXTURE_0, uv );
		     89 + #else
		 79     - {
		 80     - 	vec4 color = vec4(1.0);
		 81     - 
		     90 + 	color = texture2D_AA(TEXTURE_0, uv);
		     91 + #endif // !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		 82     - #ifndef NO_TEXTURE
		 83     - #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		     92 + 
		     93 + #ifdef ALPHA_TEST
		 84     - 	color = texture2D( TEXTURE_0, uv );
		     94 + 	if(NEEDS_DISCARD(color))
		     95 + 		discard;
		     96 + #endif // ALPHA_TEST
		 85     - #else
		 86     - 	color = texture2D_AA(TEXTURE_0, uv);
		 87     - #endif
		 88  97   
		     98 + #ifdef TINTED_ALPHA_TEST
		 89     - 	#ifdef ALPHA_TEST
		     99 + vec4 testColor = color;
		    100 + testColor.a *= alphaTestMultiplier;
		    101 + 	if(NEEDS_DISCARD(testColor))
		    102 + 		discard;
		 90     - 		if(NEEDS_DISCARD(color))
		 91     - 			discard;
		    103 + #endif // TINTED_ALPHA_TEST
		 92     - 	#endif
		    104 + #endif // NO_TEXTURE
		 93     - #endif
		 94 105   
		 95 106   #ifdef USE_COLOR_MASK
		 96 107   	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		 97 108   	color.a *= changeColor.a;
		 98 109   #endif
		          ...
		121 132   
		122 133   #ifdef USE_EMISSIVE
		123 134   	//make glowy stuff
		124 135   	color *= mix(vec4(1.0), light, color.a );
		125 136   #else
		    137 + 	color *= light;
		126     - 	color.rgb *= light.rgb;
		127 138   #endif
		128 139   
		129 140   	//apply fog
		130 141   	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
		131 142   
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 153 (+13, -4)
		          '''
		          ...
		 27  27   uniform vec4 OVERLAY_COLOR;
		 28  28   uniform vec4 CHANGE_COLOR;
		 29  29   uniform vec4 GLINT_COLOR;
		 30  30   uniform vec4 FOG_COLOR;
		 31  31   uniform vec2 FOG_CONTROL;
		     32 + uniform int FOG_MODE;
		 32  33   uniform float RENDER_DISTANCE;
		 33  34   uniform vec4 UV_ANIM;
		 34  35   uniform vec2 UV_OFFSET;
		 35  36   uniform vec2 UV_ROTATION;
		 36  37   uniform vec2 GLINT_UV_SCALE;
		          ...
		 40  41   attribute vec4 NORMAL;
		 41  42   
		 42  43   #ifdef COLOR_BASED
		 43  44   	attribute vec4 COLOR;
		 44  45   #endif
		     46 + 
		     47 + varying vec4 light;
		     48 + varying vec4 fogColor;
		 45  49   
		     50 + #ifdef USE_OVERLAY
		 46     - varying vec4 light;
		     51 + varying vec4 overlayColor;
		 47     - varying vec4 fogColor;
		     52 + #endif
		 48  53   
		     54 + #ifdef TINTED_ALPHA_TEST
		 49     - #ifdef USE_OVERLAY
		     55 + varying float alphaTestMultiplier;
		 50     - varying vec4 overlayColor;
		 51  56   #endif
		 52  57   
		 53  58   #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		 54  59   varying vec4 changeColor;
		 55  60   #endif
		          ...
		102 107   
		103 108   void main()
		104 109   {
		105 110       POS4 pos = WORLDVIEWPROJ * POSITION;
		106 111       gl_Position = pos;
		    112 + 
		    113 +     float L = lightIntensity();
		107 114   
		    115 + #ifdef USE_OVERLAY
		    116 + 	L += OVERLAY_COLOR.a * 0.35;
		    117 +     overlayColor = OVERLAY_COLOR;
		    118 + #endif
		108     -     float L = lightIntensity();
		109 119   
		    120 + #ifdef TINTED_ALPHA_TEST
		110     - #ifdef USE_OVERLAY
		111     - 	L += OVERLAY_COLOR.a * 0.35;
		    121 +     alphaTestMultiplier = OVERLAY_COLOR.a;
		112     -     overlayColor = OVERLAY_COLOR;
		113 122   #endif
		114 123   
		115 124   #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		116 125       changeColor = CHANGE_COLOR;
		117 126   #endif
		          ...
		          '''
Added resource pack "uv_repeat.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
		#else
		#define _centroid
		#endif
		
		_centroid out vec2 uv;
		
		#else
		
		varying vec2 uv;
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		uniform mat4 UV_TRANSFORM;
		
		attribute POS4 POSITION;
		attribute vec2 TEXCOORD_0;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = (UV_TRANSFORM * vec4(TEXCOORD_0, 0, 1)).xy;
		}
		'''