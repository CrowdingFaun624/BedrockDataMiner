Difference of "shaders_resource_packs" between "1.6.0.8" (beta of "1.6.0") and "1.6.0.30" (beta of "1.6.0").

Changed resource pack "banner.vertex":
	Changed file "vanilla":
		Total line: 121 (+15, -3)
		          '''
		          ...
		 10  10   #ifdef USE_SKINNING
		 11  11   #include "shaders/uniformAnimationConstants.h"
		 12  12   #endif
		 13  13   
		 14  14   attribute mediump vec4 POSITION;
		     15 + attribute vec2 TEXCOORD_0;
		     16 + attribute vec4 NORMAL;
		     17 + attribute vec4 COLOR;
		     18 + #if defined(USE_SKINNING)
		     19 + #ifdef MCPE_PLATFORM_NX
		 15     - #ifdef USE_SKINNING
		 16     - #ifdef USE_INT_INDEXING
		 17  20   attribute uint BONEID_0;
		 18  21   #else
		 19  22   attribute float BONEID_0;
		 20  23   #endif
		 21  24   #endif
		 22     - attribute vec2 TEXCOORD_0;
		 23     - attribute vec4 NORMAL;
		 24     - attribute vec4 COLOR;
		 25  25   
		 26  26   #if __VERSION__ >= 300
		 27  27   _centroid varying vec4 uv;
		 28  28   #else
		 29  29   varying vec4 uv;
		          ...
		 47  47   const float ZFAC = 0.1;
		 48  48   
		 49  49   float lightIntensity() {
		 50  50   #ifdef FANCY
		 51  51   #ifdef USE_SKINNING
		     52 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     53 +     vec3 N = normalize(BONES[int(BONEID_0)] * NORMAL).xyz;
		     54 + #else
		     55 +     vec3 N = normalize(BONE * NORMAL).xyz;
		 52     -     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		     56 + #endif
		 53  57   #else
		     58 +     vec3 N = normalize(WORLD * NORMAL).xyz;
		 54     -     vec3 N = normalize( WORLD * NORMAL ).xyz;
		 55  59   #endif
		 56  60   
		 57  61       N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		 58  62   
		 59  63       //take care of double sided polygons on materials without culling
		 60  64   #ifdef FLIP_BACKFACES
		 61  65   #ifdef USE_SKINNING
		     66 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     67 +     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		     68 + #else
		     69 + 	vec3 viewDir = normalize((BONE * POSITION).xyz);
		 62     -     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		     70 + #endif
		 63  71   #else
		 64  72       vec3 viewDir = normalize((WORLD * POSITION).xyz);
		 65  73   #endif
		 66  74       if( dot(N, viewDir) > 0.0 )
		 67  75           N *= -1.0;
		          ...
		 76  84   
		 77  85   
		 78  86   void main()
		 79  87   {
		 80  88   #ifdef USE_SKINNING
		     89 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     90 +     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		     91 + #else
		     92 + 	POS4 pos = WORLDVIEWPROJ * BONE * POSITION;
		 81     -     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		     93 + #endif
		 82  94   #else
		 83  95       POS4 pos = WORLDVIEWPROJ * POSITION;
		 84  96   #endif
		 85  97       gl_Position = pos;
		 86  98   
		          ...
		          '''
Changed resource pack "barrier.vertex":
	Changed file "vanilla":
		Total line: 61 (+0, -0)
		        '''
		 1  1   // __multiversion__
		 2  2   
		    3 + #include "shaders/vertexVersionCentroid.h"
		 3    - #include "shaders/vertexVersionCentroidUV.h"
		 4  4   
		 5  5   #include "shaders/uniformWorldConstants.h"
		 6  6   #include "shaders/uniformPerFrameConstants.h"
		 7  7   #include "shaders/uniformShaderConstants.h"
		 8  8   #include "shaders/uniformRenderChunkConstants.h"
		        ...
		        '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 157 (+11, -59)
		          '''
		          ...
		  9   9   #ifdef USE_SKINNING
		 10  10   #include "shaders/uniformAnimationConstants.h"
		 11  11   #endif
		 12  12   
		 13  13   attribute mediump vec4 POSITION;
		 14     - #ifdef USE_SKINNING
		 15     - #ifdef USE_INT_INDEXING
		 16     - attribute uint BONEID_0;
		 17     - #else
		 18     - attribute float BONEID_0;
		 19     - #endif
		 20     - #endif
		 21     - attribute vec2 TEXCOORD_0;
		 22     - attribute vec4 NORMAL;
		 23     - 
		 24     - #ifdef COLOR_BASED
		 25     - 	attribute vec4 COLOR;
		 26     - #endif
		 27     - 
		 28     - varying vec4 light;
		 29     - varying vec4 fogColor;
		 30     - 
		 31     - #ifdef USE_OVERLAY
		 32     - varying vec4 overlayColor;
		 33     - #endif
		 34     - 
		 35     - #ifdef TINTED_ALPHA_TEST
		 36     - varying float alphaTestMultiplier;
		 37     - #endif
		 38     - 
		 39     - #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		 40     - varying vec4 changeColor;
		 41     - #endif
		 42     - 
		 43     - #ifdef GLINT
		 44     - 	varying vec2 layer1UV;
		 45     - 	varying vec2 layer2UV;
		 46     -     varying vec4 tileLightColor;
		 47     - 	varying vec4 glintColor;
		 48     - #endif
		 49     - 
		 50     - const float AMBIENT = 0.45;
		 51     - 
		 52     - const float XFAC = -0.1;
		 53     - const float ZFAC = 0.1;
		 54     - 
		     14 + attribute vec2 TEXCOORD_0;
		     15 + attribute vec4 NORMAL;
		     16 + #if defined(USE_SKINNING)
		     17 + #ifdef MCPE_PLATFORM_NX
		     18 + attribute uint BONEID_0;
		     19 + #else
		     20 + attribute float BONEID_0;
		     21 + #endif
		     22 + #endif
		     23 + 
		     24 + #ifdef COLOR_BASED
		     25 + 	attribute vec4 COLOR;
		     26 + #endif
		     27 + 
		     28 + varying vec4 light;
		     29 + varying vec4 fogColor;
		     30 + 
		     31 + #ifdef USE_OVERLAY
		     32 + varying vec4 overlayColor;
		     33 + #endif
		     34 + 
		     35 + #ifdef TINTED_ALPHA_TEST
		     36 + varying float alphaTestMultiplier;
		 55     - float lightIntensity() {
		 56     - #ifdef FANCY
		 57     - #ifdef USE_SKINNING
		 58     - #ifdef NO_DYNAMIC_ARRAY_ACCESS
		 59     - 	vec3 N;
		 60     - 	if ( BONEID_0 == 0.0 )
		 61     - 		N = normalize( BONES[0] * NORMAL ).xyz;
		 62     - 	else if ( BONEID_0 == 1.0 )
		 63     - 		N = normalize( BONES[1] * NORMAL ).xyz;
		 64     - 	else if ( BONEID_0 == 2.0 )
		 65     - 		N = normalize( BONES[2] * NORMAL ).xyz;
		 66     - 	else if ( BONEID_0 == 3.0 )
		 67     - 		N = normalize( BONES[3] * NORMAL ).xyz;
		 68     - 	else if ( BONEID_0 == 4.0 )
		 69     - 		N = normalize( BONES[4] * NORMAL ).xyz;
		 70     - 	else if ( BONEID_0 == 5.0 )
		 71     - 		N = normalize( BONES[5] * NORMAL ).xyz;
		 72     - 	else if ( BONEID_0 == 6.0 )
		 73     - 		N = normalize( BONES[6] * NORMAL ).xyz;
		 74     - 	else if ( BONEID_0 == 7.0 )
		 75     - 		N = normalize( BONES[7] * NORMAL ).xyz;
		 76     - #else
		 77     -     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		 78  37   #endif
		     38 + 
		     39 + #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		 79     - #else
		     40 + varying vec4 changeColor;
		 80     -     vec3 N = normalize( WORLD * NORMAL ).xyz;
		 81  41   #endif
		 82     - 
		 83     -     N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		 84  42   
		 85     -     //take care of double sided polygons on materials without culling
		 86     - #ifdef FLIP_BACKFACES
		 87     - #ifdef USE_SKINNING
		     43 + #ifdef GLINT
		     44 + 	varying vec2 layer1UV;
		 88     - #ifdef NO_DYNAMIC_ARRAY_ACCESS
		 89     - 	vec3 viewDir;
		 90     - 	if ( BONEID_0 == 0.0 )
		     45 + 	varying vec2 layer2UV;
		     46 +     varying vec4 tileLightColor;
		     47 + 	varying vec4 glintColor;
		     48 + #endif
		     49 + 
		     50 + const float AMBIENT = 0.45;
		     51 + 
		 91     - 		viewDir = normalize((BONES[0] * POSITION).xyz);
		 92     - 	else if ( BONEID_0 == 1.0 )
		 93     - 		viewDir = normalize((BONES[1] * POSITION).xyz);
		 94     - 	else if ( BONEID_0 == 2.0 )
		 95     - 		viewDir = normalize((BONES[2] * POSITION).xyz);
		 96     - 	else if ( BONEID_0 == 3.0 )
		 97     - 		viewDir = normalize((BONES[3] * POSITION).xyz);
		 98     - 	else if ( BONEID_0 == 4.0 )
		     52 + const float XFAC = -0.1;
		     53 + const float ZFAC = 0.1;
		     54 + 
		 99     - 		viewDir = normalize((BONES[4] * POSITION).xyz);
		100     - 	else if ( BONEID_0 == 5.0 )
		101     - 		viewDir = normalize((BONES[5] * POSITION).xyz);
		102     - 	else if ( BONEID_0 == 6.0 )
		     55 + float lightIntensity() {
		     56 + #ifdef FANCY
		     57 + #ifdef USE_SKINNING
		     58 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     59 +     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		103     - 		viewDir = normalize((BONES[6] * POSITION).xyz);
		104     - 	else if ( BONEID_0 == 7.0 )
		105     - 		viewDir = normalize((BONES[7] * POSITION).xyz);
		106     - #else
		107     -     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		108     - #endif
		109  60   #else
		     61 +     vec3 N = normalize( BONE * NORMAL ).xyz;
		110     -     vec3 viewDir = normalize((WORLD * POSITION).xyz);
		111  62   #endif
		     63 + #else
		112     -     if( dot(N, viewDir) > 0.0 )
		     64 +     vec3 N = normalize( WORLD * NORMAL ).xyz;
		113     -         N *= -1.0;
		114  65   #endif
		     66 + 
		     67 +     N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		115  68   
		     69 +     //take care of double sided polygons on materials without culling
		     70 + #ifdef FLIP_BACKFACES
		     71 + #ifdef USE_SKINNING
		     72 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     73 +     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		116     -     float yLight = (1.0+N.y) * 0.5;
		117     -     return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		118  74   #else
		     75 + 	vec3 viewDir = normalize((BONE * POSITION).xyz);
		119     -     return 1.0;
		120  76   #endif
		     77 + #else
		121     - }
		122     - 
		     78 +     vec3 viewDir = normalize((WORLD * POSITION).xyz);
		     79 + #endif
		     80 +     if( dot(N, viewDir) > 0.0 )
		     81 +         N *= -1.0;
		123     - #ifdef GLINT
		124     - vec2 calculateLayerUV(float offset, float rotation) {
		125     - 	vec2 uv = TEXCOORD_0;
		126     - 	uv -= 0.5;
		     82 + #endif
		     83 + 
		     84 +     float yLight = (1.0+N.y) * 0.5;
		     85 +     return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		     86 + #else
		     87 +     return 1.0;
		127     - 	float rsin = sin(rotation);
		128     - 	float rcos = cos(rotation);
		129     - 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		130     - 	uv.x += offset;
		131     - 	uv += 0.5;
		132     - 
		     88 + #endif
		133     - 	return uv * GLINT_UV_SCALE;
		134  89   }
		135     - #endif
		136  90   
		137     - void main()
		138     - {
		     91 + #ifdef GLINT
		     92 + vec2 calculateLayerUV(float offset, float rotation) {
		     93 + 	vec2 uv = TEXCOORD_0;
		     94 + 	uv -= 0.5;
		     95 + 	float rsin = sin(rotation);
		     96 + 	float rcos = cos(rotation);
		     97 + 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		     98 + 	uv.x += offset;
		     99 + 	uv += 0.5;
		    100 + 
		    101 + 	return uv * GLINT_UV_SCALE;
		    102 + }
		    103 + #endif
		    104 + 
		    105 + void main()
		    106 + {
		    107 + #ifdef USE_SKINNING
		    108 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		    109 +     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		139     - #ifdef USE_SKINNING
		140     - #ifdef NO_DYNAMIC_ARRAY_ACCESS
		141     - 	POS4 pos;
		142     - 	if ( BONEID_0 == 0.0 )
		143     - 		pos = WORLDVIEWPROJ * BONES[0] * POSITION;
		144     - 	else if ( BONEID_0 == 1.0 )
		145     - 		pos = WORLDVIEWPROJ * BONES[1] * POSITION;
		146     - 	else if ( BONEID_0 == 2.0 )
		147     - 		pos = WORLDVIEWPROJ * BONES[2] * POSITION;
		148     - 	else if ( BONEID_0 == 3.0 )
		149     - 		pos = WORLDVIEWPROJ * BONES[3] * POSITION;
		150     - 	else if ( BONEID_0 == 4.0 )
		151     - 		pos = WORLDVIEWPROJ * BONES[4] * POSITION;
		152     - 	else if ( BONEID_0 == 5.0 )
		153     - 		pos = WORLDVIEWPROJ * BONES[5] * POSITION;
		154     - 	else if ( BONEID_0 == 6.0 )
		155     - 		pos = WORLDVIEWPROJ * BONES[6] * POSITION;
		156     - 	else if ( BONEID_0 == 7.0 )
		157     - 		pos = WORLDVIEWPROJ * BONES[7] * POSITION;
		158 110   #else
		    111 +     POS4 pos = WORLDVIEWPROJ * BONE * POSITION;
		159     -     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		160 112   #endif
		161 113   #else
		162 114       POS4 pos = WORLDVIEWPROJ * POSITION;
		163 115   #endif
		164 116       gl_Position = pos;
		          ...
		197 149   	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		198 150   	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		199 151       tileLightColor = TILE_LIGHT_COLOR;
		200 152   #endif
		201 153   
		    154 + 	//fog
		202     - //fog
		203 155       fogColor.rgb = FOG_COLOR.rgb;
		204 156   	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		205 157   }
		          '''
Changed resource pack "uniformAnimationConstants.h":
	Changed file "vanilla":
		Total line: 17 (+4, -0)
		        '''
		        ...
		 5  5   
		 6  6   #ifdef MCPE_PLATFORM_NX
		 7  7   layout(binding = 4) uniform AnimationConstants {
		 8  8   #endif
		 9  9   // BEGIN_UNIFORM_BLOCK(AnimationConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		   10 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		   11 + UNIFORM MAT4 BONES[8];
		   12 + #else
		   13 + UNIFORM MAT4 BONE;
		10    - UNIFORM MAT4 BONES[8];
		   14 + #endif
		11 15   END_UNIFORM_BLOCK
		12 16   
		13 17   #endif
		        '''
Changed resource pack "uv_scale.vertex":
	Changed file "vanilla":
		Total line: 34 (+0, -15)
		        '''
		        ...
		 8  8   #ifdef USE_SKINNING
		 9  9   #include "shaders/uniformAnimationConstants.h"
		10 10   #endif
		11 11   
		12 12   attribute mediump vec4 POSITION;
		13    - #ifdef USE_SKINNING
		14    - #ifdef USE_INT_INDEXING
		15    - attribute uint BONEID_0;
		16    - #else
		17    - attribute float BONEID_0;
		18    - #endif
		19    - #endif
		20    - attribute vec2 TEXCOORD_0;
		21    - 
		22    - void main()
		23    - {
		24    - #ifdef USE_SKINNING
		25    - #ifdef NO_DYNAMIC_ARRAY_ACCESS
		26    - 	if ( BONEID_0 == 0.0 )
		27    - 		gl_Position = WORLDVIEWPROJ * (BONES[0] * POSITION);
		   13 + attribute vec2 TEXCOORD_0;
		   14 + #if defined(USE_SKINNING)
		   15 + #ifdef MCPE_PLATFORM_NX
		   16 + attribute uint BONEID_0;
		   17 + #else
		   18 + attribute float BONEID_0;
		   19 + #endif
		   20 + #endif
		   21 + 
		   22 + void main()
		   23 + {
		   24 + #ifdef USE_SKINNING
		   25 + #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		   26 + 	gl_Position = WORLDVIEWPROJ * (BONES[int(BONEID_0)] * POSITION);
		28    - 	else if ( BONEID_0 == 1.0 )
		29    - 		gl_Position = WORLDVIEWPROJ * (BONES[1] * POSITION);
		30    - 	else if ( BONEID_0 == 2.0 )
		31    - 		gl_Position = WORLDVIEWPROJ * (BONES[2] * POSITION);
		32    - 	else if ( BONEID_0 == 3.0 )
		33    - 		gl_Position = WORLDVIEWPROJ * (BONES[3] * POSITION);
		34    - 	else if ( BONEID_0 == 4.0 )
		35    - 		gl_Position = WORLDVIEWPROJ * (BONES[4] * POSITION);
		36    - 	else if ( BONEID_0 == 5.0 )
		37    - 		gl_Position = WORLDVIEWPROJ * (BONES[5] * POSITION);
		38    - 	else if ( BONEID_0 == 6.0 )
		39    - 		gl_Position = WORLDVIEWPROJ * (BONES[6] * POSITION);
		40    - 	else if ( BONEID_0 == 7.0 )
		41    - 		gl_Position = WORLDVIEWPROJ * (BONES[7] * POSITION);
		42 27   #else
		   28 + 	gl_Position = WORLDVIEWPROJ * (BONE * POSITION);
		43    - 	gl_Position = WORLDVIEWPROJ * (BONES[int(BONEID_0)] * POSITION);
		44 29   #endif
		45 30   #else
		46 31       gl_Position = WORLDVIEWPROJ * POSITION;
		47 32   #endif
		48 33       uv = TEXCOORD_0 * GLINT_UV_SCALE.xy;
		        ...
		        '''