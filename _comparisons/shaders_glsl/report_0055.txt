Difference of "shaders_resource_packs" between "1.2.20.1" (beta of "1.4.0") and "1.2.20.2" (beta of "1.4.0").

Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 161 (+4, -5)
		          '''
		  1   1   // __multiversion__
		  2   2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		  3   3   
		      4 + 
		  4   5   #include "shaders/fragmentVersionCentroidUV.h"
		      6 + #include "shaders/uniformEntityConstants.h"
		      7 + 
		  5   8   
		  6   9   #include "shaders/uniformShaderConstants.h"
		  7  10   #include "shaders/util.h"
		  8  11   
		  9  12   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		          ...
		 29  32   #endif
		 30  33   
		 31  34   #ifdef GLINT
		 32  35   	varying vec2 layer1UV;
		 33  36   	varying vec2 layer2UV;
		 34     - 	varying vec4 tileLightColor;
		     37 + 	varying vec4 tileLightColor;
		 35     - 	varying vec4 glintColor;
		 36     - #endif
		 37     - 
		 38     - #ifdef MULTIPLICATIVE_TINT_COLOR
		     38 + 	varying vec4 glintColor;
		 39     - 	varying vec3 multiplicativeTintColor;
		 40  39   #endif
		 41  40   
		 42  41   vec4 glintBlend(vec4 dest, vec4 source) {
		 43  42   	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		 44  43   	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
		          ...
		116 115   #endif
		117 116   
		118 117   #ifdef MULTIPLICATIVE_TINT
		119 118   	vec4 tintTex = texture2D(TEXTURE_1, uv);
		120 119   #ifdef MULTIPLICATIVE_TINT_COLOR
		    120 + 	tintTex.rgb = tintTex.rgb * MULTIPLICATIVE_TINT_CHANGE_COLOR.rgb;
		121     - 	tintTex.rgb = tintTex.rgb * multiplicativeTintColor;
		122 121   #endif
		123 122   
		124 123   #ifdef ALPHA_TEST
		125 124   	color.rgb = mix(color.rgb, tintTex.rgb, tintTex.a);
		126 125   	if (color.a + tintTex.a <= 0.0) {
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 123 (+4, -12)
		          '''
		          ...
		 35  35   	varying vec2 layer2UV;
		 36  36       varying vec4 tileLightColor;
		 37  37   	varying vec4 glintColor;
		 38  38   #endif
		 39  39   
		 40     - #ifdef MULTIPLICATIVE_TINT_COLOR
		 41     - 	varying vec3 multiplicativeTintColor;
		 42     - #endif
		 43     - 
		 44  40   const float AMBIENT = 0.45;
		 45  41   
		 46  42   const float XFAC = -0.1;
		 47  43   const float ZFAC = 0.1;
		 48  44   
		          ...
		100  96       changeColor = CHANGE_COLOR;
		101  97   #endif
		102  98   
		103  99       light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		104 100   
		105     - #ifdef COLOR_BASED
		106     - 	light *= COLOR;
		107     - #endif
		108     -     
		    101 + #ifdef COLOR_BASED
		    102 + 	light *= COLOR;
		109     - #ifndef NO_TEXTURE
		110     -     uv = TEXCOORD_0;
		111 103   #endif
		    104 +     
		112     - 
		    105 + #ifndef NO_TEXTURE
		    106 +     uv = TEXCOORD_0;
		113     - #ifdef USE_UV_ANIM
		114     - 	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
		115 107   #endif
		116 108   
		117     - #ifdef GLINT
		118     - 	glintColor = GLINT_COLOR;
		119     - 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		    109 + #ifdef USE_UV_ANIM
		    110 + 	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
		120     - 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		121     -     tileLightColor = TILE_LIGHT_COLOR;
		122 111   #endif
		123 112   
		    113 + #ifdef GLINT
		    114 + 	glintColor = GLINT_COLOR;
		    115 + 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		    116 + 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		    117 +     tileLightColor = TILE_LIGHT_COLOR;
		124     - #ifdef MULTIPLICATIVE_TINT_COLOR
		125     - 	multiplicativeTintColor = MULTIPLICATIVE_TINT_CHANGE_COLOR.rgb;
		126 118   #endif
		127 119   
		128 120   //fog
		129 121       fogColor.rgb = FOG_COLOR.rgb;
		130 122   	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		          ...
		          '''