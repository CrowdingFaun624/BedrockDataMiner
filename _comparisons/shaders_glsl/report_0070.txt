Difference of "shaders_resource_packs" between "1.11.3" and "1.11.4".

Added resource pack "hb_batched.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This shader is from the Gameface library modified to work in the
		// Bedrock engine and heavily depends on Gameface's functionality, why
		// some numbers and values seem arbitrary or "magic".
		
		#if __VERSION__ >= 300
			#include "fragmentVersionSimple.h"
			#include "uniformMacro.h"
		
			LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
			LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
			LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;
		
			varying vec4 ColorOut;
			varying vec4 AdditionalOut;
			flat varying float ShaderTypeOut;
		
			// Keep in sync w/ SDFGenerator
			#define DISTANCE_FIELD_MULTIPLIER 7.96875
			#define DISTANCE_FIELD_MULTIPLIER_DIV2 3.984375
			#define DISTANCE_FIELD_THRESHOLD 0.50196078431
		
			#define SHOW_DF 0
		
			float GetLuminance(vec3 color) {
				// https://en.wikipedia.org/wiki/Relative_luminance
				return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
			}
		
			void ShadeGeometry(inout vec4 color, inout float alpha) {
				int ShaderType = int(ShaderTypeOut);
		
				if (ShaderType == 0) {
					// Rect/stroke rect
					alpha = min(1.0, AdditionalOut.x * AdditionalOut.y);
				} else if (ShaderType == 3) {
					// Image
					color = texture2D(TEXTURE_0, AdditionalOut.xy);
					alpha = ColorOut.a * clamp(AdditionalOut.z, 0.0, 1.0);
				} else if (ShaderType == 17) {
					// Raster text
					float dfValue = texture2D(TEXTURE_1, AdditionalOut.xy).r;
					float lum = GetLuminance(ColorOut.xyz);
					color = ColorOut * pow(dfValue, 1.45 - lum);
				} else if (ShaderType == 18) {
					// SDF Text
					float dfValue = texture2D(TEXTURE_2, AdditionalOut.xy).r;
		
					#if SHOW_DF
						color = vec4(dfValue, dfValue, dfValue, 1);
					#else
						// Values should be in [-4, 4]
						dfValue = (dfValue * DISTANCE_FIELD_MULTIPLIER) - DISTANCE_FIELD_MULTIPLIER_DIV2;
						dfValue = smoothstep(-DISTANCE_FIELD_THRESHOLD / AdditionalOut.z, DISTANCE_FIELD_THRESHOLD / AdditionalOut.z, dfValue);
		
						float lum = GetLuminance(ColorOut.xyz);
						color = ColorOut * pow(dfValue, 1.45 - lum);
					#endif
				}
			}
		
			void main() {
				float alpha = 1.0;
				vec4 color = ColorOut;
		
				ShadeGeometry(color, alpha);
		
				gl_FragColor = color * alpha;
			}
		#else
			void main() {
				gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
			}
		#endif
		'''
Added resource pack "hb_batched.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This shader is from the Gameface library modified to work in the
		// Bedrock engine and heavily depends on Gameface's functionality, why
		// some numbers and values seem arbitrary or "magic".
		
		#if __VERSION__ >= 300
			#include "vertexVersionSimple.h"
		
			attribute vec3 HB_POSITION;
			attribute vec4 HB_COLOR;
			attribute vec4 HB_ADDITIONAL;
		
			varying vec4 ColorOut;
			varying vec4 AdditionalOut;
			flat varying float ShaderTypeOut;
		
			void main() {
				ShaderTypeOut = HB_ADDITIONAL.w;
		
				vec4 outPos = vec4(HB_POSITION, 1.0);
		
				// Translate to -1..1 with perspective correction
				float w = outPos.w;
				outPos.x = outPos.x * 2.0 - w;
				outPos.y = (w - outPos.y) * 2.0 - w;
		
				ColorOut = HB_COLOR;
				AdditionalOut = HB_ADDITIONAL;
		
				gl_Position = outPos;
			}
		#else
			void main() {
				gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
			}
		#endif
		'''
Changed resource pack "hb_blur.fragment":
	Changed file "vanilla":
		Total line: 33 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "uniformUIEffectsPixelConstants.h"
		 5  7   #include "fragmentVersionCentroidUV.h"
		 6  8   
		 7  9   varying vec4 ColorOut;
		   10 + varying vec4 AdditionalOut;
		   11 + // We need this here even if we do not use it as some drivers require
		   12 + // the verying variables to match between the vertex and fragment shaders.
		   13 + varying vec3 ScreenNormalPosition;
		 8    - varying vec4 AdditionalOut;
		 9 14   
		10 15   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		11 16   
		12 17   void main() {
		13 18   	vec4 outColor = vec4(0.0, 0.0, 0.0, 0.0);
		        ...
		        '''
Changed resource pack "hb_hairline.fragment":
	Changed file "vanilla":
		Total line: 19 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "uniformMacro.h"
		 5  7   #include "fragmentVersionCentroidUV.h"
		 6  8   
		 7  9   varying vec4 ColorOut;
		        ...
		        '''
Changed resource pack "hb_path.fragment":
	Changed file "vanilla":
		Total line: 14 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"
		 7  9   
		        ...
		        '''
Changed resource pack "hb_path.vertex":
	Changed file "vanilla":
		Total line: 24 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "vertexVersionSimple.h"
		 5  7   #include "uniformUITransformsConstants.h"
		 6  8   
		 7  9   attribute vec4 HB_POSITION;
		        ...
		        '''
Changed resource pack "hb_path_hairline.fragment":
	Changed file "vanilla":
		Total line: 37 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIStandardPrimitivePixelConstants.h"
		 7  9   #include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"
		        ...
		        '''
Changed resource pack "hb_renoir.fragment":
	Changed file "vanilla":
		Total line: 52 (+4, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIRenoirShaderPSConstants.h"
		 7  9   
		 8 10   varying vec4 ColorOut;
		 9 11   varying vec4 AdditionalOut;
		   12 + // We need this here even if we do not use it as some drivers require
		   13 + // the verying variables to match between the vertex and fragment shaders.
		10 14   varying vec3 ScreenNormalPosition;
		11 15   varying vec4 VaryingParam0;
		12 16   varying vec4 VaryingParam1;
		13 17   
		14 18   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		        ...
		        '''
Changed resource pack "hb_renoir.vertex":
	Changed file "vanilla":
		Total line: 45 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "vertexVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUITransformsConstants.h"
		 7  9   #include "uniformUIRenoirShaderVSConstants.h"
		        ...
		        '''
Changed resource pack "hb_standard.fragment":
	Changed file "vanilla":
		Total line: 18 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   varying vec4 ColorOut;
		    9 + varying vec4 AdditionalOut;
		   10 + // We need this here even if we do not use it as some drivers require
		   11 + // the verying variables to match between the vertex and fragment shaders.
		   12 + varying vec3 ScreenNormalPosition;
		 7    - varying vec4 AdditionalOut;
		 8 13   
		 9 14   void main() {
		10 15   	float alpha = min(1.0, AdditionalOut.z * AdditionalOut.w);
		11 16   
		12 17   	gl_FragColor = ColorOut * alpha;
		        ...
		        '''
Changed resource pack "hb_standard.vertex":
	Changed file "vanilla":
		Total line: 31 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "vertexVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUITransformsConstants.h"
		 7  9   
		        ...
		        '''
Changed resource pack "hb_standard_circle.fragment":
	Changed file "vanilla":
		Total line: 23 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIGlobalPixelConstants.h"
		 7  9   
		        ...
		        '''
Changed resource pack "hb_standard_ellipse.fragment":
	Changed file "vanilla":
		Total line: 49 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   varying vec4 ColorOut;
		 7  9   varying vec4 AdditionalOut;
		        ...
		        '''
Changed resource pack "hb_standard_stroke_circle.fragment":
	Changed file "vanilla":
		Total line: 24 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   varying vec4 ColorOut;
		 7  9   varying vec4 AdditionalOut;
		        ...
		        '''
Changed resource pack "hb_standard_stroke_ellipse.fragment":
	Changed file "vanilla":
		Total line: 75 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"
		 7  9   
		        ...
		        '''
Changed resource pack "hb_standard_texture.fragment":
	Changed file "vanilla":
		Total line: 40 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIEffectsPixelConstants.h"
		 7  9   #include "uniformUIStandardPrimitivePixelConstants.h"
		 8 10   
		 9 11   varying vec4 ColorOut;
		   12 + varying vec4 AdditionalOut;
		   13 + // We need this here even if we do not use it as some drivers require
		   14 + // the verying variables to match between the vertex and fragment shaders.
		   15 + varying vec3 ScreenNormalPosition;
		10    - varying vec4 AdditionalOut;
		11 16   
		12 17   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		13 18   
		14 19   void main() {
		15 20   	// snes-todo: Put this in separate shader when Gameface sets ST_StandardTextureWithColorMatrix on filters (other than drop-shadow)
		        ...
		        '''
Changed resource pack "hb_standard_texture_with_color_matrix.fragment":
	Changed file "vanilla":
		Total line: 32 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIEffectsPixelConstants.h"
		 7  9   
		 8 10   varying vec4 ColorOut;
		   11 + varying vec4 AdditionalOut;
		   12 + // We need this here even if we do not use it as some drivers require
		   13 + // the verying variables to match between the vertex and fragment shaders.
		   14 + varying vec3 ScreenNormalPosition;
		 9    - varying vec4 AdditionalOut;
		10 15   
		11 16   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		12 17   
		13 18   void main() {
		14 19   	vec4 baseColor = texture2D(TEXTURE_0, AdditionalOut.xy);
		        ...
		        '''
Changed resource pack "hb_stencil.fragment":
	Changed file "vanilla":
		Total line: 16 (+7, -1)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		    5 + 
		    6 + #include "fragmentVersionSimple.h"
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  7   
		    8 + // We need this here even if we do not use it as some drivers require
		    9 + // the verying variables to match between the vertex and fragment shaders.
		   10 + varying vec4 ColorOut;
		   11 + varying vec4 AdditionalOut;
		 4    - #include "fragmentVersionSimple.h"
		 5    - 
		   12 + varying vec3 ScreenNormalPosition;
		 6    - varying vec4 outColor;
		 7 13   
		 8 14   void main() {
		 9 15   	gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
		10 16   }
		        '''
Changed resource pack "hb_stencil_circle.fragment":
	Changed file "vanilla":
		Total line: 25 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   varying vec4 ColorOut;
		 7  9   varying vec4 AdditionalOut;
		        ...
		        '''
Changed resource pack "hb_stencil_path.fragment":
	Changed file "vanilla":
		Total line: 16 (+2, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   varying vec2 ExtraParams;
		 7  9   
		        ...
		        '''
Changed resource pack "hb_stencil_texture.fragment":
	Changed file "vanilla":
		Total line: 25 (+6, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   #include "uniformMacro.h"
		 6  8   
		    9 + // We need this here even if we do not use it as some drivers require
		   10 + // the verying variables to match between the vertex and fragment shaders.
		   11 + varying vec4 ColorOut;
		 7 12   varying vec4 AdditionalOut;
		   13 + varying vec3 ScreenNormalPosition;
		 8 14   
		 9 15   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		10 16   
		11 17   void main() {
		12 18   	float alpha = texture2D(TEXTURE_0, AdditionalOut.xy).a;
		        ...
		        '''
Changed resource pack "hb_text.fragment":
	Changed file "vanilla":
		Total line: 25 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   #include "uniformMacro.h"
		 6  8   
		 7  9   varying vec4 ColorOut;
		   10 + varying vec4 AdditionalOut;
		   11 + // We need this here even if we do not use it as some drivers require
		   12 + // the verying variables to match between the vertex and fragment shaders.
		   13 + varying vec3 ScreenNormalPosition;
		 8    - varying vec4 AdditionalOut;
		 9 14   
		10 15   LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
		11 16   
		12 17   float GetLuminance(vec3 color) {
		13 18   	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		        ...
		        '''
Removed resource pack "hb_text.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "vertexVersionSimple.h"
		
		#include "uniformUITransformsConstants.h"
		
		attribute vec3 HB_POSITION;
		attribute vec4 HB_COLOR;
		attribute vec4 HB_ADDITIONAL;
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main(void)
		{
			vec4 outPos = vec4(HB_POSITION, 1.0) * TRANSFORM;
			ScreenNormalPosition = HB_POSITION.xyz;
		
			// Translate to -1..1 with perspective correction
			float w = outPos.w;
			outPos.x = outPos.x * 2.0 - w;
			outPos.y = (w - outPos.y) * 2.0 - w;
		
			ColorOut = HB_COLOR;
			AdditionalOut = HB_ADDITIONAL;
		
			gl_Position = outPos;
		}
		'''
Changed resource pack "hb_text_sdf.fragment":
	Changed file "vanilla":
		Total line: 42 (+6, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"
		 7  9   
		 8 10   varying vec4 ColorOut;
		   11 + varying vec4 AdditionalOut;
		   12 + // We need this here even if we do not use it as some drivers require
		   13 + // the verying variables to match between the vertex and fragment shaders.
		   14 + varying vec3 ScreenNormalPosition;
		 9    - varying vec4 AdditionalOut;
		10 15   
		11 16   LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;
		12 17   
		13 18   // Keep in sync w/ SDFGenerator
		14 19   #define DISTANCE_FIELD_MULTIPLIER 7.96875
		        ...
		16 21   #define DISTANCE_FIELD_THRESHOLD 0.50196078431
		17 22   
		18 23   #define SHOW_DF 0
		19 24   
		20 25   float GetLuminance(vec3 color) {
		   26 + 	// https://en.wikipedia.org/wiki/Relative_luminance
		21 27   	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		22 28   }
		23 29   
		24 30   void main() {
		25 31   	float dfValue = texture2D(TEXTURE_2, AdditionalOut.xy).r;
		        ...
		        '''
Changed resource pack "hb_text_stroke_sdf.fragment":
	Changed file "vanilla":
		Total line: 36 (+5, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   
		 6  8   #include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"
		 7  9   
		 8 10   varying vec4 ColorOut;
		   11 + varying vec4 AdditionalOut;
		   12 + // We need this here even if we do not use it as some drivers require
		   13 + // the verying variables to match between the vertex and fragment shaders.
		   14 + varying vec3 ScreenNormalPosition;
		 9    - varying vec4 AdditionalOut;
		10 15   
		11 16   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		12 17   
		13 18   #define SHOW_DF 0
		14 19   
		        ...
		        '''
Changed resource pack "hb_yuv_2_rgb.fragment":
	Changed file "vanilla":
		Total line: 32 (+6, -0)
		        '''
		 1  1   // __multiversion__
		    2 + // This shader is from the Gameface library modified to work in the
		    3 + // Bedrock engine and heavily depends on Gameface's functionality, why
		    4 + // some numbers and values seem arbitrary or "magic".
		 2    - // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  5   
		 4  6   #include "fragmentVersionSimple.h"
		 5  7   #include "uniformMacro.h"
		 6  8   
		 7  9   varying vec4 ColorOut;
		   10 + varying vec4 AdditionalOut;
		   11 + // We need this here even if we do not use it as some drivers require
		   12 + // the verying variables to match between the vertex and fragment shaders.
		   13 + varying vec3 ScreenNormalPosition;
		 8    - varying vec4 AdditionalOut;
		 9 14   
		10 15   LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
		11 16   LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
		12 17   LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;
		13 18   
		        ...
		15 20   	vec3 YCbCr;
		16 21   	YCbCr.x = texture2D(TEXTURE_0, AdditionalOut.xy).a;
		17 22   	YCbCr.y = texture2D(TEXTURE_1, AdditionalOut.xy).a;
		18 23   	YCbCr.z = texture2D(TEXTURE_2, AdditionalOut.xy).a;
		19 24   
		   25 + 	// https://en.wikipedia.org/wiki/YCbCr
		20 26   	YCbCr -= vec3(0.0625, 0.5, 0.5);
		21 27   	mat3 yuv2rgb = mat3(vec3(1.164, 1.164, 1.164), vec3(0, -0.391, 2.018), vec3(1.596, -0.813, 0));
		22 28   	vec3 rgb = yuv2rgb * YCbCr;
		23 29   
		24 30   	float alpha = ColorOut.a;
		        ...
		        '''
Added resource pack "imgui.fragment":
	file "vanilla":
		'''
		// __multiversion__
		
		        uniform sampler2D TEXTURE_0;
		        in vec2 Frag_UV;
		        in vec4 Frag_Color;
		        out vec4 Out_Color;
		        void main()
		        {
		        	Out_Color = Frag_Color * texture( TEXTURE_0, Frag_UV.st);
		        }
		
		'''
Added resource pack "imgui.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		        uniform mat4 ProjectionMatrix;
		
		        in vec2 POSITION;
		        in vec2 TEXCOORD_0;
		        in vec4 COLOR;
		        out vec2 Frag_UV;
		        out vec4 Frag_Color;
		        void main()
		        {
		        	Frag_UV = TEXCOORD_0;
		        	Frag_Color = COLOR;
		        	gl_Position = ProjectionMatrix * vec4(POSITION.xy,0,1);
		        }
		
		'''