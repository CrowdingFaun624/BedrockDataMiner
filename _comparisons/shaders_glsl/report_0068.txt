Difference of "shaders_resource_packs" between "1.9.0.3" (beta of "1.9.0") and "1.9.0.5" (beta of "1.9.0").

Changed resource pack "util.h":
	Changed file "vanilla":
		Total line: 49 (+9, -20)
		        '''
		        ...
		14 14   
		15 15   #include "uniformShaderConstants.h"
		16 16   
		17 17   #if USE_TEXEL_AA
		18 18   
		19    - const float TEXEL_AA_ALPHA_BIAS = 0.125;
		20    - const float TEXEL_AA_EPSILON = 0.03125;
		21    - 
		22    - const float TEXEL_AA_LOD_MIN = -0.5;
		23    - const float TEXEL_AA_LOD_MAX = 0.0;
		24    - 
		25    - vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {
		26    - 
		27    - 	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
		28    - 	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;
		29    - 
		30    - 	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
		31    - 	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
		   19 + const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
		   20 + const float TEXEL_AA_LOD_RELAXED = 2.0;
		32    - 
		33    - 	highp vec2 gradientMagnitudes = vec2(length(delU), length(delV));
		34 21   
		   22 + vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {
		35    - 	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
		36    - 	highp vec2 integralTexel = floor(originalUV * TEXTURE_DIMENSIONS.xy);
		37 23   
		   24 + 	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
		   25 + 	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;
		38    - 	highp vec2 scalar = max(1.0 / max(gradientMagnitudes, vec2(TEXEL_AA_EPSILON)), 1.0);
		39 26   
		   27 + 	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
		   28 + 	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
		40    - 	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * scalar, 0.0, 0.5) + clamp(fractionalTexel * scalar - (scalar - 0.5), 0.0, 0.5);
		   29 + 	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);
		41    - 	highp vec2 adjustedUV = (adjustedFractionalTexel + integralTexel) / TEXTURE_DIMENSIONS.xy;
		42 30   
		   31 + 	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
		43    - 	// Determine mip map LOD
		44    - 	highp float largestDerivativeSquare = max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY));	
		   32 + 	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);
		45    - 	highp float lod = log2(sqrt(largestDerivativeSquare) * 2.0);
		46 33   
		   34 + 	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
		   35 + 	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);
		47    - 	highp float t = smoothstep(TEXEL_AA_LOD_MIN, TEXEL_AA_LOD_MAX, lod);
		48    - 	lowp vec4 sampledColor = texture2D(source, mix(adjustedUV, originalUV, t));
		49 36   
		   37 + 	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
		   38 + 	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));
		50 39   
		51 40   	#if USE_ALPHA_TEST
		   41 + 		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
		52    - 		return vec4(sampledColor.rgb, mix(floor(pow(sampledColor.a + TEXEL_AA_ALPHA_BIAS, 2.0)), sampledColor.a, t));
		53 42   	#else
		   43 + 		return blendedSample;
		54    - 		return sampledColor;
		55 44   	#endif
		56 45   }
		57 46   
		58 47   #endif // USE_TEXEL_AA
		59 48   
		        ...
		        '''