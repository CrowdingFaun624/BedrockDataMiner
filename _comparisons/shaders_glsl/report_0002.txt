Difference of "shaders_resource_packs" between "a0.10.0_build3" (beta of "a0.10.0") and "a0.10.0_build4" (beta of "a0.10.0").

Changed resource pack "cloud.vertex":
	Changed file "vanilla":
		Total line: 26 (+1, -0)
		        '''
		        ...
		15 15   const vec3 inverseLightDirection = vec3(0.62, 0.78, 0.0);
		16 16   const float ambient = 0.7;
		17 17   
		18 18   void main()
		19 19   {
		   20 +     vec4 pos = WORLDVIEWPROJ * POSITION;
		20    -     gl_Position = WORLDVIEWPROJ * POSITION;
		21 21   
		   22 +  	float fog = clamp(pos.z / RENDER_DISTANCE - fogNear, 0.0, 0.9);
		22    -  	float fog = clamp(gl_Position.z / RENDER_DISTANCE - fogNear, 0.0, 0.9);
		23 23   
		   24 +  	gl_Position = pos;
		24 25       color = mix( COLOR * CURRENT_COLOR, FOG_COLOR, fog + 0.1 );
		25 26   }
		        '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 49 (+10, -6)
		        '''
		 1  1   
		 2  2   uniform sampler2D TEXTURE_0;
		    3 + 
		    4 + varying vec4 light;
		    5 + varying vec4 fogColor;
		 3    - uniform vec4 OVERLAY_COLOR;
		 4  6   
		 5  7   #ifndef COLOR_BASED
		 6  8   	varying vec2 uv;
		 7  9   #endif 
		   10 + #ifdef USE_OVERLAY
		 8    - 
		 9    - varying vec4 light;
		   11 + 	varying vec4 overlayColor;
		10    - varying vec4 fogColor;
		   12 + #endif
		11 13   
		12 14   #ifdef USE_EMISSIVE
		13 15   #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
		14 16   #else
		15 17   #define NEEDS_DISCARD(C)	(C.a < 0.5)
		16 18   #endif
		17 19   
		18 20   void main()
		19 21   {
		   22 + 	vec4 color = vec4(1.0);
		   23 + #ifndef COLOR_BASED
		20    - #ifdef COLOR_BASED
		21    - 	gl_FragColor = vec4(1.0);
		22    - #else
		   24 + 	color = texture2D( TEXTURE_0, uv );
		23    - 	gl_FragColor = texture2D( TEXTURE_0, uv );
		24 25   	
		25 26   	#ifdef ALPHA_TEST
		   27 + 		if(NEEDS_DISCARD(color))
		26    - 		if(NEEDS_DISCARD(gl_FragColor))
		27 28   		 	discard;
		28 29   	#endif
		29 30   #endif
		30 31   
		31 32   #ifdef USE_OVERLAY
		32 33   	//use either the diffuse or the OVERLAY_COLOR
		   34 + 	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
		33    - 	gl_FragColor.rgb = mix(gl_FragColor, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		34 35   #endif
		35 36   
		36 37   #ifdef USE_EMISSIVE
		37 38   	//make glowy stuff
		   39 + 	color *= mix(vec4(1.0), light, color.a );
		38    - 	gl_FragColor *= mix(vec4(1.0), light, gl_FragColor.a );
		39 40   #else
		   41 + 	color *= light;
		40    - 	gl_FragColor *= light;
		41 42   #endif
		   43 + 
		   44 + 	//apply fog
		   45 + 	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
		42 46   
		   47 + 	//WARNING do not refactor this 
		43    - 	//apply fog
		   48 + 	gl_FragColor = color;
		44    - 	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor.rgb, fogColor.a );
		45 49   }
		        '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 72 (+7, -1)
		        '''
		        ...
		17 17   
		18 18   varying vec2 uv;
		19 19   varying vec4 light;
		20 20   varying vec4 fogColor;
		21 21   
		   22 + #ifdef USE_OVERLAY
		   23 + varying vec4 overlayColor;
		   24 + #endif
		   25 + 
		22 26   const float AMBIENT = 0.45;
		23 27   
		24 28   const float XFAC = -0.1;
		25 29   const float ZFAC = 0.1;
		26 30   
		        ...
		42 46   #endif
		43 47   }
		44 48   
		45 49   void main()
		46 50   {
		   51 +     vec4 pos = WORLDVIEWPROJ * POSITION;
		47    -     gl_Position = WORLDVIEWPROJ * POSITION;
		   52 +     gl_Position = pos;
		   53 +     
		48    - 
		49 54       float L = lightIntensity();
		50 55   
		51 56   #ifdef USE_OVERLAY
		52 57   	L += OVERLAY_COLOR.a * 0.35;
		   58 +     overlayColor = OVERLAY_COLOR;
		53 59   #endif
		54 60    
		55 61       light = vec4(vec3(L) * TILE_LIGHT_COLOR, 1.0);
		56 62   
		57 63   #ifdef COLOR_BASED
		        ...
		60 66       uv = TEXCOORD_0;
		61 67   #endif
		62 68   
		63 69   //fog
		64 70       fogColor.rgb = FOG_COLOR.rgb;
		   71 +     fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		65    -     fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		66 72   }
		        '''
Changed resource pack "iteminhand.fragment":
	Changed file "vanilla":
		Total line: 13 (+3, -1)
		        '''
		        ...
		 3  3   
		 4  4   varying vec4 light;
		 5  5   
		 6  6   void main()
		 7  7   {
		    8 + 	vec4 color = mix(vec4(1), light, light.a );
		 8    - 	gl_FragColor = mix(vec4(1), light, light.a );
		    9 + 
		   10 + 	color.rgb = mix(color, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		 9 11   
		   12 + 	gl_FragColor = color;
		10    - 	gl_FragColor.rgb = mix(gl_FragColor, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		11 13   }
		        '''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 29 (+3, -1)
		        '''
		        ...
		11 11   uniform sampler2D TEXTURE_0;
		12 12   uniform sampler2D TEXTURE_1;
		13 13   
		14 14   void main()
		15 15   {
		   16 + 	vec4 diffuse = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		16    - 	gl_FragColor = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		17 17   
		18 18   #ifdef ALPHA_TEST
		   19 + 	if(diffuse.a < 0.5)
		19    - 	if(gl_FragColor.a < 0.5)
		20 20   	 	discard;
		21 21   #endif
		   22 + 	diffuse *= color;
		22    - 	gl_FragColor *= color;
		23 23   
		24 24   #ifdef FOG
		   25 + 	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		25    - 	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor.rgb, fogColor.a );
		26 26   #endif
		   27 + 
		   28 + 	gl_FragColor = diffuse;
		27 29   }
		        '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 98 (+2, -1)
		        '''
		        ...
		37 37   const vec3 UNIT_Y = vec3(0,1,0);
		38 38   const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		39 39   
		40 40   void main()
		41 41   {
		   42 +     vec4 pos = WORLDVIEWPROJ * POSITION;
		42    -     gl_Position = WORLDVIEWPROJ * POSITION;
		   43 +     gl_Position = pos;
		43 44   
		44 45       uv0 = TEXCOORD_0;
		45 46       uv1 = TEXCOORD_1;
		46 47   	color = COLOR;
		47 48   
		        ...
		50 51   #if defined(FOG) || defined(NEAR_WATER)
		51 52   		#ifdef FANCY
		52 53   		vec3 relPos = VIEW_POS - (POSITION.xyz + CHUNK_ORIGIN);
		53 54   		float cameraDepth = length(relPos);
		54 55   	#else
		   56 + 		float cameraDepth = pos.z;
		55    - 		float cameraDepth = gl_Position.z + RENDER_DISTANCE * 0.1;
		56 57   	#endif
		57 58   #endif
		58 59   
		59 60   ///// apply fog
		60 61   
		        ...
		89 90   		vec4 surfColor = vec4(color.rgb, 1.0);
		90 91   
		91 92   		vec4 nearColor = mix(traspColor, depthColor, color.a);
		92 93   		color = mix(surfColor, nearColor, F);
		93 94   	#else
		   95 + 		color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;
		94    - 		color.a = gl_Position.z / FAR_CHUNKS_DISTANCE + 0.5;
		95 96   	#endif //FANCY
		96 97   #endif
		97 98   }
		        '''
Changed resource pack "texture.fragment":
	Changed file "vanilla":
		Total line: 17 (+2, -0)
		        '''
		        ...
		 4  4   
		 5  5   uniform sampler2D TEXTURE_0;
		 6  6   
		 7  7   void main()
		 8  8   {
		    9 + 	vec4 color = texture2D( TEXTURE_0, uv );
		 9    - 	gl_FragColor = texture2D( TEXTURE_0, uv );
		10 10   	
		11 11   #ifdef ALPHA_TEST
		   12 + 	if(color.a < 0.5)
		12    - 	if(gl_FragColor.a < 0.5)
		13 13   		discard;
		14 14   #endif
		   15 + 
		   16 + 	gl_FragColor = color;
		15 17   }
		        '''