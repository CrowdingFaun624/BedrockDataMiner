Difference of "shaders_resource_packs" between "1.5.3" and "1.6.0.1" (beta of "1.6.0").

Changed resource pack "banner.vertex":
	Changed file "vanilla":
		Total line: 109 (+23, -1)
		          '''
		          ...
		  5   5   
		  6   6   #include "shaders/uniformWorldConstants.h"
		  7   7   #include "shaders/uniformEntityConstants.h"
		  8   8   #include "shaders/uniformPerFrameConstants.h"
		  9   9   #include "shaders/uniformBannerConstants.h"
		     10 + #ifdef USE_SKINNING
		     11 + #include "shaders/uniformAnimationConstants.h"
		     12 + #endif
		     13 + 
		     14 + attribute mediump vec4 POSITION;
		     15 + #ifdef USE_SKINNING
		     16 + #ifdef USE_INT_INDEXING
		     17 + attribute uint BONEID_0;
		     18 + #else
		     19 + attribute float BONEID_0;
		     20 + #endif
		     21 + #endif
		 10     - 
		 11     - attribute mediump vec4 POSITION;
		 12  22   attribute vec2 TEXCOORD_0;
		 13  23   attribute vec4 NORMAL;
		 14  24   attribute vec4 COLOR;
		 15  25   
		 16  26   #if __VERSION__ >= 300
		          ...
		 24  34   #endif
		 25  35   
		 26  36   #ifdef ENABLE_LIGHT
		 27  37   varying vec4 light;
		 28  38   #endif
		     39 + 
		 29     - 	
		 30  40   #ifndef DISABLE_TINTING
		 31  41   varying vec4 color;
		 32  42   #endif
		 33  43   
		 34  44   const float AMBIENT = 0.45;
		          ...
		 36  46   const float XFAC = -0.1;
		 37  47   const float ZFAC = 0.1;
		 38  48   
		 39  49   float lightIntensity() {
		 40  50   #ifdef FANCY
		     51 + #ifdef USE_SKINNING
		     52 +     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		     53 + #else
		 41  54       vec3 N = normalize( WORLD * NORMAL ).xyz;
		     55 + #endif
		 42  56   
		 43  57       N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		 44  58   
		 45  59       //take care of double sided polygons on materials without culling
		 46  60   #ifdef FLIP_BACKFACES
		     61 + #ifdef USE_SKINNING
		     62 +     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		     63 + #else
		 47  64       vec3 viewDir = normalize((WORLD * POSITION).xyz);
		     65 + #endif
		 48  66       if( dot(N, viewDir) > 0.0 )
		 49  67           N *= -1.0;
		 50  68   #endif
		 51  69   
		 52  70       float yLight = (1.0+N.y) * 0.5;
		          ...
		 57  75   }
		 58  76   
		 59  77   
		 60  78   void main()
		 61  79   {
		     80 + #ifdef USE_SKINNING
		     81 +     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		     82 + #else
		 62  83       POS4 pos = WORLDVIEWPROJ * POSITION;
		     84 + #endif
		 63  85       gl_Position = pos;
		 64  86   
		 65  87   #ifdef ENABLE_LIGHT
		 66  88       float L = lightIntensity();
		 67  89       light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		          ...
		          '''
Added resource pack "barrier.vertex":
	file "vanilla":
		'''
		// __multiversion__
		
		#include "shaders/vertexVersionCentroidUV.h"
		
		#include "shaders/uniformWorldConstants.h"
		#include "shaders/uniformPerFrameConstants.h"
		#include "shaders/uniformShaderConstants.h"
		#include "shaders/uniformRenderChunkConstants.h"
		
		attribute mediump vec4 POSITION;
		
		attribute vec4 COLOR;
		attribute vec2 TEXCOORD_0;
		attribute vec2 TEXCOORD_1;
		
		#if __VERSION__ >= 300
			#ifndef BYPASS_PIXEL_SHADER
				_centroid out vec2 uv0;
				_centroid out vec2 uv1;
			#endif
		#else
			#ifndef BYPASS_PIXEL_SHADER
				varying vec2 uv0;
				varying vec2 uv1;
			#endif
		#endif
		// passing color so we can avoid having an extra shader and just use renderchunk.fragment
		varying vec4 color;
		
		
		void main() {
			vec3 inputPos = POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w + CHUNK_ORIGIN_AND_SCALE.xyz;
			vec3 center = inputPos + vec3(0.5, 0.5, 0.5);
		
			// the view position needs to be in sortof-steve space
			// the translation seems to be already embedded for some reason.
			vec3 viewPos = VIEW_POS * CHUNK_ORIGIN_AND_SCALE.w;
		
			vec3 forward = normalize(center - viewPos);
			// not orthogonal so need to normalize
			vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));
			// orthogonal so dont need to normalize
			vec3 up = cross(forward, right);
		
		
			// color is only positive, so we have to offset by .5
			// we have to subtract because we passed in uvs
		
			// we multiply our offsets by the basis vectors and subtract them to get our verts
			vec3 vertPos = center - up * (COLOR.z - 0.5) - right * (COLOR.x - 0.5);
		
		
			gl_Position = WORLDVIEW * vec4( vertPos, 1.0 );
			gl_Position = PROJ * gl_Position;
		
			uv0 = TEXCOORD_0;
			uv1 = TEXCOORD_1;
		
			// color is hardcoded white
			color = vec4(1.0, 1.0, 1.0, 1.0);
		}
		'''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 145 (+22, -0)
		          '''
		          ...
		  4   4   #include "shaders/vertexVersionCentroidUV.h"
		  5   5   
		  6   6   #include "shaders/uniformWorldConstants.h"
		  7   7   #include "shaders/uniformEntityConstants.h"
		  8   8   #include "shaders/uniformPerFrameConstants.h"
		      9 + #ifdef USE_SKINNING
		     10 + #include "shaders/uniformAnimationConstants.h"
		     11 + #endif
		     12 + 
		     13 + attribute mediump vec4 POSITION;
		     14 + #ifdef USE_SKINNING
		     15 + #ifdef USE_INT_INDEXING
		     16 + attribute uint BONEID_0;
		     17 + #else
		     18 + attribute float BONEID_0;
		     19 + #endif
		     20 + #endif
		  9     - 
		 10     - attribute mediump vec4 POSITION;
		 11  21   attribute vec2 TEXCOORD_0;
		 12  22   attribute vec4 NORMAL;
		 13  23   
		 14  24   #ifdef COLOR_BASED
		 15  25   	attribute vec4 COLOR;
		          ...
		 42  52   const float XFAC = -0.1;
		 43  53   const float ZFAC = 0.1;
		 44  54   
		 45  55   float lightIntensity() {
		 46  56   #ifdef FANCY
		     57 + #ifdef USE_SKINNING
		     58 +     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		     59 + #else
		 47  60       vec3 N = normalize( WORLD * NORMAL ).xyz;
		     61 + #endif
		 48  62   
		 49  63       N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		 50  64   
		 51  65       //take care of double sided polygons on materials without culling
		 52  66   #ifdef FLIP_BACKFACES
		     67 + #ifdef USE_SKINNING
		     68 +     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		     69 + #else
		 53  70       vec3 viewDir = normalize((WORLD * POSITION).xyz);
		     71 + #endif
		 54  72       if( dot(N, viewDir) > 0.0 )
		 55  73           N *= -1.0;
		 56  74   #endif
		 57  75   
		 58  76       float yLight = (1.0+N.y) * 0.5;
		          ...
		 76  94   }
		 77  95   #endif
		 78  96   
		 79  97   void main()
		 80  98   {
		     99 + #ifdef USE_SKINNING
		    100 +     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		    101 + #else
		 81 102       POS4 pos = WORLDVIEWPROJ * POSITION;
		    103 + #endif
		 82 104       gl_Position = pos;
		 83 105   
		 84 106       float L = lightIntensity();
		 85 107   
		 86 108   #ifdef USE_OVERLAY
		          ...
		          '''
Added resource pack "hummingbird/blur.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		uniform vec4 COEFFICIENTS[3];
		uniform vec4 PIXEL_OFFSETS[6];
		
		void main() {
			vec4 outColor = vec4(0.0, 0.0, 0.0, 0.0);
		
			for (int i = 0; i < BLUR_STEPS; ++i) {
				vec4 coeffVec = COEFFICIENTS[i / 4];
				float coeff = coeffVec[int(mod(float(i), 4.0))];
				vec2 offset;
				vec4 pixelOffsetX = PIXEL_OFFSETS[(i*2) / 4];
				vec4 pixelOffsetY = PIXEL_OFFSETS[(i*2 + 1) / 4];
				offset.x = pixelOffsetX[int(mod(float(i*2), 4.0))];
				offset.y = pixelOffsetY[int(mod(float(i*2 + 1), 4.0))];
		
				outColor += coeff * (texture2D(TEXTURE_0, AdditionalOut.xy + offset) + texture2D(TEXTURE_0, AdditionalOut.xy - offset));
			}
		
			gl_FragColor = outColor * ColorOut.a;
		}
		'''
Added resource pack "hummingbird/hairline.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main() {
			vec3 posPixels = vec3(ScreenNormalPosition.xy, 1.0);
			float distance2line = abs(dot(AdditionalOut.xyz, posPixels));
			float alpha = 1.0 - clamp(distance2line, 0.0, 1.0);
		
			gl_FragColor = ColorOut * alpha;
		}
		'''
Added resource pack "hummingbird/path.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec2 ExtraParams;
		
		uniform vec4 PRIM_PROPS_0;
		
		void main() {
			gl_FragColor = PRIM_PROPS_0 * ExtraParams.y;
		}
		'''
Added resource pack "hummingbird/path.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		attribute vec4 POSITION;
		
		uniform mat4 TRANSFORM;
		
		varying vec2 ExtraParams;
		
		void main() {
			vec4 outPos = vec4(POSITION.xy, 0.0, 1.0) * TRANSFORM;
		
			// Translate to -1..1 with perspective correction
			float w = outPos.w;
			outPos.x = outPos.x * 2.0 - w;
			outPos.y = (w - outPos.y) * 2.0 - w;
		
			ExtraParams = POSITION.zw;
		
			gl_Position = outPos;
		}
		'''
Added resource pack "hummingbird/path_hairline.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec2 ExtraParams;
		
		uniform vec4 PRIM_PROPS_0;
		uniform vec4 PRIM_PROPS_1;
		uniform int SHADER_TYPE;
		
		void main() {
			if (SHADER_TYPE == 14) {
				// Hairline quads
				vec2 px = dFdx(ExtraParams);
				vec2 py = dFdy(ExtraParams);
		
				float fx = (2.0 * ExtraParams.x) * px.x - px.y;
				float fy = (2.0 * ExtraParams.x) * py.x - py.y;
		
				float edgeAlpha = (ExtraParams.x * ExtraParams.x - ExtraParams.y);
				float sd = sqrt((edgeAlpha * edgeAlpha) / (fx * fx + fy * fy));
		
				float alpha = 1.0 - sd;
		
				gl_FragColor = PRIM_PROPS_0 * PRIM_PROPS_1.x * alpha;
			} else {
				// Hairline lines
				gl_FragColor = PRIM_PROPS_0 * min(1.0, (1.0 - abs(ExtraParams.y)) * PRIM_PROPS_1.x);
			}
		}
		'''
Added resource pack "hummingbird/path_hairline_fallback.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec2 ExtraParams;
		
		uniform vec4 PRIM_PROPS_0;
		uniform vec4 PRIM_PROPS_1;
		uniform int SHADER_TYPE;
		
		void main() {
			if(SHADER_TYPE == 14) {
				// Hairline quads
				// TODO: We need dFdx support
				// so for now return ugly magenta color to indicate something is wrong
				gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
			} else {
				// Hairline lines
				gl_FragColor = PRIM_PROPS_0 * min(1.0, (1.0 - abs(ExtraParams.y)) * PRIM_PROPS_1.x);
			}
		}
		'''
Added resource pack "hummingbird/renoir.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec4 VaryingParam0;
		varying vec4 VaryingParam1;
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1; // Mask texture
		uniform sampler2D TEXTURE_2; // Gradient texture
		
		uniform vec4 RENOIR_SHADER_PS_PROPS_0; // GradientStartColor
		uniform vec4 RENOIR_SHADER_PS_PROPS_1; // GradientMidColor
		uniform vec4 RENOIR_SHADER_PS_PROPS_2; // GradientEndColor
		uniform vec4 RENOIR_SHADER_PS_PROPS_3; // GradientYCoord
		
		void main() {
			float tVal;
		#if defined(GRADIENT_LINEAR)
			tVal = VaryingParam0.x;
		#elif defined(GRADIENT_RADIAL)
			tVal = length(VaryingParam0.xy);
		#endif
		
			vec4 colorTemp;
		#if defined(GRADIENT_2PT)
			colorTemp = mix(RENOIR_SHADER_PS_PROPS_0, RENOIR_SHADER_PS_PROPS_2, clamp(tVal, 0.0, 1.0));
		#elif defined(GRADIENT_3PTSYMM)
			float oneMinus2t = 1.0 - (2.0 * tVal);
			colorTemp = clamp(oneMinus2t, 0.0, 1.0) * RENOIR_SHADER_PS_PROPS_0;
			colorTemp += (1.0 - min(abs(oneMinus2t), 1.0)) * RENOIR_SHADER_PS_PROPS_1;
			colorTemp += clamp(-oneMinus2t, 0.0, 1.0) * RENOIR_SHADER_PS_PROPS_2;
		#elif defined(GRADIENT_FROMTEX)
			vec2 coord = vec2(tVal, RENOIR_SHADER_PS_PROPS_3.x);
			colorTemp = texture2D(TEXTURE_2, coord);
		#elif defined(COLOR_FROMTEX)
			colorTemp = texture2D(TEXTURE_0, AdditionalOut.xy);
		#endif
		
		#if defined(HAS_MASK)
			float mask = texture2D(TEXTURE_1, vec2(VaryingParam1.x, 1.0 - VaryingParam1.y)).r;
			colorTemp *= mask;
		#endif
			gl_FragColor = colorTemp;
		}
		
		'''
Added resource pack "hummingbird/renoir.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		attribute vec3 POSITION_3;
		attribute vec4 COLOR_4;
		attribute vec4 ADDITIONAL;
		
		uniform mat4 TRANSFORM;
		uniform mat4 COORD_TRANSFORM;
		uniform vec4 RENOIR_SHADER_VS_PROPS_0;
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		varying vec4 VaryingParam0;
		varying vec4 VaryingParam1;
		
		void main() {
			vec4 outPos = vec4(POSITION_3, 1.0) * TRANSFORM;
			ScreenNormalPosition = POSITION_3.xyz;
		
			VaryingParam0 = vec4(POSITION_3, 1) * COORD_TRANSFORM;
		
			VaryingParam1.x = POSITION_3.x * RENOIR_SHADER_VS_PROPS_0.x + RENOIR_SHADER_VS_PROPS_0.z;
			VaryingParam1.y = POSITION_3.y * RENOIR_SHADER_VS_PROPS_0.y + RENOIR_SHADER_VS_PROPS_0.w;
		
			// Translate to -1..1 with perspective correction
			float w = outPos.w;
			outPos.x = outPos.x * 2.0 - w;
			outPos.y = (w - outPos.y) * 2.0 - w;
		
			ColorOut = COLOR_4;
			AdditionalOut = ADDITIONAL;
		
			gl_Position = outPos;
		}
		'''
Added resource pack "hummingbird/standard.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		void main() {
			float alpha = min(1.0, AdditionalOut.z * AdditionalOut.w);
		
			gl_FragColor = ColorOut * alpha;
		}
		'''
Added resource pack "hummingbird/standard.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		attribute vec3 POSITION_3;
		attribute vec4 COLOR_4;
		attribute vec4 ADDITIONAL;
		
		uniform mat4 TRANSFORM;
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main() {
			vec4 outPos = vec4(POSITION_3, 1.0) * TRANSFORM;
			ScreenNormalPosition = POSITION_3.xyz;
		
			// Translate to -1..1 with perspective correction
			float w = outPos.w;
			outPos.x = outPos.x * 2.0 - w;
			outPos.y = (w - outPos.y) * 2.0 - w;
		
			ColorOut = COLOR_4;
			AdditionalOut = ADDITIONAL;
		
			gl_Position = outPos;
		}
		'''
Added resource pack "hummingbird/standard_circle.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		uniform vec2 VIEWPORT_SIZE;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
		
			vec2 posPixels = ScreenNormalPosition.xy;
			float distance2edge = length(posPixels - AdditionalOut.xy) - AdditionalOut.z;
			alpha = clamp(0.5 - distance2edge, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_ellipse.fragment":
	file "vanilla":
		'''
		#extension GL_OES_standard_derivatives : enable
		precision mediump float;
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
		
			vec2 offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / AdditionalOut.zw;
			float test = dot(offset, offset) - 1.0;
			vec2 dudx = dFdx(offset);
			vec2 dudy = dFdy(offset);
			vec2 gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
									2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			float grad_dot = max(dot(gradient, gradient), 1.0e-4);
			float invlen = inversesqrt(grad_dot);
		
			alpha = clamp(0.5 - test * invlen, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_ellipse_fallback.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		uniform vec2 VIEWPORT_SIZE;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
			vec2 pixel_step = vec2( 1.0 / VIEWPORT_SIZE.x, 1.0 / VIEWPORT_SIZE.y);
		
			vec2 offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / AdditionalOut.zw;
			float test = dot(offset, offset) - 1.0;
			vec2 newOffset = (ScreenNormalPosition.xy + vec2(pixel_step.x, 0) - AdditionalOut.xy) / (AdditionalOut.zw);
			vec2 dudx = newOffset - offset;
			newOffset = (ScreenNormalPosition.xy + vec2(0, pixel_step.y) - AdditionalOut.xy) / (AdditionalOut.zw);
			vec2 dudy = newOffset - offset;
			vec2 gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
									2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			float grad_dot = max(dot(gradient, gradient), 1.0e-4);
			float invlen = inversesqrt(grad_dot);
		
			alpha = clamp(0.5 - test * invlen, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_stroke_circle.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
		
			vec2 posPixels = ScreenNormalPosition.xy;
			float de = length(posPixels - AdditionalOut.xy);
			float distance2OuterEdge = de - (AdditionalOut.z + AdditionalOut.w / 2.0);
			float distance2InnerEdge = de - (AdditionalOut.z - AdditionalOut.w / 2.0);
			alpha = clamp(0.5 - distance2OuterEdge, 0.0, 1.0);
			alpha *= 1.0 - clamp(0.5 - distance2InnerEdge, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_stroke_ellipse.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		uniform vec4 PRIM_PROPS_0;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
		
			vec2 offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / (AdditionalOut.zw + PRIM_PROPS_0.x / 2.0);
			float test = dot(offset, offset) - 1.0;
			vec2 dudx = dFdx(offset);
			vec2 dudy = dFdy(offset);
			vec2 gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
								2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			float grad_dot = max(dot(gradient, gradient), 1.0e-4);
			float invlen = inversesqrt(grad_dot);
		
			alpha = clamp(0.5 - test * invlen, 0.0, 1.0);
		
			offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / (AdditionalOut.zw - PRIM_PROPS_0.x / 2.0);
			test = dot(offset, offset) - 1.0;
			dudx = dFdx(offset);
			dudy = dFdy(offset);
			gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
							2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			grad_dot = max(dot(gradient, gradient), 1.0e-4);
			invlen = inversesqrt(grad_dot);
		
			alpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_stroke_ellipse_fallback.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		uniform vec2 VIEWPORT_SIZE;
		uniform vec4 PRIM_PROPS_0;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
			vec2 pixel_step = vec2( 1.0 / VIEWPORT_SIZE.x, 1.0 / VIEWPORT_SIZE.y);
		
			vec2 offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / (AdditionalOut.zw + PRIM_PROPS_0.x / 2.0);
			float test = dot(offset, offset) - 1.0;
			vec2 newOffset = (ScreenNormalPosition.xy + vec2(pixel_step.x, 0) - AdditionalOut.xy) / (AdditionalOut.zw + PRIM_PROPS_0.x / 2.0);
			vec2 dudx = newOffset - offset;
			newOffset = (ScreenNormalPosition.xy + vec2(0, pixel_step.y) - AdditionalOut.xy) / (AdditionalOut.zw + PRIM_PROPS_0.x / 2.0);
			vec2 dudy = newOffset - offset;
			vec2 gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
								2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			float grad_dot = max(dot(gradient, gradient), 1.0e-4);
			float invlen = inversesqrt(grad_dot);
		
			alpha = clamp(0.5 - test * invlen, 0.0, 1.0);
		
			offset = (ScreenNormalPosition.xy - AdditionalOut.xy) / (AdditionalOut.zw - PRIM_PROPS_0.x / 2.0);
			test = dot(offset, offset) - 1.0;
			newOffset = (ScreenNormalPosition.xy + vec2(pixel_step.x, 0) - AdditionalOut.xy) / (AdditionalOut.zw - PRIM_PROPS_0.x / 2.0);
			dudx = newOffset - offset;
			newOffset = (ScreenNormalPosition.xy + vec2(0, pixel_step.y) - AdditionalOut.xy) / (AdditionalOut.zw - PRIM_PROPS_0.x / 2.0);
			dudy = newOffset - offset;
			gradient = vec2(2.0 * offset.x * dudx.x + 2.0 * offset.y * dudx.y,
							2.0 * offset.x * dudy.x + 2.0 * offset.y * dudy.y);
			grad_dot = max(dot(gradient, gradient), 1.0e-4);
			invlen = inversesqrt(grad_dot);
		
			alpha *= clamp(0.5 + test * invlen, 0.0, 1.0);
		
			gl_FragColor = outColor * alpha;
		}
		'''
Added resource pack "hummingbird/standard_texture.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		uniform int SHADER_TYPE;
		
		uniform vec4 COEFFICIENTS[3];
		uniform vec4 PIXEL_OFFSETS[6];
		
		void main() {
			// snes-todo: Put this in separate shader when Hummingbird sets ST_StandardTextureWithColorMatrix on filters (other than drop-shadow)
			// we get the correct shadertype, but not the correct shader mapping.
			if (SHADER_TYPE == 7) {
				vec4 baseColor = texture2D(TEXTURE_0, AdditionalOut.xy);
				float nonZeroAlpha = max(baseColor.a, 0.00001);
				baseColor = vec4(baseColor.rgb / nonZeroAlpha, nonZeroAlpha);
				// TODO: Rename the members of the constant buffer so they are not weird for non-blurs
				vec4 finalColor;
				finalColor.r = dot(baseColor, vec4(COEFFICIENTS[0].x, COEFFICIENTS[0].y, COEFFICIENTS[0].z, COEFFICIENTS[0].w));
				finalColor.g = dot(baseColor, vec4(COEFFICIENTS[1].x, COEFFICIENTS[1].y, COEFFICIENTS[1].z, COEFFICIENTS[1].w));
				finalColor.b = dot(baseColor, vec4(COEFFICIENTS[2].x, COEFFICIENTS[2].y, COEFFICIENTS[2].z, COEFFICIENTS[2].w));
				finalColor.a = dot(baseColor, vec4(PIXEL_OFFSETS[0].x, PIXEL_OFFSETS[0].y, PIXEL_OFFSETS[0].z, PIXEL_OFFSETS[0].w));
				finalColor += vec4(PIXEL_OFFSETS[1].x, PIXEL_OFFSETS[1].y, PIXEL_OFFSETS[1].z, PIXEL_OFFSETS[1].w);
				finalColor.rgb *= finalColor.a;
				finalColor.rgba *= ColorOut.a;
				gl_FragColor = finalColor;
			} else {
				float alpha = ColorOut.a * clamp(AdditionalOut.z, 0.0, 1.0);
				gl_FragColor = texture2D(TEXTURE_0, AdditionalOut.xy) * alpha;
			}
		}
		'''
Added resource pack "hummingbird/standard_texture_with_color_matrix.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		uniform vec4 COEFFICIENTS[3];
		uniform vec4 PIXEL_OFFSETS[6];
		
		void main() {
			vec4 baseColor = texture2D(TEXTURE_0, AdditionalOut.xy);
			float nonZeroAlpha = max(baseColor.a, 0.00001);
			baseColor = vec4(baseColor.rgb / nonZeroAlpha, nonZeroAlpha);
			// TODO: Rename the members of the constant buffer so they are not weird for non-blurs
			vec4 finalColor;
			finalColor.r = dot(baseColor, vec4(COEFFICIENTS[0].x, COEFFICIENTS[0].y, COEFFICIENTS[0].z, COEFFICIENTS[0].w));
			finalColor.g = dot(baseColor, vec4(COEFFICIENTS[1].x, COEFFICIENTS[1].y, COEFFICIENTS[1].z, COEFFICIENTS[1].w));
			finalColor.b = dot(baseColor, vec4(COEFFICIENTS[2].x, COEFFICIENTS[2].y, COEFFICIENTS[2].z, COEFFICIENTS[2].w));
			finalColor.a = dot(baseColor, vec4(PIXEL_OFFSETS[0].x, PIXEL_OFFSETS[0].y, PIXEL_OFFSETS[0].z, PIXEL_OFFSETS[0].w));
			finalColor += vec4(PIXEL_OFFSETS[1].x, PIXEL_OFFSETS[1].y, PIXEL_OFFSETS[1].z, PIXEL_OFFSETS[1].w);
			finalColor.rgb *= finalColor.a;
			finalColor.rgba *= ColorOut.a;
			gl_FragColor = finalColor;
		}
		'''
Added resource pack "hummingbird/stencil.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		
		void main() {
			gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
		}
		'''
Added resource pack "hummingbird/stencil_circle.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main() {
			float alpha = 1.0;
			vec4 outColor = ColorOut;
		
			vec2 posPixels = ScreenNormalPosition.xy;
			float distance2edge = length(posPixels - AdditionalOut.xy) - AdditionalOut.z;
			alpha = clamp(0.5 - distance2edge, 0.0, 1.0);
		
			if (alpha < 0.00390625) {
				discard;
			}
		
			gl_FragColor = outColor;
		}
		'''
Added resource pack "hummingbird/stencil_path.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec2 ExtraParams;
		
		void main() {
			if (ExtraParams.y < 0.00390625) {
				discard;
			}
		
			gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
		}
		'''
Added resource pack "hummingbird/stencil_texture.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		void main() {
			float alpha = texture2D(TEXTURE_0, AdditionalOut.xy).a;
		
			if (alpha < 0.00390625) {
				discard;
			}
		
			gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
		}
		'''
Added resource pack "hummingbird/text.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		float GetLuminance(vec3 color) {
			return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		}
		
		void main() {
			float dfValue = texture2D(TEXTURE_0, AdditionalOut.xy).r;
			float lum = 1.45 - GetLuminance(ColorOut.xyz);
			gl_FragColor = ColorOut * pow(dfValue, lum);
		}
		'''
Added resource pack "hummingbird/text.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/vertexVersionSimple.h"
		
		attribute vec3 POSITION_3;
		attribute vec4 COLOR_4;
		attribute vec4 ADDITIONAL;
		
		uniform mat4 TRANSFORM;
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		varying vec3 ScreenNormalPosition;
		
		void main(void)
		{
			vec4 outPos = vec4(POSITION_3, 1.0) * TRANSFORM;
			ScreenNormalPosition = POSITION_3.xyz;
		
			// Translate to -1..1 with perspective correction
			float w = outPos.w;
			outPos.x = outPos.x * 2.0 - w;
			outPos.y = (w - outPos.y) * 2.0 - w;
		
			ColorOut = COLOR_4;
			AdditionalOut = ADDITIONAL;
		
			gl_Position = outPos;
		}
		'''
Added resource pack "hummingbird/text_sdf.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		// On Text:
		// x - glyphFactor
		uniform vec4 PRIM_PROPS_0;
		
		// Keep in sync w/ SDFGenerator
		#define DISTANCE_FIELD_MULTIPLIER 7.96875
		#define DISTANCE_FIELD_MULTIPLIER_DIV2 3.984375
		#define DISTANCE_FIELD_THRESHOLD 0.50196078431
		
		#define SHOW_DF 0
		
		float GetLuminance(vec3 color) {
			return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
		}
		
		void main() {
			float dfValue = texture2D(TEXTURE_0, AdditionalOut.xy).r;
		#if SHOW_DF
			gl_FragColor = vec4(dfValue.xxx, 1);
		#else
			// Values should be in [-4, 4]
			dfValue = (dfValue * DISTANCE_FIELD_MULTIPLIER) - DISTANCE_FIELD_MULTIPLIER_DIV2;
			dfValue = smoothstep(-DISTANCE_FIELD_THRESHOLD / PRIM_PROPS_0.x, DISTANCE_FIELD_THRESHOLD / PRIM_PROPS_0.x, dfValue);
		
			float lum = 1.45 - GetLuminance(ColorOut.xyz);
			gl_FragColor = ColorOut * pow(dfValue, lum);
		#endif
		}
		'''
Added resource pack "hummingbird/text_stroke_sdf.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		
		// On Text:
		// x - glyphFactor, y - glyph size, z - stroke width
		uniform vec4 PRIM_PROPS_0;
		// On Text:
		// Stroke color
		uniform vec4 PRIM_PROPS_1;
		
		#define SHOW_DF 0
		
		void main() {
			float dfValue = texture2D(TEXTURE_0, AdditionalOut.xy).a;
		#if SHOW_DF
			gl_FragColor = vec4(dfValue.xxx, 1);
		#else
			float scale = sqrt(PRIM_PROPS_0.y * 0.5);
		
			float bias = 0.5 * scale - 0.9;
			float outlineWidth = PRIM_PROPS_0.z / PRIM_PROPS_0.y * 0.5 * scale;
			dfValue *= scale;
		
			vec4 c = mix(PRIM_PROPS_1, ColorOut, clamp(dfValue - (bias + outlineWidth), 0.0, 1.0));
		
			c *= clamp(dfValue - max(0.0, bias - outlineWidth), 0.0, 1.0);
			gl_FragColor = c;
		#endif
		}
		'''
Added resource pack "hummingbird/yuv_2_rgb.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		#include "shaders/uniformMacro.h"
		
		varying vec4 ColorOut;
		varying vec4 AdditionalOut;
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		uniform sampler2D TEXTURE_2;
		
		void main() {
			vec3 YCbCr;
			YCbCr.x = texture2D(TEXTURE_0, AdditionalOut.xy).a;
			YCbCr.y = texture2D(TEXTURE_1, AdditionalOut.xy).a;
			YCbCr.z = texture2D(TEXTURE_2, AdditionalOut.xy).a;
		
			YCbCr -= vec3(0.0625, 0.5, 0.5);
			mat3 yuv2rgb = mat3(vec3(1.164, 1.164, 1.164), vec3(0, -0.391, 2.018), vec3(1.596, -0.813, 0));
			vec3 rgb = yuv2rgb * YCbCr;
		
			float alpha = ColorOut.a;
			gl_FragColor = vec4(rgb * alpha, alpha);
		}
		'''
Added resource pack "passthru.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
			gl_FragColor = texture2D( TEXTURE_0, uv );
		}
		'''
Added resource pack "uniformAnimationConstants.h":
	file "vanilla":
		'''
		#ifndef _UNIFORM_ANIMATION_CONSTANTS_H
		#define _UNIFORM_ANIMATION_CONSTANTS_H
		
		#include "shaders/uniformMacro.h"
		
		#ifdef MCPE_PLATFORM_NX
		layout(binding = 4) uniform AnimationConstants {
		#endif
		// BEGIN_UNIFORM_BLOCK(AnimationConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		UNIFORM MAT4 BONES[8];
		END_UNIFORM_BLOCK
		
		#endif
		'''