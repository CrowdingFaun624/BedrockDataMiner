Difference of "shaders_resource_packs" between "1.2.11" and "1.2.13.5" (beta of "1.2.13").

Changed resource pack "banner.fragment":
	Changed file "vanilla":
		Total line: 50 (+14, -10)
		        '''
		 1  1   // __multiversion__
		 2  2   // This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		 3  3   
		 4  4   #include "shaders/fragmentVersionCentroid.h"
		    5 + #include "shaders/uniformShaderConstants.h"
		    6 + 
		    7 + uniform sampler2D TEXTURE_0;
		    8 + 
		    9 + #if __VERSION__ >= 300
		   10 + _centroid varying vec4 uv;
		   11 + #else
		   12 + varying vec4 uv;
		 5    - 
		   13 + #endif
		 6    - uniform sampler2D TEXTURE_0;
		 7 14   
		 8    - #if __VERSION__ >= 300
		 9    - _centroid varying vec4 uv;
		   15 + #ifdef ENABLE_FOG
		   16 + varying vec4 fogColor;
		10    - #else
		11    - varying vec4 uv;
		12 17   #endif
		13 18   
		   19 + #ifdef ENABLE_LIGHT
		   20 + varying vec4 light;
		14    - #ifdef ENABLE_FOG
		15    - varying vec4 fogColor;
		16 21   #endif
		17 22   
		   23 + #ifndef DISABLE_TINTING
		   24 + varying vec4 color;
		18    - #ifdef ENABLE_LIGHT
		19    - varying vec4 light;
		20 25   #endif
		21 26   
		   27 + void main()
		   28 + {
		22    - #ifndef DISABLE_TINTING
		   29 + 	vec4 diffuse = texture2D(TEXTURE_0, uv.xy);
		   30 + 	vec4 base = texture2D(TEXTURE_0, uv.zw);
		23    - varying vec4 color;
		24    - #endif
		25 31   
		   32 + #ifndef DISABLE_TINTING
		   33 + 	base.a = mix(diffuse.r * diffuse.a, diffuse.a, color.a);
		26    - void main()
		27    - {
		   34 + 	base.rgb *= color.rgb;
		   35 + #endif
		28    - 	vec4 diffuse = texture2D(TEXTURE_0, uv.xy);
		29    - 	vec4 base = texture2D(TEXTURE_0, uv.zw);
		30 36   
		   37 + #ifdef ENABLE_LIGHT
		31    - #ifndef DISABLE_TINTING
		32    - 	base.a = mix(diffuse.r * diffuse.a, diffuse.a, color.a);
		   38 + 	base.rgb *= light.rgb;
		33    - 	base.rgb *= color.rgb;
		34 39   #endif
		35 40   
		   41 + #ifdef ENABLE_FOG
		36    - #ifdef ENABLE_LIGHT
		   42 + 	//apply fog
		   43 + 	base.rgb = mix( base.rgb, fogColor.rgb, fogColor.a );
		37    - 	base.rgb *= light.rgb;
		38 44   #endif
		39 45   
		   46 + #ifdef UI_ENTITY
		40    - #ifdef ENABLE_FOG
		41    - 	//apply fog
		   47 + 	base.a *= HUD_OPACITY;
		42    - 	base.rgb = mix( base.rgb, fogColor.rgb, fogColor.a );
		43 48   #endif
		44    - 
		45 49   	gl_FragColor = base;
		46 50   }
		        '''
Added resource pack "blur.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		
		uniform sampler2D TEXTURE_0;
		
		
		void main() {
			//TODO: Implement
			//default to not blur anything
			gl_FragColor = texture2D(TEXTURE_0, uv);
		}
		'''
Changed resource pack "color_texture.fragment":
	Changed file "vanilla":
		Total line: 89 (+1, -0)
		        '''
		        ...
		54 54   
		55 55   #ifdef GLINT
		56 56   	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * GLINT_COLOR;
		57 57   	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * GLINT_COLOR;
		58 58   	vec4 glint = (layer1 + layer2);
		   59 + 	glint.rgb *= color.a;
		59 60   
		60 61   	#ifdef INVENTORY
		61 62   		diffuse.rgb = glint.rgb;
		62 63   	#else
		63 64   		diffuse.rgb = glintBlend(diffuse, glint).rgb;
		        ...
		        '''
Added resource pack "depth_downsample.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		
		uniform sampler2D TEXTURE_0;
		
		
		void main()
		{
			//TODO: Implement
			gl_FragColor = texture2D(TEXTURE_0, uv);
		}
		'''
Added resource pack "depth_of_field.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionCentroidUV.h"
		
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
			//TODO: Implement
			//Default to no depth of field
			gl_FragColor = texture2D(TEXTURE_0, uv);
		}
		'''
Changed resource pack "end_portal.vertex":
	Changed file "vanilla":
		Total line: 116 (+2, -1)
		          '''
		          ...
		 83  83   		parallaxUV = mat2(vec2(rotC, rotS), vec2(-rotS, rotC)) * raycastUV;
		 84  84   
		 85  85   		parallaxUV += vec2(rotC, rotS) * planeDistance;
		 86  86   		parallaxUV.y += TIME / 256.0;
		 87  87   
		     88 + 		// User story 103038: fix visuals for end portal on low-precision devices
		     89 + 		//const float modVal = 64.0;
		     90 + 		//parallaxUV = vec2(mod(parallaxUV.x, modVal), mod(parallaxUV.y, modVal));
		 88     - 		const float modVal = 64.0;
		 89     - 		parallaxUV = vec2(mod(parallaxUV.x, modVal), mod(parallaxUV.y, modVal));
		     91 + 		
		 90     - 
		 91  92   		///// Fog
		 92  93   		#ifdef FOG
		 93  94   			#ifdef FANCY
		 94  95   				vec3 relPos = -worldPos.xyz;
		 95  96   				float cameraDepth = length(relPos);
		          ...
		          '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 147 (+21, -7)
		          '''
		          ...
		 67  67   	color = texture2D( TEXTURE_0, uv );
		 68  68   #else
		 69  69   	color = texture2D_AA(TEXTURE_0, uv);
		 70  70   #endif // !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		 71  71   
		     72 + #if defined(ALPHA_TEST) && !defined(USE_MULTITEXTURE)
		     73 + 	if(NEEDS_DISCARD(color))
		     74 + 		discard;
		     75 + #endif // ALPHA_TEST
		     76 + 
		     77 + #ifdef TINTED_ALPHA_TEST
		     78 + vec4 testColor = color;
		     79 + testColor.a *= alphaTestMultiplier;
		     80 + 	if(NEEDS_DISCARD(testColor))
		     81 + 		discard;
		     82 + #endif // TINTED_ALPHA_TEST
		     83 + #endif // NO_TEXTURE
		     84 + 
		     85 + #ifdef USE_COLOR_MASK
		     86 + 	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		     87 + 	color.a *= changeColor.a;
		     88 + #endif
		 72     - #ifdef ALPHA_TEST
		 73     - 	if(NEEDS_DISCARD(color))
		 74     - 		discard;
		 75     - #endif // ALPHA_TEST
		 76  89   
		     90 + #ifdef ITEM_IN_HAND
		 77     - #ifdef TINTED_ALPHA_TEST
		     91 + 	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
		     92 + #if defined(MCPE_PLATFORM_NX) && defined(NO_TEXTURE) && defined(GLINT)
		     93 + 	// TODO(adfairfi): This needs to be properly fixed soon. We have a User Story for it in VSO: 102633
		     94 + 	vec3 dummyColor = texture2D(TEXTURE_0, vec2(0.0, 0.0)).rgb;
		     95 + 	color.rgb += dummyColor * 0.000000001;
		     96 + #endif
		     97 + #endif
		 78     - vec4 testColor = color;
		 79     - testColor.a *= alphaTestMultiplier;
		 80     - 	if(NEEDS_DISCARD(testColor))
		 81     - 		discard;
		 82     - #endif // TINTED_ALPHA_TEST
		 83     - #endif // NO_TEXTURE
		 84  98   
		     99 + #ifdef USE_MULTITEXTURE
		    100 + 	vec4 tex1 = texture2D( TEXTURE_1, uv );
		    101 + 	vec4 tex2 = texture2D( TEXTURE_2, uv );
		    102 + 	color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
		 85     - #ifdef USE_COLOR_MASK
		 86     - 	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		 87     - 	color.a *= changeColor.a;
		    103 + #ifdef ALPHA_TEST
		    104 + 	if (color.a < 0.5 && tex1.a == 0.0) {
		    105 + 		discard;
		    106 + 	}
		 88     - #endif
		 89     - 
		 90     - #ifdef ITEM_IN_HAND
		 91     - 	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
		 92 107   #endif
		 93 108   
		 94     - #ifdef USE_MULTITEXTURE
		 95     - 	vec4 tex1 = texture2D( TEXTURE_1, uv );
		 96     - 	vec4 tex2 = texture2D( TEXTURE_2, uv );
		 97     - 	color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
		 98 109   #ifdef COLOR_SECOND_TEXTURE
		 99 110   	if (tex2.a > 0.0) {
		100 111   		color.rgb = tex2.rgb + (tex2.rgb * changeColor.rgb - tex2.rgb)*tex2.a;//lerp(tex2.rgb, tex2 * changeColor.rgb, tex2.a)
		101 112   	}
		102 113   #else
		          ...
		122 133   #ifdef GLINT
		123 134   	// Applies color mask to glint texture instead and blends with original color
		124 135   	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
		125 136   	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
		126 137   	vec4 glint = (layer1 + layer2) * tileLightColor;
		    138 + 
		    139 + 	color = glintBlend(color, glint);
		    140 + #endif
		127 141   
		    142 + 	//WARNING do not refactor this
		    143 + #ifdef UI_ENTITY
		    144 + 	color.a *= HUD_OPACITY;
		128     - 	color = glintBlend(color, glint);
		129 145   #endif
		130     - 
		131     - 	//WARNING do not refactor this 
		132 146   	gl_FragColor = color;
		133 147   }
		          '''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 79 (+1, -0)
		        '''
		        ...
		68 68   
		69 69   	//fog
		70 70       fogColor.rgb = FOG_COLOR.rgb;
		71 71   	fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		72 72   
		   73 + 	worldPositionBottom.xz += VIEW_POSITION.xz;
		73 74   	worldPositionBottom.xz *= 1.0 / 64.0;	// Scale by 1/TextureDimensions to get values between
		74 75   	worldPositionBottom.xz += 0.5;			// Offset so that center of view is in the center of occlusion texture
		75 76   	worldPositionBottom.y += VIEW_POSITION.y - 0.5;
		76 77   	worldPositionBottom.y *= 1.0/255.0;
		77 78   	worldPosition = worldPositionBottom;
		        ...
		        '''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 101 (+3, -3)
		          '''
		          ...
		 42  42   #ifdef BYPASS_PIXEL_SHADER
		 43  43   	gl_FragColor = vec4(0, 0, 0, 0);
		 44  44   	return;
		 45  45   #else 
		 46  46   
		     47 + #if USE_TEXEL_AA
		 47     - #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		     48 + 	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
		 48     - 	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
		 49  49   #else
		     50 + 	vec4 diffuse = texture2D(TEXTURE_0, uv0);
		 50     - 	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0 );
		 51  51   #endif
		 52  52   
		 53  53   	vec4 inColor = color;
		 54  54   	
		 55  55   #ifdef SEASONS_FAR
		 56  56   	diffuse.a = 1.0;
		 57  57   	inColor.b = 1.0;
		 58  58   #endif
		 59  59   
		     60 + #if USE_ALPHA_TEST
		 60     - #ifdef ALPHA_TEST
		 61  61   	#ifdef ALPHA_TO_COVERAGE
		     62 + 	#define ALPHA_THRESHOLD 0.05
		 62     - 		float alphaThreshold = .05;
		 63  63   	#else
		     64 + 	#define ALPHA_THRESHOLD 0.5
		 64     - 		float alphaThreshold = .5;
		 65  65   	#endif
		     66 + 	if(diffuse.a < ALPHA_THRESHOLD)
		 66     - 	if(diffuse.a < alphaThreshold)
		 67  67   		discard;
		 68  68   #endif
		 69  69   	
		 70  70   #if !defined(ALWAYS_LIT)
		 71  71   	diffuse = diffuse * texture2D( TEXTURE_1, uv1 );
		 72  72   #endif
		 73  73   
		 74  74   #ifndef SEASONS
		 75  75   
		     76 + #if !USE_ALPHA_TEST && !defined(BLEND)
		 76     - #if !defined(ALPHA_TEST) && !defined(BLEND)
		 77  77   	diffuse.a = inColor.a;
		 78  78   #elif defined(BLEND)
		 79  79   	#ifdef NEAR_WATER
		 80  80   		diffuse.a *= inColor.a;
		 81  81   		float alphaFadeOut = clamp(cameraDist, 0.0, 1.0);
		          ...
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 124 (+1, -1)
		          '''
		          ...
		 87  87   ///// apply fog
		 88  88   
		 89  89   #ifdef FOG
		 90  90   	float len = cameraDepth / RENDER_DISTANCE;
		 91  91   	#ifdef ALLOW_FADE
		     92 + 		len += RENDER_CHUNK_FOG_ALPHA;
		 92     - 		len += CURRENT_COLOR.r;
		 93  93   	#endif
		 94  94   
		 95  95       fogColor.rgb = FOG_COLOR.rgb;
		 96  96   	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 97  97   #endif
		          ...
		          '''
Added resource pack "resolve_depth.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		#include "shaders/fragmentVersionSimple.h"
		
		void main()
		{
			// TODO: implement this for multisampling
		}
		'''
Changed resource pack "texture_blend.fragment":
	Changed file "vanilla":
		Total line: 32 (+0, -0)
		        '''
		        ...
		22 22   
		23 23   	if (color.a < 0.01)
		24 24   	{
		25 25   		color = color1;
		26 26   	}
		   27 + 	else if (color1.a >= 0.01) {
		27    - 	else if (color.b > 0.01) {
		28 28   		color = mix(color, color1, CURRENT_COLOR.a);
		29 29   	}
		30 30   
		31 31   	gl_FragColor = color;
		32 32   }
		        '''
Changed resource pack "uniformPerFrameConstants.h":
	Changed file "vanilla":
		Total line: 18 (+0, -0)
		        '''
		        ...
		 2  2   #define _UNIFORM_PER_FRAME_CONSTANTS_H
		 3  3   
		 4  4   #include "shaders/uniformMacro.h"
		 5  5   
		 6  6   #ifdef MCPE_PLATFORM_NX
		    7 + layout(binding = 2) uniform PerFrameConstants {
		 7    - uniform PerFrameConstants {
		 8  8   #endif
		 9  9   // BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		10 10   UNIFORM vec3 VIEW_POS;
		11 11   UNIFORM float TIME;
		12 12   UNIFORM vec4 FOG_COLOR;
		        ...
		        '''
Changed resource pack "uniformRenderChunkConstants.h":
	Changed file "vanilla":
		Total line: 15 (+2, -0)
		        '''
		        ...
		 2  2   #define _UNIFORM_RENDER_CHUNK_CONSTANTS_H
		 3  3   
		 4  4   #include "shaders/uniformMacro.h"
		 5  5   
		 6  6   #ifdef MCPE_PLATFORM_NX
		    7 + #extension GL_ARB_enhanced_layouts : enable
		    8 + layout(binding = 0) uniform RenderChunkConstants {
		 7    - uniform RenderChunkConstants {
		 8  9   #endif
		 9 10   // BEGIN_UNIFORM_BLOCK(RenderChunkConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		10 11   UNIFORM POS4 CHUNK_ORIGIN_AND_SCALE;
		   12 + UNIFORM float RENDER_CHUNK_FOG_ALPHA;
		11 13   END_UNIFORM_BLOCK
		12 14   
		13 15   #endif
		        '''
Changed resource pack "uniformShaderConstants.h":
	Changed file "vanilla":
		Total line: 18 (+1, -0)
		        '''
		        ...
		 2  2   #define _UNIFORM_SHADER_CONSTANTS_H
		 3  3   
		 4  4   #include "shaders/uniformMacro.h"
		 5  5   
		 6  6   #ifdef MCPE_PLATFORM_NX
		    7 + #extension GL_ARB_enhanced_layouts : enable
		    8 + layout(binding = 3) uniform ShaderConstants {
		 7    - uniform ShaderConstants {
		 8  9   #endif
		 9 10   // BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		10 11   UNIFORM vec4 CURRENT_COLOR;
		11 12   UNIFORM vec4 DARKEN;
		12 13   UNIFORM vec3 TEXTURE_DIMENSIONS;
		        ...
		        '''
Changed resource pack "uniformWorldConstants.h":
	Changed file "vanilla":
		Total line: 16 (+0, -0)
		        '''
		        ...
		 2  2   #define _UNIFORM_WORLD_CONSTANTS_H
		 3  3   
		 4  4   #include "shaders/uniformMacro.h"
		 5  5   
		 6  6   #ifdef MCPE_PLATFORM_NX
		    7 + layout(binding = 1) uniform WorldConstants {
		 7    - uniform WorldConstants {
		 8  8   #endif
		 9  9   // BEGIN_UNIFORM_BLOCK(WorldConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
		10 10   UNIFORM MAT4 WORLDVIEWPROJ;
		11 11   UNIFORM MAT4 WORLD;
		12 12   UNIFORM MAT4 WORLDVIEW;
		        ...
		        '''
Changed resource pack "util.h":
	Changed file "vanilla":
		Total line: 60 (+21, -19)
		        '''
		    1 + #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		    2 + #define USE_TEXEL_AA 0
		    3 + #else
		    4 + #define USE_TEXEL_AA 1
		    5 + #endif
		    6 + 
		    7 + #ifdef ALPHA_TEST
		    8 + #define USE_ALPHA_TEST 1
		    9 + #else
		   10 + #define USE_ALPHA_TEST 0
		   11 + #endif
		   12 + 
		 1 13   #if __VERSION__ >= 300
		   14 + 
		   15 + #include "shaders/uniformShaderConstants.h"
		 2 16   
		   17 + #if USE_TEXEL_AA
		 3    - #include "shaders/uniformShaderConstants.h"
		 4 18   
		 5    - vec4 texture2D_AA(in sampler2D tex, in highp vec2 uv)
		 6    - {
		 7    - 	// Texture antialiasing
		   19 + const float TEXEL_AA_ALPHA_BIAS = 0.125;
		   20 + const float TEXEL_AA_EPSILON = 0.03125;
		 8    - 	//
		 9    - 	// The texture coordinates are modified so that the bilinear filter will be one pixel wide instead of one texel wide. 
		10 21   
		11    - 	// Get the UV deltas
		12    - 	highp vec2 dUVdx = dFdx(uv) * TEXTURE_DIMENSIONS.xy;
		13    - 	highp vec2 dUVdy = dFdy(uv) * TEXTURE_DIMENSIONS.xy;
		   22 + const float TEXEL_AA_LOD_MIN = -0.5;
		   23 + const float TEXEL_AA_LOD_MAX = 0.0;
		14    - 	highp vec2 dU = vec2(dUVdx.x, dUVdy.x);
		15    - 	highp vec2 dV = vec2(dUVdx.y, dUVdy.y);
		16 24   
		   25 + vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {
		17    - 	highp float duUV = sqrt(dot(dU, dU));
		18    - 	highp float dvUV = sqrt(dot(dV, dV));
		19 26   
		20    - 	// Determine mip map LOD
		21    - 	highp float d = max(dot(dUVdx, dUVdx), dot(dUVdy, dUVdy));
		22    - 	highp float mipLevel = .5 * log2(d);
		   27 + 	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
		   28 + 	highp vec2 dUV_dY = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
		23    - 	mipLevel = mipLevel + .5;	// Mip bias to reduce aliasing
		24    - 	mipLevel = clamp(mipLevel, 0.0, TEXTURE_DIMENSIONS.z);
		25 29   
		26    - 	highp vec2 uvModified;
		27    - 	if( mipLevel >= 1.0)
		   30 + 	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
		   31 + 	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
		   32 + 
		   33 + 	highp vec2 gradientMagnitudes = vec2(length(delU), length(delV));
		   34 + 
		   35 + 	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
		   36 + 	highp vec2 integralTexel = floor(originalUV * TEXTURE_DIMENSIONS.xy);
		28    - 	{
		29    - 		uvModified = uv;
		30    - 	}
		31    - 	else
		32    - 	{
		33    - 		// First scale the uv so that each texel has a uv range of [0,1]
		34    - 		highp vec2 texelUV = fract(uv * TEXTURE_DIMENSIONS.xy);
		35 37   
		   38 + 	highp vec2 scalar = max(1.0 / max(gradientMagnitudes, vec2(TEXEL_AA_EPSILON)), 1.0);
		36    - 		// Initially set uvModified to the floor of the texel position
		37    - 		uvModified = (uv * TEXTURE_DIMENSIONS.xy) - texelUV;
		38 39   
		39    - 		// Modify the texelUV to push the uvs toward the edges.
		40    - 		//          |                 |       |                   |
		   40 + 	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * scalar, 0.0, 0.5) + clamp(fractionalTexel * scalar - (scalar - 0.5), 0.0, 0.5);
		   41 + 	highp vec2 adjustedUV = (adjustedFractionalTexel + integralTexel) / TEXTURE_DIMENSIONS.xy;
		   42 + 
		   43 + 	// Determine mip map LOD
		   44 + 	highp float largestDerivativeSquare = max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY));	
		   45 + 	highp float lod = log2(sqrt(largestDerivativeSquare) * 2.0);
		41    - 		//          |         _/      |       |           /       |
		42    - 		//  Change  | U     _/        |  to   | U     ___/        |
		43    - 		//          |     _/          |       |     /             |
		44    - 		//          |    /            |       |    /              |
		45    - 		//          |         X       |       |         X         |
		46    - 		highp float scalerU = 1.0 / (duUV);
		   46 + 
		   47 + 	highp float t = smoothstep(TEXEL_AA_LOD_MIN, TEXEL_AA_LOD_MAX, lod);
		   48 + 	lowp vec4 sampledColor = texture2D(source, mix(adjustedUV, originalUV, t));
		47    - 		highp float scalerV = 1.0 / (dvUV);
		48    - 		highp vec2 scaler = max(vec2(scalerU, scalerV), 1.0);
		   49 + 
		   50 + 
		   51 + 	#if USE_ALPHA_TEST
		   52 + 		return vec4(sampledColor.rgb, mix(floor(pow(sampledColor.a + TEXEL_AA_ALPHA_BIAS, 2.0)), sampledColor.a, t));
		   53 + 	#else
		   54 + 		return sampledColor;
		   55 + 	#endif
		49    - 		texelUV = clamp(texelUV * scaler, 0.0, .5) + clamp(texelUV*scaler - (scaler - .5), 0.0, .5);
		50    - 		uvModified += texelUV;
		51    - 		uvModified /= TEXTURE_DIMENSIONS.xy;
		52    - 	}
		53    - 	vec4 diffuse = texture2D(tex, uvModified);
		54    - 	return diffuse;
		   56 + }
		55 57   
		   58 + #endif // USE_TEXEL_AA
		56    - }
		57 59   
		58 60   #endif //__VERSION__ >= 300
		        '''