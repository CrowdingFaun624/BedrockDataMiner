Addition of "shaders_resource_packs" at "a0.10.0_build1" (beta of "a0.10.0").
Unable to create data files for 60 files before.

Added resource pack "cloud.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		uniform lowp float RENDER_DISTANCE;
		uniform lowp vec4 FOG_COLOR;
		uniform lowp vec4 CURRENT_COLOR;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec4 COLOR;
		
		varying lowp vec4 color;
		
		const float fogNear = 0.5;
		
		const vec3 inverseLightDirection = vec3(0.62, 0.78, 0.0);
		const float ambient = 0.7;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		 	lowp float fog = clamp(gl_Position.z / RENDER_DISTANCE - fogNear, 0.0, 0.9);
		
		    color = mix( COLOR * CURRENT_COLOR, FOG_COLOR, fog + 0.1 );
		}
		'''
Added resource pack "color.fragment":
	file "vanilla":
		'''
		
		
		varying lowp vec4 color;
		
		void main()
		{
			gl_FragColor = color;
		}
		'''
Added resource pack "color.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec4 COLOR;
		
		varying lowp vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		}
		'''
Added resource pack "color_ex.fragment":
	file "vanilla":
		'''
		
		
		uniform lowp vec4 CURRENT_COLOR;
		
		varying lowp vec4 color;
		
		void main()
		{
			gl_FragColor = color * CURRENT_COLOR;
		}
		'''
Added resource pack "color_texture.fragment":
	file "vanilla":
		'''
		
		uniform sampler2D TEXTURE_0;
		uniform lowp vec4 OVERLAY_COLOR;
		
		varying lowp vec4 color;
		varying lowp vec2 uv;
		
		void main()
		{
			lowp vec4 diffuse = texture2D( TEXTURE_0, uv );
			
		#ifdef ALPHA_TEST
			if(diffuse.a < 0.5)
			 	discard;
		#endif
		
		#ifdef USE_OVERLAY
			//use either the diffuse or the OVERLAY_COLOR
			diffuse.rgb = mix(diffuse, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		#endif
		
			gl_FragColor = diffuse * color;
		}
		'''
Added resource pack "color_uv.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec4 COLOR;
		attribute lowp vec2 TEXCOORD_0;
		
		varying lowp vec4 color;
		varying lowp vec2 uv;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		    uv = TEXCOORD_0;
		}
		'''
Added resource pack "current_color.fragment":
	file "vanilla":
		'''
		
		
		uniform lowp vec4 CURRENT_COLOR;
		
		void main()
		{
			gl_FragColor = CURRENT_COLOR;
		}
		'''
Added resource pack "entity.fragment":
	file "vanilla":
		'''
		
		uniform sampler2D TEXTURE_0;
		uniform lowp vec4 OVERLAY_COLOR;
		
		#ifndef COLOR_BASED
			varying lowp vec2 uv;
		#endif 
		
		varying lowp vec4 light;
		varying lowp vec4 fogColor;
		
		#ifdef USE_EMISSIVE
		#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
		#else
		#define NEEDS_DISCARD(C)	(C.a < 0.5)
		#endif
		
		void main()
		{
		#ifdef COLOR_BASED
			gl_FragColor = vec4(1.0);
		#else
			gl_FragColor = texture2D( TEXTURE_0, uv );
			
			#ifdef ALPHA_TEST
				if(NEEDS_DISCARD(gl_FragColor))
				 	discard;
			#endif
		#endif
		
		#ifdef USE_OVERLAY
			//use either the diffuse or the OVERLAY_COLOR
			gl_FragColor.rgb = mix(gl_FragColor, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		#endif
		
		#ifdef USE_EMISSIVE
			//make glowy stuff
			gl_FragColor *= mix(vec4(1.0), light, gl_FragColor.a );
		#else
			gl_FragColor *= light;
		#endif
		
			//apply fog
			gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor.rgb, fogColor.a );
		}
		'''
Added resource pack "entity.vertex":
	file "vanilla":
		'''
		
		uniform mat4 WORLDVIEWPROJ;
		uniform mat4 WORLD;
		uniform lowp vec3 TILE_LIGHT_COLOR;
		uniform lowp vec4 OVERLAY_COLOR;
		uniform lowp vec4 FOG_COLOR;
		uniform lowp vec2 FOG_CONTROL;
		uniform lowp float RENDER_DISTANCE;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec2 TEXCOORD_0;
		attribute lowp vec4 NORMAL;
		
		#ifdef COLOR_BASED
			attribute lowp vec4 COLOR;
		#endif
		
		varying lowp vec2 uv;
		varying lowp vec4 light;
		varying lowp vec4 fogColor;
		
		const float AMBIENT = 0.45;
		
		const float XFAC = -0.1;
		const float ZFAC = 0.1;
		
		lowp float lightIntensity() {
		#ifdef FANCY
		    lowp vec3 N = normalize( WORLD * NORMAL ).xyz;
		
		    //take care of double sided polygons on materials without culling
		#ifdef FLIP_BACKFACES
		    lowp vec3 viewDir = normalize((WORLD * POSITION).xyz);
		    if( dot(N, viewDir) > 0.0 )
		        N *= -1.0;
		#endif
		
		    lowp float yLight = (1.0+N.y) * 0.5;
		    return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		#else
		    return 1.0;
		#endif
		}
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    lowp float L = lightIntensity();
		
		#ifdef USE_OVERLAY
			L += OVERLAY_COLOR.a * 0.35;
		#endif
		 
		    light = vec4(vec3(L) * TILE_LIGHT_COLOR, 1.0);
		
		#ifdef COLOR_BASED
			light *= COLOR;
		#else
		    uv = TEXCOORD_0;
		#endif
		
		//fog
		    fogColor.rgb = FOG_COLOR.rgb;
		    fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		}
		'''
Added resource pack "flat_white.fragment":
	file "vanilla":
		'''
		
		
		void main()
		{
			gl_FragColor = vec4(1.0);
		}
		'''
Added resource pack "iteminhand.fragment":
	file "vanilla":
		'''
		
		uniform lowp vec4 OVERLAY_COLOR;
		
		varying lowp vec4 light;
		
		void main()
		{
			gl_FragColor = mix(vec4(1), light, light.a );
		
			gl_FragColor.rgb = mix(gl_FragColor, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		}
		'''
Added resource pack "normal_as_color.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec4 NORMAL;
		
		varying lowp vec4 color;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color.rgb = (NORMAL.xyz / 2) + 0.5;
		    color.a = 1.0;
		}
		'''
Added resource pack "position.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		}
		'''
Added resource pack "renderchunk.fragment":
	file "vanilla":
		'''
		
		
		varying lowp vec2 uv0;
		varying lowp vec2 uv1;
		varying lowp vec4 color;
		
		#ifdef FOG
			varying lowp vec4 fogColor;
		#endif
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		
		void main()
		{
			gl_FragColor = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		
		#ifdef ALPHA_TEST
			if(gl_FragColor.a < 0.5)
			 	discard;
		#endif
			gl_FragColor *= color;
		
		#ifdef FOG
			gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor.rgb, fogColor.a );
		#endif
		}
		'''
Added resource pack "renderchunk.vertex":
	file "vanilla":
		'''
		
		//would be nice to make this a "header"
		#ifdef LOW_PRECISION
			#define POSITIONP mediump
		#else
			#define POSITIONP highp
		#endif
		
		#define POS3 POSITIONP vec3
		#define POS4 POSITIONP vec4
		
		uniform mat4 WORLDVIEWPROJ;
		uniform lowp vec4 FOG_COLOR;
		uniform lowp vec2 FOG_CONTROL;
		uniform lowp float RENDER_DISTANCE;
		uniform lowp vec2 VIEWPORT_DIMENSION;
		uniform lowp vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		uniform POS3 CHUNK_ORIGIN;
		uniform POS3 VIEW_POS;
		uniform lowp float FAR_CHUNKS_DISTANCE;
		
		attribute POS4 POSITION;
		attribute lowp vec4 COLOR;
		attribute lowp vec2 TEXCOORD_0;
		attribute lowp vec2 TEXCOORD_1;
		
		varying lowp vec2 uv0;
		varying lowp vec2 uv1;
		varying lowp vec4 color;
		
		#ifdef FOG
			varying lowp vec4 fogColor;
		#endif
		
		const float rA = 1.0;
		const float rB = 1.0;
		const vec3 UNIT_Y = vec3(0,1,0);
		const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		
		float circularFogFactor(POS4 position, lowp float near, lowp float far) {
			
			lowp float depth = position.z / RENDER_DISTANCE;
		
		//sphericize the depths
		#ifdef FANCY
			lowp vec2 screenPos = abs( position.xy / position.w  );
			depth += (screenPos.x * 0.3 + screenPos.y * 0.15) * far;
		#else
			depth += far * 0.2;
		#endif
		
		#ifdef ALLOW_FADE
			depth += CURRENT_COLOR.r;
		#endif
		
			return clamp((depth - near) / (far - near), 0.0, 1.0);
		}
		
		lowp vec4 fancyWater(POS3 position, lowp vec4 baseColor) {
			POS3 world = position + CHUNK_ORIGIN;
		
			POS3 viewDir = VIEW_POS - world;
			lowp float len = length(viewDir);
			viewDir /= len;
			lowp float F = dot(viewDir, UNIT_Y);
		
		//if both NEAR_WATER and FOG are defined, it's forced fog and we're underwater
		#ifndef FOG  //over water
			F = 1.0 - max(F, 0.1);
		#else //under water
			baseColor.a = 0.7; //disable fake transparency and be transparent
		#endif
		
			F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, len / FAR_CHUNKS_DISTANCE));
		
			baseColor.rg -= vec2(F * DIST_DESATURATION);
		
			vec4 depthColor = vec4(baseColor.rgb * 0.5, 1.0);
			vec4 traspColor = vec4(baseColor.rgb * 0.45, 0.8);
			vec4 surfColor = vec4(baseColor.rgb, 1.0);
		
			vec4 nearColor = mix(traspColor, depthColor, baseColor.a);
			return mix(surfColor,nearColor, F);
		}
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv0 = TEXCOORD_0;
		    uv1 = TEXCOORD_1;
		
		#ifdef FOG
		    fogColor.rgb = FOG_COLOR.rgb;
			fogColor.a = circularFogFactor(gl_Position, FOG_CONTROL.x, FOG_CONTROL.y );
		#endif
			
		#ifdef NEAR_WATER
		#ifdef FANCY
			color = fancyWater(POSITION.xyz, COLOR);
		#else
			color = COLOR;
			color.a = (gl_Position.z) / FAR_CHUNKS_DISTANCE + 0.5;
		#endif //FANCY
		#else
			color = COLOR;
		#endif
		}
		'''
Added resource pack "sky.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		uniform lowp vec4 FOG_COLOR;
		uniform lowp vec4 CURRENT_COLOR;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec4 COLOR;
		
		varying lowp vec4 color;
		
		const float fogNear = 0.3;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = mix( CURRENT_COLOR, FOG_COLOR, COLOR.r );
		}
		'''
Added resource pack "texture.fragment":
	file "vanilla":
		'''
		
		
		varying lowp vec2 uv;
		
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
			gl_FragColor = texture2D( TEXTURE_0, uv );
			
		#ifdef ALPHA_TEST
			if(gl_FragColor.a < 0.5)
				discard;
		#endif
		}
		'''
Added resource pack "texture_ccolor.fragment":
	file "vanilla":
		'''
		
		
		varying lowp vec2 uv;
		
		uniform lowp vec4 CURRENT_COLOR;
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
			lowp vec4 diffuse = texture2D( TEXTURE_0, uv );
		
		#ifdef ALPHA_TEST
			if(diffuse.a < 0.5)
				discard;
		#endif
		
			gl_FragColor = CURRENT_COLOR * diffuse;
		}
		'''
Added resource pack "texture_cutout.fragment":
	file "vanilla":
		'''
		varying lowp vec2 uv;
		
		uniform lowp vec4 CURRENT_COLOR;
		uniform sampler2D TEXTURE_0;
		
		void main()
		{
			lowp vec4 diffuse = texture2D( TEXTURE_0, uv );
			if(diffuse.a < 0.5)
				discard;
				
			gl_FragColor = CURRENT_COLOR;
		}
		'''
Added resource pack "uv.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec2 TEXCOORD_0;
		
		varying lowp vec2 uv;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = TEXCOORD_0;
		}
		'''
Added resource pack "uv1.vertex":
	file "vanilla":
		'''
		
		
		uniform mat4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute lowp vec2 TEXCOORD_1;
		
		varying lowp vec2 uv;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = TEXCOORD_1;
		}
		'''
Added resource pack "uv_as_color.fragment":
	file "vanilla":
		'''
		
		varying lowp vec2 uv;
		
		void main()
		{
			gl_FragColor = vec4(uv.x, uv.y,0.0,1.0);
		}
		'''