Difference of "shaders_resource_packs" between "1.13.0.9" (beta of "1.13.0") and "1.13.0.13" (beta of "1.13.0").

Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 147 (+23, -32)
		          '''
		          ...
		  8   8   #include "uniformPerFrameConstants.h"
		  9   9   #ifdef USE_SKINNING
		 10  10   #include "uniformAnimationConstants.h"
		 11  11   #endif
		 12  12   
		 13     - attribute mediump vec4 POSITION;
		 14     - attribute vec2 TEXCOORD_0;
		 15     - attribute vec4 NORMAL;
		 16     - #if defined(USE_SKINNING)
		 17     - #ifdef MCPE_PLATFORM_NX
		 18     - attribute uint BONEID_0;
		 19     - #else
		 20     - attribute float BONEID_0;
		 21     - #endif
		 22     - #endif
		 23     - 
		 24     - #ifdef COLOR_BASED
		 25     - 	attribute vec4 COLOR;
		 26     -     varying vec4 vertColor;
		     13 + #line 13
		 27     - #endif
		 28  14   
		     15 + attribute mediump vec4 POSITION;
		     16 + attribute vec2 TEXCOORD_0;
		     17 + attribute vec4 NORMAL;
		     18 + #if defined(USE_SKINNING)
		 29     - varying vec4 light;
		 30     - varying vec4 fogColor;
		 31     - 
		     19 + #ifdef MCPE_PLATFORM_NX
		 32     - #ifdef USE_OVERLAY
		     20 + attribute uint BONEID_0;
		     21 + #else
		     22 + attribute float BONEID_0;
		     23 + #endif
		 33     -     // When drawing horses on specific android devices, overlay color ends up being garbage data.
		 34     -     // Changing overlay color to high precision appears to fix the issue on devices tested
		 35     - 	varying highp vec4 overlayColor;
		 36  24   #endif
		 37  25   
		     26 + #ifdef COLOR_BASED
		     27 + 	attribute vec4 COLOR;
		 38     - #ifdef TINTED_ALPHA_TEST
		     28 + 	varying vec4 vertColor;
		 39     - 	varying float alphaTestMultiplier;
		 40  29   #endif
		     30 + 
		     31 + varying vec4 light;
		     32 + varying vec4 fogColor;
		 41  33   
		     34 + #ifdef USE_OVERLAY
		 42     - #ifdef GLINT
		 43     - 	varying vec2 layer1UV;
		     35 + 	// When drawing horses on specific android devices, overlay color ends up being garbage data.
		     36 + 	// Changing overlay color to high precision appears to fix the issue on devices tested
		     37 + 	varying highp vec4 overlayColor;
		 44     - 	varying vec2 layer2UV;
		 45     -     varying vec4 tileLightColor;
		 46     - 	varying vec4 glintColor;
		 47  38   #endif
		 48     - 
		 49     - const float AMBIENT = 0.45;
		 50  39   
		     40 + #ifdef TINTED_ALPHA_TEST
		     41 + 	varying float alphaTestMultiplier;
		 51     - const float XFAC = -0.1;
		     42 + #endif
		 52     - const float ZFAC = 0.1;
		 53  43   
		 54     - float lightIntensity() {
		 55     - #ifdef FANCY
		     44 + #ifdef GLINT
		     45 + 	varying vec2 layer1UV;
		     46 + 	varying vec2 layer2UV;
		     47 + 	varying vec4 tileLightColor;
		     48 + 	varying vec4 glintColor;
		 56     - #ifdef USE_SKINNING
		 57     - #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		 58     -     vec3 N = normalize( BONES[int(BONEID_0)] * NORMAL ).xyz;
		 59     - #else
		 60     -     vec3 N = normalize( BONE * NORMAL ).xyz;
		 61  49   #endif
		     50 + 	varying highp vec4 entitySpacePosition;
		     51 + 	varying highp vec4 entitySpaceNormal;
		 62     - #else
		     52 + 
		     53 + const float AMBIENT = 0.45;
		 63     -     vec3 N = normalize( WORLD * NORMAL ).xyz;
		 64     - #endif
		 65  54   
		     55 + const float XFAC = -0.1;
		     56 + const float ZFAC = 0.1;
		 66     -     N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		 67  57   
		     58 + float lightIntensity() {
		 68     -     //take care of double sided polygons on materials without culling
		 69     - #ifdef FLIP_BACKFACES
		 70     - #ifdef USE_SKINNING
		     59 + #ifdef FANCY
		     60 + 	vec3 N = normalize( WORLD * entitySpaceNormal ).xyz;
		 71     - #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		 72     -     vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
		     61 + 
		     62 + 	N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		     63 + 
		     64 + 	//take care of double sided polygons on materials without culling
		     65 + 	#ifdef FLIP_BACKFACES
		     66 + 		vec3 viewDir = normalize((WORLD * entitySpacePosition).xyz);
		 73     - #else
		 74     - 	vec3 viewDir = normalize((BONE * POSITION).xyz);
		 75     - #endif
		 76     - #else
		 77     -     vec3 viewDir = normalize((WORLD * POSITION).xyz);
		 78     - #endif
		     67 + 		if( dot(N, viewDir) > 0.0 )
		     68 + 			N *= -1.0;
		 79     -     if( dot(N, viewDir) > 0.0 ) {
		 80     -         N *= -1.0;
		 81     -     }
		     69 + 	#endif
		 82     - #endif
		 83  70   
		     71 + 		float yLight = (1.0+N.y) * 0.5;
		     72 + 		return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		 84     -     float yLight = (1.0+N.y) * 0.5;
		 85     -     return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		 86  73   #else
		     74 + 	return 1.0;
		 87     -     return 1.0;
		 88  75   #endif
		 89  76   }
		 90  77   
		 91  78   #ifdef GLINT
		 92  79   vec2 calculateLayerUV(float offset, float rotation) {
		          ...
		103  90   #endif
		104  91   
		105  92   void main()
		106  93   {
		107  94   #ifdef USE_SKINNING
		     95 + 	#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		108     - #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		     96 + 		entitySpacePosition = BONES[int(BONEID_0)] * POSITION;
		     97 + 		entitySpaceNormal = BONES[int(BONEID_0)] * NORMAL;
		     98 + 	#else
		109     -     POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
		110     - #else
		     99 + 		entitySpacePosition = BONE * POSITION;
		    100 + 		entitySpaceNormal = BONE * NORMAL;
		    101 + 	#endif
		111     -     POS4 pos = WORLDVIEWPROJ * BONE * POSITION;
		112     - #endif
		113 102   #else
		    103 + 	entitySpacePosition = POSITION * vec4(1, 1, 1, 1);
		    104 + 	entitySpaceNormal = NORMAL * vec4(1, 1, 1, 0);
		114     -     POS4 pos = WORLDVIEWPROJ * POSITION;
		115 105   #endif
		    106 + 	vec4 pos = WORLDVIEWPROJ * entitySpacePosition;
		    107 + 	gl_Position = pos;
		116     -     gl_Position = pos;
		117 108   
		    109 + 	float L = lightIntensity();
		118     -     float L = lightIntensity();
		119 110   
		120 111   #ifdef USE_OVERLAY
		121 112   	L += OVERLAY_COLOR.a * 0.35;
		122 113   #endif
		123 114   
		124 115   #ifdef TINTED_ALPHA_TEST
		    116 + 	alphaTestMultiplier = OVERLAY_COLOR.a;
		125     -     alphaTestMultiplier = OVERLAY_COLOR.a;
		126 117   #endif
		127 118   
		    119 + 	light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		128     -     light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		129 120   
		130 121   #ifdef COLOR_BASED
		131 122   	vertColor = COLOR;
		132 123   #endif
		    124 + 	
		133     -     
		134 125   #ifdef USE_OVERLAY
		135 126   	overlayColor = OVERLAY_COLOR;
		136 127   #endif
		137 128   
		138 129   #ifndef NO_TEXTURE
		    130 + 	uv = TEXCOORD_0;
		139     -     uv = TEXCOORD_0;
		140 131   #endif
		141 132   
		142 133   #ifdef USE_UV_ANIM
		143 134   	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
		144 135   #endif
		145 136   
		146 137   #ifdef GLINT
		147 138   	glintColor = GLINT_COLOR;
		148 139   	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		149 140   	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		    141 + 	tileLightColor = TILE_LIGHT_COLOR;
		150     -     tileLightColor = TILE_LIGHT_COLOR;
		151 142   #endif
		152 143   
		153 144   	//fog
		    145 + 	fogColor.rgb = FOG_COLOR.rgb;
		154     -     fogColor.rgb = FOG_COLOR.rgb;
		155 146   	fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		156 147   }
		          '''