Difference of "shaders_resource_packs" between "a0.11.1-2" and "a0.12.1_build1" (beta of "a0.12.1").
Unable to create data files for 3 files between: "a0.11.2", "a0.12.0", "a0.12.0.1"

Changed resource pack "color_texture.fragment":
	Changed file "vanilla":
		Total line: 46 (+24, -1)
		        '''
		 1  1   #version 100
		 2  2   uniform sampler2D TEXTURE_0;
		    3 + uniform sampler2D TEXTURE_1;
		    4 + uniform vec4 OVERLAY_COLOR;
		    5 + uniform vec4 CHANGE_COLOR;
		    6 + 
		    7 + varying vec4 color;
		    8 + varying vec2 uv;
		    9 + 
		   10 + #ifdef GLINT
		   11 + 	varying vec2 layer1UV;
		   12 + 	varying vec2 layer2UV;
		   13 + 
		   14 + 	vec4 glintBlend(vec4 dest, vec4 source) {
		   15 + 		return vec4(source.rgb * source.rgb, 0.0) + dest;
		   16 + 	}
		   17 + #endif
		   18 + 
		   19 + void main()
		   20 + {
		   21 + 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		 3    - uniform vec4 OVERLAY_COLOR;
		 4 22   
		   23 + #ifdef ALPHA_TEST
		   24 + 	if(diffuse.a < 0.5)
		   25 + 	 	discard;
		   26 + #endif
		 5    - varying vec4 color;
		 6    - varying vec2 uv;
		 7 27   
		   28 + #ifdef GLINT
		   29 + 	vec4 layer1 = texture2D(TEXTURE_1, layer1UV).rgbr * CHANGE_COLOR;
		 8    - void main()
		   30 + 	vec4 layer2 = texture2D(TEXTURE_1, layer2UV).rgbr * CHANGE_COLOR;
		   31 + 	vec4 glint = (layer1 + layer2);
		 9    - {
		10    - 	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		11 32   
		   33 + 	#ifdef INVENTORY
		   34 + 		diffuse = glint;
		   35 + 	#else
		   36 + 		diffuse = glintBlend(diffuse, glint);
		   37 + 	#endif
		12    - #ifdef ALPHA_TEST
		13    - 	if(diffuse.a < 0.5)
		14    - 	 	discard;
		15 38   #endif
		16 39   
		17 40   #ifdef USE_OVERLAY
		18 41   	//use either the diffuse or the OVERLAY_COLOR
		19 42   	diffuse.rgb = mix(diffuse, OVERLAY_COLOR, OVERLAY_COLOR.a).rgb;
		        ...
		        '''
Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 44 (+29, -3)
		        '''
		 1  1   #version 100
		 2  2   
		 3  3   uniform MAT4 WORLDVIEWPROJ;
		 4  4   
		    5 + uniform vec2 UV_OFFSET;
		    6 + uniform vec2 UV_ROTATION;
		    7 + uniform vec2 GLINT_UV_SCALE;
		    8 + 
		    9 + attribute mediump vec4 POSITION;
		   10 + attribute vec4 COLOR;
		   11 + attribute vec2 TEXCOORD_0;
		   12 + 
		   13 + varying vec4 color;
		   14 + varying vec2 uv;
		   15 + 
		   16 + #ifdef GLINT
		   17 + varying vec2 layer1UV;
		   18 + varying vec2 layer2UV;
		   19 + 
		   20 + vec2 calculateLayerUV(float offset, float rotation) {
		   21 + 	vec2 uv = TEXCOORD_0;
		   22 + 	uv -= 0.5;
		   23 + 	float rsin = sin(rotation);
		   24 + 	float rcos = cos(rotation);
		   25 + 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		   26 + 	uv.x += offset;
		   27 + 	uv += 0.5;
		   28 + 
		   29 + 	return uv * GLINT_UV_SCALE;
		   30 + }
		   31 + #endif
		 5    - attribute mediump vec4 POSITION;
		 6    - attribute vec4 COLOR;
		 7    - attribute vec2 TEXCOORD_0;
		 8 32   
		   33 + void main()
		   34 + {
		 9    - varying vec4 color;
		   35 + 	gl_Position = WORLDVIEWPROJ * POSITION;
		10    - varying vec2 uv;
		11 36   
		   37 + 	color = COLOR;
		12    - void main()
		13    - {
		   38 + 	uv = TEXCOORD_0;
		14    -     gl_Position = WORLDVIEWPROJ * POSITION;
		15 39   
		   40 + #ifdef GLINT
		   41 + 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		   42 + 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		   43 + #endif
		16    -     color = COLOR;
		17    -     uv = TEXCOORD_0;
		18 44   }
		        '''
Changed resource pack "entity.fragment":
	Changed file "vanilla":
		Total line: 85 (+44, -19)
		          '''
		  1   1   #version 100
		  2   2   uniform sampler2D TEXTURE_0;
		  3   3   uniform sampler2D TEXTURE_1;
		      4 + uniform vec4 TILE_LIGHT_COLOR;
		      5 + 
		      6 + varying vec4 light;
		      7 + varying vec4 fogColor;
		      8 + 
		      9 + #ifndef COLOR_BASED
		     10 + 	varying vec2 uv;
		     11 + #endif
		     12 + #ifdef USE_OVERLAY
		     13 + 	varying vec4 overlayColor;
		     14 + #endif
		     15 + 
		     16 + #ifdef USE_COLOR_MASK
		     17 + 	varying vec4 changeColor;
		     18 + #endif
		     19 + 
		     20 + #ifdef GLINT
		     21 + 	varying vec2 layer1UV;
		     22 + 	varying vec2 layer2UV;
		     23 + #endif
		     24 + 
		     25 + vec4 glintBlend(vec4 dest, vec4 source) {
		     26 + 	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		     27 + 	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
		     28 + }
		     29 + 
		     30 + #ifdef USE_EMISSIVE
		     31 + #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
		     32 + #else
		     33 + #define NEEDS_DISCARD(C)	(C.a < 0.5)
		     34 + #endif
		     35 + 
		     36 + void main()
		     37 + {
		     38 + 	vec4 color = vec4(1.0);
		  4  39   
		     40 + #ifndef COLOR_BASED
		  5     - varying vec4 light;
		     41 + 	color = texture2D( TEXTURE_0, uv );
		  6     - varying vec4 fogColor;
		  7  42   
		     43 + 	#ifdef ALPHA_TEST
		     44 + 		if(NEEDS_DISCARD(color))
		  8     - #ifndef COLOR_BASED
		     45 + 			discard;
		     46 + 	#endif
		  9     - 	varying vec2 uv;
		 10     - #endif
		 11     - #ifdef USE_OVERLAY
		 12     - 	varying vec4 overlayColor;
		 13  47   #endif
		 14  48   
		 15  49   #ifdef USE_COLOR_MASK
		     50 + 	#ifdef GLINT
		     51 + 		// Applies color mask to glint texture instead and blends with original color
		     52 + 		vec4 layer1 = texture2D(TEXTURE_1, layer1UV).rgbr * changeColor;
		 16     - 	varying vec4 changeColor;
		 17     - #endif
		 18     - 
		 19     - 
		     53 + 		vec4 layer2 = texture2D(TEXTURE_1, layer2UV).rgbr * changeColor;
		     54 + 		vec4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		     55 + 	#else
		 20     - #ifdef USE_EMISSIVE
		 21     - #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
		 22     - #else
		 23     - #define NEEDS_DISCARD(C)	(C.a < 0.5)
		 24     - #endif
		 25     - 
		     56 + 		// Original color mask behavior
		     57 + 		color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		     58 + 		color.a = 1.0;
		     59 + 	#endif
		     60 + #endif
		 26     - void main()
		 27     - {
		 28     - 	vec4 color = vec4(1.0);
		 29     - #ifndef COLOR_BASED
		 30     - 	color = texture2D( TEXTURE_0, uv );
		 31  61   
		     62 + #ifdef USE_OVERLAY
		 32     - 	#ifdef ALPHA_TEST
		 33     - 		if(NEEDS_DISCARD(color))
		     63 + 	//use either the diffuse or the OVERLAY_COLOR
		     64 + 	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
		 34     - 		 	discard;
		 35     - 	#endif
		 36  65   #endif
		 37  66   
		     67 + #ifdef USE_EMISSIVE
		 38     - #ifdef USE_COLOR_MASK
		     68 + 	//make glowy stuff
		     69 + 	color *= mix(vec4(1.0), light, color.a );
		 39     - 	color.rgb = mix( color, color*changeColor, color.a).rgb;
		     70 + #else
		     71 + 	color *= light;
		 40     - 	color.a = 1.0;
		 41  72   #endif
		 42  73   
		     74 + 	//apply fog
		 43     - #ifdef USE_OVERLAY
		 44     - 	//use either the diffuse or the OVERLAY_COLOR
		     75 + 	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
		 45     - 	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
		 46     - #endif
		 47  76   
		     77 + #ifdef USE_COLOR_MASK
		     78 + 	#ifdef GLINT
		     79 + 		color = glintBlend(color, glint);
		 48     - #ifdef USE_EMISSIVE
		 49     - 	//make glowy stuff
		 50     - 	color *= mix(vec4(1.0), light, color.a );
		 51     - #else
		     80 + 	#endif
		 52     - 	color *= light;
		 53  81   #endif
		 54     - 
		 55     - 	//apply fog
		 56     - 	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
		 57  82   
		 58  83   	//WARNING do not refactor this 
		 59  84   	gl_FragColor = color;
		 60  85   }
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 114 (+52, -19)
		          '''
		  1   1   #version 100
		  2   2   uniform MAT4 WORLDVIEWPROJ;
		  3   3   uniform MAT4 WORLD;
		      4 + uniform vec4 TILE_LIGHT_COLOR;
		      5 + uniform vec4 OVERLAY_COLOR;
		      6 + uniform vec4 CHANGE_COLOR;
		      7 + uniform vec4 FOG_COLOR;
		      8 + uniform vec2 FOG_CONTROL;
		      9 + uniform float RENDER_DISTANCE;
		     10 + uniform vec2 UV_ANIM;
		     11 + uniform vec2 UV_OFFSET;
		     12 + uniform vec2 UV_ROTATION;
		     13 + uniform vec2 GLINT_UV_SCALE;
		     14 + 
		     15 + attribute mediump vec4 POSITION;
		     16 + attribute vec2 TEXCOORD_0;
		     17 + attribute vec4 NORMAL;
		     18 + 
		     19 + #ifdef COLOR_BASED
		     20 + 	attribute vec4 COLOR;
		     21 + #endif
		     22 + 
		     23 + varying vec2 uv;
		     24 + varying vec4 light;
		     25 + varying vec4 fogColor;
		     26 + 
		     27 + #ifdef USE_OVERLAY
		     28 + varying vec4 overlayColor;
		     29 + #endif
		     30 + 
		     31 + #ifdef USE_COLOR_MASK
		     32 + varying vec4 changeColor;
		     33 + #endif
		     34 + 
		     35 + #ifdef GLINT
		     36 + 	varying vec2 layer1UV;
		     37 + 	varying vec2 layer2UV;
		     38 + #endif
		     39 + 
		     40 + const float AMBIENT = 0.45;
		  4     - uniform vec3 TILE_LIGHT_COLOR;
		  5     - uniform vec4 OVERLAY_COLOR;
		  6     - uniform vec4 CHANGE_COLOR;
		  7     - uniform vec4 FOG_COLOR;
		  8     - uniform vec2 FOG_CONTROL;
		  9     - uniform float RENDER_DISTANCE;
		 10  41   
		     42 + const float XFAC = -0.1;
		 11     - attribute mediump vec4 POSITION;
		 12     - attribute vec2 TEXCOORD_0;
		     43 + const float ZFAC = 0.1;
		 13     - attribute vec4 NORMAL;
		 14  44   
		     45 + float lightIntensity() {
		     46 + #ifdef FANCY
		 15     - #ifdef COLOR_BASED
		 16     - 	attribute vec4 COLOR;
		     47 +     vec3 N = normalize( WORLD * NORMAL ).xyz;
		 17     - #endif
		 18  48   
		     49 +     //take care of double sided polygons on materials without culling
		     50 + #ifdef FLIP_BACKFACES
		     51 +     vec3 viewDir = normalize((WORLD * POSITION).xyz);
		     52 +     if( dot(N, viewDir) > 0.0 )
		     53 +         N *= -1.0;
		     54 + #endif
		 19     - varying vec2 uv;
		 20     - varying vec4 light;
		 21     - varying vec4 fogColor;
		 22  55   
		     56 +     float yLight = (1.0+N.y) * 0.5;
		     57 +     return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		     58 + #else
		     59 +     return 1.0;
		 23     - #ifdef USE_OVERLAY
		 24     - varying vec4 overlayColor;
		 25  60   #endif
		     61 + }
		 26  62   
		     63 + #ifdef GLINT
		     64 + vec2 calculateLayerUV(float offset, float rotation) {
		 27     - #ifdef USE_COLOR_MASK
		     65 + 	vec2 uv = TEXCOORD_0;
		     66 + 	uv -= 0.5;
		     67 + 	float rsin = sin(rotation);
		     68 + 	float rcos = cos(rotation);
		     69 + 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		     70 + 	uv.x += offset;
		     71 + 	uv += 0.5;
		 28     - varying vec4 changeColor;
		 29     - #endif
		 30     - 
		 31     - const float AMBIENT = 0.45;
		 32     - 
		 33     - const float XFAC = -0.1;
		 34     - const float ZFAC = 0.1;
		 35  72   
		     73 + 	return uv * GLINT_UV_SCALE;
		     74 + }
		 36     - float lightIntensity() {
		 37     - #ifdef FANCY
		     75 + #endif
		 38     -     vec3 N = normalize( WORLD * NORMAL ).xyz;
		 39  76   
		     77 + void main()
		 40     -     //take care of double sided polygons on materials without culling
		 41     - #ifdef FLIP_BACKFACES
		     78 + {
		     79 +     POS4 pos = WORLDVIEWPROJ * POSITION;
		     80 +     gl_Position = pos;
		 42     -     vec3 viewDir = normalize((WORLD * POSITION).xyz);
		 43     -     if( dot(N, viewDir) > 0.0 )
		 44     -         N *= -1.0;
		     81 + 
		     82 +     float L = lightIntensity();
		 45     - #endif
		 46  83   
		     84 + #ifdef USE_OVERLAY
		 47     -     float yLight = (1.0+N.y) * 0.5;
		 48     -     return yLight * (1.0-AMBIENT) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
		     85 + 	L += OVERLAY_COLOR.a * 0.35;
		     86 +     overlayColor = OVERLAY_COLOR;
		 49     - #else
		 50     -     return 1.0;
		 51  87   #endif
		 52     - }
		 53  88   
		     89 + #ifdef USE_COLOR_MASK
		 54     - void main()
		 55     - {
		     90 +     changeColor = CHANGE_COLOR;
		     91 + #endif
		 56     -     POS4 pos = WORLDVIEWPROJ * POSITION;
		 57     -     gl_Position = pos;
		 58  92   
		     93 +     light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		 59     -     float L = lightIntensity();
		 60  94   
		     95 + #ifdef COLOR_BASED
		     96 + 	light *= COLOR;
		 61     - #ifdef USE_OVERLAY
		     97 + #else
		     98 +     uv = TEXCOORD_0;
		 62     - 	L += OVERLAY_COLOR.a * 0.35;
		 63     -     overlayColor = OVERLAY_COLOR;
		 64  99   #endif
		 65 100   
		    101 + #ifdef USE_UV_ANIM
		    102 + 	uv.xy += UV_ANIM.xy;
		 66     - #ifdef USE_COLOR_MASK
		 67     -     changeColor = CHANGE_COLOR;
		 68 103   #endif
		 69     - 
		 70     -     light = vec4(vec3(L) * TILE_LIGHT_COLOR, 1.0);
		 71 104   
		    105 + #ifdef GLINT
		 72     - #ifdef COLOR_BASED
		 73     - 	light *= COLOR;
		    106 + 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		    107 + 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		 74     - #else
		 75     -     uv = TEXCOORD_0;
		 76 108   #endif
		    109 + 
		 77 110   
		 78 111   //fog
		 79 112       fogColor.rgb = FOG_COLOR.rgb;
		 80 113       fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 81 114   }
		          '''
Added resource pack "rain_snow.fragment":
	file "vanilla":
		'''
		#version 100
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		
		varying vec2 uv;
		varying vec4 color;
		varying vec4 worldPosition;
		
		void main()
		{
			vec4 albedo = texture2D( TEXTURE_0, uv);
		
		#ifdef ALPHA_TEST
			if (albedo.a < 0.5)
				discard;
		#endif
		
			albedo.a *= color.a;
		
			vec2 occlusionUV = worldPosition.xz;
			vec4 occlusionTexture = texture2D( TEXTURE_1, occlusionUV);
		
			occlusionTexture.a *= 255.0;	// Alpha stores height of world
		
			// clamp the uvs
			vec2 uvclamp = clamp(occlusionUV, 0.0, 1.0);
			if (uvclamp.x == occlusionUV.x && uvclamp.y == occlusionUV.y && worldPosition.y < occlusionTexture.a) {
				discard;
			}
		
			float mixAmount = clamp ( (worldPosition.y - occlusionTexture.a)*0.1, 0.0, 1.0);
			vec3 lighting = mix(occlusionTexture.rgb, color.rgb, mixAmount);
			gl_FragColor = albedo;
			gl_FragColor.rgb *= lighting.rgb;
		}
		
		
		'''
Added resource pack "rain_snow.vertex":
	file "vanilla":
		'''
		#version 100
		uniform MAT4	WORLDVIEWPROJ;
		uniform vec4	POSITION_OFFSET;
		uniform vec4	VELOCITY;
		uniform vec4	ALPHA;
		uniform vec4	VIEW_POSITION;
		uniform vec4	SIZE_SCALE;
		uniform vec4	LIGHTING;
		uniform vec4	FORWARD;
		uniform vec4	UV_INFO;
		uniform vec4	PARTICLE_BOX;
		
		attribute mediump vec4 POSITION;
		attribute vec2 TEXCOORD_0;
		attribute vec4 COLOR;
		
		varying vec2 uv;
		varying vec4 color;
		varying vec4 worldPosition;
		
		void main()
		{
			float spriteSelector = COLOR.x*255.0;
			uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
			uv.x += spriteSelector * UV_INFO.z;
		
			vec3 pos = POSITION.xyz;
				
			// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
			pos.xyz += POSITION_OFFSET.xyz;
			pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
			
			// centre box on origin
			pos.xyz -= PARTICLE_BOX.xyz * 0.5;
			
			// push along view vector so box is positioned more infront of camera
			pos.xyz += FORWARD.xyz;
			
			// get world position
			vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
			vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		
			// get projected positions of top and bottom of particle, and top of particle in previous frame
			vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
			vec4 top = WORLDVIEWPROJ * worldPositionTop;
			
			// get 2d vector in screenspace between top and bottom of particle
			vec2 dir = (top.xy/top.w) - (bottom.xy/bottom.w);
			
			// get 2d vector perpendicular to velocity
			vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		
			// choose either the top or bottom projected position using uv.y
			gl_Position = mix(top, bottom, TEXCOORD_0.y);
			 	
			// offset the position of each side of the particle using uv.x 
			gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
			
			color = ALPHA.rgba;
		
			worldPositionBottom.xz *= 1.0 / 64.0;	// Scale by 1/TextureDimensions to get values between
			worldPositionBottom.xz += 0.5;			// Offset so that center of view is in the center of occlusion texture
			worldPositionBottom.y += VIEW_POSITION.y - 0.5;
			worldPosition = worldPositionBottom;
		}
		'''
Changed resource pack "renderchunk.fragment":
	Changed file "vanilla":
		Total line: 52 (+26, -3)
		        '''
		        ...
		 8  8   	varying vec4 fogColor;
		 9  9   #endif
		10 10   
		11 11   uniform sampler2D TEXTURE_0;
		12 12   uniform sampler2D TEXTURE_1;
		   13 + uniform sampler2D TEXTURE_2;
		   14 + 
		   15 + void main()
		   16 + {
		   17 + 	vec4 diffuse = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		   18 + 	vec4 inColor = color;
		   19 + 	
		   20 + #ifdef SEASONS_FAR
		   21 + 	diffuse.a = 1.0;
		   22 + 	inColor.b = 1.0;
		   23 + #endif
		   24 + 
		   25 + #ifdef ALPHA_TEST
		   26 + 	if(diffuse.a < 0.5)
		   27 + 	 	discard;
		   28 + #endif
		   29 + 	
		   30 + #ifndef SEASONS
		   31 + 
		   32 + #if !defined(ALPHA_TEST) && !defined(BLEND)
		   33 + 	inColor.rgb = mix(inColor.aaa, inColor.rgb, diffuse.a);
		   34 + #elif defined(BLEND)
		   35 + 	diffuse.a *= inColor.a;
		   36 + #endif	
		13 37   
		   38 + 	diffuse.rgb *= inColor.rgb;
		   39 + #else
		   40 + 	vec2 uv = inColor.xy;
		   41 + 	uv.y += 1.0 / 512.0;
		   42 + 	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
		14    - void main()
		15    - {
		16    - 	vec4 diffuse = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		17    - 
		   43 + 	diffuse.rgb *= inColor.aaa;
		   44 + 	diffuse.a = 1.0;
		18    - #ifdef ALPHA_TEST
		19    - 	if(diffuse.a < 0.5)
		20    - 	 	discard;
		21 45   #endif
		22    - 	diffuse *= color;
		23 46   
		24 47   #ifdef FOG
		25 48   	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		26 49   #endif
		27 50   
		        ...
		        '''
Added resource pack "uv_scale.vertex":
	file "vanilla":
		'''
		#version 100
		
		uniform MAT4 WORLDVIEWPROJ;
		uniform vec2 GLINT_UV_SCALE;
		
		attribute mediump vec4 POSITION;
		attribute vec2 TEXCOORD_0;
		
		varying vec2 uv;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    uv = TEXCOORD_0 * GLINT_UV_SCALE.xy;
		}
		'''
Added resource pack "weather.fragment":
	file "vanilla":
		'''
		#version 100
		
		varying vec2 uv0;
		varying vec2 uv1;
		varying vec4 color;
		
		#ifdef FOG
			varying vec4 fogColor;
		#endif
		
		uniform sampler2D TEXTURE_0;
		uniform sampler2D TEXTURE_1;
		
		void main()
		{
			vec4 diffuse = texture2D( TEXTURE_0, uv0 ) * texture2D( TEXTURE_1, uv1 );
		
		#ifdef ALPHA_TEST
			if(diffuse.a < 0.5)
			 	discard;
		#endif
			diffuse *= color;
		
		#ifdef FOG
			diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
		#endif
		
			gl_FragColor.rgba = diffuse;
		}
		'''
Added resource pack "weather.vertex":
	file "vanilla":
		'''
		#version 100
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		attribute vec4 COLOR;
		attribute vec2 TEXCOORD_0;
		attribute vec2 TEXCOORD_1;
		
		varying vec4 color;
		varying vec2 uv0;
		varying vec2 uv1;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		
		    color = COLOR;
		    uv0.x = TEXCOORD_0.x * 2.0;
		    uv0.y = TEXCOORD_0.y * 10.0;
			uv1 = TEXCOORD_1;
		}
		'''