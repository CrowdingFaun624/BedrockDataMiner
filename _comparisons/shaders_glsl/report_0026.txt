Difference of "shaders_resource_packs" between "a0.15.10" and "a0.16.0_build1" (beta of "a0.16.0").

Changed resource pack "color_uv.vertex":
	Changed file "vanilla":
		Total line: 91 (+21, -10)
		          '''
		          ...
		 29  29   uniform vec2 UV_OFFSET;
		 30  30   uniform vec2 UV_ROTATION;
		 31  31   uniform vec2 GLINT_UV_SCALE;
		 32  32   uniform vec4 FOG_COLOR;
		 33  33   uniform vec2 FOG_CONTROL;
		     34 + uniform int FOG_MODE;
		     35 + uniform float RENDER_DISTANCE;
		     36 + uniform vec4 TILE_LIGHT_COLOR;
		     37 + 
		     38 + attribute mediump vec4 POSITION;
		     39 + attribute vec4 COLOR;
		     40 + attribute vec2 TEXCOORD_0;
		     41 + 
		     42 + varying vec4 color;
		     43 + 
		     44 + #ifdef ENABLE_FOG
		     45 + varying vec4 fogColor;
		     46 + #endif
		 34     - uniform float RENDER_DISTANCE;
		 35  47   
		     48 + #ifdef GLINT
		 36     - attribute mediump vec4 POSITION;
		     49 + varying vec2 layer1UV;
		     50 + varying vec2 layer2UV;
		 37     - attribute vec4 COLOR;
		 38     - attribute vec2 TEXCOORD_0;
		 39  51   
		     52 + vec2 calculateLayerUV(float offset, float rotation) {
		     53 + 	vec2 uv = TEXCOORD_0;
		     54 + 	uv -= 0.5;
		     55 + 	float rsin = sin(rotation);
		     56 + 	float rcos = cos(rotation);
		     57 + 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		     58 + 	uv.x += offset;
		     59 + 	uv += 0.5;
		 40     - varying vec4 color;
		 41     - 
		 42     - #ifdef ENABLE_FOG
		 43     - varying vec4 fogColor;
		 44     - #endif
		 45  60   
		     61 + 	return uv * GLINT_UV_SCALE;
		     62 + }
		 46     - #ifdef GLINT
		 47     - varying vec2 layer1UV;
		     63 + #endif
		 48     - varying vec2 layer2UV;
		 49  64   
		     65 + void main()
		 50     - vec2 calculateLayerUV(float offset, float rotation) {
		 51     - 	vec2 uv = TEXCOORD_0;
		     66 + {
		 52     - 	uv -= 0.5;
		 53     - 	float rsin = sin(rotation);
		     67 + 	gl_Position = WORLDVIEWPROJ * POSITION;
		     68 + 
		     69 + 	color = COLOR;
		     70 + 	uv = TEXCOORD_0;
		 54     - 	float rcos = cos(rotation);
		 55     - 	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
		 56     - 	uv.x += offset;
		 57     - 	uv += 0.5;
		 58  71   
		     72 + #ifdef ENABLE_FOG
		     73 + 	//fog
		 59     - 	return uv * GLINT_UV_SCALE;
		     74 +     fogColor.rgb = FOG_COLOR.rgb;
		     75 + 	if(FOG_MODE == 0) {
		     76 + 		fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		     77 + 	}
		     78 + 	else {
		     79 + 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		 60     - }
		 61     - #endif
		 62     - 
		 63     - void main()
		 64     - {
		 65     - 	gl_Position = WORLDVIEWPROJ * POSITION;
		 66     - 
		     80 + 	}
		     81 + #endif
		 67     - 	color = COLOR;
		 68     - 	uv = TEXCOORD_0;
		 69  82   
		 70     - #ifdef ENABLE_FOG
		 71     - 	//fog
		     83 + #ifdef USE_LIGHTING
		     84 + 	color *= vec4(TILE_LIGHT_COLOR.xyz, 1.0);
		 72     -     fogColor.rgb = FOG_COLOR.rgb;
		 73     -     fogColor.a = clamp(((gl_Position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 74  85   #endif
		 75  86   
		 76  87   #ifdef GLINT
		 77  88   	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		 78  89   	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		          ...
		          '''
Changed resource pack "entity.vertex":
	Changed file "vanilla":
		Total line: 150 (+18, -12)
		          '''
		          ...
		 27  27   uniform vec4 OVERLAY_COLOR;
		 28  28   uniform vec4 CHANGE_COLOR;
		 29  29   uniform vec4 GLINT_COLOR;
		 30  30   uniform vec4 FOG_COLOR;
		 31  31   uniform vec2 FOG_CONTROL;
		     32 + uniform int FOG_MODE;
		 32  33   uniform float RENDER_DISTANCE;
		     34 + uniform vec4 UV_ANIM;
		 33     - uniform vec2 UV_ANIM;
		 34  35   uniform vec2 UV_OFFSET;
		 35  36   uniform vec2 UV_ROTATION;
		 36  37   uniform vec2 GLINT_UV_SCALE;
		 37  38   
		 38  39   attribute mediump vec4 POSITION;
		          ...
		102 103   
		103 104   void main()
		104 105   {
		105 106       POS4 pos = WORLDVIEWPROJ * POSITION;
		106 107       gl_Position = pos;
		    108 + 
		    109 +     float L = lightIntensity();
		107 110   
		    111 + #ifdef USE_OVERLAY
		    112 + 	L += OVERLAY_COLOR.a * 0.35;
		    113 +     overlayColor = OVERLAY_COLOR;
		    114 + #endif
		108     -     float L = lightIntensity();
		109 115   
		    116 + #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		110     - #ifdef USE_OVERLAY
		111     - 	L += OVERLAY_COLOR.a * 0.35;
		    117 +     changeColor = CHANGE_COLOR;
		112     -     overlayColor = OVERLAY_COLOR;
		113 118   #endif
		    119 + 
		    120 +     light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		114 121   
		    122 + #ifdef COLOR_BASED
		115     - #if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
		    123 + 	light *= COLOR;
		116     -     changeColor = CHANGE_COLOR;
		117 124   #endif
		    125 +     
		118     - 
		119     -     light = vec4(vec3(L) * TILE_LIGHT_COLOR.xyz, 1.0);
		120     - 
		    126 + #ifndef NO_TEXTURE
		    127 +     uv = TEXCOORD_0;
		121     - #ifdef COLOR_BASED
		122     - 	light *= COLOR;
		123 128   #endif
		    129 + 
		124     -     
		    130 + #ifdef USE_UV_ANIM
		    131 + 	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
		125     - #ifndef NO_TEXTURE
		126     -     uv = TEXCOORD_0;
		127 132   #endif
		128 133   
		    134 + #ifdef GLINT
		    135 + 	glintColor = GLINT_COLOR;
		    136 + 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		    137 + 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		    138 +     tileLightColor = TILE_LIGHT_COLOR;
		129     - #ifdef USE_UV_ANIM
		130     - 	uv.xy += UV_ANIM.xy;
		131 139   #endif
		    140 + 
		132 141   
		133     - #ifdef GLINT
		134     - 	glintColor = GLINT_COLOR;
		135     - 	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
		    142 + //fog
		    143 +     fogColor.rgb = FOG_COLOR.rgb;
		136     - 	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
		137     -     tileLightColor = TILE_LIGHT_COLOR;
		    144 + 	if(FOG_MODE == 0) {
		    145 + 		fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		138     - #endif
		139     - 
		    146 + 	}
		140     - 
		141     - //fog
		    147 + 	else {
		    148 + 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		142     -     fogColor.rgb = FOG_COLOR.rgb;
		143     -     fogColor.a = clamp(((pos.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		    149 + 	}
		144 150   }
		          '''
Added resource pack "levelstage_copy_vr.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		varying vec2 uv;
		
		#endif
		
		// This shader isn't actually used in OGL, we have to have an OGL shader since a material refers to the DX version
		// and thus this also needs to exist on the OGL side.
		void main()
		{
			gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
		}
		'''
Added resource pack "placeholder.fragment":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		
		// version 300 code
		
		#define varying in
		#define texture2D texture
		out vec4 FragColor;
		#define gl_FragColor FragColor
		
		#else
		
		// version 100 code
		
		#endif
		
		
		void main()
		{
			gl_FragColor = vec4(1,1,1,1);
		}
		'''
Added resource pack "placeholder.vertex":
	file "vanilla":
		'''
		// __multiversion__
		// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
		
		// To use centroid sampling we need to have version 300 es shaders, which requires changing:
		// attribute to in
		// varying to out when in vertex shaders or in when in fragment shaders
		// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
		// texture2D to texture
		#if __VERSION__ >= 300
		#define attribute in
		#define varying out
		
		#else
		
		
		#endif
		
		uniform MAT4 WORLDVIEWPROJ;
		
		attribute mediump vec4 POSITION;
		
		void main()
		{
		    gl_Position = WORLDVIEWPROJ * POSITION;
		}
		'''
Changed resource pack "rain_snow.vertex":
	Changed file "vanilla":
		Total line: 104 (+23, -17)
		          '''
		          ...
		 27  27   uniform vec4	FORWARD;
		 28  28   uniform vec4	UV_INFO;
		 29  29   uniform vec4	PARTICLE_BOX;
		 30  30   uniform vec4	FOG_COLOR;
		 31  31   uniform vec2	FOG_CONTROL;
		     32 + uniform int		FOG_MODE;
		     33 + uniform float	RENDER_DISTANCE;
		     34 + 
		     35 + attribute mediump vec4 POSITION;
		     36 + attribute vec2 TEXCOORD_0;
		     37 + attribute vec4 COLOR;
		     38 + 
		     39 + varying vec2 uv;
		     40 + varying vec4 color;
		     41 + varying vec4 worldPosition;
		     42 + varying vec4 fogColor;
		 32     - uniform float	RENDER_DISTANCE;
		 33  43   
		     44 + void main()
		     45 + {
		     46 + 	float spriteSelector = COLOR.x*255.0;
		     47 + 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		     48 + 	uv.x += spriteSelector * UV_INFO.z;
		 34     - attribute mediump vec4 POSITION;
		 35     - attribute vec2 TEXCOORD_0;
		 36     - attribute vec4 COLOR;
		 37  49   
		     50 + 	vec3 pos = POSITION.xyz;
		     51 + 		
		 38     - varying vec2 uv;
		 39     - varying vec4 color;
		     52 + 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		     53 + 	pos.xyz += POSITION_OFFSET.xyz;
		 40     - varying vec4 worldPosition;
		 41     - varying vec4 fogColor;
		 42     - 
		     54 + 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		     55 + 	
		     56 + 	// centre box on origin
		     57 + 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		     58 + 	
		     59 + 	// push along view vector so box is positioned more infront of camera
		     60 + 	pos.xyz += FORWARD.xyz;
		     61 + 	
		 43     - void main()
		 44     - {
		 45     - 	float spriteSelector = COLOR.x*255.0;
		 46     - 	uv = UV_INFO.xy + (TEXCOORD_0 * UV_INFO.zw);
		 47     - 	uv.x += spriteSelector * UV_INFO.z;
		 48     - 
		 49     - 	vec3 pos = POSITION.xyz;
		 50     - 		
		     62 + 	// get world position
		     63 + 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		     64 + 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		     65 + 
		     66 + 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		     67 + 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		     68 + 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		 51     - 	// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		 52     - 	pos.xyz += POSITION_OFFSET.xyz;
		 53     - 	pos.xyz = mod(pos.xyz, PARTICLE_BOX.xyz);
		 54     - 	
		 55     - 	// centre box on origin
		 56     - 	pos.xyz -= PARTICLE_BOX.xyz * 0.5;
		 57  69   	
		     70 + 	// get 2d vector in screenspace between top and bottom of particle
		 58     - 	// push along view vector so box is positioned more infront of camera
		     71 + 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 59     - 	pos.xyz += FORWARD.xyz;
		 60  72   	
		     73 + 	// get 2d vector perpendicular to velocity
		 61     - 	// get world position
		 62     - 	vec4 worldPositionBottom = vec4(pos.xyz, 1.0);
		     74 + 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 63     - 	vec4 worldPositionTop = vec4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0);
		 64  75   
		     76 + 	// choose either the top or bottom projected position using uv.y
		 65     - 	// get projected positions of top and bottom of particle, and top of particle in previous frame
		 66     - 	vec4 bottom = WORLDVIEWPROJ * worldPositionBottom;
		     77 + 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		     78 + 	 	
		     79 + 	// offset the position of each side of the particle using uv.x 
		     80 + 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		 67     - 	vec4 top = WORLDVIEWPROJ * worldPositionTop;
		 68     - 	
		 69     - 	// get 2d vector in screenspace between top and bottom of particle
		 70     - 	vec2 dir = normalize((top.xy/top.w) - (bottom.xy/bottom.w));
		 71  81   	
		     82 + 	color = ALPHA.rgba;
		 72     - 	// get 2d vector perpendicular to velocity
		 73     - 	vec2 dirPerp = normalize(vec2(-dir.y, dir.x));
		 74  83   
		 75     - 	// choose either the top or bottom projected position using uv.y
		 76     - 	gl_Position = mix(top, bottom, TEXCOORD_0.y);
		     84 + #if defined(COMFORT_MODE) && defined(VR_MODE)
		     85 + 	if (gl_Position.z < 2.0) {
		     86 + 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		     87 + 	}
		 77     - 	 	
		 78     - 	// offset the position of each side of the particle using uv.x 
		 79     - 	gl_Position.xy += (0.5 - TEXCOORD_0.x) * dirPerp * SIZE_SCALE.x;
		 80     - 	
		     88 + #endif
		 81     - 	color = ALPHA.rgba;
		 82  89   
		     90 + 	//fog
		     91 +     fogColor.rgb = FOG_COLOR.rgb;
		 83     - #ifdef COMFORT_MODE
		     92 + 	if(FOG_MODE == 0) {
		     93 + 		fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		 84     - 	if (gl_Position.z < 2.0) {
		 85     - 		color.a = clamp((gl_Position.z - 1.2)/0.8, 0.0, 1.0);
		 86  94   	}
		 87     - #endif
		 88     - 
		 89     - 	//fog
		     95 + 	else {
		     96 + 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * POSITION.z), 0.0, 1.0);
		 90     -     fogColor.rgb = FOG_COLOR.rgb;
		 91     -     fogColor.a = clamp(((bottom.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		     97 + 	}
		 92  98   
		 93  99   	worldPositionBottom.xz *= 1.0 / 64.0;	// Scale by 1/TextureDimensions to get values between
		 94 100   	worldPositionBottom.xz += 0.5;			// Offset so that center of view is in the center of occlusion texture
		 95 101   	worldPositionBottom.y += VIEW_POSITION.y - 0.5;
		 96 102   	worldPositionBottom.y *= 1.0/255.0;
		          ...
		          '''
Changed resource pack "renderchunk.vertex":
	Changed file "vanilla":
		Total line: 145 (+21, -15)
		          '''
		          ...
		 42  42   uniform MAT4 WORLDVIEW;
		 43  43   uniform MAT4 PROJ;
		 44  44   #endif
		 45  45   uniform vec4 FOG_COLOR;
		 46  46   uniform vec2 FOG_CONTROL;
		     47 + uniform int FOG_MODE;
		     48 + uniform float RENDER_DISTANCE;
		     49 + uniform vec2 VIEWPORT_DIMENSION;
		     50 + uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		     51 + uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		     52 + uniform POS3 VIEW_POS;
		     53 + uniform float FAR_CHUNKS_DISTANCE;
		     54 + 
		     55 + attribute POS4 POSITION;
		     56 + attribute vec4 COLOR;
		     57 + attribute vec2 TEXCOORD_0;
		     58 + attribute vec2 TEXCOORD_1;
		 47     - uniform float RENDER_DISTANCE;
		 48     - uniform vec2 VIEWPORT_DIMENSION;
		     59 + 
		     60 + const float rA = 1.0;
		     61 + const float rB = 1.0;
		     62 + const vec3 UNIT_Y = vec3(0,1,0);
		     63 + const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		 49     - uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
		 50     - uniform POS4 CHUNK_ORIGIN_AND_SCALE;
		 51     - uniform POS3 VIEW_POS;
		 52     - uniform float FAR_CHUNKS_DISTANCE;
		 53  64   
		     65 + void main()
		     66 + {
		 54     - attribute POS4 POSITION;
		 55     - attribute vec4 COLOR;
		     67 +     POS4 worldPos;
		     68 + #ifdef AS_ENTITY_RENDERER
		     69 + 		POS4 pos = WORLDVIEWPROJ * POSITION;
		     70 + 		worldPos = pos;
		     71 + #else
		     72 +     worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
		     73 +     worldPos.w = 1.0;
		 56     - attribute vec2 TEXCOORD_0;
		 57     - attribute vec2 TEXCOORD_1;
		 58     - 
		 59     - const float rA = 1.0;
		 60     - const float rB = 1.0;
		 61     - const vec3 UNIT_Y = vec3(0,1,0);
		 62     - const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
		 63  74   
		     75 +     // Transform to view space before projection instead of all at once to avoid floating point errors
		 64     - void main()
		 65     - {
		     76 +     // Not required for entities because they are already offset by camera translation before rendering
		     77 +     // World position here is calculated above and can get huge
		     78 +     POS4 pos = WORLDVIEW * worldPos;
		     79 +     pos = PROJ * pos;
		     80 + #endif
		 66     -     POS4 worldPos;
		 67     - #ifdef AS_ENTITY_RENDERER
		 68     - 		POS4 pos = WORLDVIEWPROJ * POSITION;
		 69     - 		worldPos = pos;
		 70     - #else
		 71     -     worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
		     81 +     gl_Position = pos;
		 72     -     worldPos.w = 1.0;
		 73  82   
		 74     -     // Transform to view space before projection instead of all at once to avoid floating point errors
		 75     -     // Not required for entities because they are already offset by camera translation before rendering
		     83 +     uv0 = TEXCOORD_0;
		     84 +     uv1 = TEXCOORD_1;
		     85 + 	color = COLOR;
		     86 + 
		     87 + ///// find distance from the camera
		 76     -     // World position here is calculated above and can get huge
		 77     -     POS4 pos = WORLDVIEW * worldPos;
		 78     -     pos = PROJ * pos;
		 79     - #endif
		 80     -     gl_Position = pos;
		 81  88   
		     89 + #if defined(FOG) || defined(NEAR_WATER)
		     90 + 	#ifdef FANCY
		     91 + 		vec3 relPos = -worldPos.xyz;
		     92 + 		float cameraDepth = length(relPos);
		     93 + 		#ifdef NEAR_WATER
		     94 + 			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		     95 + 		#endif
		     96 + 	#else
		     97 + 		float cameraDepth = pos.z;
		     98 + 		#ifdef NEAR_WATER
		     99 + 			vec3 relPos = -worldPos.xyz;
		    100 + 			float camDist = length(relPos);
		 82     -     uv0 = TEXCOORD_0;
		 83     -     uv1 = TEXCOORD_1;
		 84     - 	color = COLOR;
		 85     - 
		 86     - ///// find distance from the camera
		 87     - 
		 88     - #if defined(FOG) || defined(NEAR_WATER)
		 89     - 	#ifdef FANCY
		 90     - 		vec3 relPos = -worldPos.xyz;
		 91     - 		float cameraDepth = length(relPos);
		 92     - 		#ifdef NEAR_WATER
		    101 + 			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		 93     - 			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		    102 + 		#endif
		    103 + 	#endif
		    104 + #endif
		 94     - 		#endif
		    105 + 
		 95     - 	#else
		 96     - 		float cameraDepth = pos.z;
		    106 + ///// apply fog
		    107 + 
		    108 + #ifdef FOG
		    109 + 	float len = cameraDepth / RENDER_DISTANCE;
		    110 + 	#ifdef ALLOW_FADE
		    111 + 		len += CURRENT_COLOR.r;
		    112 + 	#endif
		 97     - 		#ifdef NEAR_WATER
		 98     - 			vec3 relPos = -worldPos.xyz;
		 99     - 			float camDist = length(relPos);
		100     - 			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		101     - 		#endif
		102     - 	#endif
		103     - #endif
		104     - 
		105     - ///// apply fog
		106 113   
		    114 +     fogColor.rgb = FOG_COLOR.rgb;
		107     - #ifdef FOG
		108     - 	float len = cameraDepth / RENDER_DISTANCE;
		    115 + 	if(FOG_MODE == 0) {
		    116 + 		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		    117 + 	}
		109     - 	#ifdef ALLOW_FADE
		110     - 		len += CURRENT_COLOR.r;
		111     - 	#endif
		112     - 
		    118 + 	else {
		    119 + 		fogColor.a = clamp(1.0 - exp(-FOG_CONTROL.x * cameraDepth), 0.0, 1.0);
		113     -     fogColor.rgb = FOG_COLOR.rgb;
		114     - 	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
		    120 + 	}
		115 121   #endif
		116 122   
		117 123   ///// water magic
		118 124   #ifdef NEAR_WATER
		119 125   	#ifdef FANCY  /////enhance water
		          ...
		          '''
Changed resource pack "stitch_blit.fragment":
	Changed file "vanilla":
		Total line: 74 (+2, -2)
		        '''
		        ...
		44 44   uniform vec4 CURRENT_COLOR;
		45 45   uniform sampler2D TEXTURE_0;
		46 46   
		47 47   void main()
		48 48   {
		49    -     vec2 pixelSide = vec2(1.0 / TEXTURE_DIMENSIONS.xy);
		50    - 
		51 49       #if BLUR_RADIUS == 1
		52 50           vec4 color = texture2D( TEXTURE_0, uv);
		53 51       #else
		   52 +   		vec2 pixelSide = vec2(1.0 / TEXTURE_DIMENSIONS.xy);
		   53 + 
		54 54           vec4 color = vec4(0.0);
		55 55           for(int i = -R; i < R; ++i) {
		56 56               for(int j = -R; j < R; ++j) {
		57 57                   vec2 sampleUV = uv + pixelSide * vec2(j, i);
		58 58       			sampleUV = mod(sampleUV, vec2(1.0));
		        ...
		        '''
Changed resource pack "text.fragment":
	Changed file "vanilla":
		Total line: 53 (+7, -0)
		        '''
		        ...
		37 37   
		38 38   void main()
		39 39   {
		40 40   	vec4 diffuse = texture2D( TEXTURE_0,  uv );
		41 41   
		   42 + #ifdef SMOOTH
		   43 + 	const float center = 0.4;
		   44 + 	const float radius = 0.1;
		   45 + 
		   46 + 	diffuse = smoothstep(center - radius, center + radius, diffuse);
		   47 + #endif
		   48 + 
		42 49   	if(diffuse.a < 0.5)
		   50 + 		discard;
		43    - 	 	discard;
		44 51   
		45 52   	gl_FragColor = diffuse * color * DARKEN;
		46 53   }
		        '''