Difference of "scripts" between "1.16.230.50" (beta of "1.17.0") and "1.16.230.52" (beta of "1.17.0").

Changed behavior pack "vanilla_gametest":
	Total script: 10 (+1, -0)
	Changed script "APITests.js":
		Total line: 177 (+92, -14)
		          '''
		  1   1   import * as GameTest from "GameTest";
		      2 + import { BlockLocation, Effects, Items, ItemStack, Location, World } from "Minecraft";
		      3 + 
		      4 + GameTest.register("APITests", "color_component", (test) => {
		      5 +   const sheep = test.spawn("minecraft:sheep", new BlockLocation(1, 2, 1));
		      6 +   let counter = 0;
		      7 +   test.succeedWhen(() => {
		      8 +     const colorComponent = sheep.getComponent("minecraft:color");
		      9 +     const color = colorComponent.value;
		     10 +     if (++counter < 48) {
		     11 +       colorComponent.setColor((color + 1) % 16);
		     12 +       throw "Disco sheep!";
		     13 +     } else {
		     14 +       colorComponent.setColor(10);
		     15 +       if (colorComponent.value === 10) {
		     16 +         test.succeed();
		     17 +       }
		     18 +     }
		     19 +   });
		     20 + })
		     21 +   .maxTicks(50)
		     22 +   .tag(GameTest.Tags.suiteDefault);
		     23 + 
		     24 + GameTest.register("APITests", "get_component_on_dead_entity", (test) => {
		     25 +   const horse = test.spawn("minecraft:horse", new BlockLocation(1, 2, 1));
		     26 +   horse.kill();
		     27 +   test.runAfterDelay(40, () => {
		     28 +     try {
		     29 +       // This should throw since the entity is dead
		     30 +       horse.getComponent("minecraft:tamemount").setTamed();
		     31 +       test.fail();
		     32 +     } catch (e) {
		     33 +       test.succeed();
		     34 +     }
		     35 +   });
		     36 + }).tag(GameTest.Tags.suiteDefault);
		     37 + 
		     38 + GameTest.register("APITests", "is_saddled_component", (test) => {
		     39 +   const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		     40 +   // TODO: Give saddle to pig
		     41 +   test.succeedWhen(() => {
		     42 +     const isSaddled = pig.getComponent("minecraft:is_saddled") !== undefined;
		     43 +     if (!isSaddled) {
		     44 +       throw "Not saddled";
		     45 +     }
		     46 +   });
		     47 + }).tag(GameTest.Tags.suiteDisabled); // No API to give saddle to pig
		     48 + 
		     49 + GameTest.register("APITests", "get_components", (test) => {
		     50 +   const horse = test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		     51 +   test.print("---Start Components---");
		     52 +   for (const component of horse.getComponents()) {
		     53 +     test.print(component.getName());
		     54 +   }
		     55 +   test.print("---End Components---");
		     56 +   test.succeed();
		     57 + });
		     58 + 
		     59 + GameTest.register("APITests", "leashable_component", (test) => {
		     60 +   const pig1 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		     61 +   const pig2 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 1));
		     62 +   const leashable = pig1.getComponent("minecraft:leashable");
		     63 +   if (leashable) {
		     64 +     test.print("softDistance: " + leashable.softDistance);
		     65 +     leashable.leash(pig2);
		     66 +     test.runAtTickTime(20, () => {
		     67 +       leashable.unleash();
		     68 +     });
		     69 +     test.succeedWhen(() => {
		     70 +       test.assertEntityPresentInArea("minecraft:item"); // Make sure the lead dropped
		     71 +     });
		     72 +   } else {
		     73 +     test.fail();
		     74 +   }
		     75 + }).tag(GameTest.Tags.suiteDefault);
		     76 + 
		     77 + GameTest.register("APITests", "health_component", (test) => {
		     78 +   const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		     79 +   const sheepPos = new BlockLocation(4, 2, 2);
		     80 +   const sheep = test.spawn(sheepId, sheepPos);
		     81 +   test.assertEntityInstancePresent(sheep);
		     82 +   test.pullLever(new BlockLocation(2, 3, 2));
		     83 +   const healthComponent = sheep.getComponent("minecraft:health");
		     84 +   if (healthComponent) {
		     85 +     test.succeedWhen(() => {
		     86 +       let currentHealth = healthComponent.current;
		     87 +       if (currentHealth !== 0) {
		     88 +         throw "Unexpected health";
		     89 +       }
		     90 +     });
		     91 +   } else {
		     92 +     test.fail();
		     93 +   }
		     94 + })
		     95 +   .maxTicks(200)
		     96 +   .tag(GameTest.Tags.suiteDefault);
		  2     - import { BlockLocation, World } from "Minecraft";
		  3     - 
		  4     - GameTest.register("APITests", "color_component", (test) => {
		  5     -   const sheep = test.spawn("minecraft:sheep", new BlockLocation(1, 2, 1));
		  6     -   let counter = 0;
		  7     -   test.succeedWhen(() => {
		  8     -     const colorComponent = sheep.getComponent("minecraft:color");
		  9     -     const color = colorComponent.value;
		 10     -     colorComponent.setColor((color + 1) % 16);
		 11     -     if (++counter != 48) {
		 12     -       throw "Disco sheep!";
		 13     -     }
		 14     -   });
		 15     - });
		 16  97   
		     98 + GameTest.register("APITests", "on_entity_created", (test) => {
		     99 +   World.addEventListener("onEntityCreated", (entity) => {
		    100 +     if (entity) {
		    101 +       test.succeed();
		    102 +     } else {
		    103 +       test.fail("Expected entity");
		    104 +     }
		    105 +   });
		    106 +   test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		    107 + }).tag(GameTest.Tags.suiteDisabled); // This test will succeed multiple times, need to unregister the listener
		    108 + 
		    109 + GameTest.register("APITests", "assert_is_waterlogged", (test) => {
		    110 +   const waterChestLoc = new BlockLocation(5, 2, 1);
		    111 +   const waterLoc = new BlockLocation(4, 2, 1);
		    112 +   const chestLoc = new BlockLocation(2, 2, 1);
		    113 +   const airLoc = new BlockLocation(1, 2, 1);
		 17     - GameTest.register("APITests", "get_component_on_dead_entity", (test) => {
		 18     -   const horse = test.spawn("minecraft:horse", new BlockLocation(1, 2, 1));
		 19     -   horse.kill();
		 20     -   test.runAfterDelay(40, () => {
		 21     -     try {
		 22     -       // This should throw since the entity is dead
		 23     -       horse.getComponent("minecraft:tamemount").setTamed();
		 24     -       test.fail();
		 25     -     } catch (e) {
		 26     -       test.succeed();
		 27     -     }
		 28     -   });
		 29     - });
		 30 114   
		 31     - GameTest.register("APITests", "is_saddled_component", (test) => {
		 32     -   const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		 33     -   // TODO: Give saddle to pig
		 34     -   test.succeedWhen(() => {
		    115 +   test.assertIsWaterlogged(waterChestLoc, true);
		    116 +   test.assertIsWaterlogged(waterLoc, false);
		    117 +   test.assertIsWaterlogged(chestLoc, false);
		    118 +   test.assertIsWaterlogged(airLoc, false);
		    119 +   test.succeed();
		    120 + }).tag(GameTest.Tags.suiteDefault);
		 35     -     const isSaddled = pig.getComponent("minecraft:is_saddled") !== undefined;
		 36     -     if (!isSaddled) {
		 37     -       throw "Not saddled";
		 38     -     }
		 39     -   });
		 40     - }).tag(GameTest.Tags.suiteDisabled);
		 41 121   
		    122 + GameTest.register("APITests", "assert_redstone_power", (test) => {
		 42     - GameTest.register("APITests", "get_components", (test) => {
		 43     -   const horse = test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		 44     -   test.print("---Start Components---");
		    123 +   const redstoneBlockLoc = new BlockLocation(3, 2, 1);
		    124 +   const redstoneTorchLoc = new BlockLocation(2, 2, 1);
		    125 +   const poweredLampLoc = new BlockLocation(1, 2, 1);
		    126 +   const unpoweredLampLoc = new BlockLocation(0, 2, 1);
		    127 +   const airLoc = new BlockLocation(3, 2, 0);
		    128 +   const redstoneWireLoc = new BlockLocation(0, 1, 0);
		 45     -   for (const component of horse.getComponents()) {
		 46     -     test.print(component.getName());
		 47     -   }
		 48     -   test.print("---End Components---");
		 49     -   test.succeed();
		 50     - });
		 51 129   
		    130 +   test.succeedWhen(() => {
		    131 +     test.assertRedstonePower(redstoneBlockLoc, 15);
		    132 +     test.assertRedstonePower(redstoneTorchLoc, 15);
		 52     - GameTest.register("APITests", "leashable_component", (test) => {
		    133 +     test.assertRedstonePower(poweredLampLoc, 15);
		    134 +     test.assertRedstonePower(unpoweredLampLoc, 0);
		    135 +     test.assertRedstonePower(airLoc, -1);
		    136 +     test.assertRedstonePower(redstoneWireLoc, 13); // 3 length wire
		    137 +   });
		    138 + })
		    139 +   .maxTicks(20)
		    140 +   .tag(GameTest.Tags.suiteDefault);
		    141 + 
		    142 + GameTest.register("APITests", "spawn_item", (test) => {
		    143 +   const featherItem = new ItemStack(Items.feather, 1, 0);
		    144 +   test.spawnItem(featherItem, new Location(1.5, 3.5, 1.5));
		    145 +   test.succeedWhen(() => {
		    146 +     test.assertEntityPresent("minecraft:item", new BlockLocation(1, 2, 1));
		    147 +   });
		    148 + }).tag(GameTest.Tags.suiteDefault);
		 53     -   const pig1 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		 54     -   const pig2 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 1));
		 55     -   const leashable = pig1.getComponent("minecraft:leashable");
		 56     -   if (leashable) {
		 57     -     test.print("softDistance: " + leashable.softDistance);
		 58     -     leashable.leash(pig2);
		 59     -     test.runAtTickTime(20, () => {
		 60     -       leashable.unleash();
		 61     -     });
		 62     -     test.succeedWhen(() => {
		 63     -       test.assertEntityPresentInArea("minecraft:item"); // Make sure the lead dropped
		 64     -     });
		 65     -   } else {
		 66     -     test.fail();
		 67     -   }
		 68     - });
		 69 149   
		    150 + GameTest.register("APITests", "assert_entity_data", (test) => {
		    151 +   const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		    152 +   const pigLoc = new BlockLocation(1, 2, 1);
		    153 +   test.spawn(pigId, pigLoc);
		    154 +   test.succeedWhen(() => {
		    155 +     test.assertEntityData(pigLoc, pigId, (entity) => entity.getName !== undefined);
		    156 +   });
		    157 + }).tag(GameTest.Tags.suiteDefault);
		    158 + 
		    159 + GameTest.register("APITests", "add_effect", (test) => {
		    160 +   const villagerId = "minecraft:villager_v2<minecraft:ageable_grow_up>";
		    161 +   const villagerLoc = new BlockLocation(1, 2, 1);
		    162 +   const villager = test.spawn(villagerId, villagerLoc);
		    163 +   const duration = 20;
		    164 +   villager.addEffect(Effects.poison, duration, 1);
		    165 + 
		    166 +   test.assertEntityData(
		    167 +     villagerLoc,
		    168 +     villagerId,
		    169 +     (entity) => entity.getEffect(Effects.poison).getDuration() == duration
		    170 +   );
		    171 +   test.assertEntityData(villagerLoc, villagerId, (entity) => entity.getEffect(Effects.poison).getAmplifier() == 1);
		 70     - GameTest.register("APITests", "health_component", (test) => {
		 71     -   const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		 72     -   const sheepPos = new BlockLocation(4, 2, 2);
		 73     -   const sheep = test.spawn(sheepId, sheepPos);
		 74     -   test.assertEntityInstancePresent(sheep);
		 75     -   test.pullLever(new BlockLocation(2, 3, 2));
		 76     -   const healthComponent = sheep.getComponent("minecraft:health");
		 77     -   if (healthComponent) {
		 78     -     test.succeedWhen(() => {
		 79     -       let currentHealth = healthComponent.current;
		 80     -       if (currentHealth !== 0) {
		 81     -         throw "Unexpected health";
		 82     -       }
		 83     -     });
		 84     -   } else {
		 85     -     test.fail();
		 86     -   }
		 87     - })
		 88     -   .maxTicks(200);
		 89 172   
		 90     - GameTest.register("APITests", "on_entity_created", (test) => {
		 91     -   World.addEventListener("onEntityCreated", (entity) => {
		 92     -     if (entity) {
		 93     -         test.succeed();
		    173 +   test.runAfterDelay(duration, () => {
		    174 +     test.assertEntityData(villagerLoc, villagerId, (entity) => entity.getEffect(Effects.poison) === undefined);
		    175 +     test.succeed();
		 94     -     } else {
		 95     -         test.fail("Expected entity");
		 96     -     }
		 97 176     });
		    177 + }).tag(GameTest.Tags.suiteDefault);
		 98     -   test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		 99     - });
		          '''
	Changed script "BlockTests.js":
		Total line: 128 (+2, -10)
		          '''
		  1   1   import * as GameTest from "GameTest";
		      2 + import { BlockLocation, Blocks, Items, ItemStack } from "Minecraft";
		  2     - import { BlockLocation, Blocks, ItemStack } from "Minecraft";
		  3   3   
		  4   4   const TicksPerSecond = 20;
		  5   5   const FiveSecondsInTicks = 5 * TicksPerSecond;
		  6   6   
		  7   7   ///
		  8   8   // Concrete Tests
		  9   9   ///
		 10     - GameTest.register(
		 11     -   "BlockTests",
		 12     -   "concrete_solidifies_in_shallow_water",
		     10 + GameTest.register("BlockTests", "concrete_solidifies_in_shallow_water", (test) => {
		     11 +   test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 3, 1));
		 13     -   (test) => {
		 14     -     test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 3, 1));
		 15  12   
		     13 +   test.succeedWhen(() => {
		 16     -     test.succeedWhen(() => {
		 17     -       test.assertBlockPresent(Blocks.concrete(), new BlockLocation(1, 2, 1));
		     14 +     test.assertBlockPresent(Blocks.concrete(), new BlockLocation(1, 2, 1));
		     15 +   });
		     16 + })
		 18     -     });
		 19     -   }
		 20     - )
		 21  17     .maxTicks(FiveSecondsInTicks)
		 22  18     .tag(GameTest.Tags.suiteDefault);
		 23  19   
		 24  20   GameTest.register("BlockTests", "concrete_solidifies_in_deep_water", (test) => {
		 25  21     test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 4, 1));
		          ...
		 99  95       const redSandstonePos = new BlockLocation(6, 2, 4);
		100  96       const sandstonePos = new BlockLocation(2, 2, 4);
		101  97   
		102  98       test.assertBlockNotPresent(Blocks.redSandstone(), redSandstonePos);
		103  99       test.assertBlockNotPresent(Blocks.sandstone(), sandstonePos);
		104     -     test.assertItemEntityPresent(
		105     -       new ItemStack(Blocks.redSandstone()),
		106     -       redSandstonePos,
		    100 +     test.assertItemEntityPresent(new ItemStack(Items.redSandstone, 1, 0), redSandstonePos, 2.0);
		    101 +     test.assertItemEntityPresent(new ItemStack(Items.sandstone, 1, 0), sandstonePos, 2.0);
		    102 +   });
		    103 + })
		    104 +   .maxTicks(TicksPerSecond * 10)
		    105 +   .tag(GameTest.Tags.suiteDisabled)
		    106 +   .maxAttempts(3);
		    107 + 
		    108 + GameTest.register("BlockTests", "concrete_pops_off_waterlogged_chest", (test) => {
		    109 +   const concretePowderItem = new ItemStack(Items.concretePowder, 1, 0);
		    110 +   test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 4, 1));
		    111 +   test.succeedWhen(() => {
		107     -       2.0
		108     -     );
		109     -     test.assertItemEntityPresent(
		110     -       new ItemStack(Blocks.sandstone()),
		111     -       sandstonePos,
		112     -       2.0
		113     -     );
		114     -   });
		115     - })
		116     -   .maxTicks(TicksPerSecond * 10)
		117     -   .tag(GameTest.Tags.suiteDisabled)
		118     -   .maxAttempts(3);
		119     - 
		    112 +     const chestPos = new BlockLocation(1, 2, 1);
		    113 +     test.assertBlockPresent(Blocks.chest(), chestPos);
		    114 +     test.assertItemEntityPresent(concretePowderItem, chestPos, 2);
		    115 +     test.assertEntityNotPresent("falling_block");
		    116 +   });
		    117 + }).maxTicks(TicksPerSecond * 5);
		    118 + 
		    119 + GameTest.register("BlockTests", "waterlogged_slab", (test) => {
		    120 +   const slabPos = new BlockLocation(1, 1, 1);
		    121 +   test.assertIsWaterlogged(slabPos, false);
		    122 +   test.succeedWhen(() => {
		    123 +     test.assertIsWaterlogged(slabPos, true);
		    124 +   });
		    125 + })
		    126 +   .tag("suite:java_parity")
		    127 +   .tag(GameTest.Tags.suiteDisabled) // Slab should be waterlogged 
		    128 +   .maxTicks(TicksPerSecond * 2);
		120     - GameTest.register(
		121     -   "BlockTests",
		122     -   "concrete_pops_off_waterlogged_chest",
		123     -   (test) => {
		124     -     test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 4, 1));
		125     -     test.succeedWhen(() => {
		126     -       const chestPos = new BlockLocation(1, 2, 1);
		127     -       test.assertBlockPresent(Blocks.chest(), chestPos);
		128     -       test.assertItemEntityPresent(
		129     -         new ItemStack(Blocks.concretepowder()),
		130     -         chestPos,
		131     -         2
		132     -       );
		133     -       test.assertEntityNotPresent("falling_block");
		134     -     });
		135     -   }
		136     - ).maxTicks(TicksPerSecond * 5);
		          '''
	Added script "EntityTests.js":
		'''
		import * as GameTest from "GameTest";
		import { BlockLocation, Items, ItemStack, Location } from "Minecraft";
		
		function shallowItemStream(test) {
		  const lampPos = new BlockLocation(0, 1, 1);
		  let emerald = new ItemStack(Items.emerald, 1, 0);
		  test.assertRedstonePower(lampPos, 0);
		  test.spawnItem(emerald, new Location(1.5, 1.5, 1.5));
		  test.succeedWhen(() => {
		    test.assertRedstonePower(lampPos, 1);
		  });
		}
		
		GameTest.register("EntityTests", "shallow_item_stream", shallowItemStream)
		.tag("suite:java_parity")
		.tag(GameTest.Tags.suiteDisabled); // The slab should be waterlogged
		
		GameTest.register("EntityTests", "shallow_item_stream_bedrock", shallowItemStream)
		.tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EntityTests", "items_float_up", (test) => {
		  const diamondHelmet = new ItemStack(Items.diamondHelmet, 1, 0);
		  const netheriteHelmet = new ItemStack(Items.netheriteHelmet, 1, 0);
		  const itemEntityId = "minecraft:item";
		
		  test.spawnItem(diamondHelmet, new Location(1.5, 4.0, 1.5));
		  test.spawnItem(diamondHelmet, new Location(2.5, 4.0, 1.5));
		  test.spawnItem(diamondHelmet, new Location(3.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(5.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(6.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(7.5, 4.0, 1.5));
		
		  test.startSequence()
			.thenIdle(60)
			.thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(1, 2, 1))) // sink
		  .thenExecute(() => test.assertEntityNotPresent(itemEntityId, new BlockLocation(2, 2, 1))) // float
		  .thenExecute(() => test.assertEntityNotPresent(itemEntityId, new BlockLocation(3, 2, 1))) // float
		  .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(5, 2, 1))) // sink
		  .thenExecute(() => test.assertEntityNotPresent(itemEntityId, new BlockLocation(6, 2, 1))) // float
		  .thenExecute(() => test.assertEntityNotPresent(itemEntityId, new BlockLocation(7, 2, 1))) // float
		  .thenSucceed();
		})
		.tag("suite:java_parity")
		.tag(GameTest.Tags.suiteDisabled); // In Bedrock, item entities don't rest on the enchanting table after falling through the water block
		'''
	Changed script "Main.js":
		Total line: 9 (+1, -0)
		      '''
		1 1   import "scripts/APITests.js";
		2 2   import "scripts/BlockTests.js";
		3 3   import "scripts/DebugTests.js";
		4 4   import "scripts/DispenserTests.js";
		5 5   import "scripts/DoorTests.js";
		  6 + import "scripts/EntityTests.js";
		6 7   import "scripts/MinecartTests.js";
		7 8   import "scripts/MobTests.js";
		8 9   import "scripts/PathFindingTests.js";
		      '''
	Changed script "MobTests.js":
		Total line: 68 (+56, -2)
		        '''
		 1  1   import * as GameTest from "GameTest";
		    2 + import { BlockLocation, Blocks, Effects } from "Minecraft";
		    3 + 
		    4 + const TicksPerSecond = 20;
		    5 + 
		    6 + GameTest.register("MobTests", "zombie_burn", (test) => {
		    7 +   const zombieEntityType = "minecraft:zombie";
		    8 +   const zombiePosition = new BlockLocation(1, 2, 1);
		    9 + 
		   10 +   test.succeedWhenEntityNotPresent(zombieEntityType, zombiePosition);
		   11 + })
		   12 +   .maxTicks(TicksPerSecond * 30)
		   13 +   .tag(GameTest.Tags.suiteDefault)
		   14 +   .batch("day");
		   15 + 
		   16 + GameTest.register("MobTests", "effect_durations_longer_first", (test) => {
		   17 +   const villagerId = "minecraft:villager_v2";
		   18 +   const villagerPos = new BlockLocation(1, 2, 1);
		   19 +   const buttonPos = new BlockLocation(1, 4, 0);
		   20 +   const strongPotion = new BlockLocation(0, 4, 0);
		   21 +   const weakPotion = new BlockLocation(2, 4, 0);
		   22 + 
		   23 +   test.spawn(villagerId, villagerPos);
		   24 + 
		   25 +   test
		   26 +     .startSequence()
		   27 +     .thenExecute(() => test.setBlock(Blocks.air(), weakPotion))
		   28 +     .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		   29 +     .thenWait(() => test.assertBlockState("button_pressed_bit", 0, buttonPos))
		   30 +     .thenExecute(() => test.setBlock(Blocks.air(), strongPotion))
		   31 +     .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		   32 +     .thenIdle(41)
		   33 +     .thenWait(() => {
		   34 +       test.assertEntityData(villagerPos, villagerId, (entity) => entity.getEffect(Effects.regeneration).getAmplifier() == 0); // Strength level I
		   35 +       test.assertEntityData(villagerPos, villagerId, (entity) => entity.getEffect(Effects.regeneration).getDuration() > 120); // At least 6 seconds remaining
		   36 +     })
		   37 +     .thenSucceed();
		   38 + })
		   39 +   .structureName("MobTests:effect_durations")
		   40 +   .tag("suite:java_parity")
		   41 +   .tag(GameTest.Tags.suiteDisabled); // Potions don't explode when shot from dispensers
		   42 + 
		   43 + GameTest.register("MobTests", "effect_durations_stronger_first", (test) => {
		   44 +   const villagerId = "minecraft:villager_v2";
		   45 +   const villagerPos = new BlockLocation(1, 2, 1);
		   46 +   const buttonPos = new BlockLocation(1, 4, 0);
		   47 +   const strongPotion = new BlockLocation(0, 4, 0);
		   48 +   const weakPotion = new BlockLocation(2, 4, 0);
		   49 + 
		   50 +   test.spawn(villagerId, villagerPos);
		   51 + 
		   52 +   test
		   53 +     .startSequence()
		   54 +     .thenExecute(() => test.setBlock(Blocks.air(), strongPotion))
		   55 +     .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		   56 +     .thenWait(() => test.assertBlockState("button_pressed_bit", 0, buttonPos))
		   57 +     .thenExecute(() => test.setBlock(Blocks.air(), weakPotion))
		   58 +     .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		   59 +     .thenIdle(41)
		   60 +     .thenWait(() => {
		   61 +       test.assertEntityData(villagerPos, villagerId, (entity) => entity.getEffect(Effects.regeneration).getAmplifier() == 0); // Strength level I
		   62 +       test.assertEntityData(villagerPos, villagerId, (entity) => entity.getEffect(Effects.regeneration).getDuration() > 120); // At least 6 seconds remaining
		   63 +     })
		   64 +     .thenSucceed();
		 2    - import { BlockLocation, BlockStates, Blocks } from "Minecraft";
		 3    - 
		 4    - const TicksPerSecond = 20;
		 5    - 
		 6    - GameTest.register("MobTests", "zombie_burn", (test) => {
		 7    -   const zombieEntityType = "minecraft:zombie";
		 8    -   const zombiePosition = new BlockLocation(1, 2, 1);
		 9    - 
		10    -   test.succeedWhenEntityNotPresent(zombieEntityType, zombiePosition);
		11 65   })
		   66 +   .structureName("MobTests:effect_durations")
		   67 +   .tag("suite:java_parity")
		12    -   .maxTicks(TicksPerSecond * 30)
		13    -   .tag(GameTest.Tags.suiteDefault)
		   68 +   .tag(GameTest.Tags.suiteDisabled); // Potions don't explode when shot from dispensers
		14    -   .batch("day");
		        '''