Difference of "scripts" between "1.19.40.20" (beta of "1.19.40") and "1.21.60.23" (beta of "1.21.60").
Unable to create data files for 159 files between.

Total behavior pack: 2 (+2, -2)
Removed behavior pack "vanilla_edu_gametest":
	script "AgentTests.js":
		'''
		import {
		  BlockLocation,
		  BlockType,
		  Direction,
		  IEntityComponent,
		  ItemType,
		  ItemStack,
		  Location,
		  MinecraftBlockTypes,
		  MinecraftItemTypes,
		} from "mojang-minecraft";
		import { Test } from "mojang-gametest";
		import * as GameTest from "mojang-gametest";
		import { Agent, GameTestAgentExtensions } from "./GameTestAgentExtensions.js";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		class HealthComponent extends IEntityComponent {
		  /** @type {number} */
		  current = 0;
		
		  /** @type {number} */
		  value = 0;
		}
		
		class AttackTestOptions {
		  /**
		   * @type {Direction}
		   */
		  dir = Direction.north;
		  /**
		   * @type {BlockLocation}
		   */
		  entityOffset = new BlockLocation(0, 0, 1);
		}
		
		class CollectTestItem {
		  /**
		   *
		   * @param {Location} offset
		   * @param {ItemType} item
		   * @param {number} count
		   * @param {bool} stillPresentAfterCollect
		   */
		  constructor(offset, item, count, stillPresentAfterCollect) {
		    /** @type {Location} */
		    this.posOffset = offset || new Location(0.0, 0.0, 0.0);
		    /** @type {ItemType} */
		    this.item = item || new ItemType();
		    /** @type {number} */
		    this.count = count || 0;
		    /** @type {bool} */
		    this.stillPresentAfterCollect = stillPresentAfterCollect || false;
		  }
		}
		
		class CollectTestOptions {
		  /**
		   *
		   * @param {BlockLocation} origin
		   * @param {BlockLocation} lookAtOffset
		   * @param {string} spec
		   * @param {CollectTestItem[]} items
		   */
		  constructor(origin, lookAtOffset, spec, items) {
		    /** @type {BlockLocation} */
		    this.origin = origin;
		    /** @type {BlockLocation} */
		    this.lookAtOffset = lookAtOffset;
		    /** @type {string} */
		    this.spec = spec;
		    /** @type {CollectTestItem[]} */
		    this.items = items;
		  }
		}
		
		class DestroyTestOptions {
		  /**
		   *
		   * @param {Direction} dir
		   * @param {BlockType} block
		   */
		  constructor(dir, block) {
		    /** @type {Direction} */
		    this.dir = dir || Direction.north;
		
		    /** @type {BlockLocation} */
		    this.posOffset = GameTestAgentExtensions.directionToLocationOffset(this.dir);
		
		    /** @type {BlockType} */
		    this.block = block || null;
		  }
		}
		
		class DropAllTestItem {
		  /**
		   *
		   * @param {Direction} dir
		   * @param {ItemType} item
		   * @param {number} slot
		   * @param {number} quantity
		   */
		  constructor(dir, item, slot, quantity) {
		    /** @type {Location} */
		    this.posOffset = GameTestAgentExtensions.directionToLocationOffset(dir);
		    /** @type {ItemType} */
		    this.item = item || null;
		    /** @type {number} */
		    this.slot = slot || 0;
		    /** @type {number} */
		    this.quantity = quantity || 0;
		  }
		}
		
		class DropTestItem extends DropAllTestItem {
		  /**
		   *
		   * @param {Direction} dir
		   * @param {ItemType} item
		   * @param {number} slot
		   * @param {number} quantity
		   */
		  constructor(dir, item, slot, quantity) {
		    super(dir, item, slot, quantity);
		    /** @type {Direction} */
		    this.dir = dir;
		  }
		}
		
		class DropAllTestOptions {
		  /**
		   *
		   * @param {BlockLocation} origin
		   * @param {BlockLocation} lookAtOffset
		   * @param {DropAllTestItem[]} items
		   * @param {Direction} dir
		   */
		   constructor(origin, lookAtOffset, items, dir) {
		    /** @type {BlockLocation} */
		    this.origin = origin;
		    /** @type {BlockLocation} */
		    this.lookAtOffset = lookAtOffset;
		    /** @type {DropAllTestItem[]} */
		    this.items = items;
		    /** @type {Direction} */
		    this.dir = dir;
		  }
		}
		
		class DropTestOptions {
		  /** @type {DropTestItem[]} */
		  items = [];
		}
		
		class InteractTestItem {
		  /**
		   *
		   * @param {Direction} dir
		   * @param {BlockLocation} posOffset
		   * @param {boolean} usesRedstone
		   * @param {number} redstonePower
		   */
		  constructor(dir, posOffset, usesRedstone, redstonePower) {
		    this.dir = dir;
		    this.posOffset = posOffset;
		    this.usesRedstone = usesRedstone;
		    this.redstonePower = redstonePower || 15;
		  }
		}
		
		class InteractOptions {
		  /**
		   *
		   * @param {BlockLocation} origin
		   * @param {InteractTestItem[]} items
		   */
		  constructor(origin, items) {
		    /** @type {InteractTestItem[]} */
		    this.origin = origin || new BlockLocation(0, 0, 0);
		    /** @type {InteractTestItem[]} */
		    this.items = items || [];
		  }
		}
		
		class MoveTestItems {
		  /**
		   *
		   * @param {Direction} dir
		   * @param {BlockLocation} expectedLocation
		   */
		  constructor(dir, expectedLocation) {
		    /** @type {Direction} */
		    this.dir = dir;
		    /** @type {BlockLocation} */
		    this.expectedLocation = expectedLocation;
		  }
		}
		
		class MoveTestOptions {
		  /**
		   *
		   * @param {BlockLocation} origin
		   * @param {BlockLocation} lookAtOffset
		   * @param {MoveTestItems[]} items
		   */
		  constructor(origin, lookAtOffset, items) {
		    /** @type {BlockLocation} */
		    this.origin = origin;
		    /** @type {BlockLocation} */
		    this.lookAtOffset = lookAtOffset;
		    /** @type {MoveTestItems[]} */
		    this.items = items;
		  }
		}
		
		class PlaceTestItem {
		  /**
		   *
		   * @param {string} blockName
		   * @param {string} blockKey
		   * @param {number} slot
		   * @param {numebr} quantity
		   * @param {Direction} dir
		   * @param {BlockLocation} expectedLocation
		   */
		  constructor(blockName, blockKey, slot, quantity, dir, expectedLocation) {
		    /** @type {number} */
		    this.slot = slot || 0;
		    /** @type {number} */
		    this.quantity = quantity || 0;
		    /** @type {BlockLocation} */
		    this.expectedLocation = expectedLocation || new BlockLocation(0, 0, 0);
		    /** @type {Direction} */
		    this.dir = dir;
		    /** @type {string} */
		    this.blockName = blockName || "";
		    /** @type {BlockType} */
		    this.block = MinecraftBlockTypes[blockKey];
		    /** @type {ItemType} */
		    this.item = MinecraftItemTypes[blockKey];
		  }
		}
		
		class PlaceTestOptions {
		  /**
		   *
		   * @param {BlockLocation} origin
		   * @param {BlockLocation} lookAtOffset
		   * @param {PlaceTestItem[]} items
		   */
		  constructor(origin, lookAtOffset, items) {
		    /** @type {BlockLocation} */
		    this.origin = origin;
		    /** @type {BlockLocation} */
		    this.lookAtOffset = lookAtOffset;
		    /** @type {PlaceTestItem[]} */
		    this.items = items;
		  }
		}
		
		class AttackTester {
		  /**
		   *
		   * @param {AttackTestOptions[]} tests
		   */
		  constructor(tests) {
		    /** @type {AttackTestOptions[]} */
		    this.tests = tests;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.tests.length * 30;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {AttackTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    const spawnLoc = origin.offset(options.entityOffset.x, options.entityOffset.y, options.entityOffset.z);
		    const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", spawnLoc);
		
		    /** @type {HealthComponent} */
		    const health = cow.getComponent("health");
		    test.assert(health.current == health.value, "Health should be full before attacking");
		
		    agent.attack(options.dir);
		    await test.idle(5);
		
		    test.assert(health.current < health.value, "Health should not be full after attacking");
		    cow.kill();
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = new BlockLocation(3, 2, 3);
		    const testOriginLookOffset = new BlockLocation(0, 0, 1);
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    for (let testItem of this.tests) {
		      await this.runTest(test, agent, testOrigin, testItem);
		    }
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class CollectTester {
		  /**
		   *
		   * @param {CollectTestOptions} tests
		   */
		  constructor(testsOptions) {
		    /** @type {CollectTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.options.items.length * 10;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {CollectTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    const itemEntityId = "minecraft:item";
		    let originLoc = new Location(origin.x, origin.y, origin.z);
		    for (let item of options.items) {
		      let itemLoc = new Location(
		        originLoc.x + item.posOffset.x + 0.5,
		        originLoc.y + item.posOffset.y,
		        originLoc.z + item.posOffset.z + 0.5
		      );
		      test.spawnItem(new ItemStack(item.item, item.count), itemLoc);
		    }
		    await test.idle(2);
		
		    agent.collect(options.spec);
		    await test.idle(5);
		
		    for (let item of options.items) {
		      let itemLoc = origin.offset(item.posOffset.x, item.posOffset.y, item.posOffset.z);
		      test.assertEntityPresent(itemEntityId, itemLoc, item.stillPresentAfterCollect);
		    }
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = this.options.origin;
		    const testOriginLookOffset = this.options.lookAtOffset;
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    await this.runTest(test, agent, testOrigin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class DestroyTester {
		  /**
		   *
		   * @param {DestroyTestOptions} tests
		   */
		  constructor(tests) {
		    /** @type {DestroyTestOptions} */
		    this.tests = tests;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.tests.length * 12;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {DestroyTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    const blockLoc = origin.offset(options.posOffset.x, options.posOffset.y, options.posOffset.z);
		    test.setBlockType(options.block, blockLoc);
		    await test.idle(1);
		
		    agent.destroy(options.dir);
		    await test.idle(5);
		
		    test.assertBlockPresent(options.block, blockLoc, false);
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = new BlockLocation(1, 2, 1);
		    const testOriginLookOffset = new BlockLocation(0, 0, 1);
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    for (let testItem of this.tests) {
		      await this.runTest(test, agent, testOrigin, testItem);
		    }
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class DropAllTester {
		  /**
		   *
		   * @param {DropAllTestOptions} testsOptions
		   */
		  constructor(testsOptions) {
		    /** @type {DropAllTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.options.items.length * 10;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {GameTestAgentExtensions} testEx
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {DropAllTestOptions} options
		   */
		  runTest = async (test, testEx, agent, origin, options) => {
		    const itemEntityId = "minecraft:item";
		    for (let item of options.items) {
		      let itemLoc = origin.offset(item.posOffset.x, item.posOffset.y, item.posOffset.z);
		      test.assertEntityPresent(itemEntityId, itemLoc, false);
		
		      const stack = new ItemStack(item.item, item.quantity);
		      agent.container().setItem(item.slot, stack);
		    }
		    await test.idle(2);
		
		    agent.dropAll(options.dir);
		    await test.idle(5);
		
		    let dirOffset = GameTestAgentExtensions.directionToLocationOffset(options.dir);
		    let dropAllLocation = origin.offset(dirOffset.x, dirOffset.y, dirOffset.z);
		    await testEx.teleportItems(test.worldBlockLocation(dropAllLocation));
		    await test.idle(5);
		
		    for (let item of options.items) {
		      const slotItem = agent.container().getItem(item.slot);
		      test.assert(!slotItem || slotItem.amount === 0, "Should have dropped all items in slot");
		      let itemLoc = origin.offset(item.posOffset.x, item.posOffset.y, item.posOffset.z);
		      test.assertEntityPresent(itemEntityId, itemLoc, true);
		    }
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, this.options.origin, this.options.lookAtOffset);
		
		    await this.runTest(test, agent._testEx, agent, this.options.origin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class DropTester {
		  /**
		   *
		   * @param {DropTestOptions} testsOptions
		   */
		  constructor(testsOptions) {
		    /** @type {DropTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.options.items.length * 10;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {DropTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    const itemEntityId = "minecraft:item";
		    for (let item of options.items) {
		      let itemLoc = origin.offset(item.posOffset.x, item.posOffset.y, item.posOffset.z);
		      test.assertEntityPresent(itemEntityId, itemLoc, false);
		
		      const stack = new ItemStack(item.item, item.quantity);
		      agent.container().setItem(item.slot, stack);
		
		      await test.idle(3);
		
		      agent.drop(item.slot + 1, item.quantity, item.dir);
		      await test.idle(6);
		
		      const slotItem = agent.container().getItem(item.slot);
		      test.assert(!slotItem || slotItem.amount === 0, "Should have dropped all items in slot");
		
		      test.assertEntityPresent(itemEntityId, itemLoc, true);
		    }
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = new BlockLocation(1, 2, 1);
		    const testOriginLookOffset = new BlockLocation(0, 0, 1);
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    await this.runTest(test, agent, testOrigin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class InteractTester {
		  /**
		   *
		   * @param {DropTestOptions} testsOptions
		   */
		  constructor(testsOptions) {
		    /** @type {DropTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 15 + this.options.items.length * 10;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {DropTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    const testEx = new GameTestExtensions(test);
		    const openBitProperty = "open_bit";
		
		    for (let item of options.items) {
		      let outputPos = item.posOffset;
		      if (item.usesRedstone) {
		        test.assertRedstonePower(outputPos, 0);
		      } else {
		        testEx.assertBlockProperty(openBitProperty, false, outputPos);
		      }
		    }
		
		    for (let item of options.items) {
		      agent.interact(item.dir);
		      await test.idle(3);
		    }
		    await test.idle(10);
		
		    for (let item of options.items) {
		      let outputPos = item.posOffset;
		      if (item.usesRedstone) {
		        test.assertRedstonePower(outputPos, item.redstonePower);
		      } else {
		        testEx.assertBlockProperty(openBitProperty, true, outputPos);
		      }
		    }
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = this.options.origin;
		    const testOriginLookOffset = new BlockLocation(0, 0, 1);
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    await this.runTest(test, agent, testOrigin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class MoveTester {
		  /**
		   *
		   * @param {MoveTestOptions} testsOptions
		   */
		  constructor(testsOptions) {
		    /** @type {MoveTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 25 + this.options.items.length * 10;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {MoveTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    let currentPos = origin;
		    let agentLoc = agent.blockLocation();
		    test.assert(currentPos.equals(agentLoc), "Agent isn't at origin");
		    for (let item of options.items) {
		      agent.move(item.dir);
		      await test.idle(7);
		      currentPos = currentPos.offset(item.expectedLocation.x, item.expectedLocation.y, item.expectedLocation.z);
		      agentLoc = agent.blockLocation();
		      test.assert(
		        currentPos.equals(agentLoc),
		        `Agent isn't at expected location: <${currentPos.x}, ${currentPos.y}, ${currentPos.z}>`
		      );
		    }
		    await test.idle(7);
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = this.options.origin;
		    const testOriginLookOffset = this.options.lookAtOffset;
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    await this.runTest(test, agent, testOrigin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		class PlaceTester {
		  /**
		   *
		   * @param {PlaceTestOptions} testsOptions
		   */
		  constructor(testsOptions) {
		    /** @type {PlaceTestOptions} */
		    this.options = testsOptions;
		    /** @type {string} */
		    this.batchId = GameTestAgentExtensions.generateGuid();
		    /** @type {number} */
		    this.maxTicks = 25 + this.options.items.length * 5;
		  }
		
		  /**
		   *
		   * @param {Test} test
		   * @param {Agent} agent
		   * @param {BlockLocation} origin
		   * @param {PlaceTestOptions} options
		   */
		  runTest = async (test, agent, origin, options) => {
		    for (let item of options.items) {
		      const stack = new ItemStack(item.item, item.quantity);
		      const container = agent.container();
		      container.setItem(item.slot, stack);
		    }
		
		    for (let item of options.items) {
		      const pos = origin.offset(item.expectedLocation.x, item.expectedLocation.y, item.expectedLocation.z);
		      test.assertBlockPresent(item.block, pos, false);
		
		      agent.place(item.slot + 1, item.dir);
		      await test.idle(3);
		
		      test.assertBlockPresent(item.block, pos, true);
		    }
		
		    await test.idle(7);
		  };
		
		  /**
		   *
		   * @param {Test} test
		   */
		  test = async (test) => {
		    const testOrigin = this.options.origin;
		    const testOriginLookOffset = this.options.lookAtOffset;
		    const player = test.spawnSimulatedPlayer(new BlockLocation(0, 0, -1), "Sim Player");
		    const agent = await Agent.createAgent(test, player, testOrigin, testOriginLookOffset);
		
		    await this.runTest(test, agent, testOrigin, this.options);
		
		    agent.kill();
		
		    test.succeed();
		  };
		}
		
		// Attack tests
		{
		  /** @type {AttackTestOptions[]} */
		  const attackOptions = [
		    {
		      dir: Direction.north,
		      entityOffset: new BlockLocation(0, 0, 1),
		    },
		    {
		      dir: Direction.east,
		      entityOffset: new BlockLocation(-1, 0, 0),
		    },
		    {
		      dir: Direction.south,
		      entityOffset: new BlockLocation(0, 0, -1),
		    },
		    {
		      dir: Direction.west,
		      entityOffset: new BlockLocation(1, 0, 0),
		    },
		  ];
		  const tester = new AttackTester(attackOptions);
		
		  GameTest.registerAsync("agent_test", "attack", async (test) => await tester.test(test))
		    .batch(tester.batchId)
		    .tag(GameTest.Tags.suiteDefault)
		    .tag("suite:edu")
		    .maxTicks(tester.maxTicks);
		}
		
		// Collect tests
		{
		  // Collect specific test
		  {
		    const items = [];
		    items.push(new CollectTestItem(new Location(0, 0, 1), MinecraftItemTypes.netheriteHelmet, 1, true));
		    items.push(new CollectTestItem(new Location(-1, 0, 0), MinecraftItemTypes.apple, 2, false));
		
		    let origin = new BlockLocation(1, 2, 1);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    /** @type {CollectTestOptions} */
		    const options = new CollectTestOptions(origin, originLookOffset, "apple", items);
		    const tester = new CollectTester(options);
		
		    GameTest.registerAsync("agent_test", "collect_apple", async (test) => await tester.test(test))
		      .structureName("agent_test:collect")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Collect all test
		  {
		    const items = [];
		    items.push(new CollectTestItem(new Location(0, 0, 1), MinecraftItemTypes.netheriteHelmet, 1, false));
		    items.push(new CollectTestItem(new Location(-1, 0, 0), MinecraftItemTypes.apple, 2, false));
		
		    let origin = new BlockLocation(1, 2, 1);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    /** @type {CollectTestOptions} */
		    const options = new CollectTestOptions(origin, originLookOffset, "all", items);
		    const tester = new CollectTester(options);
		
		    GameTest.registerAsync("agent_test", "collect_all", async (test) => await tester.test(test))
		      .structureName("agent_test:collect")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		
		// Destroy Block tests
		{
		  // Destroy Blocks test
		  {
		    /** @type {DestroyTestOptions[]} */
		    const targets = [];
		    targets.push(new DestroyTestOptions(Direction.north, MinecraftBlockTypes.stone));
		    targets.push(new DestroyTestOptions(Direction.east, MinecraftBlockTypes.grass));
		    targets.push(new DestroyTestOptions(Direction.south, MinecraftBlockTypes.goldBlock));
		    targets.push(new DestroyTestOptions(Direction.west, MinecraftBlockTypes.diamondBlock));
		    const tester = new DestroyTester(targets);
		
		    GameTest.registerAsync("agent_test", "destroy_blocks", async (test) => await tester.test(test))
		      .structureName("agent_test:destroy")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Destroy Block Objects test
		  {
		    /** @type {DestroyTestOptions[]} */
		    const targets = [];
		    targets.push(new DestroyTestOptions(Direction.north, MinecraftBlockTypes.bed));
		    targets.push(new DestroyTestOptions(Direction.east, MinecraftBlockTypes.lectern));
		    targets.push(new DestroyTestOptions(Direction.south, MinecraftBlockTypes.lever));
		    targets.push(new DestroyTestOptions(Direction.west, MinecraftBlockTypes.lantern));
		    const tester = new DestroyTester(targets);
		
		    GameTest.registerAsync("agent_test", "destroy_block_items", async (test) => await tester.test(test))
		      .structureName("agent_test:destroy")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		
		// DropAll Items tests
		{
		  let origin = new BlockLocation(2, 2, 2);
		  const originLookOffset = new BlockLocation(0, 0, 1);
		  // DropAll Items (Block) test
		  {
		    const dir = Direction.north;
		    const items = [];
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.stone, 0, 32));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.grass, 1, 16));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.goldBlock, 2, 8));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.diamondBlock, 3, 4));
		
		    const options = new DropAllTestOptions(origin, originLookOffset, items, dir);
		    const tester = new DropAllTester(options);
		
		    GameTest.registerAsync("agent_test", "drop_all_blocks", async (test) => await tester.test(test))
		      .structureName("agent_test:drop")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      // Still working on details for this one so it can be consistant
		      // There is an issue where the items are pushed in to a new space which would fail the test.
		      .tag(GameTest.Tags.suiteDisabled)
		      .requiredSuccessfulAttempts(1)
		      .maxTicks(tester.maxTicks);
		  }
		
		  // DropAll Items (Block Objects) test
		  {
		    const dir = Direction.north;
		    const items = [];
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.bed, 0, 1));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.lectern, 1, 1));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.lever, 2, 8));
		    items.push(new DropAllTestItem(dir, MinecraftItemTypes.lantern, 3, 4));
		
		    const options = new DropAllTestOptions(origin, originLookOffset, items, dir);
		    const tester = new DropAllTester(options);
		
		    GameTest.registerAsync("agent_test", "drop_all_block_items", async (test) => await tester.test(test))
		      .structureName("agent_test:drop")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		
		// Drop Item tests
		{
		  // Drop Item (Block) test
		  {
		    const items = [];
		    items.push(new DropTestItem(Direction.north, MinecraftItemTypes.stone, 0, 32));
		    items.push(new DropTestItem(Direction.east, MinecraftItemTypes.grass, 1, 16));
		    items.push(new DropTestItem(Direction.south, MinecraftItemTypes.goldBlock, 2, 8));
		    items.push(new DropTestItem(Direction.west, MinecraftItemTypes.diamondBlock, 3, 4));
		
		    const options = new DropTestOptions();
		    options.items = items;
		    const tester = new DropTester(options);
		
		    GameTest.registerAsync("agent_test", "drop_blocks", async (test) => await tester.test(test))
		      .structureName("agent_test:drop")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Drop Item (Block Object) test
		  {
		    const items = [];
		    items.push(new DropTestItem(Direction.north, MinecraftItemTypes.bed, 0, 1));
		    items.push(new DropTestItem(Direction.east, MinecraftItemTypes.lectern, 1, 1));
		    items.push(new DropTestItem(Direction.south, MinecraftItemTypes.lever, 2, 8));
		    items.push(new DropTestItem(Direction.west, MinecraftItemTypes.lantern, 3, 4));
		
		    const options = new DropTestOptions();
		    options.items = items;
		    const tester = new DropTester(options);
		
		    GameTest.registerAsync("agent_test", "drop_block_items", async (test) => await tester.test(test))
		      .structureName("agent_test:drop")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		
		// Interact tests
		{
		  // Interact (Switches) test
		  {
		    const items = [];
		    items.push(new InteractTestItem(Direction.north, new BlockLocation(0, 2, 0), true, 13));
		    items.push(new InteractTestItem(Direction.east, new BlockLocation(2, 2, 0), true, 15));
		    items.push(new InteractTestItem(Direction.south, new BlockLocation(4, 2, 0), true, 15));
		    items.push(new InteractTestItem(Direction.up, new BlockLocation(6, 2, 0), true, 15));
		
		    const options = new InteractOptions(new BlockLocation(3, 3, 5), items);
		    const tester = new InteractTester(options);
		
		    GameTest.registerAsync("agent_test", "interact_switches", async (test) => await tester.test(test))
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Interact (Trapdoors) test
		  {
		    const origin = new BlockLocation(2, 3, 2);
		    const offsetOrigin = (x, y, z) => {
		      return origin.offset(x, y, z);
		    };
		
		    const items = [];
		    items.push(new InteractTestItem(Direction.north, offsetOrigin(0, 0, 1), false));
		    items.push(new InteractTestItem(Direction.east, offsetOrigin(-1, 0, 0), false));
		    items.push(new InteractTestItem(Direction.south, offsetOrigin(0, 0, -1), false));
		    items.push(new InteractTestItem(Direction.west, offsetOrigin(1, 0, 0), false));
		    items.push(new InteractTestItem(Direction.up, offsetOrigin(0, 1, 0), false));
		    items.push(new InteractTestItem(Direction.down, offsetOrigin(0, -1, 0), false));
		
		    const options = new InteractOptions(origin, items);
		    const tester = new InteractTester(options);
		
		    GameTest.registerAsync("agent_test", "interact_trapdoors", async (test) => await tester.test(test))
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Interact (Doors) test
		  {
		    const origin = new BlockLocation(2, 4, 2);
		    const offsetOrigin = (x, y, z) => {
		      return origin.offset(x, y, z);
		    };
		
		    const items = [];
		    items.push(new InteractTestItem(Direction.north, offsetOrigin(0, 0, 1), false));
		    items.push(new InteractTestItem(Direction.east, offsetOrigin(-1, 0, 0), false));
		    items.push(new InteractTestItem(Direction.south, offsetOrigin(0, 0, -1), false));
		    items.push(new InteractTestItem(Direction.west, offsetOrigin(1, 0, 0), false));
		    items.push(new InteractTestItem(Direction.down, offsetOrigin(0, -2, 0), false));
		
		    const options = new InteractOptions(origin, items);
		    const tester = new InteractTester(options);
		
		    GameTest.registerAsync("agent_test", "interact_doors", async (test) => await tester.test(test))
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		
		// Move tests
		{
		  // Move (No blocked moves) test
		  {
		    const items = [];
		    items.push(new MoveTestItems(Direction.up, new BlockLocation(0, 1, 0)));
		    items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 1)));
		    items.push(new MoveTestItems(Direction.east, new BlockLocation(-1, 0, 0)));
		    items.push(new MoveTestItems(Direction.south, new BlockLocation(0, 0, -1)));
		    items.push(new MoveTestItems(Direction.west, new BlockLocation(1, 0, 0)));
		    items.push(new MoveTestItems(Direction.down, new BlockLocation(0, -1, 0)));
		
		    let origin = new BlockLocation(1, 2, 0);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    const options = new MoveTestOptions(origin, originLookOffset, items);
		    const tester = new MoveTester(options);
		
		    GameTest.registerAsync("agent_test", "move_no_obstacles", async (test) => await tester.test(test))
		      .structureName("agent_test:move")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		
		    origin = new BlockLocation(5, 2, 2);
		    const carpet_options = new MoveTestOptions(origin, originLookOffset, items);
		    const carpet_tester = new MoveTester(carpet_options);
		
		    GameTest.registerAsync("agent_test", "move_carpet", async (test) => await carpet_tester.test(test))
		      .structureName("agent_test:move")
		      .batch(carpet_tester.batchId)
		      .maxTicks(carpet_tester.maxTicks)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Move (blocked moves) test
		  {
		    const items = [];
		    items.push(new MoveTestItems(Direction.up, new BlockLocation(0, 0, 0)));
		    items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 1)));
		    items.push(new MoveTestItems(Direction.east, new BlockLocation(-1, 0, 0)));
		    items.push(new MoveTestItems(Direction.south, new BlockLocation(0, 0, -1)));
		    items.push(new MoveTestItems(Direction.west, new BlockLocation(1, 0, 0)));
		    items.push(new MoveTestItems(Direction.down, new BlockLocation(0, 0, 0)));
		
		    let origin = new BlockLocation(1, 2, 5);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    {
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_capped", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    origin = new BlockLocation(5, 2, 0);
		    {
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		      GameTest.registerAsync("agent_test", "move_carpet_capped", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    origin = new BlockLocation(5, 2, 1);
		    {
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		      GameTest.registerAsync("agent_test", "move_carpet_capped_mixed", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		  }
		
		  // Move (Transition carpet / no carpet)
		  {
		    // Capped
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(1, 0, 0)));
		
		      let origin = new BlockLocation(3, 2, 0);
		      const originLookOffset = new BlockLocation(1, 0, 0);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_carpet_transition_capped", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Uncapped
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(1, 0, 0)));
		
		      let origin = new BlockLocation(3, 2, 1);
		      const originLookOffset = new BlockLocation(1, 0, 0);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_carpet_transition_uncapped", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		  }
		
		  // Move (Trapdoor) test
		  {
		    // Uncapped trapdoor on floor
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 1)));
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 1)));
		
		      let origin = new BlockLocation(2, 2, 2);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_trapdoor_uncapped", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Capped trapdoor on floor blocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 0)));
		
		      let origin = new BlockLocation(1, 2, 2);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_trapdoor_capped_blocked", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Capped trapdoor on ceiling blocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 0)));
		
		      let origin = new BlockLocation(0, 2, 2);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_trapdoor_ceiling_blocked", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Trapdoor (closed) on ceiling 1 block upwards blocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 0)));
		
		      let origin = new BlockLocation(0, 2, 2);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync(
		        "agent_test",
		        "move_trapdoor_ceiling_upward_closed",
		        async (test) => await tester.test(test)
		      )
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Trapdoor (open) on ceiling 1 block upwards unblocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 1, 0)));
		
		      let origin = new BlockLocation(1, 2, 2);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_trapdoor_ceiling_upward_open", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        // .tag(GameTest.Tags.suiteDefault)
		        // .tag("suite:edu")
		        // This should work, but there need to be further improvements to the collision logic
		        // To accomidate a space where a trapdoor is on a wall and open
		        .tag(GameTest.Tags.suiteDisabled)
		        .maxTicks(tester.maxTicks);
		    }
		
		    // Trapdoor (closed) on as floor 1 block unblocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(-1, 0, 0)));
		
		      let origin = new BlockLocation(1, 2, 4);
		      const originLookOffset = new BlockLocation(-1, 0, 0);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_trapdoor_floor_closed", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        .tag(GameTest.Tags.suiteDefault)
		        .tag("suite:edu")
		        .maxTicks(tester.maxTicks);
		    }
		  }
		
		  // Move (Door) test
		  {
		    // Door (open) unblocked
		    {
		      const items = [];
		      items.push(new MoveTestItems(Direction.north, new BlockLocation(0, 0, 1)));
		      items.push(new MoveTestItems(Direction.east, new BlockLocation(-1, 0, 0)));
		      items.push(new MoveTestItems(Direction.south, new BlockLocation(0, 0, -1)));
		      items.push(new MoveTestItems(Direction.west, new BlockLocation(1, 0, 0)));
		
		      let origin = new BlockLocation(5, 4, 0);
		      const originLookOffset = new BlockLocation(0, 0, 1);
		      const options = new MoveTestOptions(origin, originLookOffset, items);
		      const tester = new MoveTester(options);
		
		      GameTest.registerAsync("agent_test", "move_door_open", async (test) => await tester.test(test))
		        .structureName("agent_test:move")
		        .batch(tester.batchId)
		        // .tag(GameTest.Tags.suiteDefault)
		        // .tag("suite:edu")
		        // This should work, but there need to be further improvements to the collision logic
		        // To accomidate a space where a door behind the agent
		        .tag(GameTest.Tags.suiteDisabled)
		        .maxTicks(tester.maxTicks);
		    }
		  }
		}
		
		{
		  // Place (Blocks) test
		  {
		    const items = [];
		    items.push(new PlaceTestItem("stone", "stone", 0, 1, Direction.north, new BlockLocation(0, 0, 1)));
		    items.push(new PlaceTestItem("grass", "grass", 1, 1, Direction.east, new BlockLocation(-1, 0, 0)));
		    items.push(new PlaceTestItem("gold_block", "goldBlock", 2, 1, Direction.south, new BlockLocation(0, 0, -1)));
		    items.push(new PlaceTestItem("diamond_block", "diamondBlock", 3, 1, Direction.west, new BlockLocation(1, 0, 0)));
		
		    let origin = new BlockLocation(2, 2, 2);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    const options = new PlaceTestOptions(origin, originLookOffset, items);
		    const tester = new PlaceTester(options);
		
		    GameTest.registerAsync("agent_test", "place_blocks", async (test) => await tester.test(test))
		      .structureName("agent_test:place")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		
		  // Place (in air) test
		  {
		    const items = [];
		    items.push(new PlaceTestItem("stone", "stone", 0, 1, Direction.north, new BlockLocation(0, 0, 1)));
		    items.push(new PlaceTestItem("grass", "grass", 1, 1, Direction.east, new BlockLocation(-1, 0, 0)));
		    items.push(new PlaceTestItem("gold_block", "goldBlock", 2, 1, Direction.south, new BlockLocation(0, 0, -1)));
		    items.push(new PlaceTestItem("diamond_block", "diamondBlock", 3, 1, Direction.west, new BlockLocation(1, 0, 0)));
		    items.push(new PlaceTestItem("dirt", "dirt", 4, 1, Direction.down, new BlockLocation(0, -1, 0)));
		    items.push(new PlaceTestItem("basalt", "basalt", 5, 1, Direction.up, new BlockLocation(0, 1, 0)));
		
		    let origin = new BlockLocation(2, 3, 2);
		    const originLookOffset = new BlockLocation(0, 0, 1);
		    const options = new PlaceTestOptions(origin, originLookOffset, items);
		    const tester = new PlaceTester(options);
		
		    GameTest.registerAsync("agent_test", "place_blocks_in_air", async (test) => await tester.test(test))
		      .structureName("agent_test:place")
		      .batch(tester.batchId)
		      .tag(GameTest.Tags.suiteDefault)
		      .tag("suite:edu")
		      .maxTicks(tester.maxTicks);
		  }
		}
		'''
	script "BlockTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftItemTypes, Location } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TicksPerSecond = 20;
		function toTicks(sec) {
		  return sec * TicksPerSecond;
		}
		
		function locactionToString(loc) {
		  return `<${loc.x}, ${loc.y}, ${loc.z}>`;
		}
		
		GameTest.registerAsync("BlockTests", "player_border_block_break", async (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_border_break");
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.wool, new BlockLocation(1, 2, 1));
		  const testEx = new GameTestExtensions(test);
		
		  testEx.giveItem(playerSim, MinecraftItemTypes.shears, 1, 0);
		  await test.idle(toTicks(1.0));
		  playerSim.breakBlock(new BlockLocation(1, 2, 1));
		
		  await test.idle(toTicks(1.0));
		  playerSim.stopBreakingBlock();
		
		  test.assertBlockPresent(MinecraftBlockTypes.wool, new BlockLocation(1, 2, 1), true);
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_below", async (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_border_move_below");
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 2, 1));
		
		  await test.idle(toTicks(1.0));
		
		  const loc = test.worldBlockLocation(new BlockLocation(1, 2, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_above", async (test) => {
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(1, 5, 0));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 6, 0), "playerSim_border_move_above");
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 6, 1));
		
		  await test.idle(toTicks(1.0));
		  const loc = test.worldBlockLocation(new BlockLocation(1, 6, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_above_build_height", async (test) => {
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(1, 320, 0));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 321, 0), "playerSim_border_move_above");
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 6, 1));
		
		  await test.idle(toTicks(1.0));
		  const loc = test.worldBlockLocation(new BlockLocation(1, 321, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  await test.idle(toTicks(0.5));
		  test.destroyBlock(new BlockLocation(1, 320, 0));
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		'''
	script "GameTestAgentExtensions.js":
		'''
		import { Block, BlockLocation, Direction, Entity, InventoryComponentContainer, Location } from "mojang-minecraft";
		import { SimulatedPlayer, Test } from "mojang-gametest";
		
		class GameTestAgentExtensions {
		  /**
		   *
		   * @param {Test} test
		   * @param {SimulatedPlayer} player
		   */
		  constructor(test, player) {
		    this._test = test;
		    this._player = player;
		  }
		
		  /**
		   *
		   * @param {string} command
		   * @returns
		   */
		  agentCommand = (command) => {
		    return this._player.runCommandAsync(`agent ${command}`);
		  };
		
		  _command = (command) => {
		    return this._player.runCommandAsync(command);
		  };
		
		  /**
		   *
		   * @param {BlockLocation} itemPos
		   * @param {number} searchRadius
		   * @returns {*}
		   */
		  teleportItems = (itemPos, searchRadius = 5) => {
		    let tpCommand = `tp @e[type=item,x=${itemPos.x},y=${itemPos.y},z=${itemPos.z},r=${searchRadius}] ${itemPos.x} ${itemPos.y} ${itemPos.z}`;
		    return this._command(tpCommand);
		  };
		
		  /**
		   *
		   * @param {Direction} direction
		   * @returns {"up" | "down" | "left" | "right" | "forward" | "back"}
		   */
		  static directionToAgentDir = (direction) => {
		    switch (direction) {
		      case Direction.up:
		        return "up";
		      case Direction.down:
		        return "down";
		      case Direction.north:
		        return "forward";
		      case Direction.south:
		        return "back";
		      case Direction.west:
		        return "left";
		      case Direction.east:
		        return "right";
		    }
		    return "";
		  };
		
		  /**
		   *
		   * @param {BlockLocation} direction
		   */
		  static directionToLocationOffset = (direction) => {
		    switch (direction) {
		      case Direction.north:
		        return new BlockLocation(0, 0, 1);
		      case Direction.south:
		        return new BlockLocation(0, 0, -1);
		      case Direction.east:
		        return new BlockLocation(-1, 0, 0);
		      case Direction.west:
		        return new BlockLocation(1, 0, 0);
		      case Direction.up:
		        return new BlockLocation(0, 1, 0);
		      case Direction.down:
		        return new BlockLocation(0, -1, 0);
		      default:
		        return new BlockLocation(0, 0, 0);
		    }
		  };
		
		  static generateGuid = () => {
		    return `${new Date().getTime().toString(16)}${Math.floor(1e7 * Math.random()).toString(16)}`;
		  };
		}
		
		export default class Agent {
		  constructor(test, player) {
		    /** @type {Test} */
		    this._test = test;
		    /** @type {SimulatedPlayer} */
		    this._player = player;
		    /** @type {GameTestAgentExtensions} */
		    this._testEx = new GameTestAgentExtensions(test, player);
		    /** @type {Entity[]} */
		    this.entities = null;
		  }
		
		  /**
		   * @param {Direction} direction
		   */
		  attack = (direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`attack ${dir}`);
		  };
		
		  /**
		   *
		   * @returns {BlockLocation}
		   */
		  blockLocation = () => {
		    let loc = this.entity().location;
		    let blockPos = new BlockLocation(Math.floor(loc.x), Math.floor(loc.y), Math.floor(loc.z));
		    return this._test.relativeBlockLocation(blockPos);
		  };
		
		  /**
		   * @param {string|"all"} mode
		   */
		  collect = (mode) => {
		    return this._testEx.agentCommand(`collect ${mode}`);
		  };
		
		  /**
		   *
		   * @returns {InventoryComponentContainer}
		   */
		  container = () => {
		    return this.entity().getComponent("inventory").container;
		  };
		
		  /**
		   * @param {Direction} direction
		   */
		  destroy = (direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`destroy ${dir}`);
		  };
		
		  destroySequence = (sequence, directions) => {
		    for (let dir of directions) {
		      sequence = sequence.thenWaitAfter(5, () => {
		        this.destroy(dir);
		      });
		    }
		    return sequence;
		  };
		
		  /**
		   *
		   * @returns {Entity}
		   */
		  entity = () => {
		    return this._entity;
		  };
		
		  /**
		   *
		   * @param {number} slot
		   * @param {number} quantity
		   * @param {Direction} direction
		   * @returns
		   */
		  drop = (slot, quantity, direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`drop ${slot} ${quantity} ${dir}`);
		  };
		
		  dropAll = (direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`dropall ${dir}`);
		  };
		
		  interact = (direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`interact ${dir}`);
		  };
		
		  interactSequence = (sequence, directions) => {
		    for (let dir of directions) {
		      sequence = sequence.thenWaitAfter(5, () => {
		        this.interact(dir);
		      });
		    }
		    return sequence;
		  };
		
		  kill = () => {
		    this._entity.kill();
		    this._entity = null;
		  };
		
		  /**
		   *
		   * @param {number} slot
		   * @param {Direction} direction
		   * @returns
		   */
		  place = (slot, direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`place ${slot} ${dir}`);
		  };
		
		  /**
		   *
		   * @returns {Location}
		   */
		  location = () => {
		    return this._test.relativeLocation(this.entity().location);
		  };
		
		  /**
		   *
		   * @param {Direction} direction
		   * @returns {*}
		   */
		  move = (direction) => {
		    let dir = GameTestAgentExtensions.directionToAgentDir(direction);
		    return this._testEx.agentCommand(`move ${dir}`);
		  };
		
		  moveSequence = (sequence, directions) => {
		    for (let move of directions) {
		      sequence = sequence.thenWaitAfter(8, () => {
		        this.move(move);
		      });
		    }
		    return sequence;
		  };
		
		  spawn = () => {
		    return this._testEx.agentCommand("create");
		  };
		
		  /**
		   *
		   * @param {BlockLocation} loc
		   * @param {BlockLocation} facing
		   * @returns
		   */
		  tp = (loc, facing) => {
		    let cmd = `tp ${loc.x} ${loc.y} ${loc.z}`;
		    if (facing) {
		      cmd = `${cmd} facing ${facing.x} ${facing.y} ${facing.z}`;
		    }
		    return this._testEx.agentCommand(cmd);
		  };
		
		  /**
		   *
		   * @param {Test} test
		   * @param {SimulatedPlayer} player
		   * @param {BlockLocation} loc
		   * @param {BlockLocation} facing
		   * @returns
		   */
		  static createAgent = async (test, player, loc, facing) => {
		    const agent = new Agent(test, player);
		    agent.spawn();
		    await test.idle(5);
		
		    const wLoc = test.worldBlockLocation(loc);
		    const wStartLocLookAt = test.worldBlockLocation(loc.offset(facing.x, facing.y, facing.z));
		    agent.tp(wLoc, wStartLocLookAt);
		
		    await test.idle(5);
		    agent._entity = test.getDimension().getEntitiesAtBlockLocation(wLoc)[0];
		    return agent;
		  };
		}
		
		export { Agent, GameTestAgentExtensions };
		'''
	script "GameTestExtensions.js":
		'''
		import { BlockLocation, Location, ItemStack } from "mojang-minecraft";
		
		export default class GameTestExtensions {
		  constructor(test) {
		    this.test = test;
		  }
		
		  assertBlockProperty(propertyName, value, blockLocation) {
		    this.test.assertBlockState(blockLocation, (block) => {
		      return block.permutation.getProperty(propertyName).value == value;
		    });
		  }
		
		  static toBlockLocation = (pos) => {
		    return new BlockLocation(Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z));
		  };
		
		  static toLocation = (pos) => {
		    return new Location(pos.x, pos.y, pos.z);
		  };
		
		  giveItem(player, itemType, amount, slot) {
		    const inventoryContainer = player.getComponent("inventory").container;
		    inventoryContainer.addItem(new ItemStack(itemType, amount ?? 1));
		    player.selectedSlot = slot ?? 0;
		  }
		}
		'''
	script "Main.js":
		'''
		import "scripts/AgentTests.js";
		import "scripts/BlockTests.js";
		
		import { system } from "mojang-minecraft";
		system.events.beforeWatchdogTerminate.subscribe((e) => {
		  e.cancel = true;
		});
		'''
Removed behavior pack "vanilla_gametest":
	script "APITests.js":
		'''
		import GameTestExtensions from "./GameTestExtensions.js";
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  BlockProperties,
		  MinecraftBlockTypes,
		  Color,
		  Direction,
		  ExplosionOptions,
		  EntityDamageCause,
		  EntityEventOptions,
		  EntityDataDrivenTriggerEventOptions,
		  FluidContainer,
		  FluidType,
		  MinecraftEffectTypes,
		  MinecraftItemTypes,
		  ItemStack,
		  Location,
		  Vector,
		  world,
		} from "mojang-minecraft";
		
		GameTest.register("APITests", "on_entity_created", (test) => {
		  const entityCreatedCallback = world.events.entityCreate.subscribe((entity) => {
		    if (entity) {
		      test.succeed();
		    } else {
		      test.fail("Expected entity");
		    }
		  });
		  test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  world.events.entityCreate.unsubscribe(entityCreatedCallback);
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_is_waterlogged", (test) => {
		  const waterChestLoc = new BlockLocation(5, 2, 1);
		  const waterLoc = new BlockLocation(4, 2, 1);
		  const chestLoc = new BlockLocation(2, 2, 1);
		  const airLoc = new BlockLocation(1, 2, 1);
		
		  test.assertIsWaterlogged(waterChestLoc, true);
		  test.assertIsWaterlogged(waterLoc, false);
		  test.assertIsWaterlogged(chestLoc, false);
		  test.assertIsWaterlogged(airLoc, false);
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_redstone_power", (test) => {
		  const redstoneBlockLoc = new BlockLocation(3, 2, 1);
		  const redstoneTorchLoc = new BlockLocation(2, 2, 1);
		  const poweredLampLoc = new BlockLocation(1, 2, 1);
		  const unpoweredLampLoc = new BlockLocation(0, 2, 1);
		  const airLoc = new BlockLocation(3, 2, 0);
		  const redstoneWireLoc = new BlockLocation(0, 1, 0);
		
		  test.succeedWhen(() => {
		    test.assertRedstonePower(redstoneBlockLoc, 15);
		    test.assertRedstonePower(redstoneTorchLoc, 15);
		    test.assertRedstonePower(poweredLampLoc, 15);
		    test.assertRedstonePower(unpoweredLampLoc, 0);
		    test.assertRedstonePower(airLoc, -1);
		    test.assertRedstonePower(redstoneWireLoc, 13); // 3 length wire
		  });
		})
		  .maxTicks(20)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "spawn_item", (test) => {
		  const featherItem = new ItemStack(MinecraftItemTypes.feather, 1, 0);
		  test.spawnItem(featherItem, new Location(1.5, 3.5, 1.5));
		  test.succeedWhen(() => {
		    test.assertEntityPresent("minecraft:item", new BlockLocation(1, 2, 1), true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_entity_data", (test) => {
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const pigLoc = new BlockLocation(1, 2, 1);
		  test.spawn(pigId, pigLoc);
		  test.succeedWhen(() => {
		    test.assertEntityState(pigLoc, pigId, (entity) => entity.id !== undefined);
		  });
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "add_effect", (test) => {
		  const villagerId = "minecraft:villager_v2<minecraft:ageable_grow_up>";
		  const villagerLoc = new BlockLocation(1, 2, 1);
		  const villager = test.spawn(villagerId, villagerLoc);
		  const duration = 20;
		  villager.addEffect(MinecraftEffectTypes.poison, duration, 1);
		
		  test.assertEntityState(
		    villagerLoc,
		    villagerId,
		    (entity) => entity.getEffect(MinecraftEffectTypes.poison).duration == duration
		  );
		  test.assertEntityState(
		    villagerLoc,
		    villagerId,
		    (entity) => entity.getEffect(MinecraftEffectTypes.poison).amplifier == 1
		  );
		
		  test.runAfterDelay(duration, () => {
		    test.assertEntityState(
		      villagerLoc,
		      villagerId,
		      (entity) => entity.getEffect(MinecraftEffectTypes.poison) === undefined
		    );
		    test.succeed();
		  });
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_entity_present", (test) => {
		  const villagerId = "minecraft:villager_v2";
		  const villagerLoc = new BlockLocation(1, 2, 3);
		  const emeraldItem = new ItemStack(MinecraftItemTypes.emerald, 1, 0);
		  const emeraldItemLoc = new BlockLocation(3, 2, 3);
		  const minecartId = "minecraft:minecart";
		  const minecartLoc = new BlockLocation(3, 2, 1);
		  const armorStandId = "minecraft:armor_stand";
		  const armorStandLoc = new BlockLocation(1, 2, 1);
		
		  test.spawn(villagerId, villagerLoc);
		  test.spawnItem(emeraldItem, new Location(3.5, 4.5, 3.5));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerId, villagerLoc, true);
		    test.assertItemEntityPresent(MinecraftItemTypes.emerald, emeraldItemLoc, 0, true);
		    test.assertEntityPresent(armorStandId, armorStandLoc, true);
		
		    // Check all blocks surrounding the minecart
		    for (let x = -1; x <= 1; x++) {
		      for (let z = -1; z <= 1; z++) {
		        let offsetLoc = new BlockLocation(minecartLoc.x + x, minecartLoc.y, minecartLoc.z + z);
		        if (x == 0 && z == 0) {
		          test.assertEntityPresent(minecartId, offsetLoc, true);
		        } else {
		          test.assertEntityPresent(minecartId, offsetLoc, false);
		        }
		      }
		    }
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_entity_not_present", (test) => {
		  const armorStandId = "minecraft:armor_stand";
		  const pigId = "minecraft:pig";
		  const armorStandLoc = new BlockLocation(1, 2, 1);
		  const airLoc = new BlockLocation(0, 2, 1);
		
		  try {
		    test.assertEntityPresentInArea(armorStandId, false);
		    test.fail(); // this assert should throw
		  } catch (e) {}
		
		  try {
		    test.assertEntityPresent(armorStandId, armorStandLoc, false);
		    test.fail(); // this assert should throw
		  } catch (e) {}
		
		  test.assertEntityPresent(armorStandId, airLoc, false);
		  test.assertEntityPresentInArea(pigId, false);
		
		  test.succeed();
		})
		  .structureName("APITests:armor_stand")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_item_entity_count_is", (test) => {
		  let oneItemLoc = new BlockLocation(3, 2, 1);
		  let fiveItemsLoc = new BlockLocation(1, 2, 1);
		  let noItemsLoc = new BlockLocation(2, 2, 1);
		  let diamondPickaxeLoc = new BlockLocation(2, 2, 4);
		
		  const oneEmerald = new ItemStack(MinecraftItemTypes.emerald, 1, 0);
		  const onePickaxe = new ItemStack(MinecraftItemTypes.diamondPickaxe, 1, 0);
		  const fiveEmeralds = new ItemStack(MinecraftItemTypes.emerald, 5, 0);
		
		  test.spawnItem(oneEmerald, new Location(3.5, 3, 1.5));
		  test.spawnItem(fiveEmeralds, new Location(1.5, 3, 1.5));
		
		  // spawn 9 pickaxes in a 3x3 grid
		  for (let x = 1.5; x <= 3.5; x++) {
		    for (let z = 3.5; z <= 5.5; z++) {
		      test.spawnItem(onePickaxe, new Location(x, 3, z));
		    }
		  }
		
		  test.assertItemEntityCountIs(MinecraftItemTypes.emerald, noItemsLoc, 0, 0);
		
		  test.succeedWhen(() => {
		    test.assertItemEntityCountIs(MinecraftItemTypes.feather, oneItemLoc, 0, 0);
		    test.assertItemEntityCountIs(MinecraftItemTypes.emerald, oneItemLoc, 0, 1);
		    test.assertItemEntityCountIs(MinecraftItemTypes.feather, fiveItemsLoc, 0, 0);
		    test.assertItemEntityCountIs(MinecraftItemTypes.emerald, fiveItemsLoc, 0, 5);
		    test.assertItemEntityCountIs(MinecraftItemTypes.emerald, fiveItemsLoc, 0, 5);
		    test.assertItemEntityCountIs(MinecraftItemTypes.diamondPickaxe, diamondPickaxeLoc, 1, 9);
		    test.assertItemEntityCountIs(MinecraftItemTypes.diamondPickaxe, diamondPickaxeLoc, 0, 1);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_entity_touching", (test) => {
		  const armorStandId = "minecraft:armor_stand";
		
		  test.assertEntityTouching(armorStandId, new Location(1.5, 2.5, 1.5), true);
		  test.assertEntityTouching(armorStandId, new Location(1.5, 3.5, 1.5), true);
		  test.assertEntityTouching(armorStandId, new Location(1.0, 2.5, 1.5), false);
		  test.assertEntityTouching(armorStandId, new Location(2.0, 2.5, 1.5), false);
		  test.assertEntityTouching(armorStandId, new Location(1.5, 2.5, 1.0), false);
		  test.assertEntityTouching(armorStandId, new Location(1.5, 2.5, 2.0), false);
		
		  test.succeed();
		})
		  .structureName("APITests:armor_stand")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "pulse_redstone", (test) => {
		  const pulseLoc = new BlockLocation(1, 2, 2);
		  const lampLoc = new BlockLocation(1, 2, 1);
		  test.assertRedstonePower(lampLoc, 0);
		  test.pulseRedstone(pulseLoc, 2);
		
		  test
		    .startSequence()
		    .thenIdle(2)
		    .thenExecute(() => test.assertRedstonePower(lampLoc, 15))
		    .thenIdle(2)
		    .thenExecute(() => test.assertRedstonePower(lampLoc, 0))
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "block_location", (test) => {
		  let testLoc = new BlockLocation(1, 1, 1);
		  let worldLoc = test.worldBlockLocation(testLoc);
		  let relativeLoc = test.relativeBlockLocation(worldLoc);
		  test.assert(!relativeLoc.equals(worldLoc), "Expected relativeLoc and worldLoc to be different");
		  test.assert(relativeLoc.equals(testLoc), "Expected relativeLoc to match testLoc");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "location", (test) => {
		  let testLoc = new Location(1.2, 1.2, 1.2);
		  let worldLoc = test.worldLocation(testLoc);
		  let relativeLoc = test.relativeLocation(worldLoc);
		  test.assert(!relativeLoc.isNear(worldLoc, 0.01), "Expected relativeLoc and worldLoc to be different");
		  test.assert(relativeLoc.isNear(testLoc, 0.01), "Expected relativeLoc to match testLoc");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "create_explosion_basic", (test) => {
		  const center = new BlockLocation(2, 3, 2);
		
		  test.assertBlockPresent(MinecraftBlockTypes.cobblestone, center, true);
		
		  const loc = test.worldBlockLocation(center);
		  const explosionLoc = new Location(loc.x + 0.5, loc.y + 0.5, loc.z + 0.5);
		  test.getDimension().createExplosion(explosionLoc, 10);
		
		  for (let x = 1; x <= 3; x++) {
		    for (let y = 2; y <= 4; y++) {
		      for (let z = 1; z <= 3; z++) {
		        test.assertBlockPresent(MinecraftBlockTypes.cobblestone, new BlockLocation(x, y, z), false);
		      }
		    }
		  }
		
		  test.succeed();
		})
		  .padding(10) // The blast can destroy nearby items and mobs
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "create_explosion_advanced", (test) => {
		  const dimension = test.getDimension();
		  const center = new BlockLocation(3, 3, 3);
		
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const pigLoc = new BlockLocation(3, 4, 3);
		  test.spawn(pigId, pigLoc);
		
		  const loc = test.worldBlockLocation(center);
		  const explosionLoc = new Location(loc.x + 0.5, loc.y + 0.5, loc.z + 0.5);
		  let explosionOptions = {};
		
		  test.assertBlockPresent(MinecraftBlockTypes.cobblestone, center, true);
		
		  // Start by exploding without breaking blocks
		  explosionOptions.breaksBlocks = false;
		  const creeper = test.spawn("minecraft:creeper", new BlockLocation(1, 2, 1));
		  explosionOptions.source = creeper;
		  test.assertEntityPresent(pigId, pigLoc, true);
		  dimension.createExplosion(explosionLoc, 10, explosionOptions);
		  creeper.kill();
		  test.assertEntityPresent(pigId, pigLoc, false);
		  test.assertBlockPresent(MinecraftBlockTypes.cobblestone, center, true);
		
		  // Next, explode with fire
		  explosionOptions = {};
		  explosionOptions.causesFire = true;
		
		  let findFire = () => {
		    let foundFire = false;
		    for (let x = 0; x <= 6; x++) {
		      for (let z = 0; z <= 6; z++) {
		        try {
		          test.assertBlockPresent(MinecraftBlockTypes.fire, new BlockLocation(x, 3, z), true);
		          foundFire = true;
		          break;
		        } catch (e) {}
		      }
		    }
		    return foundFire;
		  };
		
		  test.assert(!findFire(), "Unexpected fire");
		  dimension.createExplosion(explosionLoc, 15, explosionOptions);
		  test.assertBlockPresent(MinecraftBlockTypes.cobblestone, center, false);
		  test.assert(findFire(), "No fire found");
		
		  // Finally, explode in water
		  explosionOptions.allowUnderwater = true;
		  const belowWaterLoc = new BlockLocation(3, 1, 3);
		  test.assertBlockPresent(MinecraftBlockTypes.air, belowWaterLoc, false);
		  dimension.createExplosion(explosionLoc, 10, explosionOptions);
		  test.assertBlockPresent(MinecraftBlockTypes.air, belowWaterLoc, true);
		  test.succeed();
		})
		  .padding(10) // The blast can destroy nearby items and mobs
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "triggerEvent", (test) => {
		  const creeper = test.spawn("creeper", new BlockLocation(1, 2, 1));
		  creeper.triggerEvent("minecraft:start_exploding_forced");
		
		  test.succeedWhen(() => {
		    test.assertEntityPresentInArea("creeper", false);
		  });
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "chat", (test) => {
		  test.print("subscribing");
		
		  const chatCallback = world.events.beforeChat.subscribe((eventData) => {
		    if (eventData.message === "!killme") {
		      eventData.sender.kill();
		      eventData.cancel = true;
		    } else if (eventData.message === "!players") {
		      test.print(`There are ${eventData.targets.length} players in the server.`);
		      for (const target of eventData.targets) {
		        test.print("Player: " + target.name);
		      }
		    } else {
		      eventData.message = `Modified '${eventData.message}'`;
		    }
		  });
		
		  test
		    .startSequence()
		    .thenIdle(200)
		    .thenExecute(() => {
		      world.events.beforeChat.unsubscribe(chatCallback);
		      test.print("unsubscribed");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .maxTicks(1000)
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("APITests", "add_effect_event", (test) => {
		  const villagerId = "minecraft:villager_v2<minecraft:ageable_grow_up>";
		  const villager = test.spawn(villagerId, new BlockLocation(1, 2, 1));
		
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const pig = test.spawn(pigId, new BlockLocation(1, 2, 1));
		
		  let basicEffectSucceed = false;
		  let filteredEntityEffectSucceed = false;
		  let filteredTypeEffectSucceed = false;
		
		  const effectAddCallback = world.events.effectAdd.subscribe((eventData) => {
		    if (eventData.entity.id === "minecraft:villager_v2") {
		      test.assert(eventData.effect.displayName === "Poison II", "Unexpected display name");
		      test.assert(eventData.effectState === 1, "Unexpected effect state");
		      basicEffectSucceed = true;
		      if (filteredEntityEffectSucceed && basicEffectSucceed && filteredTypeEffectSucceed) test.succeed();
		    }
		  });
		
		  let specificEntityOptions = new EntityEventOptions();
		  specificEntityOptions.entities.push(villager);
		
		  const effectEntityFilterAddCallback = world.events.effectAdd.subscribe((eventData) => {
		    test.assert(eventData.entity.id === "minecraft:villager_v2", "Unexpected id");
		    test.assert(eventData.effect.displayName === "Poison II", "Unexpected display name");
		    test.assert(eventData.effectState === 1, "Unexpected effect state");
		    filteredEntityEffectSucceed = true;
		    if (filteredEntityEffectSucceed && basicEffectSucceed && filteredTypeEffectSucceed) test.succeed();
		  }, specificEntityOptions);
		
		  let entityTypeOptions = new EntityEventOptions();
		  entityTypeOptions.entityTypes.push("minecraft:villager_v2");
		
		  const effectTypeFilterAddCallback = world.events.effectAdd.subscribe((eventData) => {
		    test.assert(eventData.entity.id === "minecraft:villager_v2", "Unexpected id");
		    test.assert(eventData.effect.displayName === "Poison II", "Unexpected display name");
		    test.assert(eventData.effectState === 1, "Unexpected effect state");
		    filteredTypeEffectSucceed = true;
		    if (filteredEntityEffectSucceed && basicEffectSucceed && filteredTypeEffectSucceed) test.succeed();
		  }, entityTypeOptions);
		
		  villager.addEffect(MinecraftEffectTypes.poison, 5, 1);
		  pig.addEffect(MinecraftEffectTypes.poison, 5, 1);
		  world.events.effectAdd.unsubscribe(effectAddCallback);
		  world.events.effectAdd.unsubscribe(effectEntityFilterAddCallback);
		  world.events.effectAdd.unsubscribe(effectTypeFilterAddCallback);
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "piston", (test) => {
		  const dimension = test.getDimension();
		  const pistonLoc = new BlockLocation(1, 2, 1);
		  const redstoneLoc = new BlockLocation(1, 2, 0);
		  const pistonComp = test.getDimension().getBlock(test.worldBlockLocation(pistonLoc)).getComponent("piston");
		
		  test.assert(pistonComp != undefined, "Expected piston component");
		
		  let assertPistonState = (isMoving, isExpanded, isExpanding, isRetracted, isRetracting) => {
		    test.assert(pistonComp.isMoving === isMoving, `Unexpected isMoving, expected[${isMoving}] actual[${pistonComp.isMoving}]`);
		    test.assert(pistonComp.isExpanded === isExpanded, `Unexpected isExpanded, expected[${isExpanded}] actual[${pistonComp.isExpanded}]`);
		    test.assert(pistonComp.isExpanding === isExpanding, `Unexpected isExpanding, expected[${isExpanding}] actual[${pistonComp.isExpanding}]`);
		    test.assert(pistonComp.isRetracted === isRetracted, `Unexpected isRetracted, expected[${isRetracted}] actual[${pistonComp.isRetracted}]`);
		    test.assert(pistonComp.isRetracting === isRetracting, `Unexpected isRetracting, expected[${isRetracting}] actual[${pistonComp.isRetracting}]`);
		  };
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assert(pistonComp.attachedBlocks.length === 0, "Expected 0 attached blocks");
		      assertPistonState(false, false, false, true, false); // isRetracted
		      test.setBlockType(MinecraftBlockTypes.redstoneBlock, redstoneLoc);
		    })
		    .thenIdle(3)
		    .thenExecute(() => {
		      test.assert(pistonComp.attachedBlocks.length === 3, `Expected 3 attached blocks, actual [${pistonComp.attachedBlocks.length}]`);
		      assertPistonState(true, false, true, false, false); // isMoving, isExpanding
		    })
		    .thenIdle(2)
		    .thenExecute(() => {
		      assertPistonState(false, true, false, false, false); // isExpanded
		      test.setBlockType(MinecraftBlockTypes.air, redstoneLoc);
		    })
		    .thenIdle(3)
		    .thenExecute(() => {
		      assertPistonState(true, false, false, false, true); // isMoving, isRetracting
		    })
		    .thenIdle(2)
		    .thenExecute(() => {
		      assertPistonState(false, false, false, true, false); // isRetracted
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "piston_event", (test) => {
		  let expanded = false;
		  let retracted = false;
		  const redstoneLoc = new BlockLocation(1, 2, 0);
		  const pistonLoc = new BlockLocation(1, 2, 1);
		  const planksLoc = new BlockLocation(2, 2, 1);
		
		  const pistonCallback = world.events.pistonActivate.subscribe((pistonEvent) => {
		    test.assert(pistonEvent.piston !== undefined, "Expected piston");
		    if (pistonEvent.piston.location.equals(test.worldBlockLocation(pistonLoc))) {
		      if (pistonEvent.isExpanding) {
		        expanded = true;
		      } else {
		        retracted = true;
		      }
		    }
		  });
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(redstoneLoc, 2);
		    })
		    .thenExecuteAfter(8, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, planksLoc, true);
		      test.assert(expanded, "Expected piston expanding event");
		      test.assert(retracted, "Expected piston retracting event");
		      world.events.beforePistonActivate.unsubscribe(pistonCallback);
		    })
		    .thenSucceed();
		})
		  .structureName("APITests:piston")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "piston_event_canceled", (test) => {
		  let canceled = false;
		  const redstoneLoc = new BlockLocation(1, 2, 0);
		  const pistonLoc = new BlockLocation(1, 2, 1);
		  const planksLoc = new BlockLocation(2, 2, 1);
		
		  const pistonCallback = world.events.beforePistonActivate.subscribe((pistonEvent) => {
		    test.assert(pistonEvent.piston !== undefined, "Expected piston");
		    if (pistonEvent.piston.location.equals(test.worldBlockLocation(pistonLoc))) {
		      pistonEvent.cancel = true;
		      canceled = true;
		    }
		  });
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(redstoneLoc, 2);
		    })
		    .thenExecuteAfter(8, () => {
		      test.assert(canceled, "Expected canceled beforePistonActivate event");
		      test.assertBlockPresent(MinecraftBlockTypes.planks, planksLoc, true);
		      world.events.beforePistonActivate.unsubscribe(pistonCallback);
		    })
		    .thenSucceed();
		})
		  .structureName("APITests:piston")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "lever_event", async (test) => {
		  const leverLoc = new BlockLocation(1, 2, 1);
		  let leverPower = false;
		
		  const leverCallback = world.events.leverActivate.subscribe((leverEvent) => {
		    let blockLoc = test.relativeBlockLocation(leverEvent.block.location);
		    test.assert(blockLoc.equals(leverLoc), "Expected lever present in leverLoc");
		    test.assert(!leverEvent.player, "Expected player object to be empty");
		    test.assert(leverEvent.dimension === test.getDimension(), "Unexpected dimension");
		    leverPower = leverEvent.isPowered;
		  });
		
		  test.setBlockType(MinecraftBlockTypes.lever, leverLoc);
		  await test.idle(5);
		  test.pullLever(leverLoc);
		  world.events.leverActivate.unsubscribe(leverCallback);
		  test.assert(leverPower, "Expected lever power");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "lever_event_multiple_toggles", async (test) => {
		  const leverLoc = new BlockLocation(1, 2, 1);
		  let leverPower = false;
		
		  const leverCallback = world.events.leverActivate.subscribe((leverEvent) => {
		    let blockLoc = test.relativeBlockLocation(leverEvent.block.location);
		    test.assert(blockLoc.equals(leverLoc), "Expected lever present in leverLoc");
		    test.assert(!leverEvent.player, "Expected player object to be empty");
		    test.assert(leverEvent.dimension === test.getDimension(), "Unexpected dimension");
		    leverPower = leverEvent.isPowered;
		  });
		
		  test.setBlockType(MinecraftBlockTypes.lever, leverLoc);
		  await test.idle(5);
		  test.pullLever(leverLoc);
		  test.assert(leverPower, "Expected lever power");
		  test.pullLever(leverLoc);
		  test.assert(!leverPower, "Expected no lever power");
		  world.events.leverActivate.unsubscribe(leverCallback);
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "lever_event_player", async (test) => {
		  const leverLoc = new BlockLocation(1, 2, 1);
		  let eventPlayer;
		  let testSucceed = false;
		
		  const leverCallback = world.events.leverActivate.subscribe((leverEvent) => {
		    eventPlayer = leverEvent.player;
		    test.assert(eventPlayer == simulatedPlayer, "incorrect player found");
		    let blockLoc = test.relativeBlockLocation(leverEvent.block.location);
		    test.assert(blockLoc.equals(leverLoc), "Expected lever present in leverLoc");
		    test.assert(leverEvent.dimension === test.getDimension(), "Unexpected dimension");
		    test.assert(eventPlayer.name === "Lever_Toggle_Player", "Lever event's player name does not match expected");
		    testSucceed = true;
		  });
		
		  test.setBlockType(MinecraftBlockTypes.lever, leverLoc);
		  const simulatedPlayer = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 1), "Lever_Toggle_Player");
		  await test.idle(5);
		  simulatedPlayer.interactWithBlock(leverLoc);
		  world.events.leverActivate.unsubscribe(leverCallback);
		  test.assert(testSucceed, "An assert failure occured during callback");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "button_event", async (test) => {
		  const buttonLoc = new BlockLocation(1, 2, 1);
		  const buttonPermutation = MinecraftBlockTypes.acaciaButton.createDefaultBlockPermutation();
		  let testSucceed = false;
		
		  buttonPermutation.getProperty(BlockProperties.facingDirection).value = Direction.up;
		
		  const buttonCallback = world.events.buttonPush.subscribe((buttonEvent) => {
		    let blockLoc = test.relativeBlockLocation(buttonEvent.block.location);
		    if (blockLoc.equals(buttonLoc)) {
		      test.assert(buttonEvent.source === undefined, "Script source should be null");
		      test.assert(buttonEvent.dimension === test.getDimension(), "Unexpected dimension");
		      test.assert(!testSucceed, "Callback expected only once");
		      testSucceed = true;
		    }
		  });
		
		  test.setBlockPermutation(buttonPermutation, buttonLoc);
		  test.pressButton(buttonLoc);
		  world.events.buttonPush.unsubscribe(buttonCallback);
		  test.assert(testSucceed, "An assert failure occured during callback");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "button_event_player", async (test) => {
		  const buttonLoc = new BlockLocation(1, 2, 1);
		  const buttonPermutation = MinecraftBlockTypes.acaciaButton.createDefaultBlockPermutation();
		  let testSucceed = false;
		
		  buttonPermutation.getProperty(BlockProperties.facingDirection).value = Direction.up;
		
		  const buttonCallback = world.events.buttonPush.subscribe((buttonEvent) => {
		    let eventPlayer = buttonEvent.source;
		    let blockLoc = test.relativeBlockLocation(buttonEvent.block.location);
		    if (blockLoc.equals(buttonLoc) && eventPlayer == simulatedPlayer) {
		      test.assert(buttonEvent.dimension === test.getDimension(), "Unexpected dimension");
		      test.assert(eventPlayer.name === "Button_Push_Player", "Button event's player name does not match expected");
		      test.assert(buttonEvent.source === eventPlayer, "Button event's source does not match expected");
		      test.assert(!testSucceed, "Callback expected only once");
		      testSucceed = true;
		    }
		  });
		
		  const simulatedPlayer = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 1), "Button_Push_Player");
		  await test.idle(5);
		  test.setBlockPermutation(buttonPermutation, buttonLoc);
		  simulatedPlayer.interactWithBlock(buttonLoc);
		  world.events.buttonPush.unsubscribe(buttonCallback);
		  test.assert(testSucceed, "An assert failure occured during callback");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "button_event_projectile", async (test) => {
		  const buttonLoc = new BlockLocation(1, 2, 1);
		  const buttonPermutation = MinecraftBlockTypes.acaciaButton.createDefaultBlockPermutation();
		  let testSucceed = false;
		  let spawnedArrow;
		
		  buttonPermutation.getProperty(BlockProperties.facingDirection).value = Direction.up;
		
		  const buttonCallback = world.events.buttonPush.subscribe((buttonEvent) => {
		    let blockLoc = test.relativeBlockLocation(buttonEvent.block.location);
		    if (blockLoc.equals(buttonLoc)) {
		      test.assert(buttonEvent.dimension === test.getDimension(), "Unexpected dimension");
		      test.assert(buttonEvent.source === spawnedArrow, "Expected arrow source type");
		      test.assert(!testSucceed, "Callback expected only once");
		      testSucceed = true;
		    }
		  });
		
		  test.setBlockPermutation(buttonPermutation, buttonLoc);
		  spawnedArrow = test.spawnAtLocation("minecraft:arrow", new Location(1.5, 2.5, 1.5));
		  await test.idle(20); //give the arrow time to fall
		  world.events.buttonPush.unsubscribe(buttonCallback);
		  test.assert(testSucceed, "An assert failure occured during callback");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "sneaking", (test) => {
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const pigLoc = new BlockLocation(1, 2, 1);
		  const pig = test.spawn(pigId, pigLoc);
		  pig.isSneaking = true;
		  test
		    .startSequence()
		    .thenExecuteAfter(120, () => {
		      test.assertEntityPresent(pigId, pigLoc, true);
		    })
		    .thenSucceed();
		})
		  .maxTicks(130)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "assert_can_reach_location", (test) => {
		  const villagerId = "minecraft:villager_v2<minecraft:ageable_grow_up>";
		  const villager1 = test.spawn(villagerId, new BlockLocation(1, 2, 1));
		  const villager2 = test.spawn(villagerId, new BlockLocation(1, 2, 3));
		  const villager3 = test.spawn(villagerId, new BlockLocation(1, 2, 5));
		  test.assertCanReachLocation(villager1, new BlockLocation(4, 2, 1), true);
		  test.assertCanReachLocation(villager2, new BlockLocation(4, 2, 3), false);
		  test.assertCanReachLocation(villager3, new BlockLocation(4, 2, 5), false);
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		const isLocationInTest = (test, worldLoc) => {
		  const size = 4;
		  let loc = test.relativeBlockLocation(worldLoc);
		  return loc.x >= 0 && loc.y >= 0 && loc.z >= 0 && loc.x < size && loc.y < size && loc.z < size;
		};
		
		GameTest.register("APITests", "explosion_event", (test) => {
		  let exploded = false;
		  const cobblestoneLoc = new BlockLocation(1, 3, 1);
		  const polishedAndesiteLoc = new BlockLocation(1, 1, 1);
		
		  const beforeExplosionCallback = world.events.beforeExplosion.subscribe((explosionEvent) => {
		    if (!isLocationInTest(test, explosionEvent.impactedBlocks[0])) return;
		    test.assert(explosionEvent.dimension !== undefined, "Expected dimension");
		    test.assert(explosionEvent.source !== undefined, "Expected source");
		    test.assert(explosionEvent.impactedBlocks.length === 10, "Unexpected number of impacted blocks");
		    test.assertBlockPresent(MinecraftBlockTypes.cobblestone, cobblestoneLoc, true);
		    explosionEvent.impactedBlocks = [test.worldBlockLocation(cobblestoneLoc)];
		  });
		
		  const explosionCallback = world.events.explosion.subscribe((explosionEvent) => {
		    test.assert(explosionEvent.dimension !== undefined, "Expected dimension");
		    test.assert(explosionEvent.source !== undefined, "Expected source");
		    test.assert(explosionEvent.impactedBlocks.length === 1, "Unexpected number of impacted blocks");
		    exploded = true;
		  });
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.cobblestone, cobblestoneLoc);
		      test.spawn("tnt", new BlockLocation(1, 2, 1));
		    })
		    .thenExecuteAfter(85, () => {
		      test.assert(exploded, "Expected explosion event");
		      test.assertBlockPresent(MinecraftBlockTypes.stone, polishedAndesiteLoc, true);
		      test.assertBlockPresent(MinecraftBlockTypes.cobblestone, cobblestoneLoc, false);
		      world.events.beforeExplosion.unsubscribe(beforeExplosionCallback);
		      world.events.explosion.unsubscribe(explosionCallback);
		    })
		    .thenSucceed();
		})
		  .padding(10) // The blast can destroy nearby items and mobs
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "explosion_event_canceled", (test) => {
		  let canceled = false;
		  const cobblestoneLoc = new BlockLocation(1, 3, 1);
		
		  const explosionCallback = world.events.beforeExplosion.subscribe((explosionEvent) => {
		    if (!isLocationInTest(test, explosionEvent.impactedBlocks[0])) return;
		    test.assert(explosionEvent.dimension !== undefined, "Expected dimension");
		    test.assert(explosionEvent.source !== undefined, "Expected source");
		    test.assert(explosionEvent.impactedBlocks.length === 10, "Unexpected number of impacted blocks");
		    explosionEvent.cancel = true;
		    canceled = true;
		  });
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.cobblestone, cobblestoneLoc);
		      test.spawn("tnt", new BlockLocation(1, 2, 1));
		    })
		    .thenExecuteAfter(85, () => {
		      test.assert(canceled, "Expected canceled beforeExplosionEvent event");
		      test.assertBlockPresent(MinecraftBlockTypes.cobblestone, cobblestoneLoc, true);
		      world.events.beforeExplosion.unsubscribe(explosionCallback);
		    })
		    .thenSucceed();
		})
		  .padding(10) // The blast can destroy nearby items and mobs
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "explode_block_event", (test) => {
		  let explodedCount = 0;
		  const cobblestoneLoc = new BlockLocation(1, 3, 1);
		
		  const blockExplodeCallback = world.events.blockExplode.subscribe((blockExplodeEvent) => {
		    if (!isLocationInTest(test, blockExplodeEvent.block.location)) return;
		    test.assert(blockExplodeEvent.source !== undefined, "Expected source");
		    explodedCount++;
		  });
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.cobblestone, cobblestoneLoc);
		      test.spawn("tnt", new BlockLocation(1, 2, 1));
		    })
		    .thenExecuteAfter(85, () => {
		      test.assert(explodedCount === 10, "Unexpected number of exploded blocks");
		      world.events.blockExplode.unsubscribe(blockExplodeCallback);
		    })
		    .thenSucceed();
		})
		  .padding(10) // The blast can destroy nearby items and mobs
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "connectivity", (test) => {
		  const centerLoc = new BlockLocation(1, 2, 1);
		
		  let connectivity = test.getFenceConnectivity(centerLoc);
		
		  test.assert(!connectivity.north, "The stair is not oriented the right way to connect");
		  test.assert(connectivity.east, "Should connect to another fence");
		  test.assert(connectivity.south, "Should connect to another fence");
		  test.assert(connectivity.west, "Should connect to the back of the stairs");
		
		  test.succeed();
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "spawn_at_location", (test) => {
		  const spawnLoc = new Location(1.3, 2, 1.3);
		  const chicken = test.spawnAtLocation("chicken", spawnLoc);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      const chickenLoc = chicken.location;
		      const relativeChickenLoc = test.relativeLocation(chickenLoc);
		      test.assert(relativeChickenLoc.isNear(spawnLoc, 0.01), "Unexpected spawn location");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "walk_to_location", (test) => {
		  const spawnLoc = new BlockLocation(1, 2, 1);
		  const chicken = test.spawnWithoutBehaviors("chicken", spawnLoc);
		
		  const targetLoc = new Location(2.2, 2, 3.2);
		  test.walkToLocation(chicken, targetLoc, 1);
		
		  test.succeedWhen(() => {
		    const chickenLoc = chicken.location;
		    const relativeChickenLoc = test.relativeLocation(chickenLoc);
		    // Mobs will stop navigating as soon as they intersect the target location
		    test.assert(relativeChickenLoc.isNear(targetLoc, 0.65), "Chicken did not reach the target location");
		  });
		})
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "walk_to_location_far", (test) => {
		  const targetLoc = new BlockLocation(3, 2, 17);
		  const zombie = test.spawnWithoutBehaviors("minecraft:zombie<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  test.walkTo(zombie, targetLoc);
		  test.succeedWhen(() => {
		    test.assertRedstonePower(targetLoc, 15);
		  });
		})
		  .maxTicks(400)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "spread_from_face_toward_direction", (test) => {
		  const testEx = new GameTestExtensions(test);
		
		  let multifaceLoc = new BlockLocation(1, 4, 0);
		  let spreadLoc = new BlockLocation(1, 3, 0);
		
		  const glowLichenPermutation = MinecraftBlockTypes.glowLichen.createDefaultBlockPermutation();
		  glowLichenPermutation.getProperty(BlockProperties.multiFaceDirectionBits).value =
		    1 << testEx.getMultiFaceDirection(test.getTestDirection());
		  test.setBlockPermutation(glowLichenPermutation, multifaceLoc);
		
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, multifaceLoc, true);
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, spreadLoc, false);
		
		  test.spreadFromFaceTowardDirection(multifaceLoc, test.getTestDirection(), Direction.down);
		  test
		    .startSequence()
		    .thenExecuteAfter(1, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.glowLichen, spreadLoc, true);
		    })
		    .thenSucceed();
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "rotate_direction", (test) => {
		  test.assert(
		    test.rotateDirection(Direction.south) == test.getTestDirection(),
		    "Expected rotated south direction to match test direction"
		  );
		
		  switch (test.getTestDirection()) {
		    case Direction.north:
		      test.assert(
		        test.rotateDirection(Direction.north) === Direction.south,
		        "Unexpected rotated direction for Direction.north with testDirection Direction.north"
		      );
		      test.assert(
		        test.rotateDirection(Direction.east) === Direction.west,
		        "Unexpected rotated direction for Direction.east with testDirection Direction.north"
		      );
		      test.assert(
		        test.rotateDirection(Direction.south) === Direction.north,
		        "Unexpected rotated direction for Direction.south with testDirection Direction.north"
		      );
		      test.assert(
		        test.rotateDirection(Direction.west) === Direction.east,
		        "Unexpected rotated direction for Direction.west with testDirection Direction.north"
		      );
		      break;
		    case Direction.east:
		      test.assert(
		        test.rotateDirection(Direction.north) === Direction.west,
		        "Unexpected rotated direction for Direction.north with testDirection Direction.east"
		      );
		      test.assert(
		        test.rotateDirection(Direction.east) === Direction.north,
		        "Unexpected rotated direction for Direction.east with testDirection Direction.east"
		      );
		      test.assert(
		        test.rotateDirection(Direction.south) === Direction.east,
		        "Unexpected rotated direction for Direction.south with testDirection Direction.east"
		      );
		      test.assert(
		        test.rotateDirection(Direction.west) === Direction.south,
		        "Unexpected rotated direction for Direction.west with testDirection Direction.east"
		      );
		      break;
		    case Direction.south:
		      test.assert(
		        test.rotateDirection(Direction.north) === Direction.north,
		        "Unexpected rotated direction for Direction.north with testDirection Direction.south"
		      );
		      test.assert(
		        test.rotateDirection(Direction.east) === Direction.east,
		        "Unexpected rotated direction for Direction.east with testDirection Direction.south"
		      );
		      test.assert(
		        test.rotateDirection(Direction.south) === Direction.south,
		        "Unexpected rotated direction for Direction.south with testDirection Direction.south"
		      );
		      test.assert(
		        test.rotateDirection(Direction.west) === Direction.west,
		        "Unexpected rotated direction for Direction.west with testDirection Direction.south"
		      );
		      break;
		    case Direction.west:
		      test.assert(
		        test.rotateDirection(Direction.north) === Direction.east,
		        "Unexpected rotated direction for Direction.north with testDirection Direction.west"
		      );
		      test.assert(
		        test.rotateDirection(Direction.east) === Direction.south,
		        "Unexpected rotated direction for Direction.east with testDirection Direction.west"
		      );
		      test.assert(
		        test.rotateDirection(Direction.south) === Direction.west,
		        "Unexpected rotated direction for Direction.south with testDirection Direction.west"
		      );
		      test.assert(
		        test.rotateDirection(Direction.west) === Direction.north,
		        "Unexpected rotated direction for Direction.west with testDirection Direction.west"
		      );
		      break;
		    default:
		      test.assert(false, "Invalid test direction");
		  }
		
		  const buttonLoc = new BlockLocation(1, 2, 1);
		  const buttonPermutation = MinecraftBlockTypes.stoneButton.createDefaultBlockPermutation();
		  buttonPermutation.getProperty(BlockProperties.facingDirection).value = test.rotateDirection(Direction.north);
		  test.setBlockPermutation(buttonPermutation, buttonLoc);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(2, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stoneButton, buttonLoc, true);
		    })
		    .thenSucceed();
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		function isNear(a, b, epsilon = 0.001) {
		  return Math.abs(a - b) < epsilon;
		}
		
		function isNearVec(a, b, epsilon = 0.001) {
		  return Vector.distance(a, b) < epsilon;
		}
		
		GameTest.register("APITests", "cauldron", (test) => {
		  const loc = new BlockLocation(0, 1, 0);
		  var block = test.getBlock(loc);
		
		  test.setFluidContainer(loc, FluidType.water);
		  test.assert(block.getComponent("waterContainer") != null, "This is a water container");
		  test.assert(
		    block.getComponent("lavaContainer") == null,
		    "A water container should not have a lavaContainer component"
		  );
		  test.assert(
		    block.getComponent("snowContainer") == null,
		    "A water container should not have a snowContainer component"
		  );
		  test.assert(
		    block.getComponent("potionContainer") == null,
		    "A water container should not have a potionContainer component"
		  );
		
		  block.getComponent("waterContainer").fillLevel = FluidContainer.maxFillLevel;
		  test.assert(
		    block.getComponent("waterContainer").fillLevel == FluidContainer.maxFillLevel,
		    "The fill level should match with what it was set to"
		  );
		
		  block.getComponent("waterContainer").customColor = new Color(1, 0, 0, 1);
		  test.assert(block.getComponent("waterContainer").customColor.red == 1, "red component should be set");
		  test.assert(block.getComponent("waterContainer").customColor.green == 0, "green component should be set");
		  test.assert(block.getComponent("waterContainer").customColor.blue == 0, "blue component should be set");
		
		  block.getComponent("waterContainer").addDye(MinecraftItemTypes.blueDye);
		  test.assert(isNear(block.getComponent("waterContainer").customColor.red, 0.616), "red component should be set");
		  test.assert(isNear(block.getComponent("waterContainer").customColor.green, 0.133), "green component should be set");
		  test.assert(isNear(block.getComponent("waterContainer").customColor.blue, 0.333), "blue component should be set");
		
		  test.setFluidContainer(loc, FluidType.lava);
		  test.assert(
		    block.getComponent("waterContainer") == null,
		    "A lava container should not have a waterContainer component"
		  );
		  test.assert(block.getComponent("lavaContainer") != null, "This is a lava component");
		  test.assert(
		    block.getComponent("snowContainer") == null,
		    "A lava container should not have a snowContainer component"
		  );
		  test.assert(
		    block.getComponent("potionContainer") == null,
		    "A lava container should not have a potionContainer component"
		  );
		
		  test.setFluidContainer(loc, FluidType.powderSnow);
		  test.assert(
		    block.getComponent("waterContainer") == null,
		    "A snow container should not have a waterContainer component"
		  );
		  test.assert(
		    block.getComponent("lavaContainer") == null,
		    "A snow container should not have a lavaContainer component"
		  );
		  test.assert(block.getComponent("snowContainer") != null, "This is a snow container");
		  test.assert(
		    block.getComponent("potionContainer") == null,
		    "A snow container should not have a potionContainer component"
		  );
		
		  test.setFluidContainer(loc, FluidType.potion);
		  test.assert(
		    block.getComponent("snowContainer") == null,
		    "A potion container should not have a waterContainer component"
		  );
		  test.assert(
		    block.getComponent("lavaContainer") == null,
		    "A potion container should not have a lavaContainer component"
		  );
		  test.assert(
		    block.getComponent("snowContainer") == null,
		    "A potion container should not have a snowContainer component"
		  );
		  test.assert(block.getComponent("potionContainer") != null, "This is a potion container");
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		// test for bug: 678331
		GameTest.register("APITests", "cauldron_nocrash", (test) => {
		  const loc = new BlockLocation(0, 1, 0);
		  var block = test.getBlock(loc);
		
		  test.setBlockType(MinecraftBlockTypes.air, loc);
		  test.setBlockType(MinecraftBlockTypes.cauldron, loc);
		  test.setFluidContainer(loc, FluidType.potion);
		
		  let cauldron = block.getComponent("potionContainer");
		  cauldron.fillLevel = 2;
		
		  const poisonPotion = new ItemStack(MinecraftItemTypes.splashPotion, 1, 32);
		  cauldron.setPotionType(poisonPotion); //this line crashes the title
		
		  test.succeed();
		})
		  .structureName("APITests:cauldron")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "jukebox", (test) => {
		  var jukeboxBlock = test.getBlock(new BlockLocation(0, 1, 0));
		  var musicPlayerComp = jukeboxBlock.getComponent("recordPlayer");
		
		  try {
		    musicPlayerComp.setRecord(MinecraftItemTypes.apple);
		    test.fail("An exception should be thrown when playing an item that is not a music disk");
		  } catch (e) {}
		
		  test.assert(musicPlayerComp.isPlaying() === false, "Should be stopped");
		  musicPlayerComp.setRecord(MinecraftItemTypes.musicDiscMellohi);
		  test.assert(musicPlayerComp.isPlaying() === true, "Should be playing");
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => {
		      test.assert(musicPlayerComp.isPlaying() === true, "Disk should not be finished yet");
		      musicPlayerComp.clearRecord();
		      test.assert(musicPlayerComp.isPlaying() === false, "Disk should be stopped now");
		    })
		    .thenSucceed();
		})
		  .maxTicks(25)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "maybe_fill_cauldron", (test) => {
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.triggerInternalBlockEvent(new BlockLocation(1, 3, 1), "minecraft:drip");
		      test.triggerInternalBlockEvent(new BlockLocation(3, 3, 1), "minecraft:drip");
		    })
		    .thenIdle(61)
		    .thenExecute(() => {
		      var waterCauldron = test.getBlock(new BlockLocation(3, 2, 1));
		      var lavaCauldron = test.getBlock(new BlockLocation(1, 2, 1));
		      test.assert(
		        waterCauldron.getComponent("waterContainer").fillLevel == 2,
		        "Expected water to be at level 2, but got " + waterCauldron.getComponent("waterContainer").fillLevel
		      );
		      test.assert(
		        lavaCauldron.getComponent("lavaContainer").fillLevel == FluidContainer.maxFillLevel,
		        "Expected lava to be full, but got a fill level of " + lavaCauldron.getComponent("lavaContainer").fillLevel
		      );
		    })
		    .thenSucceed();
		})
		  .setupTicks(30) // time it takes lava to flow.
		  .maxTicks(100)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "grow_pointed_dripstone", (test) => {
		  test.triggerInternalBlockEvent(new BlockLocation(1, 5, 1), "grow_stalagtite");
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 4, 1), true);
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 2, 1), false);
		
		  test.triggerInternalBlockEvent(new BlockLocation(1, 5, 1), "grow_stalagmite");
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 4, 1), true);
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 2, 1), true);
		
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 3, 1), false);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "vines", (test) => {
		  const testEx = new GameTestExtensions(test);
		
		  const allBitmask = 15;
		  const northBitmask = 1 << testEx.getVineDirection(test.rotateDirection(Direction.north));
		  const eastBitmask = 1 << testEx.getVineDirection(test.rotateDirection(Direction.east));
		  const southBitmask = 1 << testEx.getVineDirection(test.rotateDirection(Direction.south));
		  const westBitmask = 1 << testEx.getVineDirection(test.rotateDirection(Direction.west));
		
		  test.triggerInternalBlockEvent(new BlockLocation(1, 4, 2), "grow_down", [southBitmask | northBitmask]);
		  testEx.assertBlockProperty(
		    BlockProperties.vineDirectionBits,
		    southBitmask | northBitmask,
		    new BlockLocation(1, 3, 2)
		  );
		
		  test.triggerInternalBlockEvent(new BlockLocation(1, 4, 2), "grow_up", [allBitmask]);
		  testEx.assertBlockProperty(BlockProperties.vineDirectionBits, southBitmask | eastBitmask, new BlockLocation(1, 5, 2));
		
		  test.triggerInternalBlockEvent(new BlockLocation(7, 2, 1), "grow_sideways", [
		    testEx.getVineDirection(test.rotateDirection(Direction.west)),
		  ]);
		  testEx.assertBlockProperty(BlockProperties.vineDirectionBits, southBitmask, new BlockLocation(6, 2, 1));
		
		  test.triggerInternalBlockEvent(new BlockLocation(6, 2, 1), "grow_sideways", [
		    testEx.getVineDirection(test.rotateDirection(Direction.west)),
		  ]);
		  testEx.assertBlockProperty(BlockProperties.vineDirectionBits, southBitmask | westBitmask, new BlockLocation(6, 2, 1));
		
		  test.triggerInternalBlockEvent(new BlockLocation(7, 2, 1), "grow_sideways", [
		    testEx.getVineDirection(test.rotateDirection(Direction.east)),
		  ]);
		  testEx.assertBlockProperty(BlockProperties.vineDirectionBits, westBitmask, new BlockLocation(8, 2, 2));
		
		  test.succeed();
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "tags", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "tag_player");
		  const dimension = test.getDimension();
		
		  test
		    .startSequence()
		    .thenExecuteAfter(2, () => {
		      dimension.runCommand("tag @p[name=tag_player] add test_tag_1");
		      test.assert(player.hasTag("test_tag_1"), "Expected tag test_tag_1");
		      test.assert(!player.hasTag("test_tag_2"), "Did not expect tag test_tag_2");
		      test.assert(player.removeTag("test_tag_1"), "Expected successful tag removal");
		      test.assert(!player.removeTag("test_tag_1"), "Expected failed tag removal");
		      test.assert(!player.hasTag("test_tag_1"), "Did not expect tag test_tag_1");
		      player.addTag("test_tag_2");
		      test.assert(player.hasTag("test_tag_2"), "Expected tag test_tag_2");
		      let tags = player.getTags();
		      test.assert(tags.length === 1 && tags[0] === "test_tag_2", "Unexpected tags value");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		//AI tests
		GameTest.register("APITests", "cant_set_target", async (test) => {
		    const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		    let wolf = test.spawn("minecraft:wolf<minecraft:ageable_grow_up>", new BlockLocation(2, 2, 1));
		
		    await test.idle(10);
		    try {
		        wolf.target = player;
		        test.fail("Target should be a read-only property");
		    }
		    catch (e) {
		        test.succeed();
		    }
		
		    wolf.kill();
		
		})
		    .structureName("ComponentTests:platform")
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "can_get_null_target", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  let wolf = test.spawn("minecraft:wolf<minecraft:ageable_grow_up>", new BlockLocation(2, 2, 1));
		
		  const target = wolf.target;
		  if (target) {
		    test.fail("Expected wolf to not have a target");
		  }
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		//Entity Teleport Tests
		GameTest.register("APITests", "teleport_mob", async (test) => {
		  let sheepSpawn = new BlockLocation(0, 2, 0);
		  let teleportBlockLoc = new BlockLocation(2, 2, 2);
		  let sheep = test.spawn("minecraft:sheep", sheepSpawn);
		  let teleportLoc = new Location(2, 2, 2);
		  let teleportWorldLoc = test.worldLocation(teleportLoc);
		
		  await test.idle(10);
		  sheep.teleport(teleportWorldLoc, sheep.dimension, 0.0, 0.0);
		  test.assertEntityPresent("minecraft:sheep", teleportBlockLoc, true);
		  sheep.kill();
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "teleport_mob_facing", async (test) => {
		  let playerSpawn = new BlockLocation(0, 2, 0);
		  let player = test.spawnSimulatedPlayer(playerSpawn, "simulatedPlayer");
		  let teleportLoc = new Location(2, 2, 2);
		  let teleportBlockLoc = new BlockLocation(2, 2, 2);
		  let teleportWorldLoc = test.worldLocation(teleportLoc);
		
		  let facingLoc = new Location(2, 3, 0);
		  let facingBlockLoc = new BlockLocation(2, 3, 0);
		  let facingWorldLoc = test.worldLocation(facingLoc);
		
		  test.setBlockType(MinecraftBlockTypes.diamondBlock, facingBlockLoc);
		  const diamondBlock = test.getBlock(facingBlockLoc);
		  let facingBlock;
		
		  await test.idle(10);
		  player.teleportFacing(teleportWorldLoc, player.dimension, facingWorldLoc);
		  await test.idle(20);
		  facingBlock = player.getBlockFromViewVector();
		  test.assert(
		    facingBlock.type === diamondBlock.type,
		    "expected mob to face diamond block but instead got " + facingBlock.type.id
		  );
		  test.assertEntityPresent("minecraft:player", teleportBlockLoc, true);
		  player.kill();
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "view_vector", (test) => {
		  const spawnLoc = new BlockLocation(1, 2, 1);
		  const playerName = "Test Player";
		  const player = test.spawnSimulatedPlayer(spawnLoc, playerName);
		
		  player.lookAtBlock(new BlockLocation(0, 3, 1));
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      test.assert(
		        isNear(player.viewVector.x, -0.99, 0.01),
		        "Expected x component to be -0.99, but got " + player.viewVector.x
		      );
		      test.assert(
		        isNear(player.viewVector.y, -0.12, 0.01),
		        "Expected y component to be -0.12, but got " + player.viewVector.y
		      );
		      test.assert(isNear(player.viewVector.z, 0, 0.01), "Expected z component to be 0, but got " + player.viewVector.z);
		      test.assert(player.rotation.y == 90, "Expected body rotation to be 90, but got " + player.rotation.y);
		      player.lookAtBlock(new BlockLocation(2, 3, 0));
		    })
		    .thenExecuteAfter(10, () => {
		      test.assert(
		        isNear(player.viewVector.x, 0.7, 0.01),
		        "Expected x component to be .70, but got " + player.viewVector.x
		      );
		      test.assert(
		        isNear(player.viewVector.y, -0.08, 0.01),
		        "Expected y component to be -0.08, but got " + player.viewVector.y
		      );
		      test.assert(
		        isNear(player.viewVector.z, -0.7, 0.01),
		        "Expected z component to be -0.70, but got " + player.viewVector.z
		      );
		      test.assert(player.rotation.y == -135, "Expected body rotation to be -135, but got " + player.rotation.y);
		      player.lookAtBlock(new BlockLocation(1, 5, 1));
		    })
		    .thenExecuteAfter(10, () => {
		      test.assert(isNear(player.viewVector.x, 0, 0.01), "Expected x component to be 0, but got " + player.viewVector.x);
		      test.assert(isNear(player.viewVector.y, 1, 0.01), "Expected y component to be 1, but got " + player.viewVector.y);
		      test.assert(isNear(player.viewVector.z, 0, 0.01), "Expected z component to be 0, but got " + player.viewVector.z);
		      test.assert(player.rotation.y == -135, "Expected body rotation to be -135, but got " + player.rotation.y);
		
		      const head = test.relativeLocation(player.headLocation);
		      test.assert(isNear(head.x, 1.5, 0.01), "Expected x component to be 1.5, but got " + head.x);
		      test.assert(isNear(head.y, 3.52, 0.01), "Expected y component to be 3.52, but got " + head.y);
		      test.assert(isNear(head.z, 1.5, 0.01), "Expected z component to be 1.5, but got " + head.z);
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "set_velocity", (test) => {
		  const zombie = test.spawnWithoutBehaviors("minecraft:zombie<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  test
		    .startSequence()
		    .thenExecuteFor(30, () => {
		      zombie.setVelocity(new Vector(0, 0.1, 0));
		    })
		    .thenExecute(() => {
		      const zombieLoc = test.relativeLocation(zombie.location);
		      const expectedLoc = new Location(1.5, 5.0, 1.5);
		
		      test.assert(zombieLoc.isNear(expectedLoc, 0.01), "Expected zombie to levitate to specific place.");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "lore", (test) => {
		  let itemStack = new ItemStack(MinecraftItemTypes.diamondSword);
		  itemStack.setLore(["test lore 0", "test lore 1", "test lore 2"]);
		  let lore = itemStack.getLore();
		  test.assert(lore.length === 3, "Expected 3 lore lines, but got " + lore.length);
		  test.assert(lore[0] === "test lore 0", "Expected lore line 0 to be 'test lore 0', but got " + lore[0]);
		  test.assert(lore[1] === "test lore 1", "Expected lore line 1 to be 'test lore 1', but got " + lore[1]);
		  test.assert(lore[2] === "test lore 2", "Expected lore line 2 to be 'test lore 2', but got " + lore[2]);
		
		  const chestCart = test.spawn("chest_minecart", new BlockLocation(1, 3, 1));
		  const inventoryComp = chestCart.getComponent("inventory");
		  inventoryComp.container.addItem(itemStack);
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "data_driven_actor_event", async (test) => {
		  let globalBeforeTriggerSuccess = false;
		  let entityEventFilteredBeforeTriggerSuccess = false;
		  let globalTriggerSuccess = false;
		  let entityEventFilteredTriggerSuccess = false;
		
		  //Global Trigger
		  let globalBeforeTrigger = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((event) => {
		    if (event.entity.id == "minecraft:llama" && event.id == "minecraft:entity_spawned") {
		      globalBeforeTriggerSuccess = true;
		    }
		
		    //Force the llama to spawn as a baby
		    if (
		      event.modifiers.length > 0 &&
		      event.modifiers[0].triggers.length > 0 &&
		      event.modifiers[0].triggers[0].eventName == "minecraft:spawn_adult"
		    ) {
		      event.modifiers[0].triggers[0].eventName = "minecraft:spawn_baby";
		    }
		  });
		
		  let globalTrigger = world.events.dataDrivenEntityTriggerEvent.subscribe((event) => {
		    if (event.entity.id == "minecraft:llama" && event.id == "minecraft:entity_spawned") {
		      if (!globalBeforeTriggerSuccess) test.fail("globalBeforeTrigger didn't fire for the entity_spawned event!");
		      globalTriggerSuccess = true;
		    }
		  });
		
		  //Trigger filtered by entity type and event type
		  let entityEventFilterOptions = new EntityDataDrivenTriggerEventOptions();
		  entityEventFilterOptions.entityTypes.push("minecraft:llama");
		  entityEventFilterOptions.eventTypes.push("minecraft:entity_spawned");
		
		  let entityEventBeforeFilterTrigger = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((event) => {
		    entityEventFilteredBeforeTriggerSuccess = true;
		  }, entityEventFilterOptions);
		
		  let entityEventFilterTrigger = world.events.dataDrivenEntityTriggerEvent.subscribe((event) => {
		    if (!entityEventFilteredBeforeTriggerSuccess)
		      test.fail("actorEventBeforeFilterTrigger didn't fire for the entity_spawned event!");
		    entityEventFilteredTriggerSuccess = true;
		  }, entityEventFilterOptions);
		
		  const llama = test.spawn("minecraft:llama", new BlockLocation(1, 2, 1));
		  const villager = test.spawn("minecraft:villager_v2", new BlockLocation(1, 2, 1));
		
		  world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(globalBeforeTrigger);
		  world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(entityEventBeforeFilterTrigger);
		  world.events.dataDrivenEntityTriggerEvent.unsubscribe(globalTrigger);
		  world.events.dataDrivenEntityTriggerEvent.unsubscribe(entityEventFilterTrigger);
		
		  let specificEntityBeforeTriggerSuccess = false;
		
		  //Event bound to a specific entity
		  let specificEntityFilterOptions = new EntityDataDrivenTriggerEventOptions();
		  specificEntityFilterOptions.entities.push(llama);
		  specificEntityFilterOptions.eventTypes.push("minecraft:ageable_grow_up");
		
		  let specificEntityEventBeforeTrigger = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((event) => {
		    event.cancel = true;
		    specificEntityBeforeTriggerSuccess = true;
		  }, specificEntityFilterOptions);
		
		  //Event bound to both entities, but only fire on villager to show that multi-filters work
		  let allEntityFilterOptions = new EntityDataDrivenTriggerEventOptions();
		  allEntityFilterOptions.entities.push(llama);
		  allEntityFilterOptions.entities.push(villager);
		  allEntityFilterOptions.entityTypes.push("minecraft:villager_v2");
		  allEntityFilterOptions.eventTypes.push("minecraft:ageable_grow_up");
		
		  let allEntitiesTriggerCount = 0;
		
		  let allEntitiesEventBeforeTrigger = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((event) => {
		    allEntitiesTriggerCount += 1;
		  }, allEntityFilterOptions);
		  llama.triggerEvent("minecraft:ageable_grow_up");
		  villager.triggerEvent("minecraft:ageable_grow_up");
		
		  world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(specificEntityEventBeforeTrigger);
		  world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(allEntitiesEventBeforeTrigger);
		
		  if (!globalBeforeTriggerSuccess) test.fail("Global beforeDataDrivenEntityTriggerEvent didn't fire!");
		  if (!entityEventFilteredBeforeTriggerSuccess)
		    test.fail("Filtered entity/event beforeDataDrivenEntityTriggerEvent didn't fire!");
		  if (!globalTriggerSuccess) test.fail("Global dataDrivenEntityTriggerEvent didn't fire!");
		  if (!entityEventFilteredTriggerSuccess) test.fail("Filtered entity/event dataDrivenEntityTriggerEvent didn't fire!");
		  if (!specificEntityBeforeTriggerSuccess) test.fail("Specific entity beforeDataDrivenEntityTriggerEvent didn't fire!");
		  if (allEntitiesTriggerCount != 1)
		    test.fail("All filters beforeDataDrivenEntityTriggerEvent didn't fire exactly one time!");
		
		  await test.idle(10);
		  if (llama.getComponent("minecraft:is_baby") == null)
		    test.fail("Llama was able to grow up! The beforeDataDrivenEntityTriggerEvent should prevent this!");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "property_components", async (test) => {
		  // The following components aren't present in this test since either there aren't mobs that use that component
		  //  or it is difficult to get them into the correct state.
		  // skin_id, push_through, ground_offset, friction_modifier, floats_in_liquid, wants_jockey, is_shaking
		
		  let testComponent = (entity, compName, expectedValue, canSet) => {
		    let comp = entity.getComponent("minecraft:" + compName);
		    test.assert(comp != null, "Entity did not have expected component " + compName);
		    if (expectedValue !== undefined) {
		      let v = comp.value;
		      let pass = false;
		      if (typeof v === "number") {
		        pass = Math.abs(expectedValue - v) <= 0.001;
		      } else {
		        pass = v == expectedValue;
		      }
		      test.assert(pass, `Component ${compName} didn't have expected value! Found ${v}, expected ${expectedValue}`);
		
		      if (canSet === undefined || canSet === true) {
		        comp.value = v;
		      }
		    }
		  };
		
		  const zombie = test.spawn("minecraft:zombie<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  testComponent(zombie, "can_climb");
		
		  const bee = test.spawn("bee", new BlockLocation(1, 2, 1));
		  testComponent(bee, "can_fly");
		  testComponent(bee, "flying_speed", 0.15);
		  testComponent(bee, "is_hidden_when_invisible");
		
		  bee.triggerEvent("collected_nectar");
		  await test.idle(1);
		  testComponent(bee, "is_charged");
		
		  const magma_cube = test.spawn("magma_cube", new BlockLocation(1, 2, 1));
		  testComponent(magma_cube, "fire_immune");
		
		  const horse = test.spawn("horse", new BlockLocation(1, 2, 1));
		  horse.triggerEvent("minecraft:horse_saddled");
		  await test.idle(1);
		  testComponent(horse, "is_saddled");
		  testComponent(horse, "can_power_jump");
		
		  let forceSpawnBaby = world.events.beforeDataDrivenEntityTriggerEvent.subscribe((event) => {
		    //Force the llama to spawn as a baby
		    if (
		      event.modifiers.length > 0 &&
		      event.modifiers[0].triggers.length > 0 &&
		      event.modifiers[0].triggers[0].eventName == "minecraft:spawn_adult"
		    ) {
		      event.modifiers[0].triggers[0].eventName = "minecraft:spawn_baby";
		    }
		  });
		
		  const llama = test.spawn("llama", new BlockLocation(1, 2, 1));
		  testComponent(llama, "is_baby");
		  testComponent(llama, "scale", 0.5);
		
		  world.events.beforeDataDrivenEntityTriggerEvent.unsubscribe(forceSpawnBaby);
		
		  llama.triggerEvent("minecraft:ageable_grow_up");
		  llama.triggerEvent("minecraft:on_tame");
		  llama.triggerEvent("minecraft:on_chest");
		  await test.idle(1);
		  testComponent(llama, "is_tamed");
		  testComponent(llama, "is_chested");
		  testComponent(llama, "mark_variant", 0);
		
		  const pillager = test.spawn("pillager", new BlockLocation(1, 2, 1));
		  pillager.triggerEvent("minecraft:spawn_as_illager_captain");
		  await test.idle(1);
		  testComponent(pillager, "is_illager_captain");
		
		  const ravager = test.spawn("ravager", new BlockLocation(1, 2, 1));
		  ravager.triggerEvent("minecraft:become_stunned");
		  await test.idle(1);
		  testComponent(ravager, "is_stunned");
		
		  const sheep = test.spawn("sheep", new BlockLocation(1, 2, 1));
		  sheep.triggerEvent("wololo");
		  sheep.triggerEvent("minecraft:on_sheared");
		  await test.idle(1);
		  testComponent(sheep, "is_sheared");
		  await test.idle(1);
		  testComponent(sheep, "color", 14);
		
		  const cat = test.spawn("cat", new BlockLocation(1, 2, 1));
		  cat.triggerEvent("minecraft:spawn_midnight_cat");
		  await test.idle(1);
		  testComponent(cat, "variant", 9, false);
		
		  const tnt = test.spawn("tnt_minecart", new BlockLocation(1, 2, 1));
		  tnt.triggerEvent("minecraft:on_prime");
		  await test.idle(1);
		  testComponent(tnt, "is_ignited");
		  testComponent(tnt, "is_stackable");
		  tnt.kill();
		
		  test.succeed();
		})
		  .structureName("ComponentTests:large_glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "entity_hit_event_hits_entity", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		
		  let hitCallback = world.events.entityHit.subscribe((e) => {
		    if (e.entity === player) {
		      test.assert(e.hitEntity === cow, "Expected target to be cow, but got " + e.hitEntity);
		      test.assert(e.hitBlock === undefined, "Expected no hit block, but got " + e.hitBlock?.id);
		      world.events.entityHit.unsubscribe(hitCallback);
		      test.succeed();
		    }
		  });
		  await test.idle(5);
		  player.attackEntity(cow);
		})
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "entity_hit_event_hits_block", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const blockLoc = new BlockLocation(1, 2, 1);
		  test.setBlockType(MinecraftBlockTypes.diamondBlock, blockLoc);
		
		  let hitCallback = world.events.entityHit.subscribe((e) => {
		    if (e.entity === player) {
		      test.assert(e.hitEntity === undefined, "Expected no hit entity, but got " + e.target);
		      test.assert(e.hitBlock?.id === "minecraft:diamond_block", "Expected no hit block, but got " + e.hitBlock?.id);
		      world.events.entityHit.unsubscribe(hitCallback);
		      test.succeed();
		    }
		  });
		  await test.idle(5);
		  player.breakBlock(blockLoc);
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "entity_hurt_event_skeleton_hurts_player", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const skeleton = test.spawn("skeleton", new BlockLocation(3, 2, 3));
		
		  let hurtCallback = world.events.entityHurt.subscribe((e) => {
		    if (e.hurtEntity === player) {
		      test.assert(
		        e.damagingEntity === skeleton,
		        "Expected damagingEntity to be skeleton but got " + e.damagingEntity.id
		      );
		      test.assert(e.cause === EntityDamageCause.projectile, "Expected cause to be entity_attack but got " + e.cause);
		      test.assert(e.projectile.id === "minecraft:arrow", "Expected projectile to be arrow but got " + e.cause);
		      test.assert(e.damage > 0, "Expected damage to be greater than 0, but got " + e.damage);
		      world.events.entityHurt.unsubscribe(hurtCallback);
		      test.succeed();
		    }
		  });
		})
		  .structureName("ComponentTests:large_glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "entity_hurt_event_player_hurts_cow", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		
		  let hurtCallback = world.events.entityHurt.subscribe((e) => {
		    if (e.hurtEntity === cow) {
		      test.assert(e.cause === EntityDamageCause.entityAttack, "Expected cause to be entity_attack but got " + e.cause);
		      test.assert(e.damage === 1, "Expected damage to be 1, but got " + e.damage);
		      world.events.entityHurt.unsubscribe(hurtCallback);
		      test.succeed();
		    }
		  });
		  await test.idle(5);
		  player.attackEntity(cow);
		})
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "entity_hurt_event_player_kills_chicken", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const chicken = test.spawn("minecraft:chicken<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		
		  let maxHealth = chicken.getComponent("minecraft:health").current;
		  let expectedHealth = maxHealth;
		  let hurtCallback = world.events.entityHurt.subscribe((e) => {
		    if (e.hurtEntity === chicken) {
		      test.assert(e.cause === EntityDamageCause.entityAttack, "Expected cause to be entity_attack but got " + e.cause);
		      test.assert(e.damage === 1, "Expected damage to be 1, but got " + e.damage);
		      let health = e.hurtEntity.getComponent("minecraft:health").current;
		      --expectedHealth;
		      test.assert(health === expectedHealth, "Expected health to be " + expectedHealth + " but got " + health);
		      if (expectedHealth === 0) {
		        world.events.entityHurt.unsubscribe(hurtCallback);
		        test.succeed();
		      }
		    }
		  });
		
		  for (let i = 0; i < maxHealth; i++) {
		    await test.idle(20);
		    player.attackEntity(chicken);
		  }
		})
		  .maxTicks(100)
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "projectile_hit_event_block", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const targetLoc = new BlockLocation(1, 3, 7);
		
		  let projectileHitCallback = world.events.projectileHit.subscribe((e) => {
		    if (e.blockHit && test.relativeBlockLocation(e.blockHit.block.location).equals(targetLoc)) {
		      world.events.projectileHit.unsubscribe(projectileHitCallback);
		      try {
		        test.assert(e.dimension === test.getDimension(), "Unexpected dimension");
		        test.assert(e.entityHit === undefined, "Expected no entity hit");
		        test.assert(
		          e.projectile?.id === "minecraft:arrow",
		          "Expected projectile to be arrow, but got " + e.projectile?.id
		        );
		        test.assert(e.source?.id === "minecraft:player", "Expected source to be player, but got " + e.source?.id);
		        test.assert(
		          isNearVec(e.hitVector, test.rotateVector(Vector.forward), 0.1),
		          `Expected e.hitVector to be forward, but got [${e.hitVector.x}, ${e.hitVector.y}, ${e.hitVector.z}]`
		        );
		        test.assert(
		          e.blockHit.block?.id === "minecraft:target",
		          "Expected block to be target, but got " + e.blockHit.block?.id
		        );
		        test.assert(e.blockHit.face == test.rotateDirection(Direction.north), "Expected north block face");
		        test.assert(
		          isNear(e.blockHit.faceLocationX, 0, 5, 0.1),
		          "Expected faceLocationX to be near center, but got " + e.blockHit.faceLocationX
		        );
		        test.assert(
		          isNear(e.blockHit.faceLocationY, 0.5, 0.2),
		          "Expected faceLocationY to be near center, but got " + e.blockHit.faceLocationY
		        );
		        test.succeed();
		      } catch (ex) {
		        test.fail(ex);
		      }
		    }
		  });
		
		  await test.idle(5);
		  player.giveItem(new ItemStack(MinecraftItemTypes.bow, 1), false);
		  player.giveItem(new ItemStack(MinecraftItemTypes.arrow, 64), false);
		  await test.idle(5);
		  player.useItemInSlot(0);
		  await test.idle(50);
		  player.stopUsingItem();
		})
		  .structureName("SimulatedPlayerTests:target_practice")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "projectile_hit_event_entity", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const blaze = test.spawn("blaze", new BlockLocation(1, 2, 3));
		
		  let projectileHitCallback = world.events.projectileHit.subscribe((e) => {
		    if (e.entityHit && e.entityHit.entity === blaze) {
		      world.events.projectileHit.unsubscribe(projectileHitCallback);
		      test.assert(e.blockHit === undefined, "Expected no block hit");
		      test.assert(e.dimension === test.getDimension(), "Unexpected dimension");
		      test.assert(
		        e.projectile?.id === "minecraft:snowball",
		        "Expected projectile to be snowball, but got " + e.projectile?.id
		      );
		      test.assert(e.source?.id === "minecraft:player", "Expected source to be player, but got " + e.source?.id);
		      test.assert(
		        isNearVec(e.hitVector, test.rotateVector(Vector.forward)),
		        `Expected e.hitVector to be forward, but got [${e.hitVector.x}, ${e.hitVector.y}, ${e.hitVector.z}]`
		      );
		      test.assert(
		        e.entityHit.entity?.id === "minecraft:blaze",
		        "Expected entity to be blaze, but got " + e.entityHit.entity?.id
		      );
		      test.succeed();
		    }
		  });
		
		  await test.idle(5);
		  player.useItem(new ItemStack(MinecraftItemTypes.snowball));
		})
		  .structureName("SimulatedPlayerTests:use_item")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("APITests", "rotate_entity", async (test) => {
		  const rotate360 = async (entity) => {
		    for (let i = 0; i < 360; i += 10) {
		      await test.idle(1);
		      entity.setRotation(i, i);
		      let rotX = entity.rotation.x;
		      let rotY = entity.rotation.y;
		      if (rotX < 0) {
		        rotX += 360;
		      }
		      if (rotY < 0) {
		        rotY += 360;
		      }
		      test.assert(rotX === i, `Expected rotX to be ${i} but got ${rotX}`);
		      test.assert(rotY === i, `Expected rotY to be ${i} but got ${rotY}`);
		    }
		  };
		
		  const spawnLoc = new BlockLocation(1, 2, 1);
		  const cow = test.spawnWithoutBehaviors("minecraft:cow<minecraft:ageable_grow_up>", spawnLoc);
		  await rotate360(cow);
		  cow.kill();
		  const armorStand = test.spawn("armor_stand", spawnLoc);
		  await rotate360(armorStand);
		  armorStand.kill();
		  const player = test.spawnSimulatedPlayer(spawnLoc);
		  await rotate360(player);
		  test.succeed();
		})
		  .maxTicks(400)
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("APITests", "teleport_keep_velocity", (test) => {
		  const arrow = test.spawn("arrow", new BlockLocation(2, 4, 1));
		  // The arrow should fall 1 block before hitting the target
		  arrow.setVelocity(test.rotateVector(new Vector(0, 0, 1.2)));
		  let relativeLoc = test.relativeLocation(arrow.location);
		  relativeLoc.x -= 1;
		  let teleportLoc = test.worldLocation(relativeLoc);
		  arrow.teleport(teleportLoc, arrow.dimension, 0, 0, true);
		  let velocity = arrow.velocity.length();
		  test.assert(velocity > 0.5, "Expected velocity to be greater than 0.5, but got " + velocity);
		  test.succeed();
		})
		  .structureName("SimulatedPlayerTests:target_practice")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync(`APITests`, `teleport_keep_velocity_mob`, async (test) => {
		  let pig1 = test.spawn(`minecraft:pig<minecraft:ageable_grow_up>`, new BlockLocation(0, 10, 0));
		  let pig2 = test.spawn(`minecraft:pig<minecraft:ageable_grow_up>`, new BlockLocation(0, 10, 2));
		  let simPlayer1 = test.spawnSimulatedPlayer(new BlockLocation(2, 10, 0));
		  let simPlayer2 = test.spawnSimulatedPlayer(new BlockLocation(2, 10, 2));
		
		  await test.idle(2);
		  const velocity = new Vector(0, 5, 0);
		  pig1.setVelocity(velocity);
		  pig2.setVelocity(velocity);
		  simPlayer1.setVelocity(velocity);
		  simPlayer2.setVelocity(velocity);
		
		  await test.idle(20);
		  pig1.teleport(test.worldLocation(new Location(0.5, 2, 0.5)), world.getDimension(`overworld`), 0, 0, false); // don't keep velocity
		  pig2.teleport(test.worldLocation(new Location(0.5, 3, 2.5)), world.getDimension(`overworld`), 0, 0, true); // keep velocity
		
		  simPlayer1.teleport(test.worldLocation(new Location(2.5, 3, 2.5)), world.getDimension(`overworld`), 0, 0, false); // don't keep velocity
		  try {
		    simPlayer2.teleport(test.worldLocation(new Location(2.5, 3, 2.5)), world.getDimension(`overworld`), 0, 0, true); // keep velocity, not supported for players
		    test.fail("Expected exception when keepVelocity is true on player");
		  } catch (ex) {
		    test.assert(ex === "keepVelocity is not supported for player teleportation", ex);
		  }
		
		  test.assert(pig1.velocity.y === 0, `Expected pig1.velocity.y to be 0, but got ${pig1.velocity.y}`);
		  test.assert(pig2.velocity.y > 1.5, `Expected pig2.velocity.y to be > 1.5, but got ${pig2.velocity.y}`);
		  test.assert(simPlayer1.velocity.y === 0, `Expected simPlayer1.velocity.y to be 0, but got ${simPlayer1.velocity.y}`);
		
		  pig1.kill();
		  pig2.kill();
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "AllayTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftItemTypes, TicksPerSecond, ItemStack, Location } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TEST_MAX_TICKS = TicksPerSecond * 10;
		
		GameTest.register("AllayTests", "allay_pickup_item", (test) => {
		    const startPosAllay = new BlockLocation(1, 2, 1);
		    const startPosPlayer = new BlockLocation(3, 2, 1);
		    const torchItem = new ItemStack(MinecraftItemTypes.torch, 1, 0);
		    test.spawnItem(torchItem, new Location(4.5, 2.5, 4.5));
		    let playerSim = test.spawnSimulatedPlayer(startPosPlayer, "playerSim_allay");
		    let allay = test.spawn("minecraft:allay", startPosAllay);
		    const testEx = new GameTestExtensions(test);
		
		    test
		        .startSequence()
		        .thenExecute(() => testEx.giveItem(playerSim, MinecraftItemTypes.torch, 1, 0))
		        .thenExecute(() => test.assert(playerSim.interactWithEntity(allay) == true, ""))
		        .thenWait(() => {
		            test.assertEntityPresentInArea("minecraft:item", false); // Make sure the torch is picked up.
		        })
		        .thenSucceed();
		})
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an Allay can leave a vertically partial block it got stuck into (e.g. lantern).
		GameTest.register("AllayTests", "allay_unstucks_from_lantern", (test) => {
		    // Really make sure it's stuck up in the lanterns.  
		    const spawnPos = new Location(5.75, 4.25, 2.5);
		    const allayEntityType = "minecraft:allay";
		    const allay = test.spawnWithoutBehaviorsAtLocation(allayEntityType, spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 2);
		    test.walkTo(allay, targetPos, 1);
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(allayEntityType, targetPos, true);
		    });
		})
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an Allay can leave a horizontally partial block it got stuck into (e.g. fence).
		GameTest.register("AllayTests", "allay_unstucks_from_fence", (test) => {
		    const spawnPos = new Location(5.75, 3, 2.5);
		    const allayEntityType = "minecraft:allay";
		    const allay = test.spawnWithoutBehaviorsAtLocation(allayEntityType, spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 2);
		    test.walkTo(allay, targetPos, 1);
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(allayEntityType, targetPos, true);
		    });
		})
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		'''
	script "BigMobTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Location } from "mojang-minecraft";
		
		const BIGMOB_TEST_MAX_TICKS = 100;
		const BIGMOB_TEST_STARTUP_TICKS = 0;
		const BIGMOB_REQUIRE = false;
		
		const MOBTOTEST = ["zoglin", "ravager", "iron_golem", "spider", "horse"];
		
		function _descending(test, wallSide, entityType) {
		  const zOffset = wallSide == "RIGHT" ? -0.25 : 0.25;
		  const spawnType = "minecraft:" + entityType;
		  const mob = test.spawnWithoutBehaviorsAtLocation(spawnType, new Location(0.5, 6, 1.5 + zOffset));
		  const targetPos = new BlockLocation(7, 2, 1);
		  test.walkTo(mob, targetPos, 1);
		  test.succeedWhenEntityPresent(spawnType, targetPos, true);
		}
		
		function createDescendingTest(wallSide, entityType) {
		  const structureName = "BigMobTests:altitude_change_wall_on_" + wallSide.toLowerCase();
		  const testName = "altitude_change_wall_on_" + wallSide.toLowerCase() + "_descend_" + entityType;
		
		  // Iron golems and Ravagers every so often get stucks when they are spawned
		  if (entityType == "horse") {
		    GameTest.register("BigMobTests", testName, (test) => {
		      _descending(test, wallSide, entityType);
		    })
		      .structureName(structureName)
		      .maxTicks(BIGMOB_TEST_MAX_TICKS)
		      .setupTicks(BIGMOB_TEST_STARTUP_TICKS)
		      .tag(GameTest.Tags.suiteDisabled) // Somes horses always walk at very low speed and cause timeout. So I disabled these tests.
		      .required(BIGMOB_REQUIRE)
		      .rotateTest(true);
		  } else {
		    GameTest.register("BigMobTests", testName, (test) => {
		      _descending(test, wallSide, entityType);
		    })
		      .structureName(structureName)
		      .maxTicks(BIGMOB_TEST_MAX_TICKS)
		      .setupTicks(BIGMOB_TEST_STARTUP_TICKS)
		      .tag(GameTest.Tags.suiteDefault)
		      .required(BIGMOB_REQUIRE)
		      .rotateTest(true);
		  }
		}
		
		function _ascending(test, wallSide, entityType) {
		  const spawnType = "minecraft:" + entityType;
		  const targetPos = new BlockLocation(0, 6, 1);
		  const targetLocPos = new Location(0.5, 6, 1.5);
		  const zOffset = wallSide == "RIGHT" ? -0.25 : 0.25;
		  const mob = test.spawnWithoutBehaviorsAtLocation(spawnType, new Location(7, 2, 1.5 + zOffset));
		  test.walkToLocation(mob, targetLocPos, 1);
		  test.succeedWhenEntityPresent(spawnType, targetPos, true);
		}
		
		function createAscendingTest(wallSide, entityType) {
		  const structureName = "BigMobTests:altitude_change_wall_on_" + wallSide.toLowerCase();
		  const testName = "altitude_change_wall_on_" + wallSide.toLowerCase() + "_ascend_" + entityType;
		
		  if (entityType == "horse") {
		    GameTest.register("BigMobTests", testName, (test) => {
		      _ascending(test, wallSide, entityType);
		    })
		      .structureName(structureName)
		      .maxTicks(BIGMOB_TEST_MAX_TICKS)
		      .setupTicks(BIGMOB_TEST_STARTUP_TICKS)
		      .tag("suite:java_parity")
		      .tag(GameTest.Tags.suiteDisabled) // Somes horses always walk at very low speed and cause timeout.
		      .required(BIGMOB_REQUIRE)
		      .rotateTest(true);
		  } else {
		    GameTest.register("BigMobTests", testName, (test) => {
		      _ascending(test, wallSide, entityType);
		    })
		      .structureName(structureName)
		      .maxTicks(BIGMOB_TEST_MAX_TICKS)
		      .setupTicks(BIGMOB_TEST_STARTUP_TICKS)
		      .tag(GameTest.Tags.suiteDefault)
		      .required(BIGMOB_REQUIRE)
		      .rotateTest(true);
		  }
		}
		
		for (var bigmobIndex = 0; bigmobIndex < MOBTOTEST.length; bigmobIndex++) {
		  createDescendingTest("RIGHT", MOBTOTEST[bigmobIndex]);
		  createDescendingTest("LEFT", MOBTOTEST[bigmobIndex]);
		  createAscendingTest("RIGHT", MOBTOTEST[bigmobIndex]);
		  createAscendingTest("LEFT", MOBTOTEST[bigmobIndex]);
		}
		'''
	script "BlockEventTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  world,
		  MinecraftBlockTypes,
		  MinecraftItemTypes,
		  BlockLocation,
		  ItemStack,
		  GameMode,
		  Direction,
		} from "mojang-minecraft";
		
		function registerBlockBreakTest(gameMode, blockType, blockBreakTicks) {
		  GameTest.registerAsync("BlockEventTests", `block_break_event_${gameMode}_${blockType.id}`, async (test) => {
		    const spawnLocation = new BlockLocation(1, 2, 3);
		    const blockLocation = new BlockLocation(2, 2, 2);
		
		    const player = test.spawnSimulatedPlayer(spawnLocation, `${gameMode}_player`, GameMode[gameMode]);
		
		    // Set block
		    test.setBlockType(blockType, blockLocation);
		
		    // Listen for block break
		    let blockDidBreak = false;
		    const listener = (event) => {
		      // Make sure it's our block that broke
		      const locationCorrect = event.block.location.equals(test.worldBlockLocation(blockLocation));
		      const blockTypeCorreect = event.brokenBlockPermutation.type.id == blockType.id;
		
		      if (locationCorrect && blockTypeCorreect) {
		        blockDidBreak = true;
		      }
		    };
		    world.events.blockBreak.subscribe(listener);
		
		    // Start breaking block
		    player.lookAtBlock(blockLocation);
		    player.breakBlock(blockLocation);
		
		    // Wait for the block to be broken
		    await test.idle(blockBreakTicks);
		
		    // Unsubscribe
		    world.events.blockBreak.unsubscribe(listener);
		
		    if (blockDidBreak) {
		      test.succeed();
		    } else {
		      test.fail(`Block event should have fired for block ${blockType.id}`);
		    }
		  })
		    .structureName("Generic:flat_5x5x5")
		    .maxTicks(blockBreakTicks + 10)
		    .batch(`block_break_event_${gameMode}_${blockType.id}`)
		    .tag(GameTest.Tags.suiteDefault);
		}
		
		function registerBlockPlaceTest(itemType, belowBlock) {
		  const registerTest = function (gameMode) {
		    GameTest.registerAsync("BlockEventTests", `block_place_event_${gameMode}_${itemType.id}`, async (test) => {
		      const spawnLocation = new BlockLocation(1, 2, 3);
		      const blockLocation = new BlockLocation(2, 1, 2);
		
		      const player = test.spawnSimulatedPlayer(spawnLocation, `${gameMode}_player`, GameMode[gameMode]);
		
		      if (belowBlock) {
		        // Set bellow block
		        test.setBlockType(belowBlock, blockLocation);
		      }
		
		      // Listen for block place
		      let blockDidPlace = false;
		      const listener = (event) => {
		        if (event.block.location.equals(test.worldBlockLocation(blockLocation.offset(0, 1, 0)))) {
		          blockDidPlace = true;
		        }
		      };
		      world.events.blockPlace.subscribe(listener);
		
		      await test.idle(10);
		
		      // Start place block
		      player.lookAtBlock(blockLocation);
		      player.setItem(new ItemStack(itemType, 1), 0, true);
		      player.useItemInSlotOnBlock(0, blockLocation, Direction.up, 0.5, 1);
		
		      // Unsubscribe
		      world.events.blockPlace.unsubscribe(listener);
		
		      if (blockDidPlace) {
		        test.succeed();
		      } else {
		        test.fail(`Block event should have fired for block ${itemType.id}`);
		      }
		    })
		      .structureName("Generic:flat_5x5x5")
		      .maxTicks(20)
		      .batch(`block_place_event_${gameMode}_${itemType.id}`)
		      .tag(GameTest.Tags.suiteDefault);
		  };
		
		  registerTest("survival");
		  registerTest("creative");
		}
		
		// Break Block Tests
		registerBlockBreakTest("creative", MinecraftBlockTypes.dirt, 20);
		registerBlockBreakTest("survival", MinecraftBlockTypes.dirt, 100);
		
		// Place Block Tests
		// Note: These are fired in a bunch of
		//  different spots in the code, hence the different
		//  items I chose to test
		registerBlockPlaceTest(MinecraftItemTypes.dirt);
		registerBlockPlaceTest(MinecraftItemTypes.bamboo, MinecraftBlockTypes.dirt);
		registerBlockPlaceTest(MinecraftItemTypes.banner);
		registerBlockPlaceTest(MinecraftItemTypes.bed);
		registerBlockPlaceTest(MinecraftItemTypes.flowerPot);
		registerBlockPlaceTest(MinecraftItemTypes.redstone);
		registerBlockPlaceTest(MinecraftItemTypes.oakSign);
		'''
	script "BlockTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  MinecraftBlockTypes,
		  MinecraftItemTypes,
		  BlockProperties,
		  Direction,
		  world,
		  Location,
		} from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TicksPerSecond = 20;
		const FiveSecondsInTicks = 5 * TicksPerSecond;
		
		const FALLING_SAND_TEMPLATE_NAME = "BlockTests:falling_sand_template";
		const FALLING_SAND_STARTUP_TICKS = 1;
		const FALLING_SAND_TIMEOUT_TICKS = 20;
		
		const BLOCKS_THAT_POP_SAND = [
		  [MinecraftBlockTypes.woodenSlab, MinecraftBlockTypes.air], //replace missing oakSlab() with woodenSlab()
		  [MinecraftBlockTypes.chest, MinecraftBlockTypes.stone],
		  [MinecraftBlockTypes.rail, MinecraftBlockTypes.stone],
		  [MinecraftBlockTypes.stoneButton, MinecraftBlockTypes.stone],
		  [MinecraftBlockTypes.woodenPressurePlate, MinecraftBlockTypes.stone], //replace missing OakPressurePlate() with woodenPressurePlate()
		  [MinecraftBlockTypes.torch, MinecraftBlockTypes.stone],
		  [MinecraftBlockTypes.soulSand, MinecraftBlockTypes.air],
		];
		
		const BLOCKS_REPLACED_BY_SAND = [
		  MinecraftBlockTypes.water,
		  MinecraftBlockTypes.air,
		  MinecraftBlockTypes.tallgrass, //replace grass() with tallgrass(). It needs grass, not grass block, MinecraftBlockTypes.grass is actually grass block.
		];
		
		const BLOCKS_THAT_SUPPORT_SAND = [
		  MinecraftBlockTypes.stone,
		  MinecraftBlockTypes.fence, //replace missing oakFence() with fence()
		  MinecraftBlockTypes.oakStairs,
		  MinecraftBlockTypes.scaffolding,
		];
		
		function testThatFallingSandPopsIntoItem(test) {
		  test.setBlockType(MinecraftBlockTypes.sand, new BlockLocation(1, 4, 1));
		  const targetPos = new BlockLocation(1, 2, 1);
		
		  test.succeedWhen(() => {
		    test.assertEntityPresentInArea("minecraft:item", true);
		    test.assertEntityPresent("minecraft:falling_block", targetPos, false);
		  });
		}
		
		function testThatFallingSandReplaces(test) {
		  test.setBlockType(MinecraftBlockTypes.sand, new BlockLocation(1, 4, 1));
		  test.succeedWhenBlockPresent(MinecraftBlockTypes.sand, new BlockLocation(1, 2, 1), true);
		}
		
		function testThatFallingSandLandsOnTop(test) {
		  test.setBlockType(MinecraftBlockTypes.sand, new BlockLocation(1, 4, 1));
		  test.succeedWhenBlockPresent(MinecraftBlockTypes.sand, new BlockLocation(1, 3, 1), true);
		}
		
		///
		// Concrete Tests
		///
		for (let i = 0; i < BLOCKS_THAT_POP_SAND.length; i++) {
		  const topBlock = BLOCKS_THAT_POP_SAND[i][0];
		  const bottomBlock = BLOCKS_THAT_POP_SAND[i][1];
		  const testName = "blocktests.falling_sand_pops_on_" + topBlock.id;
		  let tag = null;
		
		  GameTest.register("BlockTests", testName, (test) => {
		    if (topBlock.id == "minecraft:stone_button") {
		      const buttonPermutation = MinecraftBlockTypes.stoneButton.createDefaultBlockPermutation();
		      buttonPermutation.getProperty(BlockProperties.facingDirection).value = Direction.north;
		      test.setBlockPermutation(buttonPermutation, new BlockLocation(1, 2, 1));
		    } else {
		      test.setBlockType(topBlock, new BlockLocation(1, 2, 1));
		    }
		    test.setBlockType(bottomBlock, new BlockLocation(1, 1, 1));
		    testThatFallingSandPopsIntoItem(test);
		  })
		    .batch("day")
		    .structureName(FALLING_SAND_TEMPLATE_NAME)
		    .maxTicks(FALLING_SAND_TIMEOUT_TICKS)
		    .setupTicks(FALLING_SAND_STARTUP_TICKS)
		    .required(true)
		    .tag(GameTest.Tags.suiteDefault);
		}
		
		for (const block of BLOCKS_REPLACED_BY_SAND) {
		  const testName = "blocktests.falling_sand_replaces_" + block.id;
		
		  GameTest.register("BlockTests", testName, (test) => {
		    //SetBlock will fail if set a block to what it already is. Skip to call setblock() for test falling_sand_replaces_air because it's just air block in initial structure.
		    if (block.id != "minecraft:air") {
		      test.setBlockType(block, new BlockLocation(1, 2, 1));
		    }
		    testThatFallingSandReplaces(test);
		  })
		    .batch("day")
		    .structureName(FALLING_SAND_TEMPLATE_NAME)
		    .maxTicks(FALLING_SAND_TIMEOUT_TICKS)
		    .setupTicks(FALLING_SAND_STARTUP_TICKS)
		    .required(true)
		    .tag(GameTest.Tags.suiteDefault);
		}
		
		for (const block of BLOCKS_THAT_SUPPORT_SAND) {
		  const testName = "blocktests.falling_sand_lands_on_" + block.id;
		  let tag = null;
		
		  GameTest.register("BlockTests", testName, (test) => {
		    test.setBlockType(block, new BlockLocation(1, 2, 1));
		    testThatFallingSandLandsOnTop(test);
		  })
		    .batch("day")
		    .structureName(FALLING_SAND_TEMPLATE_NAME)
		    .maxTicks(FALLING_SAND_TIMEOUT_TICKS)
		    .setupTicks(FALLING_SAND_STARTUP_TICKS)
		    .required(true)
		    .tag(GameTest.Tags.suiteDefault);
		}
		
		GameTest.register("BlockTests", "concrete_solidifies_in_shallow_water", (test) => {
		  test.setBlockType(MinecraftBlockTypes.concretePowder, new BlockLocation(1, 3, 1));
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.concrete, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "concrete_solidifies_in_deep_water", (test) => {
		  test.setBlockType(MinecraftBlockTypes.concretePowder, new BlockLocation(1, 4, 1));
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.concrete, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "concrete_solidifies_next_to_water", (test) => {
		  test.setBlockType(MinecraftBlockTypes.concretePowder, new BlockLocation(1, 3, 1));
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.concrete, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "sand_fall_boats", (test) => {
		  test.setBlockType(MinecraftBlockTypes.sand, new BlockLocation(1, 4, 1));
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.sand, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "sand_fall_shulker", (test) => {
		  const EntitySpawnType = "minecraft:shulker";
		  const spawnPos = new BlockLocation(1, 2, 1);
		
		  test.spawn(EntitySpawnType, spawnPos);
		  testThatFallingSandPopsIntoItem(test);
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		///
		// Turtle Egg Tests
		///
		
		GameTest.register("BlockTests", "turtle_eggs_survive_xp", (test) => {
		  const xpOrb = "minecraft:xp_orb";
		  const spawnPos = new BlockLocation(1, 3, 1);
		
		  for (let i = 0; i < 8; i++) {
		    test.spawn(xpOrb, spawnPos);
		  }
		
		  // Fail if the turtle egg dies
		  test.failIf(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 2, 1), true);
		  });
		
		  // Succeed after 4 seconds
		  test.startSequence().thenIdle(80).thenSucceed();
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "turtle_eggs_survive_item", (test) => {
		  test.pressButton(new BlockLocation(2, 4, 0));
		
		  // Fail if the turtle egg dies
		  test.failIf(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 2, 1), true);
		  });
		
		  // Succeed after 4 seconds
		  test.startSequence().thenIdle(80).thenSucceed();
		})
		  .maxTicks(FiveSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "turtle_eggs_squished_by_mob", (test) => {
		  const zombieEntityType = "minecraft:husk";
		  const zombiePosition = new BlockLocation(1, 5, 1);
		  test.spawn(zombieEntityType, zombiePosition);
		  test.succeedWhenBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 2, 1), true);
		})
		  .required(false)
		  .maxTicks(TicksPerSecond * 20)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "explosion_drop_location", (test) => {
		  test.pressButton(new BlockLocation(4, 3, 4));
		
		  test.succeedWhen(() => {
		    const redSandstonePos = new BlockLocation(6, 2, 4);
		    const sandstonePos = new BlockLocation(2, 2, 4);
		
		    test.assertBlockPresent(MinecraftBlockTypes.redSandstone, redSandstonePos, false);
		    test.assertBlockPresent(MinecraftBlockTypes.sandstone, sandstonePos, false);
		    test.assertItemEntityPresent(MinecraftItemTypes.redSandstone, redSandstonePos, 2.0, true);
		    test.assertItemEntityPresent(MinecraftItemTypes.sandstone, sandstonePos, 2.0, true);
		  });
		})
		  .maxTicks(TicksPerSecond * 10)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled) //redSandstone and sandstone items should be present.
		  .maxAttempts(3);
		
		GameTest.register("BlockTests", "concrete_pops_off_waterlogged_chest", (test) => {
		  test.setBlockType(MinecraftBlockTypes.concretePowder, new BlockLocation(1, 4, 1));
		  test.succeedWhen(() => {
		    const chestPos = new BlockLocation(1, 2, 1);
		    test.assertBlockPresent(MinecraftBlockTypes.chest, chestPos, true);
		    test.assertItemEntityPresent(MinecraftItemTypes.concretePowder, chestPos, 2, true);
		    test.assertEntityPresentInArea("falling_block", false);
		  });
		})
		  .maxTicks(TicksPerSecond * 5)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "waterlogged_slab", (test) => {
		  const slabPos = new BlockLocation(1, 1, 1);
		  test.assertIsWaterlogged(slabPos, false);
		  test.succeedWhen(() => {
		    test.assertIsWaterlogged(slabPos, true);
		  });
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled) // Slab should be waterlogged
		  .maxTicks(TicksPerSecond * 2);
		
		GameTest.register("BlockTests", "dispenser_light_candles", (test) => {
		  const testEx = new GameTestExtensions(test);
		  test.pressButton(new BlockLocation(1, 3, 0));
		  test.pressButton(new BlockLocation(1, 3, 2));
		
		  test.succeedWhen(() => {
		    testEx.assertBlockProperty("lit", 1, new BlockLocation(0, 2, 0));
		    testEx.assertBlockProperty("lit", 1, new BlockLocation(0, 2, 2));
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "put_out_candles", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const testEx = new GameTestExtensions(test);
		  const candlePos = new BlockLocation(0, 2, 0);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.interactWithBlock(candlePos);
		    })
		    .thenWait(() => {
		      testEx.assertBlockProperty("lit", 0, candlePos);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		///
		// Big Dripleaf Tests
		///
		const platformStructure = "ComponentTests:platform";
		
		GameTest.register("BlockTests", "dripleaf_player_fall", (test) => {
		  test.setBlockType(MinecraftBlockTypes.bigDripleaf, new BlockLocation(1, 2, 1));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 4, 1));
		  test
		    .startSequence()
		    .thenExecuteAfter(40, () => test.assertEntityPresent("player", new BlockLocation(1, 2, 1), true))
		    .thenSucceed();
		})
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "dripleaf_walk_across", (test) => {
		  test.setBlockType(MinecraftBlockTypes.bigDripleaf, new BlockLocation(1, 2, 0));
		  test.setBlockType(MinecraftBlockTypes.bigDripleaf, new BlockLocation(1, 2, 1));
		  test.setBlockType(MinecraftBlockTypes.smoothStone, new BlockLocation(1, 2, 2));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 4, 0));
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => test.assertEntityPresent("player", new BlockLocation(1, 3, 2), false))
		    .thenExecute(() => playerSim.moveToLocation(new Location(1, 3, 2.5)))
		    .thenExecuteAfter(40, () => test.assertEntityPresent("player", new BlockLocation(1, 3, 2)))
		    .thenSucceed();
		})
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		///
		// Powder snow tests
		///
		
		GameTest.register("BlockTests", "powder_snow_player_sink_and_freeze", (test) => {
		  test.setBlockType(MinecraftBlockTypes.powderSnow, new BlockLocation(1, 2, 1));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 3, 1));
		  let healthComp = playerSim.getComponent("health");
		  test
		    .startSequence()
		    .thenExecuteAfter(180, () => test.assert(healthComp.current < healthComp.value, "no damage"))
		    .thenExecute(() => test.assertEntityInstancePresent(playerSim, new BlockLocation(1, 2, 1)))
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("BlockTests", "powder_snow_leather_boots_walk", (test) => {
		  test.setBlockType(MinecraftBlockTypes.powderSnow, new BlockLocation(1, 2, 0));
		  test.setBlockType(MinecraftBlockTypes.powderSnow, new BlockLocation(1, 2, 1));
		  test.setBlockType(MinecraftBlockTypes.powderSnow, new BlockLocation(1, 2, 2));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 5, 0), "playerSim_snow");
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      playerSim.dimension.runCommand("replaceitem entity playerSim_snow slot.armor.feet 0 leather_boots");
		    })
		    .thenExecuteAfter(10, () => playerSim.moveToLocation(new Location(1, 3, 2.5)))
		    .thenExecuteAfter(40, () => test.assertEntityPresent("player", new BlockLocation(1, 4, 2)))
		    .thenSucceed();
		})
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		///
		// Candle cake tests
		///
		
		GameTest.register("BlockTests", "player_light_birthday_cake_candle", (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_cake");
		  test.setBlockType(MinecraftBlockTypes.cake, new BlockLocation(1, 2, 1));
		  const testEx = new GameTestExtensions(test);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => testEx.giveItem(playerSim, MinecraftItemTypes.candle, 1, 0))
		    .thenExecute(() => test.assert(playerSim.interactWithBlock(new BlockLocation(1, 2, 1), Direction.up), ""))
		    .thenExecute(() => testEx.giveItem(playerSim, MinecraftItemTypes.flintAndSteel, 1, 0))
		    .thenExecute(() => test.assert(playerSim.interactWithBlock(new BlockLocation(1, 2, 1), Direction.up), ""))
		    .thenExecute(() => testEx.assertBlockProperty("lit", 1, new BlockLocation(1, 2, 1)))
		    .thenSucceed();
		})
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "CommandTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation } from "mojang-minecraft";
		
		///
		// Commands
		///
		
		GameTest.registerAsync("CommandTests", "commands_api_player_teleport", async (test) => {
		  const startLoc = new BlockLocation(6, 2, 1);
		  const endLoc = new BlockLocation(1, 2, 6);
		
		  const player = test.spawnSimulatedPlayer(startLoc, "Teleport-o-man"); // This line is never getting hit?!
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(player, startLoc);
		
		  await test.idle(20);
		  const endLocAbs = test.worldBlockLocation(endLoc);
		  player.runCommand(`teleport ${endLocAbs.x} ${endLocAbs.y} ${endLocAbs.z}`);
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(player, endLoc);
		
		  test.succeed();
		})
		  .structureName("CommandTests:commands_teleport")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("CommandTests", "commands_api_pig_teleport", async (test) => {
		  const startLoc = new BlockLocation(6, 2, 1);
		  const endLoc = new BlockLocation(1, 2, 6);
		
		  const entity = test.spawn("minecraft:pig", startLoc);
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(entity, startLoc);
		
		  await test.idle(20);
		  const endLocAbs = test.worldBlockLocation(endLoc);
		  entity.runCommand(`teleport ${endLocAbs.x} ${endLocAbs.y} ${endLocAbs.z}`);
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(entity, endLoc);
		
		  test.succeed();
		})
		  .structureName("CommandTests:commands_teleport")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("CommandTests", "commands_api_dimension_spawn_pig", async (test) => {
		  const spawnLoc = new BlockLocation(6, 2, 1);
		
		  const absSpawnLoc = test.worldBlockLocation(new BlockLocation(6, 2, 1));
		  test.getDimension().runCommand(`summon minecraft:pig ${absSpawnLoc.x} ${absSpawnLoc.y} ${absSpawnLoc.z}`);
		
		  await test.idle(20);
		  test.assertEntityPresent("minecraft:pig", spawnLoc);
		
		  test.succeed();
		})
		  .structureName("CommandTests:commands_teleport")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("CommandTests", "commands_api_execute_vs_player", async (test) => {
		  const spawnLoc1 = new BlockLocation(1, 2, 1);
		  const spawnLoc2 = new BlockLocation(3, 2, 1);
		  const playerName1 = "Sim Player (execute at)";
		  const playerName2 = "Sim Player (runCommand)";
		  const player1 = test.spawnSimulatedPlayer(spawnLoc1, playerName1);
		  const player2 = test.spawnSimulatedPlayer(spawnLoc2, playerName2);
		
		  // Spawn blocks
		  await test.idle(20);
		
		  test.getDimension().runCommand(`execute "${playerName1}" ~ ~ ~ setblock ~ ~2 ~ stone`);
		  player2.runCommand(`setblock ~ ~2 ~ stone`);
		
		  // Test for blocks
		  await test.idle(40);
		
		  test.assert(
		    test.getBlock(new BlockLocation(1, 4, 1)).id == "minecraft:stone",
		    `Expected Stone block above ${playerName1}.`
		  );
		  test.assert(
		    test.getBlock(new BlockLocation(3, 4, 1)).id == "minecraft:stone",
		    `Expected Stone block above ${playerName2}.`
		  );
		  test.succeed();
		})
		  .structureName("CommandTests:doublecage")
		  .maxTicks(100);
		
		///
		// Async Commands
		///
		
		GameTest.registerAsync("CommandTests", "async_commands_api_player_teleport", async (test) => {
		  const startLoc = new BlockLocation(6, 2, 1);
		  const endLoc = new BlockLocation(1, 2, 6);
		
		  const player = test.spawnSimulatedPlayer(startLoc, "Teleport-o-man"); // This line is never getting hit?!
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(player, startLoc);
		
		  await test.idle(20);
		  const endLocAbs = test.worldBlockLocation(endLoc);
		  let result = await player.runCommandAsync(`teleport ${endLocAbs.x} ${endLocAbs.y} ${endLocAbs.z}`);
		  test.assert(result.successCount > 0, `Expected successCount > 0, ${result.successCount}`);
		
		  await test.idle(20);
		  test.assertEntityInstancePresent(player, endLoc);
		
		  test.succeed();
		})
		  .structureName("CommandTests:commands_teleport")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("CommandTests", "async_commands_api_dimension_spawn_pig", async (test) => {
		  const spawnLoc = new BlockLocation(6, 2, 1);
		
		  const absSpawnLoc = test.worldBlockLocation(new BlockLocation(6, 2, 1));
		  let result = await test.getDimension().runCommandAsync(`summon minecraft:pig ${absSpawnLoc.x} ${absSpawnLoc.y} ${absSpawnLoc.z}`);
		  test.assert(result.successCount > 0, `Expected successCount > 0, ${result.successCount}`);
		
		  await test.idle(20);
		  test.assertEntityPresent("minecraft:pig", spawnLoc);
		
		  test.succeed();
		})
		  .structureName("CommandTests:commands_teleport")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("CommandTests", "async_commands_api_execute_vs_player", async (test) => {
		  const spawnLoc1 = new BlockLocation(1, 2, 1);
		  const spawnLoc2 = new BlockLocation(3, 2, 1);
		  const playerName1 = "Sim Player (execute at)";
		  const playerName2 = "Sim Player (runCommand)";
		  const player1 = test.spawnSimulatedPlayer(spawnLoc1, playerName1);
		  const player2 = test.spawnSimulatedPlayer(spawnLoc2, playerName2);
		
		  // Spawn blocks
		  await test.idle(20);
		
		  let result = await test.getDimension().runCommandAsync(`execute "${playerName1}" ~ ~ ~ setblock ~ ~2 ~ stone`);
		  test.assert(result.successCount > 0, `Expected successCount > 0, ${result.successCount}`);
		
		  player2.runCommand(`setblock ~ ~2 ~ stone`);
		
		  // Test for blocks
		  await test.idle(40);
		
		  test.assert(
		    test.getBlock(new BlockLocation(1, 4, 1)).id == "minecraft:stone",
		    `Expected Stone block above ${playerName1}.`
		  );
		  test.assert(
		    test.getBlock(new BlockLocation(3, 4, 1)).id == "minecraft:stone",
		    `Expected Stone block above ${playerName2}.`
		  );
		  test.succeed();
		})
		  .structureName("CommandTests:doublecage")
		  .maxTicks(100);
		'''
	script "ComponentTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Location, MinecraftItemTypes, ItemStack } from "mojang-minecraft";
		
		function isNear(n1, n2) {
		  return Math.abs(n1 - n2) < 0.01;
		}
		
		GameTest.register("ComponentTests", "color_component", (test) => {
		  const sheep = test.spawn("minecraft:sheep", new BlockLocation(1, 2, 1));
		  let counter = 0;
		  test.succeedWhen(() => {
		    const colorComponent = sheep.getComponent("minecraft:color");
		    const color = colorComponent.value;
		    if (++counter < 48) {
		      colorComponent.value = (color + 1) % 16;
		      throw "Disco sheep!";
		    } else {
		      colorComponent.value = 10;
		      test.assert(colorComponent.value === 10, "Unexpected color value");
		    }
		  });
		})
		  .maxTicks(50)
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "get_component_on_dead_entity", (test) => {
		  const horse = test.spawn("minecraft:horse", new BlockLocation(1, 2, 1));
		  horse.kill();
		  test.runAfterDelay(40, () => {
		    try {
		      // This should throw since the entity is dead
		      horse.getComponent("minecraft:tamemount").setTamed();
		      test.fail();
		    } catch (e) {
		      test.succeed();
		    }
		  });
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "is_saddled_component", (test) => {
		  const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  // TODO: Give saddle to pig
		  test.succeedWhen(() => {
		    const isSaddled = pig.getComponent("minecraft:is_saddled") !== undefined;
		    test.assert(isSaddled, "Expected pig to be saddled");
		  });
		}).tag(GameTest.Tags.suiteDisabled); // No API to give saddle to pig
		
		GameTest.register("ComponentTests", "get_components", (test) => {
		  const horse = test.spawn("minecraft:horse<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  test.print("---Start Components---");
		  for (const component of horse.getComponents()) {
		    test.print(component.id);
		  }
		  test.print("---End Components---");
		  test.succeed();
		}).structureName("ComponentTests:animal_pen");
		
		GameTest.register("ComponentTests", "leashable_component", (test) => {
		  const pig1 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  const pig2 = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 1));
		  const leashableComp = pig1.getComponent("leashable");
		  test.assert(leashableComp !== undefined, "Expected leashable component");
		  test.assert(leashableComp.softDistance === 4, "Unexpected softDistance");
		  leashableComp.leash(pig2);
		  test.runAtTickTime(20, () => {
		    leashableComp.unleash();
		  });
		  test.succeedWhen(() => {
		    test.assertEntityPresentInArea("minecraft:item", true); // Make sure the lead dropped
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "health_component", (test) => {
		  const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		  const sheepPos = new BlockLocation(4, 2, 2);
		  const sheep = test.spawn(sheepId, sheepPos);
		  test.assertEntityInstancePresent(sheep, sheepPos);
		  test.pullLever(new BlockLocation(2, 3, 2));
		
		  const healthComponent = sheep.getComponent("minecraft:health");
		  test.assert(healthComponent !== undefined, "Expected health component");
		
		  test.succeedWhen(() => {
		    test.assert(healthComponent.current === 0, "Unexpected health");
		  });
		})
		  .maxTicks(200)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "rideable_component", (test) => {
		  const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  const boat = test.spawn("minecraft:boat", new BlockLocation(3, 2, 1));
		  const skeletonHorse = test.spawn("minecraft:skeleton_horse<minecraft:ageable_grow_up>", new BlockLocation(5, 2, 1));
		
		  const boatRideableComp = boat.getComponent("minecraft:rideable");
		  test.assert(boatRideableComp !== undefined, "Expected rideable component");
		
		  test.assert(boatRideableComp.seatCount === 2, "Unexpected seatCount");
		  test.assert(boatRideableComp.crouchingSkipInteract, "Unexpected crouchingSkipInteract");
		  test.assert(boatRideableComp.interactText === "action.interact.ride.boat", "Unexpected interactText");
		  test.assert(boatRideableComp.familyTypes.length == 0, "Unexpected familyTypes");
		  test.assert(boatRideableComp.controllingSeat === 0, "Unexpected controllingSeat");
		  test.assert(boatRideableComp.pullInEntities, "Unexpected pullInEntities");
		  test.assert(!boatRideableComp.riderCanInteract, "Unexpected riderCanInteract");
		
		  test.assert(boatRideableComp.seats[0].minRiderCount === 0, "Unexpected minRiderCount");
		  test.assert(boatRideableComp.seats[0].maxRiderCount === 1, "Unexpected maxRiderCount");
		  test.assert(boatRideableComp.seats[0].lockRiderRotation === 90, "Unexpected lockRiderRotation");
		
		  const skeletonHorseRideableComp = skeletonHorse.getComponent("minecraft:rideable");
		  test.assert(skeletonHorseRideableComp !== undefined, "Expected rideable component");
		
		  test
		    .startSequence()
		    .thenIdle(20)
		    .thenExecute(() => boatRideableComp.addRider(pig))
		    .thenIdle(20)
		    .thenExecute(() => boatRideableComp.ejectRider(pig))
		    .thenIdle(20)
		    .thenExecute(() => boatRideableComp.addRider(skeletonHorse))
		    .thenExecute(() => boatRideableComp.addRider(pig))
		    .thenIdle(20)
		    .thenExecute(() => boatRideableComp.ejectRiders())
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "tameable_component", (test) => {
		  const wolf = test.spawn("minecraft:wolf", new BlockLocation(1, 2, 1));
		  const tameableComp = wolf.getComponent("minecraft:tameable");
		  test.assert(tameableComp !== undefined, "Expected tameable component");
		  test.assert(isNear(tameableComp.probability, 0.333), "Unexpected probability");
		  test.assert(tameableComp.tameItems[0] === "minecraft:bone", "Unexpected tameItems");
		  tameableComp.tame(/*player*/); // TODO: Provide an owner
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "healable_component", (test) => {
		  const parrot = test.spawn("minecraft:parrot", new BlockLocation(1, 2, 1));
		  const healableComp = parrot.getComponent("minecraft:healable");
		  test.assert(healableComp !== undefined, "Expected healable component");
		  test.assert(healableComp.forceUse, "Unexpected forceUse");
		  test.assert(healableComp.filters !== undefined, "Expected filters");
		  const feedItem = healableComp.items[0];
		  test.assert(feedItem.item === "minecraft:cookie", "Unexpected feedItem item");
		  test.assert(feedItem.healAmount === 0, "Unexpected feedItem healAmount");
		  const effect = feedItem.effects[0];
		  test.assert(effect.amplifier === 0, "Unexpected effect amplifier");
		  test.assert(effect.chance === 1, "Unexpected effect chance");
		  test.assert(effect.duration === 20000, "Unexpected effect duration");
		  test.assert(effect.name === "potion.poison", "Unexpected effect name");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_component", (test) => {
		  const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  const movementComp = pig.getComponent("minecraft:movement");
		  test.assert(movementComp !== undefined, "Expected movement component");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "flying_speed_component", (test) => {
		  const bee = test.spawn("bee", new BlockLocation(1, 2, 1));
		  const flyingSpeedComp = bee.getComponent("flying_speed");
		  test.assert(flyingSpeedComp !== undefined, "Expected flying_speed component");
		  test.assert(isNear(flyingSpeedComp.value, 0.15), "Unexpected value");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_amphibious_component", (test) => {
		  const turtle = test.spawn("turtle", new BlockLocation(1, 2, 1));
		  const amphibiousComp = turtle.getComponent("movement.amphibious");
		  test.assert(amphibiousComp !== undefined, "Expected movement.amphibious component");
		  test.assert(amphibiousComp.maxTurn === 5, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_basic_component", (test) => {
		  const chicken = test.spawn("chicken", new BlockLocation(1, 2, 1));
		  const movementBasicComp = chicken.getComponent("movement.basic");
		  test.assert(movementBasicComp !== undefined, "Expected movement.basic component");
		  test.assert(movementBasicComp.maxTurn === 30, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_fly_component", (test) => {
		  const parrot = test.spawn("parrot", new BlockLocation(1, 2, 1));
		  const movementFlyComp = parrot.getComponent("movement.fly");
		  test.assert(movementFlyComp !== undefined, "Expected movement.fly component");
		  test.assert(movementFlyComp.maxTurn === 30, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_generic_component", (test) => {
		  const drowned = test.spawn("drowned", new BlockLocation(1, 2, 1));
		  const movementGenericComp = drowned.getComponent("movement.generic");
		  test.assert(movementGenericComp !== undefined, "Expected movement.generic component");
		  test.assert(movementGenericComp.maxTurn === 30, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_glide_component", (test) => {
		  const phantom = test.spawn("phantom", new BlockLocation(2, 2, 2));
		  const movementGlideComp = phantom.getComponent("movement.glide");
		  test.assert(movementGlideComp !== undefined, "Expected movement.glide component");
		  test.assert(movementGlideComp.maxTurn === 30, "Unexpected maxTurn");
		  test.assert(isNear(movementGlideComp.startSpeed, 0.1), "Unexpected startSpeed");
		  test.assert(isNear(movementGlideComp.speedWhenTurning, 0.2), "Unexpected speedWhenTurning");
		  test.succeed();
		})
		  .structureName("ComponentTests:large_glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_hover_component", (test) => {
		  const bee = test.spawn("bee", new BlockLocation(1, 2, 1));
		  const movementHoverComp = bee.getComponent("movement.hover");
		  test.assert(movementHoverComp !== undefined, "Expected movement.hover component");
		  test.assert(movementHoverComp.maxTurn === 30, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_jump_component", (test) => {
		  const slime = test.spawn("slime", new BlockLocation(2, 2, 2));
		  const movementJumpComp = slime.getComponent("movement.jump");
		  test.assert(movementJumpComp !== undefined, "Expected movement.jump component");
		  test.assert(isNear(movementJumpComp.maxTurn, 0.42), "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:large_glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_skip_component", (test) => {
		  const rabbit = test.spawn("rabbit", new BlockLocation(1, 2, 1));
		  const movementSkipComp = rabbit.getComponent("movement.skip");
		  test.assert(movementSkipComp !== undefined, "Expected movement.skip component");
		  test.assert(movementSkipComp.maxTurn === 30, "Unexpected maxTurn");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "movement_sway_component", (test) => {
		  const salmon = test.spawn("salmon", new BlockLocation(1, 2, 1));
		  const movementSwayComp = salmon.getComponent("movement.sway");
		  test.assert(movementSwayComp !== undefined, "Expected movement.sway component");
		  test.assert(movementSwayComp.maxTurn === 30, "Unexpected maxTurn");
		  test.assert(isNear(movementSwayComp.swayFrequency, 0.5), "Unexpected swayFrequency");
		  test.assert(movementSwayComp.swayAmplitude === 0, "Unexpected swayAmplitude");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "ageable_component", (test) => {
		  const horse = test.spawn("minecraft:horse<minecraft:entity_born>", new BlockLocation(1, 2, 1));
		  const ageableComp = horse.getComponent("ageable");
		  test.assert(ageableComp !== undefined, "Expected ageable component");
		  test.assert(ageableComp.duration == 1200, "Unexpected duration");
		  test.assert(ageableComp.feedItems[0].item == "minecraft:wheat", "Unexpected feedItem item");
		  test.assert(isNear(ageableComp.feedItems[0].growth, "0.016"), "Unexpected feedItem growth");
		  test.assert(ageableComp.growUp !== undefined, "Expected growUp");
		  test.assert(ageableComp.dropItems.length === 0, "Expected empty dropItems array");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "addrider_component", (test) => {
		  const ravager = test.spawn(
		    "minecraft:ravager<minecraft:spawn_for_raid_with_pillager_rider>",
		    new BlockLocation(2, 2, 2)
		  );
		  const addRiderComp = ravager.getComponent("addrider");
		  test.assert(addRiderComp !== undefined, "Expected addrider component");
		  test.assert(addRiderComp.entityType === "minecraft:pillager<minecraft:spawn_for_raid>", "Unexpected entityType");
		  test.assert(addRiderComp.spawnEvent === "minecraft:spawn_for_raid", "Unexpected spawnEvent");
		  test.succeed();
		})
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "breathable_component", (test) => {
		  const pig = test.spawn("minecraft:pig<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  const breathableComp = pig.getComponent("breathable");
		  test.assert(breathableComp !== undefined, "Expected breathable component");
		  test.assert(breathableComp.totalSupply === 15, "Unexpected totalSupply");
		  test.assert(breathableComp.suffocateTime === 0, "Unexpected suffocateTime");
		  test.assert(breathableComp.inhaleTime === 0, "Unexpected inhaleTime");
		  test.assert(breathableComp.breathesAir, "Unexpected breathesAir");
		  test.assert(!breathableComp.breathesWater, "Unexpected breathesWater");
		  test.assert(breathableComp.breathesLava, "Unexpected breathesLava");
		  test.assert(!breathableComp.breathesSolids, "Unexpected breathesSolids");
		  test.assert(breathableComp.generatesBubbles, "Unexpected generatesBubbles");
		  test.assert(breathableComp.breatheBlocks.length == 0, "Unexpected breatheBlocks");
		  test.assert(breathableComp.nonBreatheBlocks.length == 0, "Unexpected nonBreatheBlocks");
		  test.succeed();
		})
		  .structureName("ComponentTests:aquarium")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_fly_component", (test) => {
		  const parrot = test.spawn("parrot", new BlockLocation(1, 2, 1));
		  const flyComp = parrot.getComponent("navigation.fly");
		  test.assert(flyComp !== undefined, "Expected navigation.fly component");
		  test.assert(!flyComp.isAmphibious, "Unexpected isAmphibious");
		  test.assert(!flyComp.avoidSun, "Unexpected avoidSun");
		  test.assert(flyComp.canPassDoors, "Unexpected canPassDoors");
		  test.assert(!flyComp.canOpenDoors, "Unexpected canOpenDoors");
		  test.assert(!flyComp.canOpenIronDoors, "Unexpected canOpenIronDoors");
		  test.assert(!flyComp.canBreakDoors, "Unexpected canBreakDoors");
		  test.assert(!flyComp.avoidWater, "Unexpected avoidWater");
		  test.assert(!flyComp.avoidDamageBlocks, "Unexpected avoidDamageBlocks");
		  test.assert(flyComp.canFloat, "Unexpected canFloat");
		  test.assert(flyComp.canSink, "Unexpected canSink");
		  test.assert(!flyComp.canPathOverLava, "Unexpected canPathOverLava");
		  test.assert(!flyComp.canWalkInLava, "Unexpected canWalkInLava");
		  test.assert(!flyComp.avoidPortals, "Unexpected avoidPortals");
		  test.assert(flyComp.canWalk, "Unexpected canWalk");
		  test.assert(!flyComp.canSwim, "Unexpected canSwim");
		  test.assert(!flyComp.canBreach, "Unexpected canBreach");
		  test.assert(flyComp.canJump, "Unexpected canJump");
		  test.assert(flyComp.canPathFromAir, "Unexpected canPathFromAir");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_climb_component", (test) => {
		  const spider = test.spawn("spider", new BlockLocation(1, 2, 1));
		  const climbComp = spider.getComponent("navigation.climb");
		  test.assert(climbComp !== undefined, "Expected navigation.climb component");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_float_component", (test) => {
		  const bat = test.spawn("bat", new BlockLocation(1, 2, 1));
		  const floatComp = bat.getComponent("navigation.float");
		  test.assert(floatComp !== undefined, "Expected navigation.float component");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_generic_component", (test) => {
		  const dolphin = test.spawn("dolphin", new BlockLocation(2, 2, 2));
		  const genericComp = dolphin.getComponent("navigation.generic");
		  test.assert(genericComp !== undefined, "Expected navigation.generic component");
		  test.succeed();
		})
		  .structureName("ComponentTests:aquarium")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_hover_component", (test) => {
		  const bee = test.spawn("bee", new BlockLocation(1, 2, 1));
		  const hoverComp = bee.getComponent("navigation.hover");
		  test.assert(hoverComp !== undefined, "Expected navigation.hover component");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "navigation_walk_component", (test) => {
		  const creeper = test.spawn("creeper", new BlockLocation(1, 2, 1));
		  const walkComp = creeper.getComponent("navigation.walk");
		  test.assert(walkComp !== undefined, "Expected navigation.walk component");
		  test.succeed();
		})
		  .structureName("ComponentTests:glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "inventory_component", (test) => {
		  const rightChestCart = test.spawn("chest_minecart", new BlockLocation(1, 3, 1));
		  const leftChestCart = test.spawn("chest_minecart", new BlockLocation(2, 3, 1));
		
		  const rightInventoryComp = rightChestCart.getComponent("inventory");
		  test.assert(rightInventoryComp !== undefined, "Expected inventory component");
		
		  const leftInventoryComp = leftChestCart.getComponent("inventory");
		  test.assert(leftInventoryComp !== undefined, "Expected inventory component");
		  test.assert(rightInventoryComp.additionalSlotsPerStrength === 0, "Unexpected additionalSlotsPerStrength");
		  test.assert(rightInventoryComp.canBeSiphonedFrom, "Unexpected canBeSiphonedFrom");
		  test.assert(rightInventoryComp.containerType === "minecart_chest", "Unexpected containerType");
		  test.assert(rightInventoryComp.inventorySize === 27, "Unexpected inventorySize");
		  test.assert(!rightInventoryComp.private, "Unexpected private");
		  test.assert(!rightInventoryComp.restrictToOwner, "Unexpected restrictToOwner");
		
		  const rightContainer = rightInventoryComp.container;
		  test.assert(rightContainer !== undefined, "Expected container");
		
		  const leftContainer = leftInventoryComp.container;
		  test.assert(leftContainer !== undefined, "Expected container");
		
		  rightContainer.setItem(0, new ItemStack(MinecraftItemTypes.apple, 10, 0));
		  test.assert(rightContainer.getItem(0).id === "minecraft:apple", "Expected apple in right container slot index 0");
		
		  rightContainer.setItem(1, new ItemStack(MinecraftItemTypes.emerald, 10, 0));
		  test.assert(rightContainer.getItem(1).id === "minecraft:emerald", "Expected emerald in right container slot index 1");
		
		  test.assert(rightContainer.size === 27, "Unexpected size");
		  test.assert(rightContainer.emptySlotsCount === 25, "Unexpected emptySlotsCount");
		
		  const itemStack = rightContainer.getItem(0);
		  test.assert(itemStack.id === "minecraft:apple", "Expected apple");
		  test.assert(itemStack.amount === 10, "Expected 10 apples");
		  test.assert(itemStack.data === 0, "Expected 0 data");
		
		  leftContainer.setItem(0, new ItemStack(MinecraftItemTypes.cake, 10, 0));
		
		  test.assert(rightContainer.transferItem(0, 4, leftContainer), "Expected transferItem to succeed"); // transfer the apple from the right container to the left container
		  test.assert(rightContainer.swapItems(1, 0, leftContainer), "Expected swapItems to succeed"); // swap the cake and emerald
		
		  test.assert(leftContainer.getItem(4).id === "minecraft:apple", "Expected apple in left container slot index 4");
		  test.assert(leftContainer.getItem(0).id === "minecraft:emerald", "Expected emerald in left container slot index 0");
		  test.assert(rightContainer.getItem(1).id === "minecraft:cake", "Expected cake in right container slot index 1");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "inventory_component_transfer", (test) => {
		  const chestCart = test.spawn("chest_minecart", new BlockLocation(1, 3, 1));
		  const inventoryComp = chestCart.getComponent("inventory");
		  test.assert(inventoryComp !== undefined, "Expected inventory component");
		  const container = inventoryComp.container;
		  test.assert(container !== undefined, "Expected container");
		
		  container.addItem(new ItemStack(MinecraftItemTypes.emerald, 10));
		  container.setItem(1, new ItemStack(MinecraftItemTypes.emerald, 60));
		
		  test.assert(container.transferItem(0, 1, container), "Expected transferItem to succeed"); // Transfer 4 of the emeralds, filling the stack in slot 1
		  test.assert(container.getItem(0).amount === 6, "Expected 6 remaining emeralds in slot 0");
		  test.assert(container.getItem(1).amount === 64, "Expected 64 emeralds in slot 1");
		
		  test.assert(!container.transferItem(0, 1, container), "Expected transferItem to fail");
		  test.assert(container.getItem(0).amount === 6, "Expected 6 remaining emeralds in slot 0");
		  test.assert(container.getItem(1).amount === 64, "Expected 64 emeralds in slot 1");
		
		  test.assert(container.transferItem(0, 2, container), "Expected transferItem to succeed");
		  test.assert(container.getItem(0) === undefined, "Expected 0 remaining emeralds in slot 0");
		  test.assert(container.getItem(2).amount === 6, "Expected 6 emeralds in slot 2");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "lava_movement_component", (test) => {
		  const strider = test.spawn("strider", new BlockLocation(1, 2, 1));
		  const lavaMovementComp = strider.getComponent("lava_movement");
		  test.assert(lavaMovementComp !== undefined, "Expected lava_movement component");
		  test.assert(isNear(lavaMovementComp.value, 0.32), "Unexpected value");
		  test.succeed();
		})
		  .structureName("ComponentTests:large_glass_cage")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ComponentTests", "strength_component", (test) => {
		  const llama = test.spawn("llama", new BlockLocation(1, 2, 1));
		  const strengthComp = llama.getComponent("strength");
		  test.assert(strengthComp !== undefined, "Expected strength component");
		  test.assert(strengthComp.value >= 0 && strengthComp.value <= 5, "Unexpected value");
		  test.assert(strengthComp.max === 5, "Unexpected max");
		  test.succeed();
		})
		  .structureName("ComponentTests:animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("ComponentTests", "item_component", async (test) => {
		  const itemAmount = 5;
		  const torchItem = new ItemStack(MinecraftItemTypes.torch, itemAmount);
		  const torch = test.spawnItem(torchItem, new Location(1.5, 2.5, 1.5));
		  const itemComp = torch.getComponent("item");
		  test.assert(itemComp !== undefined, "Expected item component");
		  test.assert(itemComp.itemStack.id === "minecraft:torch", "Unexpected item id");
		  test.assert(itemComp.itemStack.amount === itemAmount, "Unexpected item amount");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "DebugTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftItemTypes, ItemStack, world } from "mojang-minecraft";
		
		GameTest.register("DebugTests", "always_fail", (test) => {
		  // Do nothing, let the test time out
		})
		  .maxTicks(50)
		  .tag(GameTest.Tags.suiteDebug);
		
		GameTest.register("DebugTests", "always_succeed", (test) => {
		  test.runAfterDelay(40, () => {
		    test.succeed();
		  });
		})
		  .maxTicks(50)
		  .tag(GameTest.Tags.suiteDebug);
		
		GameTest.register("DebugTests", "stack_overflow", (test) => {
		  let player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "stack_overflow");
		  let apple = new ItemStack(MinecraftItemTypes.apple);
		  let eventCallback = world.events.beforeItemUse.subscribe((eventData) => {
		    player.useItem(apple);
		  });
		  player.useItem(apple);
		  world.events.beforeItemUse.unsubscribe(eventCallback);
		  test.succeed();
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_succeed");
		
		GameTest.register("DebugTests", "perf_hang", (test) => {
		  console.warn("infinite loop");
		  while (true) {}
		  test.fail();
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_succeed");
		
		GameTest.register("DebugTests", "perf_slow", (test) => {
		  console.warn("7 ms delay each frame");
		  let tickEvent = world.events.tick.subscribe((eventData) => {
		    const start = Date.now();
		    while (Date.now() - start < 7) {}
		  });
		  test.runAfterDelay(80, () => {
		    world.events.tick.unsubscribe(tickEvent);
		    test.succeed();
		  });
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_succeed");
		
		GameTest.register("DebugTests", "perf_spike", (test) => {
		  console.warn("150 ms delay");
		  const start = Date.now();
		  while (Date.now() - start < 150) {}
		  test.succeed();
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_succeed");
		
		GameTest.register("DebugTests", "out_of_memory", (test) => {
		  let buffer = new ArrayBuffer(250000000); // 250MB
		  test.fail("Test should have ran out of memory");
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_fail");
		
		GameTest.register("DebugTests", "high_memory_usage", (test) => {
		  let buffer = new ArrayBuffer(100000000); // 100MB
		  buffer.a = buffer; // circular reference
		  test.succeed();
		})
		  .tag(GameTest.Tags.suiteDebug)
		  .structureName("DebugTests:always_succeed");
		'''
	script "DispenserTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftItemTypes, ItemStack } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const armorSlotTorso = 1;
		const pinkCarpet = 6;
		const tameMountComponentName = "minecraft:tamemount";
		const threeSecondsInTicks = 60;
		
		GameTest.register("DispenserTests", "dispenser_shears_sheep", (test) => {
		  const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(sheepId, entityLoc);
		  test.assertEntityPresent(sheepId, entityLoc, true);
		  test.assertEntityHasComponent(sheepId, "minecraft:is_sheared", entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(sheepId, entityLoc, true);
		  test.succeedWhenEntityHasComponent(sheepId, "minecraft:is_sheared", entityLoc, true);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_shears_mooshroom", (test) => {
		  const cowId = "minecraft:cow<minecraft:ageable_grow_up>";
		  const mooshroomId = "minecraft:mooshroom<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(mooshroomId, entityLoc);
		  test.assertEntityPresent(mooshroomId, entityLoc, true);
		  test.assertEntityHasComponent(mooshroomId, "minecraft:is_sheared", entityLoc, false);
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedWhenEntityPresent(cowId, entityLoc, true);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_shears_snowgolem", (test) => {
		  const snowGolemId = "minecraft:snow_golem";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(snowGolemId, entityLoc);
		  test.assertEntityPresent(snowGolemId, entityLoc, true);
		  test.assertEntityHasComponent(snowGolemId, "minecraft:is_sheared", entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(snowGolemId, entityLoc, true);
		  test.succeedWhenEntityHasComponent(snowGolemId, "minecraft:is_sheared", entityLoc, true);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_horsearmor_on_horse", (test) => {
		  const horseId = "minecraft:horse<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  const horse = test.spawn(horseId, entityLoc);
		  horse.getComponent(tameMountComponentName).setTamed(false);
		
		  test.assertEntityHasArmor(horseId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(horseId, entityLoc, true);
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasArmor(horseId, armorSlotTorso, "diamond_horse_armor", 0, entityLoc, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_saddle_on_pig", (test) => {
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(pigId, entityLoc);
		  test.assertEntityHasComponent(pigId, "minecraft:is_saddled", entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(pigId, entityLoc, true);
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(pigId, "minecraft:is_saddled", entityLoc, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_saddle_on_horse", (test) => {
		  const horseId = "minecraft:horse<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  const horse = test.spawn(horseId, entityLoc);
		  test.assertEntityInstancePresent(horse, entityLoc);
		  horse.getComponent(tameMountComponentName).setTamed(false);
		  test.assertEntityHasComponent(horseId, "minecraft:is_saddled", entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(horseId, entityLoc, true);
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(horseId, "minecraft:is_saddled", entityLoc, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_chest_on_llama", (test) => {
		  const llamaId = "minecraft:llama<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  const llama = test.spawn(llamaId, entityLoc);
		  llama.getComponent(tameMountComponentName).setTamed(false);
		  test.assertEntityHasComponent(llamaId, "minecraft:is_chested", entityLoc, false);
		  test.assertEntityHasArmor(llamaId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(llamaId, entityLoc, true);
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(llamaId, "minecraft:is_chested", entityLoc, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("DispenserTests", "dispenser_carpet_on_llama", (test) => {
		  const llamaId = "minecraft:llama<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  const llama = test.spawn(llamaId, entityLoc);
		  llama.getComponent(tameMountComponentName).setTamed(false);
		  test.assertEntityHasArmor(llamaId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(llamaId, entityLoc, true);
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasArmor(llamaId, armorSlotTorso, "minecraft:carpet", pinkCarpet, entityLoc, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled);
		
		function dispenserMinecartTest(test, entityId) {
		  const minecartPos = new BlockLocation(1, 2, 1);
		  test.assertEntityPresent(entityId, minecartPos, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedWhen(() => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityPresent(entityId, minecartPos, true);
		  });
		}
		
		GameTest.register("DispenserTests", "dispenser_minecart_track", (test) => {
		  dispenserMinecartTest(test, "minecraft:minecart");
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_minecart", (test) => {
		  dispenserMinecartTest(test, "minecraft:item");
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_water", (test) => {
		  const waterPos = new BlockLocation(1, 2, 1);
		  const dispenserPos = new BlockLocation(0, 2, 1);
		  test.assertBlockPresent(MinecraftBlockTypes.water, waterPos, false);
		  test.assertContainerContains(new ItemStack(MinecraftItemTypes.waterBucket, 1, 0), dispenserPos);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedWhen(() => {
		    test.assertContainerContains(new ItemStack(MinecraftItemTypes.bucket, 1, 0), dispenserPos);
		    test.assertBlockPresent(MinecraftBlockTypes.water, waterPos, true);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_arrow_trap", (test) => {
		  const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		  const sheepPos = new BlockLocation(4, 2, 2);
		  test.spawn(sheepId, sheepPos);
		  test.assertEntityPresent(sheepId, sheepPos, true);
		  test.pullLever(new BlockLocation(2, 3, 2));
		  test.succeedWhenEntityPresent(sheepId, sheepPos, false);
		})
		  .maxTicks(200)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_charge_respawn_anchor", (test) => {
		  const testEx = new GameTestExtensions(test);
		  test.pressButton(new BlockLocation(0, 2, 0));
		  const respawnAnchorPos = new BlockLocation(1, 2, 1);
		  const dispenserPos = new BlockLocation(0, 2, 1);
		  test.assertContainerContains(new ItemStack(MinecraftItemTypes.glowstone, 1, 0), dispenserPos);
		
		  testEx.assertBlockProperty("respawn_anchor_charge", 0, respawnAnchorPos);
		  test.succeedWhen(() => {
		    testEx.assertBlockProperty("respawn_anchor_charge", 1, respawnAnchorPos);
		    test.assertContainerEmpty(dispenserPos);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_fire", (test) => {
		  test.pullLever(new BlockLocation(2, 5, 1));
		  const firePositions = [
		    new BlockLocation(2, 2, 1),
		    new BlockLocation(2, 4, 0),
		    new BlockLocation(4, 5, 1),
		    new BlockLocation(0, 5, 1),
		    new BlockLocation(2, 5, 3),
		    new BlockLocation(2, 7, 1),
		  ];
		
		  test.succeedWhen(() => {
		    for (const pos of firePositions) {
		      test.assertBlockPresent(MinecraftBlockTypes.fire, pos, true);
		    }
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		// Regression test for crash when dispensing fire MC-210622
		GameTest.register("DispenserTests", "dispenser_fire_crash", (test) => {
		  test.pullLever(new BlockLocation(0, 2, 0));
		  test.succeedOnTick(50);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "DoorTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const DOOR_TEST_PADDING = 100; // The padding for the door tests will need to be increased some more to prevent the interference
		
		GameTest.register("DoorTests", "four_villagers_one_door", (test) => {
		  const villagerEntityType = "minecraft:villager_v2";
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>"; // Attempt to spawn the villagers as farmers
		
		  test.spawn(villagerEntitySpawnType, new BlockLocation(5, 2, 4));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(4, 2, 5));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 5));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(1, 2, 4));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerEntityType, new BlockLocation(5, 2, 2), true);
		    test.assertEntityPresent(villagerEntityType, new BlockLocation(5, 2, 1), true);
		    test.assertEntityPresent(villagerEntityType, new BlockLocation(1, 2, 2), true);
		    test.assertEntityPresent(villagerEntityType, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .tag(GameTest.Tags.suiteDisabled) // Villagers can get stuck on the door or on sleeping villagers
		  .padding(DOOR_TEST_PADDING) // Space out villager tests to stop them from confusing each other
		  .batch("night") // This should be a constant at some point
		  .maxTicks(600);
		
		GameTest.register("DoorTests", "villagers_can_pass_open_iron_door", (test) => {
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(2, 2, 5));
		
		  test.succeedWhenEntityPresent(villagerActor, new BlockLocation(1, 2, 1), true);
		})
		  .maxTicks(900) //Increase max ticks from 200 to 900 (same value as in PathFindingTests), to make sure villager can find and go to bed
		  .batch("night")
		  .required(false)
		  .padding(DOOR_TEST_PADDING)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DoorTests", "villagers_cant_pass_closed_iron_door", (test) => {
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(2, 2, 5));
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertEntityPresent(villagerActor, new BlockLocation(1, 2, 1), false);
		    })
		    .thenIdle(200)
		    .thenSucceed();
		})
		  .maxTicks(220)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DoorTests", "door_maze", (test) => {
		  const villagerActor = "minecraft:villager_v2";
		
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		
		  test.succeedWhenEntityPresent(villagerActor, new BlockLocation(7, 2, 7), true);
		})
		  .maxTicks(400)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag(GameTest.Tags.suiteDisabled); // Both of Java and Bedrock are failed villager is stuck and doesn't find the good way.
		
		GameTest.register("DoorTests", "door_maze_3d", (test) => {
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		
		  test.succeedWhenEntityPresent(villagerActor, new BlockLocation(7, 2, 7), true);
		})
		  .maxTicks(400)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag(GameTest.Tags.suiteDisabled); //Both of Java and Bedrock are failed looks like he doesn't cross obstacle and doesn't find the good way.
		
		GameTest.register("DoorTests", "door_maze_crowded", (test) => {
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(3, 2, 2));
		  test.spawn(villagerActor, new BlockLocation(5, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerActor, new BlockLocation(7, 2, 7), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(4, 2, 8), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(2, 2, 7), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(1, 2, 8), true);
		  });
		})
		  .maxTicks(400)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag(GameTest.Tags.suiteDisabled); //Both of Java and Bedrock are failed, some villiages are stuck behind the door and doesn't find the path.
		
		GameTest.register("DoorTests", "inverted_door", (test) => {
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(3, 2, 1));
		
		  test.succeedWhenEntityPresent(villagerActor, new BlockLocation(3, 2, 5), true);
		})
		  .maxTicks(200)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag(GameTest.Tags.suiteDisabled); //Both of Java and Bedrock are failed, village is stuck behind the door, at there all time.
		
		GameTest.register("DoorTests", "close_door_after_passing_through", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(4, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(5, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(7, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(9, 2, 1));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerActor, new BlockLocation(1, 2, 8), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(3, 2, 8), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(5, 2, 8), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(7, 2, 8), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(9, 2, 8), true);
		
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(9, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(7, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(5, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(4, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(2, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(1, 2, 4));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(2, 2, 5));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(1, 2, 5));
		  });
		})
		  .maxTicks(900)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Unstable, Villager sometimes cannot find the bed. Also, Sometimes when multiple villagers passing through the door, the door cannot close. Fail rate: 44%.
		
		GameTest.register("DoorTests", "close_door_even_if_near_bed", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const villagerActor = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerActor, new BlockLocation(1, 2, 1));
		  test.spawn(villagerActor, new BlockLocation(3, 2, 1));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerActor, new BlockLocation(1, 2, 4), true);
		    test.assertEntityPresent(villagerActor, new BlockLocation(3, 2, 5), true);
		
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(1, 2, 3));
		    testEx.assertBlockProperty("open_bit", 0, new BlockLocation(3, 2, 3));
		  });
		})
		  .maxTicks(900)
		  .padding(DOOR_TEST_PADDING)
		  .batch("night")
		  .required(false)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Unstable, Villager sometimes cannot find the bed. Fail rate: 5%
		'''
	script "DripstoneTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftItemTypes, world } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		function placeDripstoneTip(test, pos, hanging, waterlogged = false) {
		  const pointedDripstonePermutation = MinecraftBlockTypes.pointedDripstone.createDefaultBlockPermutation();
		  pointedDripstonePermutation.getProperty("hanging").value = hanging;
		  pointedDripstonePermutation.getProperty("dripstone_thickness").value = "tip";
		
		  const pointedDripstoneBlock = test.getDimension().getBlock(test.worldBlockLocation(pos));
		  pointedDripstoneBlock.setPermutation(pointedDripstonePermutation);
		  pointedDripstoneBlock.isWaterlogged = waterlogged;
		}
		
		function assertDripstone(test, pos, hanging, thickness, waterlogged = false) {
		  const testEx = new GameTestExtensions(test);
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, pos, true);
		  test.assertIsWaterlogged(pos, waterlogged);
		  testEx.assertBlockProperty("hanging", hanging, pos);
		  testEx.assertBlockProperty("dripstone_thickness", thickness, pos);
		}
		
		function assertColumnBaseToTip(test, basePos, hanging, ...thicknesses) {
		  let checkPos = basePos;
		  for (const thickness of thicknesses) {
		    assertDripstone(test, checkPos, hanging, thickness);
		    if (hanging == true) {
		      checkPos = checkPos.offset(0, -1, 0);
		    } else {
		      checkPos = checkPos.offset(0, 1, 0);
		    }
		  }
		}
		
		///
		// Concrete Tests
		///
		GameTest.register("DripstoneTests", "thickness_update", (test) => {
		  // Check that each stalactite got loaded correctly
		  assertColumnBaseToTip(test, new BlockLocation(0, 12, 0), true, "base", "middle", "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(1, 12, 0), true, "base", "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(2, 12, 0), true, "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(3, 12, 0), true, "tip");
		
		  // Check that each stalagmite got loaded correctly
		  assertColumnBaseToTip(test, new BlockLocation(0, 2, 0), false, "base", "middle", "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(1, 2, 0), false, "base", "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(2, 2, 0), false, "frustum", "tip");
		  assertColumnBaseToTip(test, new BlockLocation(3, 2, 0), false, "tip");
		
		  // Extend each stalactite
		  placeDripstoneTip(test, new BlockLocation(0, 8, 0), true);
		  placeDripstoneTip(test, new BlockLocation(1, 9, 0), true);
		  placeDripstoneTip(test, new BlockLocation(2, 10, 0), true);
		  placeDripstoneTip(test, new BlockLocation(3, 11, 0), true);
		
		  // Extend each stalagmite
		  placeDripstoneTip(test, new BlockLocation(0, 6, 0), false);
		  placeDripstoneTip(test, new BlockLocation(1, 5, 0), false);
		  placeDripstoneTip(test, new BlockLocation(2, 4, 0), false);
		  placeDripstoneTip(test, new BlockLocation(3, 3, 0), false);
		
		  test.succeedIf(() => {
		    // Check the shape of each stalactite
		    assertColumnBaseToTip(test, new BlockLocation(0, 12, 0), true, "base", "middle", "middle", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(1, 12, 0), true, "base", "middle", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(2, 12, 0), true, "base", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(3, 12, 0), true, "frustum", "tip");
		
		    // Check the shape of each stalagmite
		    assertColumnBaseToTip(test, new BlockLocation(0, 2, 0), false, "base", "middle", "middle", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(1, 2, 0), false, "base", "middle", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(2, 2, 0), false, "base", "frustum", "tip");
		    assertColumnBaseToTip(test, new BlockLocation(3, 2, 0), false, "frustum", "tip");
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalactite_fall", (test) => {
		  const landingPos = new BlockLocation(1, 2, 1);
		  test.assertEntityPresent("minecraft:item", landingPos, false);
		
		  test.pressButton(new BlockLocation(0, 3, 0));
		  test.succeedWhenEntityPresent("minecraft:item", landingPos, true);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Test failed occasionally due to bug 587521: Collision box of pointed dripstone becomes larger and offsets when falling.
		
		GameTest.register("DripstoneTests", "stalactite_fall_bedrock", (test) => {
		  const landingPos = new BlockLocation(1, 2, 1);
		  test.assertEntityPresent("minecraft:item", landingPos, false);
		
		  test.pressButton(new BlockLocation(0, 3, 0));
		  test.succeedWhenEntityPresent("minecraft:item", landingPos, true);
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalactite_hurt", (test) => {
		  const poorInnocentVictimPos = new BlockLocation(1, 2, 1);
		  const poorInnocentVictim = test.spawnWithoutBehaviors("minecraft:pig", poorInnocentVictimPos);
		
		  test.pressButton(new BlockLocation(0, 6, 0));
		
		  const healthComponent = poorInnocentVictim.getComponent("minecraft:health");
		
		  test.succeedWhen(() => {
		    test.assert(healthComponent.current < healthComponent.value, "Mob should be hurt!");
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalagmite_break", (test) => {
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 2, 1), true);
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 3, 1), true);
		  test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 4, 1), true);
		
		  test.pressButton(new BlockLocation(0, 3, 0));
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 2, 1), false);
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 3, 1), false);
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 4, 1), false);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalagmite_stalactite_separation", (test) => {
		  assertColumnBaseToTip(test, new BlockLocation(1, 2, 1), false, "frustum", "merge");
		  assertColumnBaseToTip(test, new BlockLocation(1, 5, 1), true, "frustum", "merge");
		  assertColumnBaseToTip(test, new BlockLocation(2, 2, 1), false, "frustum", "merge");
		  assertColumnBaseToTip(test, new BlockLocation(2, 5, 1), true, "frustum", "merge");
		
		  test.pressButton(new BlockLocation(0, 3, 0));
		  test.pressButton(new BlockLocation(3, 4, 0));
		
		  test.succeedWhen(() => {
		    // the right-hand stalagmite should be gone
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 2, 1), false);
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(1, 3, 1), false);
		
		    // the right-hand stalactite should be intact, but the tip should no longer be a merged tip
		    assertColumnBaseToTip(test, new BlockLocation(1, 5, 1), true, "frustum", "tip");
		
		    // the left-hand stalagmite should be intact, but the tip should no longer be a merged tip
		    assertColumnBaseToTip(test, new BlockLocation(2, 2, 1), false, "frustum", "tip");
		
		    // the left-hand stalactite should be gone
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(2, 5, 1), false);
		    test.assertBlockPresent(MinecraftBlockTypes.pointedDripstone, new BlockLocation(2, 4, 1), false);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalagmite_hurt", (test) => {
		  const unluckyPig = test.spawn("minecraft:pig", new BlockLocation(1, 4, 1));
		  const luckyPig = test.spawn("minecraft:pig", new BlockLocation(3, 4, 1));
		
		  const unluckyPigHealthComponent = unluckyPig.getComponent("minecraft:health");
		  const luckyPigHealthComponent = luckyPig.getComponent("minecraft:health");
		
		  test.succeedWhen(() => {
		    test.assert(unluckyPigHealthComponent.current < unluckyPigHealthComponent.value, "This pig should be hurt!");
		    test.assert(luckyPigHealthComponent.current == luckyPigHealthComponent.value, "This pig shouldn't be hurt!");
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DripstoneTests", "stalactite_fall_no_dupe", (test) => {
		  test.pressButton(new BlockLocation(4, 9, 0));
		  test.pressButton(new BlockLocation(8, 8, 0));
		  test.pressButton(new BlockLocation(12, 6, 0));
		  test.pressButton(new BlockLocation(16, 5, 0));
		
		  test
		    .startSequence()
		    .thenExecuteAfter(60, () => {
		      test.assertItemEntityCountIs(MinecraftItemTypes.pointedDripstone, new BlockLocation(2, 2, 2), 1, 5);
		      test.assertItemEntityCountIs(MinecraftItemTypes.pointedDripstone, new BlockLocation(6, 2, 2), 1, 5);
		      test.assertItemEntityCountIs(MinecraftItemTypes.pointedDripstone, new BlockLocation(10, 2, 2), 1, 2);
		      test.assertItemEntityCountIs(MinecraftItemTypes.pointedDripstone, new BlockLocation(14, 2, 2), 1, 2);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "DuplicationTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftItemTypes } from "mojang-minecraft";
		
		function poweredRailTest(test, pulseTicks) {
		  test.pulseRedstone(new BlockLocation(1, 2, 3), pulseTicks);
		
		  test
		    .startSequence()
		    .thenIdle(8)
		    .thenExecute(() => test.assertItemEntityCountIs(MinecraftItemTypes.goldenRail, new BlockLocation(1, 2, 1), 1.0, 1)) // powered rail
		    .thenSucceed();
		}
		
		GameTest.register("DuplicationTests", "powered_rail_twist_bedrock", (test) => {
		  poweredRailTest(test, 2);
		})
		  .structureName("DuplicationTests:powered_rail_twist")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DuplicationTests", "powered_rail_twist", (test) => {
		  poweredRailTest(test, 1);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Single pulse redstone sometimes doesn't activate the piston
		
		GameTest.register("DuplicationTests", "powered_rail_straight_bedrock", (test) => {
		  poweredRailTest(test, 2);
		})
		  .structureName("DuplicationTests:powered_rail_straight")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DuplicationTests", "powered_rail_straight", (test) => {
		  poweredRailTest(test, 1);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Single pulse redstone sometimes doesn't activate the piston
		
		GameTest.register("DuplicationTests", "detector_rail", (test) => {
		  test.spawn("minecraft:minecart", new BlockLocation(1, 3, 2));
		
		  test
		    .startSequence()
		    .thenIdle(8)
		    .thenExecute(() =>
		      test.assertItemEntityCountIs(MinecraftItemTypes.detectorRail, new BlockLocation(1, 2, 1), 1.0, 1)
		    )
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		function railClassicTest(test, pulseTicks) {
		  test.pulseRedstone(new BlockLocation(1, 5, 5), pulseTicks);
		
		  test
		    .startSequence()
		    .thenIdle(3)
		    .thenExecute(() => test.assertItemEntityCountIs(MinecraftItemTypes.rail, new BlockLocation(1, 4, 2), 1.0, 0))
		    .thenSucceed();
		}
		
		GameTest.register("DuplicationTests", "rail_classic_bedrock", (test) => {
		  railClassicTest(test, 2);
		})
		  .structureName("DuplicationTests:rail_classic")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DuplicationTests", "rail_classic", (test) => {
		  railClassicTest(test, 1);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Single pulse redstone sometimes doesn't activate the piston
		'''
	script "EnchantmentTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
			BlockLocation,
			Direction,
			ItemStack,
			Location,
			MinecraftBlockTypes,
			MinecraftItemTypes,
			world,
		} from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		
		const ticksPerSecond = 20;
		
		GameTest.register("EnchantmentTests", "frostwalker_freezes_water", (test) => {
				
			const spawnLoc = new BlockLocation(5, 5, 2);
			const landLoc = new BlockLocation(5, 3, 2);
			const iceLoc = new BlockLocation(3, 2, 2);
			const playerName = "Test Player";
			const player = test.spawnSimulatedPlayer(spawnLoc, playerName);	
		
			test
		    .startSequence()
			.thenIdle(10) //Frostwalker boots added here through a dispenser
			.thenExecute(() => {
				player.move(-1, 0);
			})
		    .thenExecuteAfter(ticksPerSecond, () => {
				test.assertBlockPresent(MinecraftBlockTypes.frostedIce, iceLoc, true);
		    })
		    .thenSucceed();
		})
			.structureName("EnchantmentTests:FrostWalkerFreezesWater")
			.maxTicks(ticksPerSecond * 3)
			.tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EnchantmentTests", "spectator_with_frostwalker_doesnt_freeze_water", (test) => {
				
			const spawnLoc = new BlockLocation(5, 5, 2);
			const landLoc = new BlockLocation(5, 3, 2);
			const waterLoc = new BlockLocation(3, 2, 2);
			const playerName = "Test Player";
			const player = test.spawnSimulatedPlayer(spawnLoc, playerName);	
		
			test
		    .startSequence()
			.thenIdle(60) //Frostwalker boots added here through a dispenser
			.thenExecute(() => {
				player.runCommand("gamemode spectator");
				player.move(-1, 0);
			})
			.thenIdle(10)
			.thenExecute(() => {
				player.setGameMode(1);
				player.stopMoving();
			})
		    .thenExecuteAfter(ticksPerSecond, () => {
				test.assertBlockPresent(MinecraftBlockTypes.water, waterLoc, true);
		    })
		    .thenSucceed();
		})
			.structureName("EnchantmentTests:SpecFrstWlkFreeze")
			.maxTicks(ticksPerSecond * 5)
			//remove this when deexperimentifying
			//.tag(GameTest.Tags.suiteDefault);
		
		'''
	script "EntityQueryTests.js":
		'''
		import GameTestExtensions from "./GameTestExtensions.js";
		import * as GameTest from "mojang-gametest";
		import {
		  BlockAreaSize,
		  BlockLocation,
		  EntityQueryOptions,
		  EntityQueryScoreOptions,
		  GameMode,
		  Location,
		  world,
		} from "mojang-minecraft";
		
		GameTest.register("EntityQueryTests", "world_player_query", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "world_player_1");
		  test.spawnSimulatedPlayer(new BlockLocation(0, 2, 1), "world_player_2");
		
		  test
		    .startSequence()
		    .thenExecuteAfter(2, () => {
		      let options = { name: player.nameTag };
		      const playerIterator = world.getPlayers(options);
		      const iteratorType = playerIterator.constructor.toString().match(/function (\w*)/)[1];
		      test.assert(iteratorType == "PlayerIterator", "Expected PlayerIterator, got " + iteratorType);
		      const players = Array.from(playerIterator);
		      test.assert(players.length === 1 && players[0] === player, "Unexpected player");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EntityQueryTests", "dimension_player_query", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "dimension_player_1");
		  test.spawnSimulatedPlayer(new BlockLocation(0, 2, 1), "dimension_player_2");
		
		  await test.idle(2);
		
		  let options = { name: player.nameTag };
		  const dimension = test.getDimension();
		  const players = Array.from(dimension.getPlayers(options));
		  test.assert(players.length === 1 && players[0] === player, "Unexpected player");
		
		  const overworld = world.getDimension("overworld");
		  const nether = world.getDimension("nether");
		  let otherDimension = dimension === overworld ? nether : overworld;
		
		  const otherPlayers = Array.from(otherDimension.getPlayers(options));
		  test.assert(otherPlayers.length === 0, "Unexpected player in other dimension");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EntityQueryTests", "dimension_entity_query", (test) => {
		  const testEx = new GameTestExtensions(test);
		
		  const createQueryOptions = function () {
		    let options = {
		      location: test.worldLocation(new Location(1, 2, 1)),
		      volume: testEx.rotateVolume(new BlockAreaSize(5, 3, 5)),
		    };
		    return options;
		  };
		
		  const assertEntitiesMatch = function (testName, entities, expected) {
		    entities = Array.from(entities);
		    if (entities.length != expected.length) {
		      throw `Test Case "${testName}" - Unexpected number of selected entities. Expected: ${expected.length} Actual: ${entities.length}`;
		    }
		    for (const entity of expected) {
		      if (!entities.includes(entity)) {
		        for (const e2 of entities) {
		          test.print("ID: " + e2.id);
		        }
		        throw `Test Case "${testName}" - Missing expected entity: ${entity.id} ${entity.nameTag}`;
		      }
		    }
		  };
		
		  const p1Name = "selector_player_1_" + test.getTestDirection();
		  const p2Name = "selector_player_2_" + test.getTestDirection();
		
		  // Entity Grid
		  // e8|e7|e6
		  // e5|e4|e3
		  // e2|e1|e0
		  const e0 = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 1));
		  const e1 = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 1));
		  const e2 = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(5, 2, 1));
		  const e3 = test.spawn("minecraft:husk<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 3));
		  const e4 = test.spawn("minecraft:zombie<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		  const e5 = test.spawn("minecraft:sheep<minecraft:ageable_grow_up>", new BlockLocation(5, 2, 3));
		  const e6 = test.spawn("minecraft:sheep<minecraft:ageable_grow_up>", new BlockLocation(1, 2, 5));
		  const e7 = test.spawnSimulatedPlayer(new BlockLocation(3, 2, 5), p1Name);
		  const e8 = test.spawnSimulatedPlayer(new BlockLocation(5, 2, 5), p2Name);
		
		  const dimension = test.getDimension();
		
		  test
		    .startSequence()
		    .thenExecuteAfter(2, () => {
		      dimension.runCommand(`tag @a[name=${p1Name}] add selector_tag`);
		      dimension.runCommand(`gamemode creative @a[name=${p1Name}]`);
		      dimension.runCommand(`xp 7 @a[name=${p1Name}]`); // level 1
		      try {
		        dimension.runCommand("scoreboard objectives add test_objective dummy");
		      } catch {}
		      dimension.runCommand(`scoreboard players set ${p1Name} test_objective 2`); // set test_objective=2 for player 1
		      dimension.runCommand(`scoreboard players set ${p2Name} test_objective 0`); // set test_objective=2 for player 2
		      e7.setBodyRotation(90);
		      e8.lookAtBlock(new BlockLocation(5, 2, 6)); // Look down ~48 degrees
		    })
		    .thenExecuteAfter(5, () => {
		      let options0 = createQueryOptions();
		      options0.type = "sheep";
		      assertEntitiesMatch("select sheep", dimension.getEntities(options0), [e5, e6]);
		      options0.type = undefined;
		      options0.excludeTypes = ["sheep"];
		      assertEntitiesMatch("exclude sheep", dimension.getEntities(options0), [e0, e1, e2, e3, e4, e7, e8]);
		
		      let options1 = createQueryOptions();
		      options1.families = ["zombie"];
		      assertEntitiesMatch("select zombies", dimension.getEntities(options1), [e3, e4]);
		      options1.families = [];
		      options1.excludeFamilies = ["zombie"];
		      assertEntitiesMatch("exclude zombies", dimension.getEntities(options1), [e0, e1, e2, e5, e6, e7, e8]);
		
		      let options2 = createQueryOptions();
		      options2.type = "cow";
		      options2.closest = 2;
		      assertEntitiesMatch("select 2 closest cows", dimension.getEntities(options2), [e0, e1]);
		
		      let options3 = createQueryOptions();
		      options3.type = "cow";
		      options3.farthest = 2;
		      assertEntitiesMatch("select 2 farthest cows", dimension.getEntities(options3), [e1, e2]);
		
		      let options4 = createQueryOptions();
		      options4.tags = ["selector_tag"];
		      assertEntitiesMatch("select entities tag", dimension.getEntities(options4), [e7]);
		      assertEntitiesMatch("select players tag", dimension.getPlayers(options4), [e7]);
		
		      let options5 = createQueryOptions();
		      options5.excludeTags = ["selector_tag"];
		      assertEntitiesMatch("exclude tag", dimension.getEntities(options5), [e0, e1, e2, e3, e4, e5, e6, e8]);
		
		      let options6 = createQueryOptions();
		      options6.minDistance = 4;
		      assertEntitiesMatch("select min distance 4", dimension.getEntities(options6), [e2, e5, e6, e7, e8]);
		
		      let options7 = createQueryOptions();
		      options7.maxDistance = 6;
		      assertEntitiesMatch("select max distance 6", dimension.getEntities(options7), [e0, e1, e2, e3, e4, e5, e6, e7]);
		
		      let options8 = createQueryOptions();
		      options8.minDistance = 4;
		      options8.maxDistance = 6;
		      assertEntitiesMatch("select distance 4-6", dimension.getEntities(options8), [e2, e5, e6, e7]);
		
		      let options9 = createQueryOptions();
		      options9.volume = testEx.rotateVolume(new BlockAreaSize(3, 3, 3));
		      assertEntitiesMatch("select volume", dimension.getEntities(options9), [e0, e1, e3, e4]);
		
		      let options10 = createQueryOptions();
		      options10.gameMode = GameMode.creative;
		      assertEntitiesMatch("select entities gamemode", dimension.getEntities(options10), [e7]);
		      assertEntitiesMatch("select players gamemode", dimension.getPlayers(options10), [e7]);
		
		      let options11 = createQueryOptions();
		      options11.excludeGameModes = [GameMode.creative];
		      assertEntitiesMatch("exclude entities gamemode", dimension.getEntities(options11), [e8]);
		      assertEntitiesMatch("exclude players gamemode", dimension.getPlayers(options11), [e8]);
		
		      let options12 = createQueryOptions();
		      options12.name = p1Name;
		      assertEntitiesMatch("select entities name", dimension.getEntities(options12), [e7]);
		      assertEntitiesMatch("select players name", dimension.getPlayers(options12), [e7]);
		
		      let options13 = createQueryOptions();
		      options13.excludeNames = [p1Name];
		      assertEntitiesMatch("exclude name", dimension.getEntities(options13), [e0, e1, e2, e3, e4, e5, e6, e8]);
		
		      let options14 = createQueryOptions();
		      options14.maxLevel = 1;
		      options14.minLevel = 1;
		      assertEntitiesMatch("select entities level 1", dimension.getEntities(options14), [e7]);
		      assertEntitiesMatch("select players level 1", dimension.getPlayers(options14), [e7]);
		
		      let options15 = createQueryOptions();
		      options15.maxLevel = 0;
		      assertEntitiesMatch("select entities max level 0", dimension.getEntities(options15), [e8]);
		      assertEntitiesMatch("select players max level 0", dimension.getPlayers(options15), [e8]);
		
		      let options16 = createQueryOptions();
		      options16.minHorizontalRotation = testEx.rotateAngle(90);
		      options16.maxHorizontalRotation = testEx.rotateAngle(90);
		      assertEntitiesMatch("select entities horizontal rotation 90", dimension.getEntities(options16), [e7]);
		      assertEntitiesMatch("select players horizontal rotation 90", dimension.getPlayers(options16), [e7]);
		
		      let options17 = createQueryOptions();
		      options17.minVerticalRotation = 45;
		      options17.maxVerticalRotation = 50;
		      assertEntitiesMatch("select entities vertical rotation 45-50", dimension.getEntities(options17), [e8]);
		      assertEntitiesMatch("select players vertical rotation 45-50", dimension.getPlayers(options17), [e8]);
		
		      let options18 = createQueryOptions();
		      let scoreFilter18 = {};
		      scoreFilter18.objective = "test_objective";
		      scoreFilter18.minScore = 2;
		      scoreFilter18.maxScore = 2;
		      options18.scoreOptions = [scoreFilter18];
		      assertEntitiesMatch("select entities test_objective score 2", dimension.getEntities(options18), [e7]);
		      assertEntitiesMatch("select players test_objective score 2", dimension.getPlayers(options18), [e7]);
		
		      let options19 = createQueryOptions();
		      let scoreFilter19 = {};
		      scoreFilter19.objective = "test_objective";
		      scoreFilter19.minScore = 2;
		      scoreFilter19.maxScore = 2;
		      scoreFilter19.exclude = true;
		      options19.scoreOptions = [scoreFilter19];
		      assertEntitiesMatch("exclude entities test_objective score 2", dimension.getEntities(options19), [e8]);
		      assertEntitiesMatch("exclude players test_objective score 2", dimension.getPlayers(options19), [e8]);
		
		      let options20 = createQueryOptions();
		      let scoreFilter20 = {};
		      scoreFilter20.objective = "test_objective";
		      scoreFilter20.maxScore = 1;
		      options20.scoreOptions = [scoreFilter20];
		      assertEntitiesMatch("select entities test_objective max score 2", dimension.getEntities(options20), [e8]);
		      assertEntitiesMatch("select players test_objective max score 2", dimension.getPlayers(options20), [e8]);
		
		      let options21 = createQueryOptions();
		      let scoreFilter21 = {};
		      scoreFilter21.objective = "test_objective";
		      scoreFilter21.minScore = 1;
		      options21.scoreOptions = [scoreFilter21];
		      assertEntitiesMatch("select entities test_objective min score 1", dimension.getEntities(options21), [e7]);
		      assertEntitiesMatch("select players test_objective min score 1", dimension.getPlayers(options21), [e7]);
		
		      let options22 = createQueryOptions();
		      let scoreFilter22 = {};
		      scoreFilter22.objective = "test_objective";
		      scoreFilter22.minScore = 1;
		      scoreFilter22.exclude = true;
		      options22.scoreOptions = [scoreFilter22];
		      assertEntitiesMatch("exclude entities test_objective min score 1", dimension.getEntities(options22), [e8]);
		      assertEntitiesMatch("exclude players test_objective min score 1", dimension.getPlayers(options22), [e8]);
		
		      let options23 = createQueryOptions();
		      options23.maxLevel = 3;
		      options23.minLevel = 4;
		      try {
		        dimension.getEntities(options23);
		        test.fail("Expected getEnities to throw (options23)");
		      } catch {} // error: minLevel > maxLevel
		
		      let options24 = createQueryOptions();
		      options24.maxVerticalRotation = 91;
		      try {
		        dimension.getEntities(options24);
		        test.fail("Expected getEnities to throw (options24)");
		      } catch {} // error: maxVerticalRotation > 90
		
		      let options25 = createQueryOptions();
		      options25.maxHorizontalRotation = 181;
		      try {
		        dimension.getEntities(options25);
		        test.fail("Expected getEnities to throw (options25)");
		      } catch {} // error: maxHorizontalRotation > 180
		
		      let options26 = createQueryOptions();
		      options26.closest = 0;
		      try {
		        dimension.getEntities(options26);
		        test.fail("Expected getEnities to throw (options26)");
		      } catch {} // error: nearest == 0
		
		      let options27 = createQueryOptions();
		      options27.farthest = 0;
		      try {
		        dimension.getEntities(options27);
		        test.fail("Expected getEnities to throw (options27)");
		      } catch {} // error: farthest == 0
		
		      let options28 = createQueryOptions();
		      options28.closest = 1;
		      options28.farthest = 1;
		      try {
		        dimension.getEntities(options28);
		        test.fail("Expected getEnities to throw (options28)");
		      } catch {} // error: closest and farthest both set
		    })
		    .thenSucceed();
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EntityQueryTests", "world_player_query_positional_option_exception", (test) => {
		  let assertQueryPositionalOptionException = (options, propertyName) => {
		    try {
		      world.getPlayers(options);
		      test.fail(`Expected world.getPlayers to throw with assigned property '${propertyName}'`);
		    } catch (ex) {
		      test.assert(
		        ex === `EntityQueryOptions property '${propertyName}' is incompatible with function world.getPlayers`,
		        `Unexpected exception: ${ex}`
		      );
		    }
		  };
		
		  test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "world_player_1");
		  let options = {};
		  options.location = new Location(0, 2, 1);
		  assertQueryPositionalOptionException(options, "location");
		
		  options = {};
		  options.closest = 1;
		  assertQueryPositionalOptionException(options, "closest");
		
		  options = {};
		  options.farthest = 1;
		  assertQueryPositionalOptionException(options, "farthest");
		
		  options = {};
		  options.maxDistance = 1;
		  assertQueryPositionalOptionException(options, "maxDistance");
		
		  options = {};
		  options.minDistance = 1;
		  assertQueryPositionalOptionException(options, "minDistance");
		
		  options = {};
		  options.volume = new BlockAreaSize(1, 1, 1);
		  assertQueryPositionalOptionException(options, "volume");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "EntityTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftItemTypes, ItemStack, Location } from "mojang-minecraft";
		
		function shallowItemStream(test) {
		  const lampPos = new BlockLocation(0, 1, 1);
		  let emerald = new ItemStack(MinecraftItemTypes.emerald, 1, 0);
		  test.assertRedstonePower(lampPos, 0);
		  test.spawnItem(emerald, new Location(1.5, 1.5, 1.5));
		  test.succeedWhen(() => {
		    test.assertRedstonePower(lampPos, 1);
		  });
		}
		
		GameTest.register("EntityTests", "shallow_item_stream", shallowItemStream)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // The slab should be waterlogged
		
		GameTest.register("EntityTests", "shallow_item_stream_bedrock", shallowItemStream).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("EntityTests", "items_float_up", (test) => {
		  const diamondHelmet = new ItemStack(MinecraftItemTypes.diamondHelmet, 1, 0);
		  const netheriteHelmet = new ItemStack(MinecraftItemTypes.netheriteHelmet, 1, 0);
		  const itemEntityId = "minecraft:item";
		
		  test.spawnItem(diamondHelmet, new Location(1.5, 4.0, 1.5));
		  test.spawnItem(diamondHelmet, new Location(2.5, 4.0, 1.5));
		  test.spawnItem(diamondHelmet, new Location(3.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(5.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(6.5, 4.0, 1.5));
		  test.spawnItem(netheriteHelmet, new Location(7.5, 4.0, 1.5));
		
		  test
		    .startSequence()
		    .thenIdle(60)
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(1, 2, 1)), true) // sink
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(2, 2, 1)), false) // float
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(3, 2, 1)), false) // float
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(5, 2, 1)), true) // sink
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(6, 2, 1)), false) // float
		    .thenExecute(() => test.assertEntityPresent(itemEntityId, new BlockLocation(7, 2, 1)), false) // float
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // In Bedrock, item entities don't rest on the enchanting table after falling through the water block
		'''
	script "ExtensionTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import GameTestExtensions from "./GameTestExtensions.js";
		import { BlockLocation } from "mojang-minecraft";
		
		GameTest.register("ExtensionTests", "add_entity_in_boat", (test) => {
		  const testEx = new GameTestExtensions(test);
		  testEx.addEntityInBoat("sheep", new BlockLocation(1, 2, 1));
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ExtensionTests", "make_about_to_drown", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const villagerId = "minecraft:villager_v2<minecraft:ageable_grow_up>";
		  const villager = test.spawn(villagerId, new BlockLocation(2, 2, 2));
		
		  testEx.makeAboutToDrown(villager);
		
		  test.succeedWhen(() => {
		    test.assertEntityPresentInArea(villagerId, false);
		  });
		})
		  .structureName("ComponentTests:aquarium")
		  .maxTicks(20)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "FireAvoidTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation } from "mojang-minecraft";
		
		const TicksPerSecond = 20;
		const runWalkTestTicks = 5 * TicksPerSecond;
		
		function runWalkTest(test, args) {
		  const spawnPosition = args["spawnPosition"];
		  const targetPosition = args["targetPosition"];
		  const CanTakeDamage = args["CanTakeDamage"];
		  const shouldReachTarget = args["shouldReachTarget"];
		
		  const entityType = "minecraft:villager_v2";
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>"; // Attempt to spawn the villagers as farmers
		
		  let villager = test.spawnWithoutBehaviors(villagerEntitySpawnType, spawnPosition);
		  test.walkTo(villager, targetPosition, 1);
		
		  const startingHealth = villager.getComponent("minecraft:health").current;
		
		  test.runAfterDelay(runWalkTestTicks - 1, () => {
		    if (shouldReachTarget) {
		      test.assertEntityPresent(entityType, targetPosition, true);
		    } else {
		      test.assertEntityPresent(entityType, targetPosition, false);
		    }
		
		    if (!CanTakeDamage && villager.getComponent("minecraft:health").current < startingHealth) {
		      test.fail("The villager has taken damage");
		    }
		
		    test.succeed();
		  });
		}
		
		GameTest.register("FireAvoidTests", "can_walk_around_lava", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(2, 3, 4),
		    targetPosition: new BlockLocation(2, 3, 1),
		    CanTakeDamage: false,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FireAvoidTests", "dont_cut_corner_over_fire", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(2, 2, 2),
		    CanTakeDamage: false,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FireAvoidTests", "dont_cut_corner_over_fire_far", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(5, 2, 1),
		    CanTakeDamage: false,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FireAvoidTests", "dont_walk_into_magma", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(3, 2, 1),
		    CanTakeDamage: false,
		    shouldReachTarget: false,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FireAvoidTests", "dont_walk_into_magma_diagonal", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(2, 2, 2),
		    CanTakeDamage: false,
		    shouldReachTarget: false,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag("suite:java_parity") // Java villagers don't cross diagonal magma blocks
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "fire_maze", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(8, 2, 4),
		    CanTakeDamage: false,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDisabled); // villager gets caught on fire
		
		GameTest.register("FireAvoidTests", "fire_maze_3d", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 3, 1),
		    targetPosition: new BlockLocation(7, 2, 11),
		    CanTakeDamage: false,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(TicksPerSecond * 10)
		  .tag(GameTest.Tags.suiteDisabled); // villager gets caught on fire
		
		GameTest.register("FireAvoidTests", "golem_chase_zombie_over_fire", (test) => {
		  const zombieLocation = new BlockLocation(7, 2, 1);
		  const zombieType = "minecraft:zombie";
		  test.spawnWithoutBehaviors(zombieType, zombieLocation);
		
		  test.spawn("minecraft:iron_golem", new BlockLocation(1, 2, 2));
		
		  // change the success condition because it would happen during the wandering behavior
		  // The golem was not actually chasing the zombie
		  test.succeedWhenEntityPresent(zombieType, zombieLocation, false);
		})
		  .maxTicks(TicksPerSecond * 10)
		  .batch("night")
		  .padding(10) // golem sends the zombie flying far so I added padding
		  .tag("suite:java_parity") // golem does not run over the fire
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "villager_dont_flee_over_fire", (test) => {
		  test.spawnWithoutBehaviors("minecraft:zombie", new BlockLocation(5, 2, 1));
		  const villager = test.spawn("minecraft:villager_v2", new BlockLocation(4, 2, 1));
		
		  const startingHealth = villager.getComponent("minecraft:health").current;
		
		  test.runAfterDelay(runWalkTestTicks - 1, () => {
		    if (villager.getComponent("minecraft:health").current < startingHealth) {
		      test.fail("The villager has taken damage");
		    }
		
		    test.succeed();
		  });
		})
		  .maxTicks(TicksPerSecond * 5)
		  .batch("night")
		  .tag("suite:java_parity") // villager runs into the fire, but in Java does not
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "walk_far_out_of_magma", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(4, 2, 1),
		    CanTakeDamage: true,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag("suite:java_parity") // villager gets stuck in the magma
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "walk_far_out_of_magma_diagonal", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(3, 2, 3),
		    CanTakeDamage: true,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag("suite:java_parity") // villager gets stuck in the magma
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "walk_out_of_magma", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(3, 2, 1),
		    CanTakeDamage: true,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag("suite:java_parity") // villager gets stuck in the magma
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("FireAvoidTests", "walk_out_of_magma_diagonal", (test) => {
		  runWalkTest(test, {
		    spawnPosition: new BlockLocation(1, 2, 1),
		    targetPosition: new BlockLocation(2, 2, 2),
		    CanTakeDamage: true,
		    shouldReachTarget: true,
		  });
		})
		  .maxTicks(runWalkTestTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FireAvoidTests", "zombie_chase_villager_over_fire", (test) => {
		  test.spawnWithoutBehaviors("minecraft:villager_v2", new BlockLocation(5, 2, 1));
		  const zombie = test.spawn("minecraft:zombie", new BlockLocation(1, 2, 1));
		
		  test.succeedWhenEntityPresent("minecraft:zombie", new BlockLocation(4, 2, 1), true);
		})
		  .maxTicks(TicksPerSecond * 10)
		  .batch("night")
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "FlyingMachineTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes } from "mojang-minecraft";
		
		GameTest.register("FlyingMachineTests", "machine_a", (test) => {
		  const triggerPos = new BlockLocation(1, 5, 1);
		  const farPos = new BlockLocation(2, 3, 5);
		  const nearPos = new BlockLocation(2, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.fire, triggerPos);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity") // The behavior is different between Java and Bedrock.In Java the flying machine move forward to the end and then returns to its original position, but in Bedrock it returns before it reaches the end.That cause the far point or near point been judged fail.
		  .tag(GameTest.Tags.suiteDisabled); // Unstable, about 50% pass rate.
		
		GameTest.register("FlyingMachineTests", "machine_b", (test) => {
		  const triggerPos = new BlockLocation(5, 4, 1);
		  const farPos = new BlockLocation(3, 3, 4);
		  const nearPos = new BlockLocation(4, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(triggerPos, 2);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // After I use redstone instead of set fire block to active the observer, I can see this machine use 2 reverse sticky-piston for flying forward and back in Java. It didn't work well in bedrock.
		
		GameTest.register("FlyingMachineTests", "machine_c", (test) => {
		  const triggerPos = new BlockLocation(4, 4, 0);
		  const farPos = new BlockLocation(4, 3, 5);
		  const nearPos = new BlockLocation(4, 3, 2);
		  const stopBlock = new BlockLocation(4, 3, 4);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(triggerPos, 2);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.setBlockType(MinecraftBlockTypes.obsidian, stopBlock);
		    })
		    .thenExecuteAfter(2, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Could not set fire block in the air even I use pulseRedstone() the machine didn't move.
		
		GameTest.register("FlyingMachineTests", "machine_d", (test) => {
		  const triggerPos = new BlockLocation(3, 7, 3);
		  const dropPos = new BlockLocation(5, 5, 2);
		  const farPos = new BlockLocation(2, 5, 8);
		  const nearPos = new BlockLocation(3, 5, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.fire, triggerPos);
		    })
		    .thenExecuteAfter(16, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, dropPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Can't fly as a whole thing as expectation
		
		GameTest.register("FlyingMachineTests", "machine_e", (test) => {
		  const triggerPos = new BlockLocation(1, 2, 1);
		  const farPos = new BlockLocation(1, 11, 1);
		  const nearPos = new BlockLocation(1, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.dirt, triggerPos);
		    })
		    .thenExecuteAfter(16, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.honeyBlock, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.observer, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity") // The behavior is different between Java and Bedrock. In Java the flying machine move forward to the end and then returns to its original position, but in Bedrock it returns before it reaches the end. That cause the far point or near point been judged fail.
		  .tag(GameTest.Tags.suiteDisabled); // Unstable
		
		GameTest.register("FlyingMachineTests", "machine_f", (test) => {
		  const triggerPos = new BlockLocation(4, 6, 1);
		  const farPos = new BlockLocation(3, 4, 8);
		  const dropPos = new BlockLocation(3, 4, 6);
		  const nearPos = new BlockLocation(3, 4, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.fire, triggerPos);
		    })
		    .thenExecuteAfter(18, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(40, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, dropPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Unstable, when noFinishingSequence appears, it failed.
		
		GameTest.register("FlyingMachineTests", "machine_g", (test) => {
		  const triggerPos = new BlockLocation(1, 3, 0);
		  const farPos = new BlockLocation(2, 3, 6);
		  const nearPos = new BlockLocation(1, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(triggerPos, 2);
		    })
		    .thenExecuteAfter(16, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.observer, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Could not set fire in the air, so I use pulseRedstone to active the observer. It's 50% pass rate.
		
		GameTest.register("FlyingMachineTests", "machine_h", (test) => {
		  const triggerPos = new BlockLocation(1, 4, 0);
		  const farPos = new BlockLocation(1, 3, 8);
		  const dropPos = new BlockLocation(1, 3, 7);
		  const nearPos = new BlockLocation(1, 4, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.pulseRedstone(triggerPos, 2);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, farPos, true);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, dropPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.observer, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Could not set fire in the air, so I use pulseRedstone to active the observer, pass rate is less than 10%, the sticky-piston always unstick.
		
		GameTest.register("FlyingMachineTests", "machine_i", (test) => {
		  const triggerPos = new BlockLocation(4, 2, 1);
		  const farPos = new BlockLocation(3, 8, 1);
		  const nearPos = new BlockLocation(4, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.dirt, triggerPos);
		    })
		    .thenExecuteAfter(18, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.honeyBlock, farPos, true);
		    })
		    .thenExecuteAfter(18, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.observer, nearPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity") // The behavior is different between Java and Bedrock. In Java the flying machine move forward to the end and then returns to its original position, but in Bedrock it returns before it reaches the end. That cause the far point or near point been judged fail.
		  .tag(GameTest.Tags.suiteDisabled); // Unstable.
		
		GameTest.register("FlyingMachineTests", "m_bedrock", (test) => {
		  // For bedrock. Follow the simple engine 1
		  const triggerPos = new BlockLocation(0, 3, 0);
		  const sourcePos = new BlockLocation(1, 3, 0);
		  const targetPos = new BlockLocation(8, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, false);
		      test.setBlockType(MinecraftBlockTypes.redstoneBlock, triggerPos);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, false);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FlyingMachineTests", "m2_bedrock", (test) => {
		  // For bedrock. Follow the simple engine 2
		  const triggerPos = new BlockLocation(0, 3, 1);
		  const sourcePos = new BlockLocation(2, 3, 0);
		  const targetPos = new BlockLocation(6, 3, 1);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, false);
		      test.setBlockType(MinecraftBlockTypes.redstoneBlock, triggerPos);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, false);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FlyingMachineTests", "m3_bedrock", (test) => {
		  // for bedrock. Follow the simple engine 2 with trailer
		  const triggerPos = new BlockLocation(1, 3, 2);
		  const sourcePos = new BlockLocation(4, 3, 2);
		  const targetPos = new BlockLocation(7, 3, 2);
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, false);
		      test.setBlockType(MinecraftBlockTypes.redstoneBlock, triggerPos);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.slime, sourcePos, false);
		      test.assertBlockPresent(MinecraftBlockTypes.slime, targetPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "FrogTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftItemTypes, Location, TicksPerSecond, MinecraftBlockTypes } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		GameTest.register("FrogTests", "frog_jump", (test) => {
		    const frogEntityType = "minecraft:frog";
		    const startPos = new BlockLocation(0, 7, 0);
		    const endPos = new BlockLocation(3, 7, 0);
		    test.spawn(frogEntityType, startPos);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresent(frogEntityType, endPos, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 20).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "frog_eat_slime_drop_slimeball", (test) => {
		    const frogEntityType = "minecraft:frog";
		    const startPos = new BlockLocation(1, 2, 1);
		    test.spawn(frogEntityType, startPos);
		
		    const slimeEntityType = "minecraft:slime<spawn_small>";
		    const entityLoc = new Location(1, 2, 3);
		    test.spawnWithoutBehaviorsAtLocation(slimeEntityType, entityLoc);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertItemEntityPresent(MinecraftItemTypes.slimeBall, startPos, 10.0, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 5).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "temperate_frog_magmacube_drop_ochre", (test) => {
		    const frogEntityType = "minecraft:frog";
		    const startPos = new BlockLocation(1, 2, 1);
		    test.spawn(frogEntityType, startPos);
		
		    const magmacubeEntityType = "minecraft:magma_cube<spawn_small>";
		    const entityLoc = new Location(1, 2, 3);
		    test.spawnWithoutBehaviorsAtLocation(magmacubeEntityType, entityLoc);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertItemEntityPresent(MinecraftItemTypes.ochreFroglight, startPos, 10.0, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 5).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "warm_frog_magmacube_drop_pearlescent", (test) => {
		    const frogEntityType = "minecraft:frog<spawn_warm>";
		    const startPos = new BlockLocation(1, 2, 1);
		    test.spawn(frogEntityType, startPos);
		
		    const magmacubeEntityType = "minecraft:magma_cube<spawn_small>";
		    const entityLoc = new Location(1, 2, 3);
		    test.spawnWithoutBehaviorsAtLocation(magmacubeEntityType, entityLoc);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertItemEntityPresent(MinecraftItemTypes.pearlescentFroglight, startPos, 10.0, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 5).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "cold_frog_magmacube_drop_verdant", (test) => {
		    const frogEntityType = "minecraft:frog<spawn_cold>";
		    const startPos = new BlockLocation(1, 2, 1);
		    test.spawn(frogEntityType, startPos);
		
		    const magmacubeEntityType = "minecraft:magma_cube<spawn_small>";
		    const entityLoc = new Location(1, 2, 3);
		    test.spawnWithoutBehaviorsAtLocation(magmacubeEntityType, entityLoc);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertItemEntityPresent(MinecraftItemTypes.verdantFroglight, startPos, 10.0, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 5).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "frog_lay_egg", (test) => {
		    const startPosFrogOne = new BlockLocation(0, 4, 1);
		    const startPosFrogTwo = new BlockLocation(4, 4, 1);
		    const startPosPlayer = new BlockLocation(2, 4, 0);
		    const spawnPos = new BlockLocation(2, 4, 3);
		
		    let playerSim = test.spawnSimulatedPlayer(startPosPlayer, "playerSim_frog");
		    let frogOne = test.spawn("minecraft:frog", startPosFrogOne);
		    let frogTwo = test.spawn("minecraft:frog", startPosFrogTwo);
		    const testEx = new GameTestExtensions(test);
		
		    test
		        .startSequence()
		        .thenExecute(() => testEx.giveItem(playerSim, MinecraftItemTypes.slimeBall, 2, 0))
		        .thenExecute(() => test.assert(playerSim.interactWithEntity(frogOne) == true, ""))
		        .thenExecute(() => test.assert(playerSim.interactWithEntity(frogTwo) == true, ""))
		        .thenWait(() => {
		            test.assertBlockPresent(MinecraftBlockTypes.frogSpawn, spawnPos, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 90).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("FrogTests", "frog_egg_flow_water", (test) => { //This test verifies that frogs only lay egg on water that has a flat surface, and not on the "flowing" part of water
		    const startPosFrogOne = new BlockLocation(1, 2, 1);
		    const startPosFrogTwo = new BlockLocation(2, 2, 1);
		    const startPosPlayer = new BlockLocation(1, 3, 3);
		    const flatWaterPos = new BlockLocation(5, 4, 4); //This position is where the water is flat
		
		    let playerSim = test.spawnSimulatedPlayer(startPosPlayer, "playerSim_frog");
		    let frogOne = test.spawn("minecraft:frog", startPosFrogOne);
		    let frogTwo = test.spawn("minecraft:frog", startPosFrogTwo);
		    const testEx = new GameTestExtensions(test);
		
		    test
		        .startSequence()
		        .thenExecute(() => testEx.giveItem(playerSim, MinecraftItemTypes.slimeBall, 2, 0))
		        .thenExecute(() => test.assert(playerSim.interactWithEntity(frogOne) == true, ""))
		        .thenExecute(() => test.assert(playerSim.interactWithEntity(frogTwo) == true, ""))
		        .thenWait(() => {
		            test.assertBlockPresent(MinecraftBlockTypes.frogSpawn, flatWaterPos, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 90).tag(GameTest.Tags.suiteDefault);
		'''
	script "GameTestExtensions.js":
		'''
		import { Direction } from "mojang-minecraft";
		import { ItemStack } from "mojang-minecraft";
		
		export default class GameTestExtensions {
		  constructor(test) {
		    this.test = test;
		  }
		
		  addEntityInBoat(entityType, blockLoc) {
		    const boat = this.test.spawn("boat", blockLoc);
		    this.test.assert(boat !== undefined, "Failed to spawn boat");
		    const rider = this.test.spawn(entityType, blockLoc);
		    this.test.assert(rider !== undefined, "Failed to spawn rider");
		    const boatRideableComp = boat.getComponent("rideable");
		    this.test.assert(boatRideableComp !== undefined, "Boat missing rideable component");
		    this.test.assert(boatRideableComp.addRider(rider), "Failed to add rider");
		    return rider;
		  }
		
		  makeAboutToDrown(entity) {
		    this.test.assert(entity !== undefined, "Expected entity");
		    const healthComp = entity.getComponent("health");
		    this.test.assert(healthComp !== undefined, "Entity missing health component");
		    const breathableComp = entity.getComponent("breathable");
		    this.test.assert(breathableComp !== undefined, "Entity missing breathable component");
		    healthComp.setCurrent(1);
		    breathableComp.setAirSupply(0);
		  }
		
		  assertBlockProperty(propertyName, value, blockLocation) {
		    this.test.assertBlockState(blockLocation, (block) => {
		      return block.permutation.getProperty(propertyName).value == value;
		    });
		  }
		
		  giveItem(player, itemType, amount, slot) {
		    const inventoryContainer = player.getComponent("inventory").container;
		    inventoryContainer.addItem(new ItemStack(itemType, amount ?? 1));
		    player.selectedSlot = slot ?? 0;
		  }
		
		  getVineDirection(direction) {
		    switch (direction) {
		      case Direction.north:
		        return 2;
		      case Direction.east:
		        return 3;
		      case Direction.south:
		        return 0;
		      case Direction.west:
		        return 1;
		    }
		  }
		  
		  getMultiFaceDirection(direction) {
		    switch (direction) {
		      case Direction.down:
		        return 0;
		      case Direction.up:
		        return 1;
		      case Direction.north:
		        return 4;
		      case Direction.east:
		        return 5;
		      case Direction.south:
		        return 2;
		      case Direction.west:
		        return 3;
		    }
		  }
		
		  rotateVolume(volume) {
		    switch (this.test.getTestDirection()) {
		      case Direction.east:
		        volume.z = -volume.z;
		        break;
		      case Direction.west:
		        volume.x = -volume.x;
		        break;
		      case Direction.north:
		        volume.x = -volume.x;
		        volume.z = -volume.z;
		        break;
		    }
		    return volume;
		  }
		
		  rotateAngle(angle) {
		    switch (this.test.getTestDirection()) {
		      case Direction.east:
		        angle -= 90;
		        break;
		      case Direction.west:
		        angle -= 270;
		        break;
		      case Direction.north:
		        angle -= 180;
		        break;
		    }
		    if (angle < -180) {
		      angle += 360;
		    }
		    return angle;
		  }
		}
		'''
	script "ItemEnchantmentsTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { MinecraftItemTypes, ItemStack, MinecraftEnchantmentTypes, Enchantment } from "mojang-minecraft";
		
		GameTest.register("ItemEnchantmentsTests", "item_get_enchantments_component", (test) => {
		  const itemStack = new ItemStack(MinecraftItemTypes.ironSword);
		  const enchantsComponent = itemStack.getComponent("minecraft:enchantments");
		
		  test.assert(enchantsComponent != undefined, "Enchantments component should not be null");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemEnchantmentsTests", "item_can_have_enchantments_applied", (test) => {
		  const itemStack = new ItemStack(MinecraftItemTypes.ironSword);
		  const enchantsComponent = itemStack.getComponent("minecraft:enchantments");
		  const enchantments = enchantsComponent.enchantments;
		
		  let addSuccess = enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.fireAspect, 2));
		  test.assert(addSuccess, "Should have been able to add fire aspect enchantment to empty list");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemEnchantmentsTests", "item_enchantments_conflict_prevent_adding", (test) => {
		  const itemStack = new ItemStack(MinecraftItemTypes.ironSword);
		  const enchantsComponent = itemStack.getComponent("minecraft:enchantments");
		  const enchantments = enchantsComponent.enchantments;
		
		  enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.fireAspect, 2));
		  let addSuccess = enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.aquaAffinity, 1));
		
		  test.assert(addSuccess == false, "Expected failure to add armor enchantment to sword");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemEnchantmentsTests", "get_all_enchantments", (test) => {
		  const itemStack = new ItemStack(MinecraftItemTypes.ironSword);
		  const enchantsComponent = itemStack.getComponent("minecraft:enchantments");
		  const enchantments = enchantsComponent.enchantments;
		
		  enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.fireAspect, 1));
		  enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.baneOfArthropods, 2));
		  enchantments.addEnchantment(new Enchantment(MinecraftEnchantmentTypes.knockback));
		
		  let allEnchantments = Array.from(enchantments); // test the iterator
		  test.assert(allEnchantments.length == 3, "Expected 3 enchantments");
		  test.assert(allEnchantments[0].type.id == "fireAspect", "Expected fire aspect enchantment");
		  test.assert(allEnchantments[0].level == 1, "Expected fire aspect enchantment level 1");
		  test.assert(allEnchantments[1].type.id == "baneOfArthropods", "Expected bane of arthropods enchantment");
		  test.assert(allEnchantments[1].level == 2, "Expected bane of arthropods enchantment level 2");
		  test.assert(allEnchantments[2].type.id == "knockback", "Expected knockback enchantment");
		  test.assert(allEnchantments[2].level == 1, "Expected knockback enchantment level 1");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "ItemTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  MinecraftBlockTypes,
		  Direction,
		  MinecraftItemTypes,
		  ItemStack,
		  world
		} from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		function giveItem(player, itemType, amount, slot) {
		  const inventoryContainer = player.getComponent("inventory").container;
		  inventoryContainer.addItem(new ItemStack(itemType, amount ?? 1));
		  player.selectedSlot = slot ?? 0;
		}
		
		GameTest.register("ItemTests", "item_use_event", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  const blaze = test.spawn("blaze", new BlockLocation(1, 2, 3));
		  test.assert(blaze != undefined, "Failed to initialize Blaze");
		  const blazeHealth = blaze.getComponent("health");
		  let initialHealth = blazeHealth.current;
		
		  const snowball = new ItemStack(MinecraftItemTypes.snowball, 1);
		
		  let eventReceived = false;
		  const eventSubscription = world.events.itemUse.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    eventReceived = true;
		  });
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.useItem(snowball);
		    })
		    .thenExecuteAfter(5, () => {
		      world.events.itemUse.unsubscribe(eventSubscription);
		
		      let afterUseHealth = blazeHealth.current;
		      blaze.kill();
		
		      test.assert(eventReceived, "Should have received itemUse event");
		
		      test.assert(
		        afterUseHealth < initialHealth,
		        `Blaze was not hurt after snowball throw should have been cancelled: before-> ${initialHealth} after-> ${afterUseHealth}`
		      );
		    })
		    .thenSucceed();
		})
		  .structureName("SimulatedPlayerTests:use_item")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_use_event_cancelled", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		
		  const snowball = new ItemStack(MinecraftItemTypes.snowball, 1);
		
		  let eventReceived = false;
		  let beforeEventReceived = false;
		
		  const beforeEventSubscription = world.events.beforeItemUse.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    beforeEventReceived = true;
		    eventData.cancel = true;
		  });
		
		  const eventSubscription = world.events.itemUse.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    eventReceived = true;
		  });
		
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenExecute(() => {
		      player.useItem(snowball);
		    })
		    .thenExecuteAfter(5, () => {
		      world.events.beforeItemUse.unsubscribe(beforeEventSubscription);
		      world.events.itemUse.unsubscribe(eventSubscription);
		
		      test.assert(beforeEventReceived, "Should have received beforeItemUse event");
		      test.assert(eventReceived == false, "Should not have received itemUse event");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_use_event_cancelled_stops_action", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  const blaze = test.spawn("blaze", new BlockLocation(1, 2, 3));
		  test.assert(blaze != undefined, "Failed to initialize Blaze");
		  const blazeHealth = blaze.getComponent("health");
		  let initialHealth = blazeHealth.current;
		
		  const slot = 0;
		  const snowballCount = 10;
		  const inventoryContainer = player.getComponent("inventory").container;
		
		  giveItem(player, MinecraftItemTypes.snowball, snowballCount, slot);
		
		  let eventReceived = false;
		  let beforeEventReceived = false;
		
		  const beforeEventSubscription = world.events.beforeItemUse.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    beforeEventReceived = true;
		    eventData.cancel = true;
		  });
		
		  const eventSubscription = world.events.itemUse.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    eventReceived = true;
		  });
		
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenExecute(() => {
		      player.useItemInSlot(slot);
		    })
		    .thenExecuteAfter(5, () => {
		      world.events.beforeItemUse.unsubscribe(beforeEventSubscription);
		      world.events.itemUse.unsubscribe(eventSubscription);
		
		      let afterUseHealth = blazeHealth.current;
		      blaze.kill();
		
		      test.assert(beforeEventReceived, "Should have received beforeItemUse event");
		      test.assert(eventReceived == false, "Should not have received itemUse event");
		
		      let actualAmount = inventoryContainer.getItem(slot).amount;
		      test.assert(
		        actualAmount === snowballCount,
		        `Player should have ${snowballCount} snowballs but has ${actualAmount}`
		      );
		
		      test.assert(
		        afterUseHealth === initialHealth,
		        `Blaze was hurt after snowball throw should have been cancelled: before-> ${initialHealth} after-> ${afterUseHealth}`
		      );
		    })
		    .thenSucceed();
		})
		  .structureName("SimulatedPlayerTests:use_item")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_use_on_event", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const dirtLoc = new BlockLocation(2, 1, 1);
		  const dirt = new ItemStack(MinecraftItemTypes.dirt);
		
		  let eventReceived = false;
		  const eventSubscription = world.events.itemUseOn.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    eventReceived = true;
		  });
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.useItemOnBlock(dirt, dirtLoc, Direction.up);
		    })
		    .thenExecuteAfter(5, () => {
		      world.events.itemUseOn.unsubscribe(eventSubscription);
		      test.assert(eventReceived, "Should have received itemUseOn event");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_use_on_event_cancelled_stops_action", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const dirtLoc = new BlockLocation(2, 1, 1);
		  const dirt = new ItemStack(MinecraftItemTypes.dirt);
		
		  const beforeEventSubscription = world.events.beforeItemUseOn.subscribe((eventData) => {
		    if (eventData.source != player) {
		      return;
		    }
		    eventData.cancel = true;
		  });
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.useItemOnBlock(dirt, dirtLoc, Direction.up);
		    })
		    .thenExecuteAfter(5, () => {
		      world.events.beforeItemUseOn.unsubscribe(beforeEventSubscription);
		      test.assertBlockPresent(MinecraftBlockTypes.dirt, dirtLoc.above(), false);
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_cooldown_component_is_not_null", (test) => {
		  const appleItem = new ItemStack(MinecraftItemTypes.apple);
		  const itemCooldownComponent = appleItem.getComponent("minecraft:cooldown");
		  test.assert(itemCooldownComponent !== undefined, "ItemCooldownComponent should never be null");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_cooldown_component_apple_has_default_values", (test) => {
		  const appleItem = new ItemStack(MinecraftItemTypes.apple);
		  const itemCooldownComponent = appleItem.getComponent("minecraft:cooldown");
		  test.assert(itemCooldownComponent.cooldownCategory === "", "Apple should have empty cooldown category");
		  test.assert(itemCooldownComponent.cooldownTicks === 0, "Apple should have no cooldown");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_cooldown_component_enderpearl_has_cooldown_values", (test) => {
		  const enderPearlItem = new ItemStack(MinecraftItemTypes.enderPearl);
		  const itemCooldownComponent = enderPearlItem.getComponent("minecraft:cooldown");
		  test.assert(
		    itemCooldownComponent.cooldownCategory === "ender_pearl",
		    "Ender Pearl should have ender_pearl cooldown category"
		  );
		  test.assert(itemCooldownComponent.cooldownTicks === 20, "Ender Pearl should have cooldown of 20 ticks");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "item_cooldown_component_start_cooldown", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const enderPearlItem = new ItemStack(MinecraftItemTypes.enderPearl);
		  const itemCooldownComponent = enderPearlItem.getComponent("minecraft:cooldown");
		
		  itemCooldownComponent.startCooldown(player);
		
		  test.assert(player.getItemCooldown("ender_pearl") === 20, "Player should have ender_pearl cooldown of 20 ticks");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "player_startitemcooldown_has_enderpearl_cooldown", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		
		  player.startItemCooldown("ender_pearl", 20);
		
		  test.assert(player.getItemCooldown("ender_pearl") === 20, "Player should have ender_pearl cooldown of 20 ticks");
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "before_item_use_event_modifies_inventory_item", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  const beforeItemUseCallback = world.events.beforeItemUse.subscribe((itemUseEvent) => {
		    itemUseEvent.item.setLore(["Lore"]);
		  });
		
		  testEx.giveItem(player, MinecraftItemTypes.diamondSword);
		  player.useItemInSlot(0);
		  const sword = player.getComponent("inventory").container.getItem(0);
		  test.assert(sword.getLore()[0] === "Lore", "Lore should have been added to sword");
		
		  world.events.beforeItemUse.unsubscribe(beforeItemUseCallback);
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("ItemTests", "before_item_use_on_event_modifies_inventory_item", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  const beforeItemUseOnCallback = world.events.beforeItemUseOn.subscribe((itemUseEvent) => {
		    itemUseEvent.item.setLore(["Lore"]);
		  });
		
		  testEx.giveItem(player, MinecraftItemTypes.planks, 16);
		  player.useItemInSlotOnBlock(0, new BlockLocation(1, 2, 2));
		  const planks = player.getComponent("inventory").container.getItem(0);
		  test.assert(planks.getLore()[0] === "Lore", "Lore should have been added to planks");
		
		  world.events.beforeItemUse.unsubscribe(beforeItemUseOnCallback);
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("ItemTests", "item_using_events_fire_correctly", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  let startedCharge = false, completedCharge = false, stoppedCharge = false;
		
		  let itemStartCharge = world.events.itemStartCharge.subscribe((eventData) => {
		    if(eventData.source !== player) {
		      return;
		    }
		    if(startedCharge) {
		      test.fail("world.events.itemStartCharge should only have been invoked once");
		    }
		    if(stoppedCharge || completedCharge) {
		      test.fail("world.events.itemStartCharge called out of order");
		    }
		    startedCharge = true;
		  });
		  
		  let itemCompleteCharge = world.events.itemCompleteCharge.subscribe((eventData) => {
		    if(eventData.source !== player) {
		      return;
		    }
		    if(completedCharge) {
		      test.fail("world.events.itemCompleteCharge should only have been invoked once");
		    }
		    if(startedCharge == false || stoppedCharge) {
		      test.fail("world.events.itemCompleteCharge called out of order");
		    }
		    completedCharge = true;
		  });
		    
		  let itemStopCharge = world.events.itemStopCharge.subscribe((eventData) => {
		    if(eventData.source !== player) {
		      return;
		    }
		    if(stoppedCharge) {
		      test.fail("world.events.itemStopCharge should only have been invoked once");
		    }
		    if(startedCharge == false || completedCharge == false) {
		      test.fail("world.events.itemStopCharge called out of order");
		    }
		    stoppedCharge = true;
		  });
		
		  player.giveItem(new ItemStack(MinecraftItemTypes.potion, 1), true);
		
		  await test.idle(5);
		
		  player.useItemInSlot(player.selectedSlot);
		
		  await test.idle(20 * 5); //5 seconds
		
		  test.assert(startedCharge, "Item should have fired started charge event");
		  test.assert(completedCharge, "Item should have fired completed charge event");
		  test.assert(stoppedCharge, "Item should have fired stopped charge event");
		
		  world.events.itemStartCharge.unsubscribe(itemStartCharge);
		  world.events.itemCompleteCharge.unsubscribe(itemCompleteCharge);
		  world.events.itemStopCharge.unsubscribe(itemStopCharge);
		
		  test.succeed();
		})
		  .maxTicks(300)
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		'''
	script "Main.js":
		'''
		import "scripts/AllayTests.js";
		import "scripts/APITests.js";
		import "scripts/BlockEventTests.js";
		import "scripts/BlockTests.js";
		import "scripts/ComponentTests.js";
		import "scripts/CommandTests.js";
		import "scripts/DebugTests.js";
		import "scripts/DispenserTests.js";
		import "scripts/DoorTests.js";
		import "scripts/DripstoneTests.js";
		import "scripts/DuplicationTests.js";
		import "scripts/EntityQueryTests.js";
		import "scripts/EntityTests.js";
		import "scripts/ExtensionTests.js";
		import "scripts/FireAvoidTests.js";
		import "scripts/FrogTests.js";
		import "scripts/GameTestExtensions.js";
		import "scripts/MinecartTests.js";
		import "scripts/MobTests.js";
		import "scripts/MultifaceTests.js";
		import "scripts/PathFindingTests.js";
		import "scripts/FlyingMachineTests.js";
		import "scripts/PistonTests.js";
		import "scripts/TntTests.js";
		import "scripts/WaterPathfindingTests.js";
		import "scripts/WardenTests.js";
		import "scripts/SmallMobTests.js";
		import "scripts/BigMobTests.js";
		import "scripts/RaycastingTests.js";
		import "scripts/RedstoneTests.js";
		import "scripts/SimulatedPlayerTests.js";
		import "scripts/RespawnAnchorTests.js";
		import "scripts/PlaceSeedsTests.js";
		import "scripts/ItemTests.js";
		import "scripts/ItemEnchantmentsTests.js";
		import "scripts/SculkTests.js";
		import "scripts/VibrationTests.js";
		import "scripts/EnchantmentTests.js";
		
		import { system } from "mojang-minecraft";
		system.events.beforeWatchdogTerminate.subscribe((e) => {
		  e.cancel = true;
		});
		'''
	script "MinecartTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, Direction } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		GameTest.register("MinecartTests", "turn", (test) => {
		  const minecartEntityType = "minecart";
		
		  const endPos = new BlockLocation(1, 2, 2);
		  const startPos = new BlockLocation(1, 2, 0);
		
		  test.assertEntityPresent(minecartEntityType, startPos, true);
		  test.assertEntityPresent(minecartEntityType, endPos, false);
		
		  test.pressButton(new BlockLocation(0, 3, 0));
		
		  test.succeedWhenEntityPresent(minecartEntityType, endPos, true);
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MinecartTests", "furnace_corner", (test) => {
		  const furnaceMinecart = "furnace_minecart";
		
		  const endPos = new BlockLocation(2, 2, 1);
		  const startPos = new BlockLocation(1, 2, 0);
		
		  test.assertEntityPresent(furnaceMinecart, startPos, true);
		
		  test.succeedWhenEntityPresent(furnace_minecart, endPos, true);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //furnace_minecart doesn't exist in bedrock
		
		GameTest.register("MinecartTests", "detector_rail_slope", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const poweredDetectorPos = new BlockLocation(2, 2, 1);
		  let ascendingValue = null;
		  switch (test.getTestDirection()) {
		    case Direction.east:
		      ascendingValue = 2;
		      break;
		    case Direction.west:
		      ascendingValue = 3;
		      break;
		    case Direction.north:
		      ascendingValue = 4;
		      break;
		    case Direction.south:
		      ascendingValue = 5;
		      break;
		  }
		  test.assertBlockPresent(MinecraftBlockTypes.detectorRail, poweredDetectorPos, true);
		    
		  testEx.assertBlockProperty("rail_direction", ascendingValue, poweredDetectorPos);
		
		  test.pressButton(new BlockLocation(0, 3, 3));
		  test.runAfterDelay(20, () => {
		    test.succeedWhen(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.detectorRail, poweredDetectorPos, true);
		      testEx.assertBlockProperty("rail_direction", ascendingValue, poweredDetectorPos);
		    });
		  });
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		  
		 GameTest.register("MinecartTests", "detector_rail_piston", (test) => {
		  const pistonRight = new BlockLocation(5, 3, 0);
		  const pistonLeft = new BlockLocation(0, 3, 0);
		  const torchRight = new BlockLocation(3, 2, 0);
		  const torchLeft = new BlockLocation(2, 2, 0);
		
		  let minecart = undefined;
		  test
		    .startSequence()
		    .thenExecute(() => test.pulseRedstone(pistonRight, 1))
		    .thenExecuteAfter(3, () => test.pulseRedstone(pistonLeft, 1))
		    .thenExecuteAfter(3, () => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 15);
		      minecart = test.spawn("minecart", new BlockLocation(3, 3, 1));
		    })
		    .thenExecuteAfter(3, () => {
		      test.assertRedstonePower(torchRight, 0);
		      test.pulseRedstone(pistonRight, 1);
		    })
		    .thenExecuteAfter(7, () => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 0);
		      test.pulseRedstone(pistonLeft, 1);
		    })
		    .thenExecuteAfter(7, () => {
		      test.assertRedstonePower(torchRight, 0);
		      test.assertRedstonePower(torchLeft, 15);
		      minecart.kill();
		    })
		    .thenExecuteAfter(6, () => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 15);
		    })
		    .thenSucceed();
		})
		  .required(false)
		  .tag("suite:java_parity") //Redstone timing inconsistencies between java and bedrock.
		  .tag(GameTest.Tags.suiteDisabled); 
		
		GameTest.register("MinecartTests", "detector_rail_piston_bedrock", (test) => {
		  const pistonRight = new BlockLocation(5, 3, 0);
		  const pistonLeft = new BlockLocation(0, 3, 0);
		  const torchRight = new BlockLocation(3, 2, 0);
		  const torchLeft = new BlockLocation(2, 2, 0);
		
		  let minecart = undefined;
		  test
		    .startSequence()
		    .thenExecute(() => test.pulseRedstone(pistonRight, 4))
		    .thenIdle(2)
		    .thenExecuteAfter(3, () => test.pulseRedstone(pistonLeft, 4))
		    .thenIdle(2)
		    .thenWait(() => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 15);
		      minecart = test.spawnAtLocation("minecart", new Location(3, 3.35, 1));
		    })
		    .thenExecuteAfter(6, () => {
		      test.assertRedstonePower(torchRight, 0);
		      test.pulseRedstone(pistonRight, 4);
		    })
		    .thenIdle(2)
		    .thenExecuteAfter(7, () => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 0);
		      test.pulseRedstone(pistonLeft, 4);
		    })
		    .thenIdle(2)
		    .thenExecuteAfter(7, () => {
		      test.assertRedstonePower(torchRight, 0);
		      test.assertRedstonePower(torchLeft, 15);
		      minecart.kill();
		    })
		    .thenExecuteAfter(6, () => {
		      test.assertRedstonePower(torchRight, 15);
		      test.assertRedstonePower(torchLeft, 15);
		    })
		    .thenSucceed();
		})
		  .setupTicks(20)
		  .required(false)
		  .tag("suite:java_parity") //Failed due to two game parity issues: 1.When the piston pushes the minecart, the minecart will overlap with the stone. 2.After the piston pushes the minecart back and forth several times, kill the minecart, the powered status of detector rail doesn't disappear.
		  .tag(GameTest.Tags.suiteDisabled);
		
		function runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, entityType) {
		  test.assertEntityPresent(entityType, dryTrackEndPos, false);
		  test.assertEntityPresent(entityType, wetTrackEndPos, false);
		
		  test.pressButton(buttonPos);
		
		  test
		    .startSequence()
		    .thenWait(() => test.assertEntityPresent(entityType, dryTrackEndPos), true)
		    .thenExecute(() => test.assertEntityPresent(entityType, wetTrackEndPos), false)
		    .thenWait(() => test.assertEntityPresent(entityType, wetTrackEndPos), true)
		    .thenSucceed();
		}
		
		function runWaterSlowdown(test, entityType) {
		  const buttonPos = new BlockLocation(1, 4, 2);
		  const dryTrackEndPos = new BlockLocation(8, 3, 1);
		  const wetTrackEndPos = new BlockLocation(8, 3, 3);
		
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, entityType);
		}
		
		GameTest.register("MinecartTests", "water_slowdown", (test) => {
		  runWaterSlowdown(test, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_occupied_cart", (test) => {
		  runWaterSlowdown(test, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_tnt_cart", (test) => {
		  runWaterSlowdown(test, "tnt_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the tnt_minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_hopper_cart", (test) => {
		  runWaterSlowdown(test, "hopper_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the hopper_minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_chest_cart", (test) => {
		  runWaterSlowdown(test, "chest_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the chest_minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_commandblock_cart", (test) => {
		  runWaterSlowdown(test, "command_block_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the command_block_minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_powered_furnace_cart", (test) => {
		  const buttonPos = new BlockLocation(1, 4, 4);
		  const dryTrackEndPos = new BlockLocation(7, 3, 1);
		  const wetTrackEndPos = new BlockLocation(7, 3, 7);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "furnace_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //furnace_minecart doesn't exist in bedrock
		
		GameTest.register("MinecartTests", "water_slowdown_vertical", (test) => {
		  const buttonPos = new BlockLocation(1, 6, 2);
		  const dryTrackEndPos = new BlockLocation(3, 2, 1);
		  const wetTrackEndPos = new BlockLocation(3, 2, 3);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_vertical_furnace", (test) => {
		  const buttonPos = new BlockLocation(1, 6, 2);
		  const dryTrackEndPos = new BlockLocation(3, 2, 1);
		  const wetTrackEndPos = new BlockLocation(3, 2, 3);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "furnace_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //furnace_minecart doesn't exist in bedrock
		
		GameTest.register("MinecartTests", "water_slowdown_slope_down", (test) => {
		  const buttonPos = new BlockLocation(1, 6, 2);
		  const dryTrackEndPos = new BlockLocation(6, 2, 1);
		  const wetTrackEndPos = new BlockLocation(6, 2, 3);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_slope_down_furnace", (test) => {
		  const buttonPos = new BlockLocation(1, 6, 2);
		  const dryTrackEndPos = new BlockLocation(6, 2, 1);
		  const wetTrackEndPos = new BlockLocation(6, 2, 3);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "furnace_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //furnace_minecart doesn't exist in bedrock
		
		GameTest.register("MinecartTests", "water_slowdown_slope_up", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 1);
		  const dryTrackEndPos = new BlockLocation(7, 5, 0);
		  const wetTrackEndPos = new BlockLocation(7, 5, 2);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_powered_rail", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 1);
		  const dryTrackEndPos = new BlockLocation(7, 5, 0);
		  const wetTrackEndPos = new BlockLocation(7, 5, 2);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //the minecart cannot slow down in water.
		
		GameTest.register("MinecartTests", "water_slowdown_powered_rail_furnace", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 1);
		  const dryTrackEndPos = new BlockLocation(7, 2, 0);
		  const wetTrackEndPos = new BlockLocation(7, 2, 2);
		  runWaterSlowdownTest(test, buttonPos, dryTrackEndPos, wetTrackEndPos, "furnace_minecart");
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //furnace_minecart doesn't exist in bedrock
		'''
	script "MobTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftEffectTypes, MinecraftItemTypes } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		
		const TicksPerSecond = 20;
		
		GameTest.register("MobTests", "zombie_burn", (test) => {
		  const zombieEntityType = "minecraft:zombie";
		  const zombiePosition = new BlockLocation(1, 2, 1);
		
		  test.succeedWhenEntityPresent(zombieEntityType, zombiePosition, false);
		})
		  .maxTicks(TicksPerSecond * 30)
		  .tag(GameTest.Tags.suiteDefault)
		  .batch("day");
		
		GameTest.register("MobTests", "effect_durations_longer_first", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const villagerId = "minecraft:villager_v2";
		  const villagerPos = new BlockLocation(1, 2, 1);
		  const buttonPos = new BlockLocation(1, 4, 0);
		  const strongPotion = new BlockLocation(0, 4, 0);
		  const weakPotion = new BlockLocation(2, 4, 0);
		  const strongPotionDuration = TicksPerSecond * 16;
		
		  test.spawn(villagerId, villagerPos);
		
		  test
		    .startSequence()
		    .thenExecute(() => test.setBlockType(MinecraftBlockTypes.air, weakPotion))
		    .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		    .thenWait(() => testEx.assertBlockProperty("button_pressed_bit", 0, buttonPos))
		    .thenExecute(() => test.setBlockType(MinecraftBlockTypes.air, strongPotion))
		    .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		    .thenIdle(strongPotionDuration)
		    .thenWait(() => {
		      test.assertEntityState(
		        villagerPos,
		        villagerId,
		        (entity) => entity.getEffect(MinecraftEffectTypes.regeneration).amplifier == 0
		      ); // Strength level I
		      test.assertEntityState(
		        villagerPos,
		        villagerId,
		        (entity) => entity.getEffect(MinecraftEffectTypes.regeneration).duration > TicksPerSecond * 10
		      );
		    })
		    .thenSucceed();
		})
		  .structureName("MobTests:effect_durations")
		  .maxTicks(400)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Weak potion duration is 33 seconds, strong is 16. After the strong potion expires the weak potion effect should have time remaining
		
		GameTest.register("MobTests", "drowning_test", (test) => {
		  const villagerEntitySpawnType = "minecraft:villager_v2";
		  const pigSpawnType = "minecraft:pig";
		
		  test.spawn(villagerEntitySpawnType, new BlockLocation(3, 2, 2));
		  test.spawn(pigSpawnType, new BlockLocation(3, 2, 4));
		  test.succeedWhen(() => {
		    test.assertEntityPresentInArea(pigSpawnType, false);
		    test.assertEntityPresentInArea(villagerEntitySpawnType, false);
		  });
		})
		  .maxTicks(TicksPerSecond * 45)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "golem_vs_pillager", (test) => {
		  const ironGolem = "minecraft:iron_golem";
		  const pillager = "minecraft:pillager";
		  const ironGolemPos = new BlockLocation(3, 2, 3);
		  const pillagerPos = new BlockLocation(3, 2, 4);
		
		  test.spawn(ironGolem, ironGolemPos);
		  test.spawn(pillager, pillagerPos);
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(pillager, ironGolemPos, false);
		    test.assertEntityPresent(ironGolem, pillagerPos, true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "effect_durations_stronger_first", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const villagerId = "minecraft:villager_v2";
		  const villagerPos = new BlockLocation(1, 2, 1);
		  const buttonPos = new BlockLocation(1, 4, 0);
		  const strongPotion = new BlockLocation(0, 4, 0);
		  const weakPotion = new BlockLocation(2, 4, 0);
		  const strongPotionDuration = TicksPerSecond * 16;
		
		  test.spawn(villagerId, villagerPos);
		
		  test
		    .startSequence()
		    .thenExecute(() => test.setBlockType(MinecraftBlockTypes.air, strongPotion))
		    .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		    .thenWait(() => testEx.assertBlockProperty("button_pressed_bit", 0, buttonPos))
		    .thenExecute(() => test.setBlockType(MinecraftBlockTypes.air, weakPotion))
		    .thenExecuteAfter(4, () => test.pressButton(buttonPos))
		    .thenIdle(strongPotionDuration)
		    .thenWait(() => {
		      test.assertEntityState(
		        villagerPos,
		        villagerId,
		        (entity) => entity.getEffect(MinecraftEffectTypes.regeneration).amplifier == 0
		      ); // Strength level I
		      test.assertEntityState(
		        villagerPos,
		        villagerId,
		        (entity) => entity.getEffect(MinecraftEffectTypes.regeneration).duration > TicksPerSecond * 10
		      );
		    })
		    .thenSucceed();
		})
		  .structureName("MobTests:effect_durations")
		  .maxTicks(400)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Weak potion duration is 33 seconds, strong is 16. After the strong potion expires the weak potion effect should have time remaining
		
		GameTest.register("MobTests", "silverfish_no_suffocate", (test) => {
		  const silverfishPos = new BlockLocation(1, 2, 1);
		  const silverfish = "minecraft:silverfish";
		
		  test
		    .startSequence()
		    .thenExecute(() => test.assertEntityHasComponent(silverfish, "minecraft:health", silverfishPos, true))
		    .thenIdle(40)
		    .thenExecute(() => test.assertEntityHasComponent(silverfish, "minecraft:health", silverfishPos, true))
		    .thenSucceed();
		  test
		    .startSequence()
		    .thenWait(() => test.assertEntityPresent(silverfish, silverfishPos, false))
		    .thenFail("Silverfish died");
		})
		  .maxTicks(TicksPerSecond * 30)
		  .required(false)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "small_mobs_keep_head_above_water", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const swimmerPos = new BlockLocation(1, 3, 1); //When the silverfish is produced at (1, 2, 1), the silverfish is stuck in the glass below and dies, so the y-axis goes up one frame
		  const swimmer = test.spawn("minecraft:silverfish", swimmerPos);
		
		  const drownerPos = new BlockLocation(5, 2, 1);
		  const drowner = test.spawn("minecraft:silverfish", drownerPos);
		
		  testEx.makeAboutToDrown(swimmer);
		  testEx.makeAboutToDrown(drowner);
		
		  test
		    .startSequence()
		    .thenWaitAfter(40, () => {
		      test.assertEntityPresent("minecraft:silverfish", swimmerPos, true);
		      test.assertEntityPresent("minecraft:silverfish", drownerPos, false);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "small_mobs_breathe_in_boats", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const catPos = new BlockLocation(2, 3, 2);
		  const cat = testEx.addEntityInBoat("minecraft:cat", catPos);
		  testEx.makeAboutToDrown(cat);
		
		  const silverfishPos = new BlockLocation(4, 3, 2);
		  const silverfish = testEx.addEntityInBoat("minecraft:silverfish", silverfishPos);
		  testEx.makeAboutToDrown(silverfish);
		
		  const underWaterPos = new BlockLocation(6, 2, 2);
		  const silverfish2 = testEx.addEntityInBoat("minecraft:silverfish", underWaterPos);
		  testEx.makeAboutToDrown(silverfish2);
		
		  test
		    .startSequence()
		    .thenIdle(40)
		    .thenExecute(() => test.assertEntityPresent("minecraft:cat", catPos, true))
		    .thenExecute(() => test.assertEntityPresent("minecraft:silverfish", silverfishPos, true))
		    .thenExecute(() => test.assertEntityPresent("minecraft:silverfish", underWaterPos, false))
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		///
		// Axolotl Tests
		///
		const platformStructure = "ComponentTests:platform";
		
		GameTest.register("MobTests", "axolotl_bucket_capture", (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 5, 0), "playerSim_axolotl");
		  let target = test.spawn("minecraft:axolotl", new BlockLocation(1, 5, 2));
		  const testEx = new GameTestExtensions(test);
		
		  test
		    .startSequence()
		
		    .thenExecuteAfter(20, () => testEx.giveItem(playerSim, MinecraftItemTypes.waterBucket, 1, 0))
		    .thenExecute(() => test.assert(playerSim.interactWithEntity(target) == true, ""))
		    .thenExecute(() =>
		      test.assert(playerSim.getComponent("inventory").container.getItem(0).id === "minecraft:axolotl_bucket", "")
		    )
		    .thenSucceed();
		})
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "axolotl_attacks_squid", (test) => {
		  let axlSpawn = new BlockLocation(2, 3, 2);
		  let squidSpawn = new BlockLocation(2, 4, 2);
		  test.spawn("minecraft:axolotl", axlSpawn);
		  let prey = test.spawn("minecraft:squid", squidSpawn);
		  let preyHealth = prey.getComponent("health").current;
		  test
		    .startSequence()
		    .thenIdle(20)
		    .thenWait(() => test.assert(prey.getComponent("health").current < preyHealth, ""))
		    .thenSucceed();
		})
		  .maxTicks(140)
		  .structureName("ComponentTests:aquarium")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "axolotl_lure_no_attack", (test) => {
		  const playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 5, 0), "playerSim_axolotl_lure");
		  let prey = test.spawn("minecraft:squid", new BlockLocation(1, 1, 1));
		  let prey_health = prey.getComponent("health").current;
		  const testEx = new GameTestExtensions(test);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => testEx.giveItem(playerSim, MinecraftItemTypes.tropicalFishBucket, 1, 0))
		    .thenExecute(() => test.spawn("minecraft:axolotl", new BlockLocation(1, 5, 2)))
		    .thenIdle(60)
		    .thenExecute(() => test.assert(prey.getComponent("health").current == prey_health, ""))
		    .thenSucceed();
		})
		  .structureName("MobTests:axolotl_lure")
		  .tag(GameTest.Tags.suiteDefault);
		
		///
		// Goat Tests
		///
		
		GameTest.register("MobTests", "goat_wheat_breeding", (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_goat");
		  let goat_1 = test.spawn("minecraft:goat<minecraft:ageable_grow_up>", new BlockLocation(2, 2, 1));
		  let goat_2 = test.spawn("minecraft:goat<minecraft:ageable_grow_up>", new BlockLocation(0, 2, 1));
		  const testEx = new GameTestExtensions(test);
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => testEx.giveItem(playerSim, MinecraftItemTypes.wheat, 3, 0))
		    .thenExecute(() => playerSim.interactWithEntity(goat_1))
		    .thenExecute(() => playerSim.interactWithEntity(goat_2))
		    .thenExecuteAfter(60, () => goat_1.kill())
		    .thenExecute(() => goat_2.kill())
		    .thenWait(() => test.assertEntityPresentInArea("minecraft:goat", true)) //does not count red, dying goats as a goat entity. Only counts the newborn baby
		    .thenSucceed();
		})
		  .maxTicks(120)
		  .structureName(platformStructure)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MobTests", "piglin_should_drop_different_loots", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 3, 1));
		  const inventoryContainer = player.getComponent("inventory").container;
		  const goldIngotCount = 10;
		  const piglinEntityType = "minecraft:piglin<spawn_adult>";
		  const piglin = test.spawn(piglinEntityType, new BlockLocation(1, 2, 2));
		
		  testEx.giveItem(player, MinecraftItemTypes.goldIngot, goldIngotCount);
		
		  let sequence = test.startSequence().thenIdle(5);
		  //Barter with piglin up to 10 times
		  for (let i = 1; i <= goldIngotCount; i++) {
		    sequence
		      .thenExecute(() => {
		        try {
		          player.selectedSlot = 0;
		          player.interactWithEntity(piglin);
		        } catch { }
		      })
		      .thenExecuteAfter(200, () => {
		        piglin.triggerEvent("stop_zombification_event");
		
		        // Check the player's inventory for 2 unique items
		        for (let j = 1; j <= i; j++) {
		          try {
		            let item1 = inventoryContainer.getItem(j);
		            let item2 = inventoryContainer.getItem(j + 1);
		            if (item2 != undefined && item1.id != item2.id) {
		              test.succeed();
		            }
		          } catch (e) { }
		        }
		      });
		  }
		  sequence.thenFail("Failed to obtain 2 or more unique items from bartering");
		})
		  .maxTicks(3000)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "MultifaceTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  MinecraftBlockTypes,
		  BlockProperties,
		  MinecraftItemTypes,
		  Direction,
		  world,
		} from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const DOWN = Direction.down;
		const UP = Direction.up;
		const NORTH = Direction.north;
		const SOUTH = Direction.south;
		const WEST = Direction.west;
		const EAST = Direction.east;
		const DIRECTIONS = [DOWN, UP, NORTH, SOUTH, WEST, EAST];
		
		function growLichen(test, lichenPos, faceToGrow, growDirection) {
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, lichenPos, true);
		  // multiface directions used in actual spreadFromFaceTowardDirection - pass in unmapped directions
		  test.spreadFromFaceTowardDirection(lichenPos, faceToGrow, growDirection);
		}
		
		function assertNoLichen(test, pos) {
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, pos, false);
		}
		
		function assertLichen(test, pos, waterlogged, ...faces) {
		  const testEx = new GameTestExtensions(test);
		
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, pos, true);
		  test.assertIsWaterlogged(pos, waterlogged);
		
		  const glowLichenWorldPos = test.worldBlockLocation(pos);
		  const glowLichenBlock = test.getDimension().getBlock(glowLichenWorldPos);
		  const glowLichenPermutation = glowLichenBlock.permutation;
		  const glowLichenmultiFaceDirectionBits = glowLichenPermutation.getProperty(
		    BlockProperties.multiFaceDirectionBits
		  ).value;
		
		  for (const face of DIRECTIONS) {
		    // No need to convert face because not comparing to mapped Multiface direction
		    const expectFaceBit = faces.indexOf(face) != -1 ? 1 : 0;
		    const actualFaceBit = (glowLichenmultiFaceDirectionBits & (1 << testEx.getMultiFaceDirection(face))) != 0 ? 1 : 0;
		    test.assert(
		      actualFaceBit == expectFaceBit,
		      `Unexpected face bit in the direction: ${face}. Expected: ${expectFaceBit}. Actual: ${actualFaceBit}`
		    );
		  }
		}
		
		///
		// Concrete Tests
		///
		GameTest.register("MultifaceTests", "spread_sideways_within_same_corner", (test) => {
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH);
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH, WEST);
		
		  assertLichen(test, new BlockLocation(4, 3, 0), false, UP, SOUTH);
		  growLichen(test, new BlockLocation(4, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(4, 3, 0), false, UP, SOUTH, WEST);
		
		  assertLichen(test, new BlockLocation(7, 3, 0), false, UP, EAST, SOUTH);
		  growLichen(test, new BlockLocation(7, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(7, 3, 0), false, UP, EAST, SOUTH, WEST);
		
		  assertLichen(test, new BlockLocation(11, 3, 0), false, UP, EAST, DOWN, SOUTH);
		  growLichen(test, new BlockLocation(11, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(11, 3, 0), false, UP, EAST, DOWN, SOUTH, WEST);
		
		  growLichen(test, new BlockLocation(15, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(15, 3, 0), false, UP);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_up_within_same_corner", (test) => {
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH);
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, UP);
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH, UP);
		
		  assertLichen(test, new BlockLocation(4, 3, 0), false, WEST, SOUTH);
		  growLichen(test, new BlockLocation(4, 3, 0), SOUTH, UP);
		  assertLichen(test, new BlockLocation(4, 3, 0), false, WEST, SOUTH, UP);
		
		  assertLichen(test, new BlockLocation(7, 3, 0), false, EAST, DOWN, SOUTH);
		  growLichen(test, new BlockLocation(7, 3, 0), SOUTH, UP);
		  assertLichen(test, new BlockLocation(7, 3, 0), false, EAST, DOWN, SOUTH, UP);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_around_partly_blocked_corner", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 3, 1));
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH);
		  assertNoLichen(test, new BlockLocation(0, 3, 0));
		  assertLichen(test, new BlockLocation(0, 3, 1), false, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "dont_spread_toward_opposite_face", (test) => {
		  growLichen(test, new BlockLocation(1, 3, 1), EAST, WEST);
		  assertLichen(test, new BlockLocation(1, 3, 1), false, EAST);
		  assertNoLichen(test, new BlockLocation(0, 3, 1));
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_on_flat_ceiling", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 3, 1));
		  growLichen(test, new BlockLocation(1, 3, 1), UP, WEST);
		  assertLichen(test, new BlockLocation(1, 3, 1), false, UP);
		  assertLichen(test, new BlockLocation(0, 3, 1), false, UP);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_from_wall_around_corner", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 3, 1));
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(0, 3, 1), false, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_from_ceiling_around_corner", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 4, 1));
		  growLichen(test, new BlockLocation(1, 3, 1), UP, WEST);
		  assertLichen(test, new BlockLocation(0, 4, 1), false, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_from_floor_around_corner", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 3, 1));
		  growLichen(test, new BlockLocation(1, 4, 1), DOWN, WEST);
		  assertLichen(test, new BlockLocation(0, 3, 1), false, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_on_flat_floor", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 4, 1));
		  growLichen(test, new BlockLocation(1, 4, 1), DOWN, WEST);
		  assertLichen(test, new BlockLocation(0, 4, 1), false, DOWN);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "dont_spread_toward_same_face", (test) => {
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, SOUTH);
		  assertLichen(test, new BlockLocation(1, 3, 0), false, SOUTH);
		  assertNoLichen(test, new BlockLocation(1, 3, 1));
		  assertNoLichen(test, new BlockLocation(1, 3, 2));
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_on_flat_wall", (test) => {
		  assertNoLichen(test, new BlockLocation(0, 3, 0));
		  growLichen(test, new BlockLocation(1, 3, 0), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(0, 3, 0), false, SOUTH);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_from_water_to_air", (test) => {
		  assertNoLichen(test, new BlockLocation(1, 3, 1));
		  growLichen(test, new BlockLocation(1, 2, 1), SOUTH, UP);
		  assertLichen(test, new BlockLocation(1, 2, 1), true, SOUTH);
		  assertLichen(test, new BlockLocation(1, 3, 1), false, SOUTH);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_from_air_to_water", (test) => {
		  assertNoLichen(test, new BlockLocation(1, 2, 1));
		  growLichen(test, new BlockLocation(1, 3, 1), SOUTH, DOWN);
		  assertLichen(test, new BlockLocation(1, 3, 1), false, SOUTH);
		  assertLichen(test, new BlockLocation(1, 2, 1), true, SOUTH);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "spread_within_water", (test) => {
		  assertNoLichen(test, new BlockLocation(1, 2, 1));
		  growLichen(test, new BlockLocation(2, 2, 1), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(2, 2, 1), true, SOUTH);
		  assertLichen(test, new BlockLocation(1, 2, 1), true, SOUTH);
		
		  assertLichen(test, new BlockLocation(2, 2, 1), true, SOUTH);
		  growLichen(test, new BlockLocation(2, 2, 1), SOUTH, EAST);
		  assertLichen(test, new BlockLocation(2, 2, 1), true, SOUTH, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "dont_spread_into_flowing_water", (test) => {
		  growLichen(test, new BlockLocation(2, 2, 1), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(2, 2, 1), true, SOUTH);
		  assertNoLichen(test, new BlockLocation(1, 2, 1));
		  test.assertBlockPresent(MinecraftBlockTypes.flowingWater, new BlockLocation(1, 2, 1), true);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "dont_spread_into_lava", (test) => {
		  growLichen(test, new BlockLocation(2, 2, 1), SOUTH, WEST);
		  assertLichen(test, new BlockLocation(2, 2, 1), false, SOUTH);
		  assertNoLichen(test, new BlockLocation(1, 2, 1));
		  test.assertBlockPresent(MinecraftBlockTypes.flowingLava, new BlockLocation(1, 2, 1), true);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "break_if_all_supporting_faces_destroyed", (test) => {
		  const testEx = new GameTestExtensions(test);
		  // break the supporting block behind the non-waterlogged lichen
		  test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(1, 2, 2)); //Use setBlockType(air) instead of breakBlock()
		
		  // break the supporting block behind the waterlogged lichen
		  test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(4, 2, 2)); //Use setBlockType(air) instead of breakBlock()
		
		  test.succeedWhen(() => {
		    // check that the non-waterlogged lichen was replaced with air, and that no glow lichen was dropped
		    test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 2, 2), true);
		    test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 2, 1), true);
		    test.assertItemEntityCountIs(MinecraftItemTypes.glowLichen, new BlockLocation(1, 2, 1), 1, 0);
		
		    // check that the waterlogged lichen was replaced with water, and that no glow lichen was dropped
		    test.assertBlockPresent(MinecraftBlockTypes.water, new BlockLocation(4, 2, 2), true);
		    testEx.assertBlockProperty("liquid_depth", 1, new BlockLocation(4, 2, 2));
		    test.assertBlockPresent(MinecraftBlockTypes.water, new BlockLocation(4, 2, 1), true);
		    testEx.assertBlockProperty("liquid_depth", 0, new BlockLocation(4, 2, 1));
		    test.assertItemEntityCountIs(MinecraftItemTypes.glowLichen, new BlockLocation(4, 2, 2), 1, 0);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "remove_face_if_support_destroyed", (test) => {
		  test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(1, 3, 1)); //Use setBlockType(air) instead of breakBlock()
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(1, 3, 1), true);
		      assertLichen(test, new BlockLocation(1, 3, 0), false, WEST);
		      test.assertItemEntityCountIs(MinecraftItemTypes.glowLichen, new BlockLocation(1, 2, 0), 1, 0);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "remove_if_has_no_faces", (test) => {
		  const pos = new BlockLocation(0, 2, 0);
		
		  const glowLichenPermutation = MinecraftBlockTypes.glowLichen.createDefaultBlockPermutation();
		  glowLichenPermutation.getProperty(BlockProperties.multiFaceDirectionBits).value = 0;
		  test.setBlockPermutation(glowLichenPermutation, pos);
		
		  // Make sure the glow lichen was placed
		  test.assertBlockPresent(MinecraftBlockTypes.glowLichen, pos, true);
		
		  // Update a neighbor
		  test.setBlockType(MinecraftBlockTypes.blackstone, pos.offset(1, 0, 0));
		
		  // Succeed if the glow lichen was removed
		  test
		    .startSequence()
		    .thenExecuteAfter(2, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, pos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("MultifaceTests", "default_multiface_block_has_all_sides", (test) => {
		  const pos = new BlockLocation(0, 1, 0);
		
		  const glowLichenPermutation = MinecraftBlockTypes.glowLichen.createDefaultBlockPermutation();
		  test.setBlockPermutation(glowLichenPermutation, pos);
		
		  // Make sure the glow lichen was placed
		  assertLichen(test, pos, false, DOWN, UP, NORTH, SOUTH, WEST, EAST);
		
		  test.succeed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "PathFindingTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { MinecraftBlockTypes, BlockProperties, BlockLocation, Location } from "mojang-minecraft";
		
		///
		// Setup constants
		///
		const VERTICAL_TEST_TEMPLATE_NAME = "PathFindingTests:veritcal_template";
		const VERTICAL_TEST_MAX_TICKS = 900; // This value may need to be increased if additional villager tests are added since village POI search is time sliced across all villagers
		const VERTICAL_TEST_STARTUP_TICKS = 0;
		const VERTICAL_TEST_PADDING = 100; // Space these tests apart so that villagers aren't assigned beds from nearby tests. Villages need to be kept separate.
		const TEST_MAX_TICKS = 900; // This value is used for other four tests except vertical tests.
		const TEST_PADDING = 100; // Space other four tests except vertical tests apart so that villagers aren't assigned beds from nearby tests.
		
		// Here we can define small vertical obstacle courses. Villager moves from left to right.
		const VERTICAL_TEST_PLACEMENT_MAP = [
		  ["^^##  ", "  ^^  ", "    ^^", "######"],
		  ["  ^^^^", "      ", "  ^^  ", "######"],
		  ["  ####", "      ", "      ", "____##", "######"],
		];
		
		function placeBottomSlab(test, pos) {
		  const blockPermutation = MinecraftBlockTypes.stoneSlab.createDefaultBlockPermutation();
		  blockPermutation.getProperty(BlockProperties.stoneSlabType).value = "stone_brick";
		  test.setBlockPermutation(blockPermutation, pos);
		}
		
		function placeTopSlab(test, pos) {
		  const blockPermutation = MinecraftBlockTypes.stoneSlab.createDefaultBlockPermutation();
		  blockPermutation.getProperty(BlockProperties.stoneSlabType).value = "stone_brick";
		  blockPermutation.getProperty(BlockProperties.topSlotBit).value = true;
		  test.setBlockPermutation(blockPermutation, pos);
		}
		
		function placeBlock(test, pos) {
		  test.setBlockType(MinecraftBlockTypes.stonebrick, pos);
		}
		
		/*
		  Places out blocks matching the given pattern (viewed from the side).
		  The bottom row (last string in the array) will match the floor level in the structure.
		  Sample blockMap:
		
		  "######",
		  "      ",
		  "  __^^",
		  "######"
		*/
		function placeBlocksFromMap(test, blockMap) {
		  const floorY = 1;
		
		  // We start where the villager spawns (left side of the block map)
		  const spawnX = 5;
		  const spawnZ = 4;
		
		  let currentY = floorY;
		
		  // We'll start from the bottom layer (last row in the blockMap), and work our way up
		  for (let mapRowIndex = blockMap.length - 1; mapRowIndex >= 0; --mapRowIndex) {
		    const mapRow = blockMap[mapRowIndex]; // one row, for example ##__##
		    let currentX = spawnX;
		    for (let mapColIndex = 0; mapColIndex < mapRow.length; mapColIndex += 2) {
		      // One block, for example __ (2 chars wide)
		
		      // Figure out which type of block to place (full block, bottom slab, or top slab)
		      const mapChar = mapRow[mapColIndex];
		      if (mapChar != " ") {
		        const blockPerm = getBlockPermutationForMapChar(mapChar);
		
		        // Place two next to each other
		        for (let currentZ = spawnZ; currentZ >= spawnZ - 1; --currentZ) {
		          test.setBlockPermutation(blockPerm, new BlockLocation(currentX, currentY, currentZ));
		        }
		      }
		      --currentX;
		    }
		    ++currentY;
		  }
		}
		
		/*
		  Places blocks on the villager spawn position + the next position to the right.
		  The first string (floor1) is about where the floor height should be in the start position.
		  The next 3 strings define the next position's floor height, mid block, and ceiling height.
		  Here's what the strings mean.
		
		  block: ##
		  top slab: ""
		  bottom slab: __
		
		  --------------------------------------------------------------------
		
		            |         |__       |##
		            |####     |####     |####
		  floor1:    none      0.5       1
		  --------------------------------------------------------------------
		
		            |         |  __     |  ##
		            |####     |####     |####
		  floor2:    none      0.5       1
		  --------------------------------------------------------------------
		
		            |         |         |  __     |  ^^     |  ##
		            |         |  ^^     |         |         |
		            |####     |####     |####     |####     |####
		  mid2:      none      0.5 slab  1 slab    1.5 slab  1 full
		  --------------------------------------------------------------------
		
		            |         |  ##     |  ##     |  ##     |  ##     |  ^^
		            |         |  ##     |  ##     |  ^^     |         |
		            |         |  ^^     |         |         |         |
		            |####     |####     |####     |####     |####     |####
		  ceiling:   none      0.5       1         1.5       2         2.5
		  --------------------------------------------------------------------
		*/
		function placeBlocks(test, floor1, floor2, mid2, ceiling2) {
		  const spawnPos = new BlockLocation(5, 2, 4);
		
		  // We place two of each block, at z and z-1.
		  for (let zOffset = 0; zOffset >= -1; --zOffset) {
		    // floor1 defines how high the block is where the villager spawns
		    if (floor1 == "0.5") {
		      placeBottomSlab(test, spawnPos.offset(0, 0, zOffset));
		    } else if (floor1 == "1") {
		      placeBlock(test, spawnPos.offset(0, 0, zOffset));
		    }
		
		    // floor2 defines the height of the position to the right of the villager spawn
		    if (floor2 == "0.5") {
		      placeBottomSlab(test, spawnPos.offset(-1, 0, zOffset));
		    } else if (floor2 == "1") {
		      placeBlock(test, spawnPos.offset(-1, 0, zOffset));
		    }
		
		    // mid2 defines any mid-level block in the position to the right of the villager spawn
		    if (mid2 == "0.5 slab") {
		      placeTopSlab(test, spawnPos.offset(-1, 0, zOffset));
		    } else if (mid2 == "1 slab") {
		      placeBottomSlab(test, spawnPos.offset(-1, 1, zOffset));
		    } else if (mid2 == "1.5 slab") {
		      placeTopSlab(test, spawnPos.offset(-1, 1, zOffset));
		    } else if (mid2 == "1 full") {
		      placeBlock(test, spawnPos.offset(-1, 1, zOffset));
		    }
		
		    // ceiling2 defines the ceiling height in the position to the right of the villager spawn
		    if (ceiling2 == "0.5") {
		      placeBlock(test, spawnPos.offset(-1, 2, zOffset));
		      placeBlock(test, spawnPos.offset(-1, 1, zOffset));
		      placeTopSlab(test, spawnPos.offset(-1, 0, zOffset));
		    } else if (ceiling2 == "1") {
		      placeBlock(test, spawnPos.offset(-1, 2, zOffset));
		      placeBlock(test, spawnPos.offset(-1, 1, zOffset));
		    } else if (ceiling2 == "1.5") {
		      placeBlock(test, spawnPos.offset(-1, 2, zOffset));
		      placeTopSlab(test, spawnPos.offset(-1, 1, zOffset));
		    } else if (ceiling2 == "2") {
		      placeBlock(test, spawnPos.offset(-1, 2, zOffset));
		    } else if (ceiling2 == "2.5") {
		      placeTopSlab(test, spawnPos.offset(-1, 2, zOffset));
		    }
		  }
		}
		
		function getBlockPermutationForMapChar(mapChar) {
		  if (mapChar == "#") {
		    return MinecraftBlockTypes.stonebrick.createDefaultBlockPermutation();
		  } else if (mapChar == "_") {
		    let result = MinecraftBlockTypes.stoneSlab.createDefaultBlockPermutation();
		    result.getProperty(BlockProperties.stoneSlabType).value = "stone_brick";
		    return result;
		  } else if (mapChar == "^") {
		    let result = MinecraftBlockTypes.stoneSlab.createDefaultBlockPermutation();
		    result.getProperty(BlockProperties.stoneSlabType).value = "stone_brick";
		    result.getProperty(BlockProperties.topSlotBit).value = true;
		    return result;
		  } else {
		    return MinecraftBlockTypes.air.createDefaultBlockPermutation();
		  }
		}
		
		function createVerticalTestFunctionWithPlacementMap(counter, placementMap, tag) {
		  if (tag == null) {
		    tag = GameTest.Tags.suiteDefault;
		  }
		
		  const testName = "Vertical" + counter;
		  GameTest.register("PathFindingTests", testName, (test) => {
		    const villagerEntityType = "minecraft:villager_v2";
		    const villagerEntitySpawnType = villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		
		    // Prepare the map
		    placeBlocksFromMap(test, placementMap);
		    const bedPos = new BlockLocation(1, 2, 4);
		    const doubleAboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down. (Shouldn't happen anymore)
		    const singleAboveBedPos = bedPos.above(); // Villager hit box should be working in bed properly now
		    const spawnPos = new BlockLocation(5, 3, 4);
		
		    // Do the test
		    test.assertEntityPresent(villagerEntityType, bedPos, false);
		    test.spawn(villagerEntitySpawnType, spawnPos);
		
		    test.succeedWhen(() => {
		      test.assertEntityPresent(villagerEntityType, singleAboveBedPos, false);
		      test.assertEntityPresent(villagerEntityType, doubleAboveBedPos, false);
		      test.assertEntityPresent(villagerEntityType, bedPos, true);
		
		      test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		    });
		  })
		    .structureName(VERTICAL_TEST_TEMPLATE_NAME)
		    .maxTicks(VERTICAL_TEST_MAX_TICKS)
		    .setupTicks(VERTICAL_TEST_STARTUP_TICKS)
		    .padding(VERTICAL_TEST_PADDING)
		    .batch("night")
		    .tag(tag);
		}
		
		function createVerticalTestFunctionWithCustomBlocks(testName, floor1, floor2, mid2, ceiling2, tag) {
		  if (tag == null) {
		    tag = GameTest.Tags.suiteDefault;
		  }
		
		  GameTest.register("PathFindingTests", testName, (test) => {
		    const villagerEntityType = "minecraft:villager_v2";
		    const villagerEntitySpawnType = villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		
		    // Prepare the map
		    placeBlocks(test, floor1, floor2, mid2, ceiling2);
		    const bedPos = new BlockLocation(1, 2, 4);
		    const doubleAboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down. (Shouldn't happen anymore)
		    const singleAboveBedPos = bedPos.above(); // Villager hit box should be working in bed properly now
		    const spawnPos = new BlockLocation(5, 3, 4);
		
		    // Do the test
		    test.assertEntityPresent(villagerEntityType, bedPos, false);
		    test.spawn(villagerEntitySpawnType, spawnPos);
		    test.succeedWhen(() => {
		      test.assertEntityPresent(villagerEntityType, singleAboveBedPos, false);
		      test.assertEntityPresent(villagerEntityType, doubleAboveBedPos, false);
		      test.assertEntityPresent(villagerEntityType, bedPos, true);
		
		      test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		    });
		  })
		    .structureName(VERTICAL_TEST_TEMPLATE_NAME)
		    .maxTicks(VERTICAL_TEST_MAX_TICKS)
		    .setupTicks(VERTICAL_TEST_STARTUP_TICKS)
		    .padding(VERTICAL_TEST_PADDING)
		    .batch("night")
		    .tag(tag);
		}
		
		function addVerticalTest(counter, floor1, floor2, mid2, ceiling2, tag) {
		  const testName = "Vertical" + counter;
		  createVerticalTestFunctionWithCustomBlocks(testName, floor1, floor2, mid2, ceiling2, tag);
		}
		
		GameTest.register("PathFindingTests", "bottleneck", (test) => {
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.spawn(villagerEntitySpawnType, new BlockLocation(5, 2, 4));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(4, 2, 5));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 5));
		  test.spawn(villagerEntitySpawnType, new BlockLocation(1, 2, 4));
		
		  test.succeedWhen(() => {
		    test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(5, 2, 2), true);
		    test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(5, 2, 1), true);
		    test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(1, 2, 2), true);
		    test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(1, 2, 1), true);
		  });
		})
		  .padding(TEST_PADDING) // Space out villager tests to stop them from confusing each other
		  .batch("night")
		  .maxTicks(TEST_MAX_TICKS)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Villagers can get stuck on sleeping villagers sometimes
		
		GameTest.register("PathFindingTests", "doorway", (test) => {
		    const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		    test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 6));
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(2, 2, 2), true);
		    });
		})
		    .padding(TEST_PADDING) // Space out villager tests to stop them from confusing each other
		    .batch("night")
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PathFindingTests", "doorway_with_stairs", (test) => {
		    const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		    test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 8));
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(2, 2, 2), true);
		    });
		})
		    .padding(TEST_PADDING) // Space out villager tests to stop them from confusing each other
		    .batch("night")
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PathFindingTests", "doorway_with_slabs", (test) => {
		    const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		    test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 8));
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(villagerEntitySpawnType, new BlockLocation(2, 2, 2), true);
		    });
		})
		    .padding(TEST_PADDING) // Space out villager tests to stop them from confusing each other
		    .batch("night")
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PathFindingTests", "big_obstacle_course", (test) => {
		  const bedPos = new BlockLocation(4, 3, 6);
		  const spawnPos = new BlockLocation(5, 3, 4);
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.assertEntityPresent(villagerEntitySpawnType, bedPos, false);
		  test.spawn(villagerEntitySpawnType, spawnPos);
		
		  test.succeedWhenEntityPresent(villagerEntitySpawnType, bedPos, true);
		})
		  .padding(TEST_PADDING)
		  .maxTicks(TEST_MAX_TICKS)
		  .batch("night")
		  .required(false)
		  .tag("suite:java_parity") // Test fails both on Java and Bedrock sometimes.
		  .tag(GameTest.Tags.suiteDisabled); // Village couldn't cross the polished granite most times, so fail to find a path to bed.
		
		GameTest.register("PathFindingTests", "simple", (test) => {
		  const bedPos = new BlockLocation(1, 2, 4);
		  const spawnPos = new BlockLocation(5, 3, 4);
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.assertEntityPresent(villagerEntitySpawnType, bedPos, false);
		  test.spawn(villagerEntitySpawnType, spawnPos);
		
		  test.succeedWhenEntityPresent(villagerEntitySpawnType, bedPos, true);
		})
		  .maxTicks(TEST_MAX_TICKS)
		  .batch("night")
		  .required(false)
		  .padding(TEST_PADDING)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PathFindingTests", "carpet_walk_around", (test) => {
		  const bedPos = new BlockLocation(1, 2, 4);
		  const spawnPos = new BlockLocation(5, 3, 4);
		  const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		  test.assertEntityPresent(villagerEntitySpawnType, bedPos, false);
		  test.spawn(villagerEntitySpawnType, spawnPos);
		
		  test.succeedWhenEntityPresent(villagerEntitySpawnType, bedPos, true);
		})
		  .padding(TEST_PADDING)
		  .maxTicks(TEST_MAX_TICKS)
		  .batch("night")
		  .required(false)
		  .tag("suite:java_parity") // Test fails both on Java and Bedrock sometimes.
		  .tag(GameTest.Tags.suiteDisabled); // Village couldn't walk around the carpet sometimes.
		
		// Tests for a two blocks tall mob to properly pathfind around and over trapdoors. Does not require padding.
		GameTest.register("PathFindingTests", "trapdoors", (test) => {
		    const villagerEntitySpawnType = "minecraft:villager_v2<minecraft:spawn_farmer>";
		
		    const spawnPos = new Location(3.5, 2, 10.5);
		    const villager = test.spawnWithoutBehaviorsAtLocation(villagerEntitySpawnType, spawnPos);
		
		    const targetPos = new BlockLocation(3, 2, 2);
		    test.walkTo(villager, targetPos, 1);
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(villagerEntitySpawnType, targetPos, true);
		    });
		})
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests for a one block tall mob to properly pathfind around and over trapdoors. Does not require padding.
		GameTest.register("PathFindingTests", "trapdoors_short_mob", (test) => {
		    const pigSpawnType = "minecraft:pig";
		
		    const spawnPos = new Location(3.5, 2, 10.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation(pigSpawnType, spawnPos);
		
		    const targetPos = new BlockLocation(3, 2, 2);
		    test.walkTo(pig, targetPos, 1);
		
		    test.succeedWhen(() => {
		        test.assertEntityPresent(pigSpawnType, targetPos, true);
		    });
		})
		    .maxTicks(TEST_MAX_TICKS)
		    .tag(GameTest.Tags.suiteDefault);
		
		///
		// Register tests
		///
		createVerticalTestFunctionWithPlacementMap(0, VERTICAL_TEST_PLACEMENT_MAP[0]);
		createVerticalTestFunctionWithPlacementMap(1, VERTICAL_TEST_PLACEMENT_MAP[1]);
		createVerticalTestFunctionWithPlacementMap(2, VERTICAL_TEST_PLACEMENT_MAP[2]);
		
		addVerticalTest(3, "0", "0", "0.5 slab", "1.5");
		addVerticalTest(4, "0", "0", "0.5 slab", "2");
		addVerticalTest(5, "0", "0", "1 slab", "2");
		addVerticalTest(6, "0", "0", "1 slab", "2.5");
		addVerticalTest(7, "0", "0", "1.5 slab", "2.5");
		addVerticalTest(8, "0", "0", "1 full", "2.5");
		addVerticalTest(9, "0", "0", "none", "0.5");
		addVerticalTest(10, "0", "0", "none", "1");
		addVerticalTest(11, "0", "0", "none", "1.5");
		addVerticalTest(12, "0", "0.5", "1 slab", "2");
		addVerticalTest(13, "0", "0.5", "1 slab", "2.5");
		addVerticalTest(14, "0", "0.5", "1.5 slab", "2.5");
		addVerticalTest(15, "0", "0.5", "1 full", "2.5");
		addVerticalTest(16, "0", "0.5", "none", "1");
		addVerticalTest(17, "0", "0.5", "none", "1.5");
		addVerticalTest(18, "0", "0.5", "none", "2", GameTest.Tags.suiteDisabled); // Villager attempts to jump over slab with single block gap above it
		addVerticalTest(19, "0", "0.5", "none", "2.5");
		addVerticalTest(20, "0", "1", "1.5 slab", "2.5");
		addVerticalTest(21, "0", "1", "none", "1.5");
		addVerticalTest(22, "0", "1", "none", "2");
		addVerticalTest(23, "0", "1", "none", "2.5");
		addVerticalTest(24, "0.5", "0", "0.5 slab", "1.5");
		addVerticalTest(25, "0.5", "0", "0.5 slab", "2");
		addVerticalTest(26, "0.5", "0", "0.5 slab", "2.5");
		addVerticalTest(27, "0.5", "0", "1 slab", "2");
		addVerticalTest(28, "0.5", "0", "1 slab", "2.5");
		addVerticalTest(29, "0.5", "0", "1 slab", "none", GameTest.Tags.suiteDisabled); // Villager attempts to walk through floating slab while standing on slab
		addVerticalTest(30, "0.5", "0", "1.5 slab", "2.5");
		addVerticalTest(31, "0.5", "0", "1.5 slab", "none");
		addVerticalTest(32, "0.5", "0", "1 full", "2.5");
		addVerticalTest(33, "0.5", "0", "1 full", "none");
		addVerticalTest(34, "0.5", "0", "none", "1.5");
		addVerticalTest(35, "0.5", "0", "none", "2", GameTest.Tags.suiteDisabled); // Villager attempts to jump down from a slab to a 1.5 block gap but hits head on block
		addVerticalTest(36, "0.5", "0", "none", "2.5");
		addVerticalTest(37, "0.5", "0.5", "1 slab", "2");
		addVerticalTest(38, "0.5", "0.5", "1 slab", "2.5");
		addVerticalTest(39, "0.5", "0.5", "1 slab", "none");
		addVerticalTest(40, "0.5", "0.5", "1.5 slab", "2.5");
		addVerticalTest(41, "0.5", "0.5", "1.5 slab", "none");
		addVerticalTest(42, "0.5", "0.5", "1 full", "2.5");
		addVerticalTest(43, "0.5", "0.5", "1 full", "none");
		addVerticalTest(44, "0.5", "0.5", "none", "1.5");
		addVerticalTest(45, "0.5", "0.5", "none", "2", GameTest.Tags.suiteDisabled); // Villager attempts to walk through 1 block gap while standing on slab
		addVerticalTest(46, "0.5", "0.5", "none", "2.5");
		addVerticalTest(47, "0.5", "1", "1.5 slab", "2.5");
		addVerticalTest(48, "0.5", "1", "1.5 slab", "none");
		addVerticalTest(49, "0.5", "1", "none", "1.5");
		addVerticalTest(50, "0.5", "1", "none", "2");
		addVerticalTest(51, "0.5", "1", "none", "2.5");
		addVerticalTest(52, "0.5", "1", "none", "none");
		addVerticalTest(53, "1", "0", "none", "1.5");
		addVerticalTest(54, "1", "0", "none", "2"); // Flaky
		addVerticalTest(55, "1", "0", "none", "2.5"); // Flaky
		addVerticalTest(56, "1", "0", "none", "none");
		addVerticalTest(57, "1", "0.5", "none", "1.5");
		addVerticalTest(58, "1", "0.5", "none", "2", GameTest.Tags.suiteDisabled); // Villager constantly attempts to jump into 1 block gap
		addVerticalTest(59, "1", "0.5", "none", "2.5");
		addVerticalTest(60, "1", "0.5", "none", "none");
		'''
	script "PistonTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Location, MinecraftBlockTypes, ItemStack } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		GameTest.register("PistonTests", "honey_block_entity_drag_sideways", (test) => {
		  const startPos = new BlockLocation(3, 4, 1);
		  const endPos = new BlockLocation(2, 4, 1);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		  const chickenEntityType = "minecraft:chicken";
		
		  test.assertEntityPresent(chickenEntityType, endPos, false);
		  test.spawn(chickenEntityType, startPos);
		  test
		    .startSequence()
		    .thenExecuteAfter(1, () => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenWait(() => {
		      test.assertEntityPresent(chickenEntityType, endPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "quasiconnectivity", (test) => {
		  const topStartPos = new BlockLocation(3, 3, 0);
		  const bottomStartPos = new BlockLocation(3, 2, 0);
		  const topEndPos = new BlockLocation(2, 3, 0);
		  const bottomEndPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 4, 0);
		
		  test.pullLever(pullLeverPos);
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, topStartPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, bottomStartPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLever);
		    })
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, topEndPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, bottomEndPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //There are version differences. Java version has a switch, which can control one piston at the same time, while bedrock version can only control one piston. All the structures have been modified, and the pull rod and its coordinates have been changed to (0, 3, 0) ,next to "quasiconnectivity_bedrock"
		
		GameTest.register("PistonTests", "quasiconnectivity_bedrock", (test) => {
		  const topStartPos = new BlockLocation(3, 3, 0);
		  const bottomStartPos = new BlockLocation(3, 2, 0);
		  const topEndPos = new BlockLocation(2, 3, 0);
		  const bottomEndPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.pullLever(pullLeverPos); //There are version differences. Java version has a switch, which can control one piston at the same time, while bedrock version can only control one piston. All the structures have been modified, and the pull rod and its coordinates have been changed to (0, 3, 0)
		
		  test
		    .startSequence()
		    .thenIdle(6) //it's not possible to time it exactly due to redstone differences then you can just pull the lever, wait 6 ticks, assert, pull, wait 6, assert.
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, topStartPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, bottomStartPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenIdle(6)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, topEndPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, bottomEndPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "redstone_simple_vertical_bud", (test) => {
		  const blockPos = new BlockLocation(0, 5, 0);
		  const setblockPos = new BlockLocation(0, 1, 0);
		  test.setBlockType(MinecraftBlockTypes.stone, setblockPos);
		
		  test
		    .startSequence()
		    .thenIdle(3)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneBlock, blockPos, true);
		    })
		    .thenIdle(1)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, blockPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //The lack of quasi-connectivity in bedrock is parity difference that causes this test not to succeed.
		
		GameTest.register("PistonTests", "redstone_simple_horizontal_bud", (test) => {
		  const extendedPos = new BlockLocation(3, 2, 0);
		  const retractedPos = new BlockLocation(2, 2, 0);
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(0, 1, 0));
		
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneBlock, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, retractedPos, true);
		    })
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneBlock, retractedPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // The lack of quasi-connectivity in bedrock is parity difference that causes this test not to succeed.
		
		GameTest.register("PistonTests", "redstone_bud", (test) => {
		  const blockPos = new BlockLocation(0, 3, 5);
		  const pullLeverPos = new BlockLocation(0, 4, 0);
		  test.pullLever(pullLeverPos);
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneBlock, blockPos, true);
		    })
		    .thenWaitAfter(5, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, blockPos, true);
		    })
		    .thenWait(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneBlock, blockPos, true);
		    })
		    .thenWaitAfter(5, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, blockPos, true);
		    })
		    .thenSucceed();
		})
		  .setupTicks(10)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // The lack of quasi-connectivity in bedrock is parity difference that causes this test not to succeed.
		
		GameTest.register("PistonTests", "slime_block_pull", (test) => {
		  const targetPos = new BlockLocation(3, 3, 0);
		  const pullLeverPos = new BlockLocation(0, 4, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.planks, targetPos, false);
		  test.pullLever(pullLeverPos);
		  test.succeedWhenBlockPresent(MinecraftBlockTypes.planks, targetPos, true);
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "normal_extend", (test) => {
		  const targetPos = new BlockLocation(3, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, targetPos, false);
		  test.pullLever(pullLeverPos);
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.stone, targetPos, true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "normal_extend_retract", (test) => {
		  const extendedPos = new BlockLocation(3, 2, 0);
		  const retractedPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, false);
		  test.pullLever(pullLeverPos);
		
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.pistonArmCollision, retractedPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenWaitAfter(1, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		    })
		    .thenSucceed();
		})
		  .structureName("PistonTests:normal_extend")
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Pistons react at different speeds in Bedrock, create a new test called normal_extend_retract_bedrock.
		
		GameTest.register("PistonTests", "normal_extend_retract_bedrock", (test) => {
		  const extendedPos = new BlockLocation(3, 2, 0);
		  const retractedPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, false);
		  test.pullLever(pullLeverPos);
		
		  //it's not possible to time it exactly due to redstone differences, so just validate assert can pass before given delay.
		  test
		    .startSequence()
		    .thenIdle(6)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.pistonArmCollision, retractedPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenIdle(4)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		    })
		    .thenSucceed();
		})
		  .structureName("PistonTests:normal_extend")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "sticky_extend", (test) => {
		  const targetPos = new BlockLocation(3, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, targetPos, false);
		  test.pullLever(pullLeverPos);
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.stone, targetPos, true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "sticky_extend_retract", (test) => {
		  const extendedPos = new BlockLocation(3, 2, 0);
		  const retractedPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, false);
		  test.pullLever(pullLeverPos);
		
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPistonArmCollision, retractedPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extendedPos, true);
		    })
		    .thenSucceed();
		})
		  .structureName("PistonTests:sticky_extend")
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Pistons react at different speeds in Bedrock, create a new test called sticky_extend_retract_bedrock.
		
		GameTest.register("PistonTests", "sticky_extend_retract_bedrock", (test) => {
		  const extendedPos = new BlockLocation(3, 2, 0);
		  const retractedPos = new BlockLocation(2, 2, 0);
		  const pullLeverPos = new BlockLocation(0, 3, 0);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, false);
		  test.pullLever(pullLeverPos);
		
		  //it's not possible to time it exactly due to redstone differences, so just validate assert can pass before given delay.
		  test
		    .startSequence()
		    .thenIdle(6)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, extendedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPistonArmCollision, retractedPos, true);
		    })
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenIdle(6)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stone, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extendedPos, true);
		    })
		    .thenSucceed();
		})
		  .structureName("PistonTests:sticky_extend")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "push_limit", (test) => {
		  const underLimitTip = new BlockLocation(0, 2, 6);
		  const overLimitTip = new BlockLocation(2, 2, 6);
		  const pullLeverPos = new BlockLocation(1, 2, 0);
		  const underLimitExtendedTip = new BlockLocation(0, 2, 7);
		
		  test.assertBlockPresent(MinecraftBlockTypes.goldBlock, underLimitTip, true);
		  test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, overLimitTip, true);
		  test.pullLever(pullLeverPos);
		
		  test.succeedWhen(() => {
		    test.assertBlockPresent(MinecraftBlockTypes.goldBlock, underLimitExtendedTip, true);
		    test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, overLimitTip, true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "block_leave", (test) => {
		  const trigger = new BlockLocation(3, 1, 1);
		  const retracted = new BlockLocation(1, 1, 1);
		  const extended = new BlockLocation(0, 1, 1);
		
		  test.pulseRedstone(trigger, 2);
		  test
		    .startSequence()
		    .thenWaitAfter(3, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, extended, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, retracted, true);
		    })
		    .thenExecuteAfter(3, () => {
		      test.pulseRedstone(trigger, 2);
		    })
		    .thenWaitAfter(5, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, retracted, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extended, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //In Java Edition, pistons finish extending early and start retracting if given a pulse shorter than 3 game ticks (1.5 redstone ticks; 0.15 seconds). These shorter pulses cause sticky pistons to "drop" their block, leaving it behind when trying to push it with a short pulse. Also, this causes the block to end up in its final position earlier.Therefore, the bedrock version can't be modified, and can only be verified according to the piston tension,
		
		GameTest.register("PistonTests", "block_leave_bedrock", (test) => {
		  const trigger = new BlockLocation(3, 1, 1);
		  const retracted = new BlockLocation(1, 1, 1);
		  const extended = new BlockLocation(0, 1, 1);
		
		  test.pulseRedstone(trigger, 2);
		  test
		    .startSequence()
		    .thenIdle(1)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, extended, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, retracted, true);
		    })
		    .thenExecuteAfter(3, () => {
		      test.pulseRedstone(trigger, 2);
		    })
		    .thenIdle(5)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, retracted, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extended, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "update_order", (test) => {
		  const posA = new BlockLocation(2, 1, 1);
		  const posB = new BlockLocation(2, 1, 0);
		  const posC = new BlockLocation(3, 1, 0);
		  const posD = new BlockLocation(1, 1, 0);
		
		  const trigger = new BlockLocation(6, 2, 2);
		  test.setBlockType(trigger, MinecraftBlockTypes.greenWool);
		
		  test
		    .startSequence()
		    .thenWaitAfter(4, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.yellowWool, posB, true);
		    })
		    .thenExecuteAfter(4, () => {
		      test.setBlockType(trigger, MinecraftBlockTypes.blueWool);
		    })
		    .thenWaitAfter(6, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.yellowWool, posC, true);
		    })
		    .thenExecuteAfter(4, () => {
		      test.setBlockType(trigger, MinecraftBlockTypes.purpleWool);
		    })
		    .thenWaitAfter(6, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.yellowWool, posD, true);
		    })
		    .thenExecuteAfter(4, () => {
		      test.setBlockType(trigger, MinecraftBlockTypes.cyanWool);
		    })
		    .thenWaitAfter(6, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.yellowWool, posA, true);
		    })
		    .thenSucceed();
		})
		  .required(false)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Due to redstone differences, create a new test called update_order_bedrock. Also, use colored glazed terracotta instead of missing colored wool blocks.
		
		GameTest.register("PistonTests", "update_order_bedrock", (test) => {
		  const posA = new BlockLocation(2, 1, 1);
		  const posB = new BlockLocation(2, 1, 0);
		  const posC = new BlockLocation(3, 1, 0);
		  const posD = new BlockLocation(1, 1, 0);
		
		  const trigger = new BlockLocation(6, 2, 2);
		  test.setBlockType(MinecraftBlockTypes.greenGlazedTerracotta, trigger);
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.wool, posB, true);
		    })
		    .thenIdle(4)
		    .thenWait(() => {
		      test.setBlockType(MinecraftBlockTypes.blueGlazedTerracotta, trigger);
		    })
		    .thenIdle(6)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.wool, posC, true);
		    })
		    .thenIdle(4)
		    .thenWait(() => {
		      test.setBlockType(MinecraftBlockTypes.purpleGlazedTerracotta, trigger);
		    })
		    .thenIdle(6)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.wool, posD, true);
		    })
		    .thenIdle(4)
		    .thenWait(() => {
		      test.setBlockType(MinecraftBlockTypes.cyanGlazedTerracotta, trigger);
		    })
		    .thenIdle(6)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.wool, posA, true);
		    })
		    .thenSucceed();
		})
		
		  .required(false)
		  .tag(GameTest.Tags.suiteDisabled); //Both of Java and Bedrock are failed as block position doesn't update with the right order.
		
		GameTest.register("PistonTests", "double_extender", (test) => {
		  const pullLeverPos = new BlockLocation(2, 3, 2);
		  const blockPresentPosA = new BlockLocation(0, 2, 2);
		  const blockPresentPosB = new BlockLocation(0, 2, 4);
		
		  test.pullLever(pullLeverPos);
		  test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosA, true);
		
		  test
		    .startSequence()
		    .thenWaitAfter(11, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosB, true);
		      test.pullLever(pullLeverPos);
		    })
		    .thenWaitAfter(12, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosA, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Pistons react at different speeds in Bedrock, create a new test called double_extender_bedrock.
		
		GameTest.register("PistonTests", "double_extender_bedrock", (test) => {
		  const pullLeverPos = new BlockLocation(2, 3, 2);
		  const blockPresentPosA = new BlockLocation(0, 2, 2);
		  const blockPresentPosB = new BlockLocation(0, 2, 4);
		
		  test.pullLever(pullLeverPos);
		  test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosA, true);
		
		  //it's not possible to time it exactly due to redstone differences, so just validate assert can pass before given delay.
		  test
		    .startSequence()
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosB, true);
		      test.pullLever(pullLeverPos);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.emeraldBlock, blockPresentPosA, true);
		    })
		    .thenSucceed();
		})
		  .structureName("PistonTests:double_extender")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "triple_extender", (test) => {
		  const retracted = new BlockLocation(0, 4, 4);
		  const extended = new BlockLocation(0, 1, 4);
		  const trigger = new BlockLocation(0, 8, 0);
		  const assertBlockPresentA = new BlockLocation(0, 7, 4);
		  const assertBlockPresentB = new BlockLocation(0, 6, 4);
		  const assertBlockPresentC = new BlockLocation(0, 5, 4);
		
		  test.pressButton(trigger);
		
		  test
		    .startSequence()
		    .thenIdle(30)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentA, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentB, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentC, true);
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, extended, true);
		    })
		    .thenIdle(20)
		    .thenWait(() => {
		      test.pressButton(trigger);
		    })
		    .thenIdle(42)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, new assertBlockPresentA(), true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, new assertBlockPresentB(), true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, new assertBlockPresentC(), true);
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, retracted, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Game parity issue. Create a new test called triple_extender_bedrock using new structure, and updated piston react time.
		
		GameTest.register("PistonTests", "triple_extender_bedrock", (test) => {
		  const retracted = new BlockLocation(0, 4, 4);
		  const extended = new BlockLocation(0, 1, 4);
		  const trigger = new BlockLocation(0, 7, 0);
		  const assertBlockPresentA = new BlockLocation(0, 7, 4);
		  const assertBlockPresentB = new BlockLocation(0, 6, 4);
		  const assertBlockPresentC = new BlockLocation(0, 5, 4);
		  const assertBlockPresentD = new BlockLocation(0, 3, 4);
		  test.pressButton(trigger);
		  test
		    .startSequence()
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentA, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentC, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentD, true);
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, extended, true);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentA, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentB, true);
		      test.assertBlockPresent(MinecraftBlockTypes.stickyPiston, assertBlockPresentC, true);
		      test.assertBlockPresent(MinecraftBlockTypes.concrete, retracted, true);
		    })
		    .thenSucceed();
		})
		  .setupTicks(20)
		  .tag(GameTest.Tags.suiteDefault)
		  .maxTicks(100);
		
		GameTest.register("PistonTests", "monostable", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const lampPos = new BlockLocation(0, 3, 5);
		  const pullLeverPos = new BlockLocation(0, 2, 0);
		
		  testEx.assertBlockProperty("redstone_signal", 0, lampPos);
		  test.pullLever(pullLeverPos);
		
		  test
		    .startSequence()
		    .thenWaitAfter(2, () => {
		      testEx.assertBlockProperty("redstone_signal", 1, lampPos);
		    })
		    .thenWaitAfter(4, () => {
		      testEx.assertBlockProperty("redstone_signal", 0, lampPos);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //quasi connectivity problem: when the repeater is in the upper right corner of the piston, the bedrock piston will not stretch, but Java will stretch
		
		GameTest.register("PistonTests", "monostable_bedrock", (test) => {
		  const lampPos = new BlockLocation(0, 3, 5);
		  const pullLeverPos = new BlockLocation(0, 2, 0);
		
		  test.assertRedstonePower(lampPos, 0);
		
		  test
		    .startSequence()
		    .thenIdle(10)
		    .thenExecute(() => {
		      test.pullLever(pullLeverPos);
		    })
		    .thenExecuteAfter(8, () => {
		      test.assertRedstonePower(lampPos, 15);
		    })
		    .thenExecuteAfter(8, () => {
		      test.assertRedstonePower(lampPos, 0);
		    })
		    .thenSucceed();
		})
		  .maxTicks(100)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "instant_retraction", (test) => {
		  const airPos = new BlockLocation(2, 1, 1);
		  const concretePos = new BlockLocation(0, 1, 3);
		
		  test.setBlockType(MinecraftBlockTypes.air, airPos);
		  test.succeedOnTickWhen(14, () => {
		    test.assertBlockPresent(MinecraftBlockTypes.concrete, concretePos, true);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "instant_repeater", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const triggerPos = new BlockLocation(0, 3, 0);
		  const outputPos = new BlockLocation(0, 3, 25);
		  test.pullLever(triggerPos);
		
		  test
		    .startSequence()
		    .thenWaitAfter(1, () => {
		      testEx.assertBlockProperty("redstone_signal", 1, outputPos);
		    })
		    .thenIdle(10) // relaxation time
		    .thenExecute(() => {
		      test.pullLever(triggerPos);
		    })
		    .thenWaitAfter(5, () => {
		      testEx.assertBlockProperty("redstone_signal", 0, outputPos);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Instant repeaters rely on block update detection due to quasi-connectivity and cannot be built in Bedrock.
		
		GameTest.register("PistonTests", "entity_backside", (test) => {
		  const buttonPos = new BlockLocation(2, 2, 0);
		  const lampFailPos = new BlockLocation(4, 3, 2);
		
		  test.pressButton(buttonPos);
		  test
		    .startSequence()
		    .thenIdle(30)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneLamp, lampFailPos, false);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "redstone_matrix", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 1);
		  const wirePos = new BlockLocation(1, 4, 2);
		
		  test.pressButton(buttonPos);
		  test
		    .startSequence()
		    .thenIdle(30)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.redstoneWire, wirePos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "one_tick_pulse", (test) => {
		  const retractedPos = new BlockLocation(1, 2, 3);
		  const extendedPos = new BlockLocation(0, 2, 3);
		  const pressButtonPos = new BlockLocation(2, 2, 0);
		
		  test.pressButton(pressButtonPos);
		
		  test
		    .startSequence()
		
		    .thenWaitAfter(2, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stainedGlass, extendedPos, true);
		    })
		    .thenIdle(30)
		    .thenWait(() => {
		      test.pressButton(pressButtonPos);
		    })
		    .thenWaitAfter(4, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.stainedGlass, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extendedPos, true);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //It's Gameplay differences. In Java Edition, pistons finish extending early and start retracting if given a pulse shorter than 3 game ticks, this causes the block to end up in its final position earlier.
		
		GameTest.register("PistonTests", "one_tick_pulse_bedrock", (test) => {
		  const retractedPos = new BlockLocation(1, 2, 3);
		  const extendedPos = new BlockLocation(0, 2, 3);
		  const pressButtonPos = new BlockLocation(2, 2, 0);
		
		  test.pressButton(pressButtonPos);
		
		  test
		    .startSequence()
		    .thenIdle(2)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stainedGlass, extendedPos, true);
		    })
		    .thenIdle(30)
		    .thenWait(() => {
		      test.pressButton(pressButtonPos);
		    })
		    .thenIdle(4)
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.stainedGlass, retractedPos, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, extendedPos, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "backside", (test) => {
		  var buttonsBlockPos = [
		    new BlockLocation(3, 3, 0),
		    new BlockLocation(1, 2, 1),
		    new BlockLocation(4, 3, 3),
		    new BlockLocation(1, 4, 3),
		    new BlockLocation(3, 3, 6),
		    new BlockLocation(0, 3, 5),
		  ];
		
		  for (const buttonPos of buttonsBlockPos) {
		    test.pressButton(buttonPos);
		  }
		  test
		    .startSequence()
		    .thenIdle(30)
		    .thenWait(() => {
		      for (const buttonPos of buttonsBlockPos) {
		        test.assertBlockPresent(MinecraftBlockTypes.stoneButton, buttonPos, true);
		      }
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "observer_retraction_timing", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const levelPos = new BlockLocation(3, 2, 2);
		  const observerPos = new BlockLocation(2, 2, 1);
		  test.pullLever(levelPos);
		  test
		    .startSequence()
		    .thenExecute(() => {
		      testEx.assertBlockProperty("powered_bit", 0, observerPos);
		    })
		    .thenIdle(2)
		    .thenExecute(() => {
		      testEx.assertBlockProperty("powered_bit", 1, observerPos);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "random_tick_forcer", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 0);
		  const flower = new BlockLocation(1, 3, 6);
		  const aboveFlower = new BlockLocation(1, 4, 6);
		
		  test.pressButton(buttonPos);
		  test
		    .startSequence()
		    .thenIdle(20)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.chorusFlower, flower, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, aboveFlower, true);
		    })
		    .thenSucceed();
		})
		  .batch("no_random_ticks")
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //The parity problem is still being solved
		
		GameTest.register("PistonTests", "random_tick_forcer_bedrock", (test) => {
		  const buttonPos = new BlockLocation(1, 3, 0);
		  const flower = new BlockLocation(1, 3, 6);
		  const aboveFlower = new BlockLocation(1, 4, 6);
		
		  test.pressButton(buttonPos);
		  test
		    .startSequence()
		    .thenIdle(10)
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.chorusFlower, flower, true);
		      test.assertBlockPresent(MinecraftBlockTypes.air, aboveFlower, true);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("PistonTests", "honey_block_entity_drag_down", (test) => {
		  const leverPos = new BlockLocation(1, 1, 0);
		  const entityTypePos = new BlockLocation(1, 4, 1);
		  const cowId = "minecraft:cow<minecraft:ageable_grow_up>";
		  const entityTouchingPos = new Location(1.5, 4.5, 1.5);
		  const entityNotTouchingTypePos = new Location(1.5, 3.5, 1.5);
		
		  test.spawn(cowId, entityTypePos);
		  test.assertEntityTouching(cowId, entityTouchingPos, true);
		  test.assertEntityTouching(cowId, entityNotTouchingTypePos, false);
		
		  const timeBetweenEachLeverPull = 4;
		
		  var startSequence = test
		    .startSequence()
		    .thenIdle(4)
		    .thenExecuteAfter(timeBetweenEachLeverPull, () => {
		      test.pullLever(leverPos);
		    });
		  startSequence;
		
		  for (var i = 0; i < 10; i++) {
		    startSequence.thenExecuteAfter(timeBetweenEachLeverPull, () => {
		      test.pullLever(leverPos);
		    });
		  }
		
		  startSequence
		    .thenExecuteAfter(timeBetweenEachLeverPull, () => {
		      test.pullLever(leverPos);
		    })
		    .thenWait(() => {
		      test.assertEntityTouching(cowId, entityTouchingPos, true);
		      test.assertEntityTouching(cowId, entityNotTouchingTypePos, false);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("PistonTests", "backside_fence", (test) => {
		  const centerPos = new BlockLocation(2, 2, 2);
		  test.setBlockType(MinecraftBlockTypes.fence, centerPos);
		
		  test.startSequence().thenIdle(30).thenSucceed();
		  let connectivity = undefined;
		
		  test
		    .startSequence()
		    .thenIdle(1)
		    .thenExecute(() => {
		      connectivity = test.getFenceConnectivity(centerPos);
		      test.assert(
		        connectivity.east && connectivity.west && connectivity.north && connectivity.south,
		        "Fence should connect to pistons"
		      );
		    })
		    .thenWait(() => {
		      connectivity = test.getFenceConnectivity(centerPos);
		      test.assert(
		        !(connectivity.east && connectivity.west && connectivity.north && connectivity.south),
		        "Fence should stay connected to pistons"
		      );
		    })
		    .thenFail("Fence didn't stay connected to pistons");
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "PlaceSeedsTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  MinecraftBlockTypes,
		  ItemStack,
		  MinecraftItemTypes,
		  Direction,
		} from "mojang-minecraft";
		
		function giveItem(player, itemType, amount, slot) {
		  const inventoryContainer = player.getComponent("inventory").container;
		  inventoryContainer.addItem(new ItemStack(itemType, amount ?? 1));
		  player.selectedSlot = slot ?? 0;
		}
		
		GameTest.register("PlaceSeedsTests", "place_seed_on_farmland", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const grassBlockLoc = new BlockLocation(1, 1, 1);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      giveItem(player, MinecraftItemTypes.ironHoe, 1, 0);
		      giveItem(player, MinecraftItemTypes.wheatSeeds, 1, 1);
		    })
		    .thenExecuteAfter(10, () => {
		      const usedIronhoe = player.useItemInSlotOnBlock(0, grassBlockLoc, Direction.up, 1, 1);
		
		      test.assert(usedIronhoe, "Expected iron hoe to be used");
		      test.assertBlockPresent(MinecraftBlockTypes.farmland, grassBlockLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      const usedWheatseeds = player.useItemInSlotOnBlock(1, grassBlockLoc, Direction.up, 1, 1);
		
		      test.assert(usedWheatseeds, "Expected wheat seeds to be used");
		      test.assertBlockPresent(MinecraftBlockTypes.wheat, grassBlockLoc.above());
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "RaycastingTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import {
		  BlockLocation,
		  BlockRaycastOptions,
		  EntityRaycastOptions,
		  MinecraftBlockTypes,
		  Location,
		  Vector,
		} from "mojang-minecraft";
		
		const replacementBlock = MinecraftBlockTypes.redGlazedTerracotta;
		
		function lookAtThree(test, blocks, blockVectorOptions) {
		    const player = test.spawnSimulatedPlayer(new BlockLocation(2, 9, 2), "Player");
		
		    test.startSequence()
		        .thenExecuteAfter(10, () => {
		            player.lookAtBlock(blocks[0]);
		        })
		        .thenExecuteAfter(10, () => {
		            var block = player.getBlockFromViewVector(blockVectorOptions);
		            const relativePos = test.relativeBlockLocation(block.location);
		            test.assert(relativePos.equals(blocks[0]), "Locations should match, but got [" + relativePos.x + "," + relativePos.y + ", " + relativePos.z + "]");
		            block.setType(replacementBlock);
		
		            player.lookAtBlock(blocks[1]);
		        })
		        .thenExecuteAfter(10, () => {
		            var block = player.getBlockFromViewVector(blockVectorOptions);
		            const relativePos = test.relativeBlockLocation(block.location);
		            test.assert(relativePos.equals(blocks[1]), "Locations should match, but got [" + relativePos.x + "," + relativePos.y + ", " + relativePos.z + "]");
		            block.setType(replacementBlock);
		            player.lookAtBlock(blocks[2]);
		        })
		        .thenExecuteAfter(10, () => {
		            var block = player.getBlockFromViewVector(blockVectorOptions);
		            const relativePos = test.relativeBlockLocation(block.location);
		            test.assert(relativePos.equals(blocks[2]), "Locations should match, but got [" + relativePos.x + "," + relativePos.y + ", " + relativePos.z + "]");
		            block.setType(replacementBlock);
		        })
		        .thenSucceed();
		}
		
		GameTest.register("RaycastingTests", "player_looks_under_water", (test) => {
		    var blocks = [new BlockLocation(1, 1, 1), new BlockLocation(2, 1, 1), new BlockLocation(3, 1, 1)];
		
		    const blockVectorOptions = new BlockRaycastOptions();
		    blockVectorOptions.includePassableBlocks = false;
		    blockVectorOptions.includeLiquidBlocks = false;
		
		    lookAtThree(test, blocks, blockVectorOptions);
		})
		    .maxTicks(50)
		    .structureName("RaycastingTests:player_looks_block")
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RaycastingTests", "player_looks_at_water", (test) => {
		    var blocks = [new BlockLocation(1, 2, 1), new BlockLocation(2, 2, 1), new BlockLocation(3, 2, 1)];
		
		    const blockVectorOptions = new BlockRaycastOptions();
		    blockVectorOptions.includePassableBlocks = true;
		    blockVectorOptions.includeLiquidBlocks = true;
		
		    lookAtThree(test, blocks, blockVectorOptions);
		})
		    .maxTicks(50)
		    .structureName("RaycastingTests:player_looks_block")
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RaycastingTests", "player_looks_under_carpet", (test) => {
		    var blocks = [new BlockLocation(1, 2, 0), new BlockLocation(2, 2, 0), new BlockLocation(3, 2, 0)];
		
		    const blockVectorOptions = new BlockRaycastOptions();
		    blockVectorOptions.includePassableBlocks = false;
		    blockVectorOptions.includeLiquidBlocks = false;
		
		    lookAtThree(test, blocks, blockVectorOptions);
		})
		    .maxTicks(50)
		    .structureName("RaycastingTests:player_looks_block")
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RaycastingTests", "player_looks_at_carpet", (test) => {
		    var blocks = [new BlockLocation(1, 3, 0), new BlockLocation(2, 3, 0), new BlockLocation(3, 3, 0)];
		
		    const blockVectorOptions = new BlockRaycastOptions();
		    blockVectorOptions.includePassableBlocks = true;
		    blockVectorOptions.includeLiquidBlocks = false;
		
		    lookAtThree(test, blocks, blockVectorOptions);
		})
		    .maxTicks(50)
		    .structureName("RaycastingTests:player_looks_block")
		    .tag(GameTest.Tags.suiteDefault);
		
		
		GameTest.register("RaycastingTests", "get_block_from_vector", (test) => {
		
		    let dimension = test.getDimension();
		    const blockVectorOptions = new BlockRaycastOptions();
		
		
		    blockVectorOptions.includePassableBlocks = false;
		    blockVectorOptions.includeLiquidBlocks = false;
		
		    const bars = dimension.getBlockFromRay(test.worldLocation(new Location(.5, 2, 1.5)), new Vector(1, 0, 0), blockVectorOptions);
		    test.assert(bars.type == MinecraftBlockTypes.ironBars, "Expected to see through the banner and the water to the iron bars");
		
		    blockVectorOptions.includePassableBlocks = true;
		    const banner = dimension.getBlockFromRay(test.worldLocation(new Location(.5, 2, 1.5)), new Vector(1, 0, 0), blockVectorOptions);
		    test.assert(banner.type == MinecraftBlockTypes.standingBanner, "Expected to see through the water to the iron bars");
		
		    blockVectorOptions.includeLiquidBlocks = true;
		    const water = dimension.getBlockFromRay(test.worldLocation(new Location(.5, 2, 1.5)), new Vector(1, 0, 0), blockVectorOptions);
		    test.assert(water.type == MinecraftBlockTypes.water, "Expected to see the water");
		
		    test.succeed();
		})
		    .setupTicks(4) // time for water to convert from dynamic to static type
		    .tag(GameTest.Tags.suiteDefault);
		
		
		GameTest.register("RaycastingTests", "get_entity_from_vector", (test) => {
		
		    let dimension = test.getDimension();
		
		    test.spawnWithoutBehaviors("creeper", new BlockLocation(3, 2, 1))
		    test.spawnWithoutBehaviors("creeper", new BlockLocation(2, 2, 1))
		
		    // test both creepers are found
		    const creepers = dimension.getEntitiesFromRay(test.worldLocation(new Location(.5, 3.5, 1.5)), new Vector(1, 0, 0));
		    test.assert(creepers.length == 2, "Expected to find 2 creepers");
		    test.assertEntityInstancePresent(creepers[0], new BlockLocation(2, 2, 1));
		    test.assertEntityInstancePresent(creepers[1], new BlockLocation(3, 2, 1));
		
		    // check the entities are sorted by distance
		    const creepersReversed = dimension.getEntitiesFromRay(test.worldLocation(new Location(5.5, 2.5, 1.5)), new Vector(-1, 0, 0));
		    test.assert(creepersReversed.length == 2, "Expected to find 2 creepers");
		    test.assertEntityInstancePresent(creepersReversed[0], new BlockLocation(3, 2, 1));
		    test.assertEntityInstancePresent(creepersReversed[1], new BlockLocation(2, 2, 1));
		
		    // test blocks stop the entity raycast
		    const blockedCreepers = dimension.getEntitiesFromRay(test.worldLocation(new Location(5.5, 3.5, 1.5)), new Vector(-1, 0, 0));
		    test.assert(blockedCreepers.length == 0, "Expected the block to stop the raycast");
		
		    test.succeed();
		})
		    .setupTicks(4) // time for water to convert from dynamic to static type
		    .tag(GameTest.Tags.suiteDefault);
		'''
	script "RedstoneTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftItemTypes, BlockProperties, world } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TicksPerSecond = 20;
		
		const LEVEL_TO_RECORDS = new Map([
		  [0, MinecraftItemTypes.air],
		  [1, MinecraftItemTypes.musicDisc13],
		  [2, MinecraftItemTypes.musicDiscCat],
		  [3, MinecraftItemTypes.musicDiscBlocks],
		  [4, MinecraftItemTypes.musicDiscChirp],
		  [5, MinecraftItemTypes.musicDiscFar],
		  [6, MinecraftItemTypes.musicDiscMall],
		  [7, MinecraftItemTypes.musicDiscMellohi],
		  [8, MinecraftItemTypes.musicDiscStal],
		  [9, MinecraftItemTypes.musicDiscStrad],
		  [10, MinecraftItemTypes.musicDiscWard],
		  [11, MinecraftItemTypes.musicDisc11],
		  [12, MinecraftItemTypes.musicDiscWait],
		  [13, MinecraftItemTypes.musicDiscPigstep],
		]);
		
		GameTest.register("RedstoneTests", "itemframe_override", (test) => {
		  const itemFrameTest = new BlockLocation(3, 2, 5);
		  const itemFrameOverrideNoTest = new BlockLocation(3, 2, 10);
		
		  const lever = new BlockLocation(1, 2, 0);
		  const leverOverrideTest = new BlockLocation(1, 2, 13);
		
		  test.assertRedstonePower(itemFrameTest, 1);
		  test.assertRedstonePower(itemFrameOverrideNoTest, 1);
		
		  test.pullLever(lever);
		
		  test.succeedWhen(() => {
		    test.assertRedstonePower(leverOverrideTest, 1);
		  });
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Torches can't be placed on item frames in Bedrock,When the bow and arrow are placed on the item frame, it cannot be linked with red stone. So I changed the location of the red stone link to bedrock
		
		GameTest.register("RedstoneTests", "itemframe_override_bedrock", (test) => {
		  const itemFrameTest = new BlockLocation(3, 2, 5);
		  const itemFrameOverrideNoTest = new BlockLocation(2, 2, 10);
		
		  const lever = new BlockLocation(1, 2, 0);
		  const leverOverrideTest = new BlockLocation(0, 2, 13);
		
		  test
		    .startSequence()
		    .thenIdle(3)
		    .thenExecute(() => {
		      test.assertRedstonePower(itemFrameTest, 1);
		      test.assertRedstonePower(itemFrameOverrideNoTest, 1);
		    })
		    .thenExecute(() => {
		      test.pullLever(lever);
		    })
		    .thenIdle(10)
		    .thenExecute(() => {
		      test.assertRedstonePower(leverOverrideTest, 3);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "comparator_container", (test) => {
		  const aLeft = new BlockLocation(6, 2, 2);
		  const aRight = new BlockLocation(1, 2, 2);
		
		  test.assertRedstonePower(aLeft, 14);
		  test.assertRedstonePower(aRight, 15);
		
		  const bLeft = new BlockLocation(6, 2, 7);
		  const bRight = new BlockLocation(1, 2, 7);
		
		  test.assertRedstonePower(bLeft, 0);
		  test.assertRedstonePower(bRight, 15);
		
		  const cLeft = new BlockLocation(6, 2, 13);
		  const cRight = new BlockLocation(1, 2, 13);
		  test.assertRedstonePower(cLeft, 1);
		  test.assertRedstonePower(cRight, 15);
		
		  test.succeed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // In the bedrock version, the chest is next to the square, causing the red stone signal to fail to transmit
		
		GameTest.register("RedstoneTests", "comparator_container_bedrock", (test) => {
		  const aLeft = new BlockLocation(6, 2, 2);
		  const aRight = new BlockLocation(1, 2, 2);
		  const bLeft = new BlockLocation(6, 2, 7);
		  const bRight = new BlockLocation(1, 2, 7);
		  const cLeft = new BlockLocation(6, 2, 13);
		  const cRight = new BlockLocation(1, 2, 13);
		
		  test.succeedWhen(() => {
		    test.assertRedstonePower(aLeft, 14);
		    test.assertRedstonePower(aRight, 15);
		    test.assertRedstonePower(bLeft, 0);
		    test.assertRedstonePower(bRight, 0);
		    test.assertRedstonePower(cLeft, 0);
		    test.assertRedstonePower(cRight, 0);
		  });
		})
		  .structureName("RedstoneTests:comparator_container")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "wireredirect_nonconductor", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const levers = [new BlockLocation(3, 2, 0), new BlockLocation(1, 2, 0)];
		  const fenceGatesClosed = [
		    new BlockLocation(2, 3, 0),
		    new BlockLocation(2, 3, 2),
		    new BlockLocation(1, 2, 2),
		    new BlockLocation(2, 2, 2),
		    new BlockLocation(3, 2, 2),
		    new BlockLocation(0, 2, 1),
		    new BlockLocation(4, 2, 1),
		  ];
		  const fenceGatesOpen = [new BlockLocation(3, 3, 1), new BlockLocation(1, 3, 1)];
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      for (const lever of levers) {
		        test.pullLever(lever);
		      }
		      for (const fenceGateC of fenceGatesClosed) {
		        testEx.assertBlockProperty("open_bit", 0, fenceGateC);
		      }
		      for (const fenceGateO of fenceGatesOpen) {
		        testEx.assertBlockProperty("open_bit", 1, fenceGateO);
		      }
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // There is no way to judge the opening and closing state of the fence door, so in is used in open_bit
		
		GameTest.register("RedstoneTests", "wireredirect_nonconductor_bedrock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const levers = [new BlockLocation(3, 2, 0), new BlockLocation(1, 2, 0)];
		  const fenceGatesClosed = [
		    new BlockLocation(2, 3, 0),
		    new BlockLocation(2, 3, 2),
		    new BlockLocation(1, 2, 2),
		    new BlockLocation(2, 2, 2),
		    new BlockLocation(3, 2, 2),
		    new BlockLocation(0, 2, 1),
		    new BlockLocation(4, 2, 1),
		  ];
		  const fenceGatesOpen = [new BlockLocation(3, 3, 1), new BlockLocation(1, 3, 1)];
		
		  test
		    .startSequence()
		    .thenIdle(2)
		    .thenExecute(() => {
		      for (const lever of levers) {
		        test.pullLever(lever);
		      }
		    })
		    .thenIdle(6)
		    .thenExecute(() => {
		      for (const fenceGateC of fenceGatesClosed) {
		        testEx.assertBlockProperty("open_bit", 0, fenceGateC);
		      }
		    })
		    .thenExecute(() => {
		      for (const fenceGateO of fenceGatesOpen) {
		        testEx.assertBlockProperty("open_bit", 1, fenceGateO);
		      }
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "repeater_regeneration", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const input = new BlockLocation(0, 2, 0);
		  const inactiveOutput = new BlockLocation(6, 3, 4);
		  const activeOutput = new BlockLocation(6, 3, 3);
		
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, input);
		  test.succeedWhen(() => {
		    testEx.assertBlockProperty("open_bit", 0, inactiveOutput);
		    testEx.assertBlockProperty("open_bit", 1, activeOutput);
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "repeater_lock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const input = new BlockLocation(0, 2, 2);
		  const lock = new BlockLocation(1, 2, 0);
		  const output = new BlockLocation(2, 2, 1);
		
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, input);
		
		  test
		    .startSequence()
		    .thenIdle(6)
		    .thenExecute(() => {
		      testEx.assertBlockProperty("open_bit", 1, output);
		    })
		    .thenExecute(() => {
		      test.setBlockType(MinecraftBlockTypes.redstoneBlock, lock);
		      test.setBlockType(MinecraftBlockTypes.air, input);
		      testEx.assertBlockProperty("open_bit", 1, output);
		    })
		    .thenExecuteAfter(2, () => {
		      test.setBlockType(MinecraftBlockTypes.air, lock);
		    })
		    .thenIdle(4)
		    .thenExecute(() => {
		      testEx.assertBlockProperty("open_bit", 0, output);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "torch_monostable", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const input = new BlockLocation(0, 2, 0);
		  const output = new BlockLocation(2, 2, 1);
		
		  test.pressButton(input);
		  test
		    .startSequence()
		    .thenWaitAfter(2, () => {
		      testEx.assertBlockProperty("open_bit", 0, output);
		    })
		    .thenWaitAfter(2, () => {
		      testEx.assertBlockProperty("open_bit", 1, output);
		    })
		    .thenExecute(() => {
		      test.failIf(() => {
		        testEx.assertBlockProperty("open_bit", 0, output);
		      });
		    })
		    .thenWait(() => {
		      testEx.assertBlockProperty("button_pressed_bit", 0, input);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // there are tick delay differences between Java and Bedrock.
		
		GameTest.register("RedstoneTests", "torch_monostable_bedrock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const input = new BlockLocation(0, 2, 0);
		  const output = new BlockLocation(2, 2, 1);
		
		  test.pressButton(input);
		
		  test
		    .startSequence()
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 0, output);
		    })
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 1, output);
		    })
		    .thenExecute(() => {
		      test.failIf(() => {
		        testEx.assertBlockProperty("open_bit", 0, output);
		      });
		    })
		    .thenWait(() => {
		      testEx.assertBlockProperty("button_pressed_bit", 0, input);
		    })
		    .thenSucceed();
		})
		  .setupTicks(2)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "wire_redirect", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const levers = [new BlockLocation(6, 2, 1), new BlockLocation(3, 2, 0), new BlockLocation(0, 2, 1)];
		  const wires = [new BlockLocation(5, 2, 4), new BlockLocation(3, 2, 4), new BlockLocation(1, 2, 4)];
		  const fenceGates = [
		    new BlockLocation(5, 3, 1),
		    new BlockLocation(5, 3, 3),
		    new BlockLocation(3, 3, 1),
		    new BlockLocation(3, 3, 3),
		    new BlockLocation(1, 3, 1),
		    new BlockLocation(1, 3, 3),
		  ];
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      for (const lever of levers) {
		        test.pullLever(lever);
		      }
		    })
		    .thenIdle(6)
		    .thenExecute(() => {
		      for (const wire of wires) {
		        test.assertRedstonePower(wire, 0);
		      }
		    })
		    .thenExecute(() => {
		      for (const fenceGate of fenceGates) {
		        testEx.assertBlockProperty("in_wall_bit", 0, fenceGate);
		      }
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //Floating fence gates are powered differently
		
		GameTest.register("RedstoneTests", "wire_redirect_bedrock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const levers = [new BlockLocation(6, 2, 1), new BlockLocation(3, 2, 0), new BlockLocation(0, 2, 1)];
		  const wires = [new BlockLocation(5, 2, 4), new BlockLocation(3, 2, 4), new BlockLocation(1, 2, 4)];
		  const fenceGates = [
		    new BlockLocation(5, 3, 1),
		    new BlockLocation(5, 3, 3),
		    new BlockLocation(3, 3, 1),
		    new BlockLocation(3, 3, 3),
		    new BlockLocation(1, 3, 1),
		    new BlockLocation(1, 3, 3),
		  ];
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      for (const lever of levers) {
		        test.pullLever(lever);
		      }
		    })
		    .thenIdle(6)
		    .thenExecute(() => {
		      for (const wire of wires) {
		        test.assertRedstonePower(wire, 0);
		      }
		    })
		    .thenExecute(() => {
		      for (const fenceGate of fenceGates) {
		        testEx.assertBlockProperty("in_wall_bit", 0, fenceGate);
		      }
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		let observerClock = (test, initialOpenBit) => {
		  const testEx = new GameTestExtensions(test);
		  const outputPos = new BlockLocation(2, 2, 0);
		
		  const blockPermutation = MinecraftBlockTypes.trapdoor.createDefaultBlockPermutation();
		  blockPermutation.getProperty(BlockProperties.openBit).value = initialOpenBit;
		
		  test.setBlockPermutation(blockPermutation, outputPos);
		
		  let sequence = test.startSequence();
		
		  sequence.thenWait(() => {
		    testEx.assertBlockProperty("open_bit", 1, outputPos);
		  });
		
		  for (let i = 0; i < 8; i++) {
		    sequence
		      .thenWait(() => {
		        testEx.assertBlockProperty("open_bit", 0, outputPos);
		      })
		      .thenWait(() => {
		        testEx.assertBlockProperty("open_bit", 1, outputPos);
		      });
		  }
		  sequence.thenSucceed();
		};
		
		GameTest.register("RedstoneTests", "observer_clock", (test) => observerClock(test, false))
		  .tag("suite:java_parity") // Trapdoors do not always flip open from observer redstone signal when starting closed
		  .tag(GameTest.Tags.suiteDisabled);
		
		GameTest.register("RedstoneTests", "observer_clock_bedrock", (test) => observerClock(test, true))
		  .structureName("RedstoneTests:observer_clock")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "repeater_delay_lines", (test) => {
		  const inputPos = new BlockLocation(0, 2, 0);
		
		  const linesPos = [
		    [new BlockLocation(4, 2, 1), new BlockLocation(4, 2, 2), new BlockLocation(4, 2, 3), new BlockLocation(4, 2, 4)], //4-tick delay
		    [new BlockLocation(3, 2, 1), new BlockLocation(3, 2, 2), new BlockLocation(3, 2, 3), new BlockLocation(3, 2, 4)], //3-tick delay
		    [new BlockLocation(2, 2, 1), new BlockLocation(2, 2, 2), new BlockLocation(2, 2, 3), new BlockLocation(2, 2, 4)], //2-tick delay
		    [new BlockLocation(1, 2, 1), new BlockLocation(1, 2, 2), new BlockLocation(1, 2, 3), new BlockLocation(1, 2, 4)], //1-tick delay
		  ];
		
		  const states = [
		    "XXX0",
		    "XX01",
		    "X002",
		    "0013",
		    "001X",
		    "012X",
		    null,
		    "113X",
		    "123X",
		    "12XX",
		    null,
		    "23XX",
		    null,
		    null,
		    "2XXX",
		    "3XXX",
		    null,
		    null,
		    null,
		    "XXXX",
		  ];
		
		  test.pulseRedstone(inputPos, 3);
		  const dimension = test.getDimension();
		
		  let sequence = test.startSequence();
		  for (const state of states) {
		    if (state == null) {
		      sequence = sequence.thenIdle(2);
		    } else {
		      sequence = sequence.thenWaitAfter(2, () => {
		        for (let line = 0; line < 4; line++) {
		          const expected = state.charAt(line);
		          const expectedPos = expected == "X" ? -1 : expected - "0";
		          for (let linePos = 0; linePos < 4; linePos++) {
		            const blockWorldPos = test.worldBlockLocation(linesPos[line][linePos]);
		            const block = dimension.getBlock(blockWorldPos);
		            const blockId = block.id;
		
		            if (linePos == expectedPos) {
		              test.assert(
		                blockId == "minecraft:powered_repeater",
		                "Unexpected Block State. Expected: powered. Actual: unpowered"
		              );
		            } else {
		              test.assert(
		                blockId == "minecraft:unpowered_repeater",
		                "Unexpected Block State. Expected: unpowered. Actual: powered"
		              );
		            }
		          }
		        }
		      });
		    }
		  }
		  sequence.thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //The speed of the redstone pulse is different between Java and Bedrock.
		
		GameTest.register("RedstoneTests", "repeater_delay_lines_bedrock", (test) => {
		  const inputPos = new BlockLocation(0, 2, 0);
		
		  const linesPos = [
		    [new BlockLocation(4, 2, 1), new BlockLocation(4, 2, 2), new BlockLocation(4, 2, 3), new BlockLocation(4, 2, 4)], //4-tick delay
		    [new BlockLocation(3, 2, 1), new BlockLocation(3, 2, 2), new BlockLocation(3, 2, 3), new BlockLocation(3, 2, 4)], //3-tick delay
		    [new BlockLocation(2, 2, 1), new BlockLocation(2, 2, 2), new BlockLocation(2, 2, 3), new BlockLocation(2, 2, 4)], //2-tick delay
		    [new BlockLocation(1, 2, 1), new BlockLocation(1, 2, 2), new BlockLocation(1, 2, 3), new BlockLocation(1, 2, 4)], //1-tick delay
		  ];
		
		  const states = [
		    "XXX0",
		    "XX01",
		    "X002",
		    "0013",
		    "001X",
		    "012X",
		    null,
		    "113X",
		    "123X",
		    "12XX",
		    null,
		    "23XX",
		    null,
		    null,
		    "2XXX",
		    "3XXX",
		    null,
		    null,
		    null,
		    "XXXX",
		  ];
		
		  test.pulseRedstone(inputPos, 3); //Change redstone pulse form 2 ticks to 3.
		  const dimension = test.getDimension();
		
		  let sequence = test.startSequence();
		  for (const state of states) {
		    if (state == null) {
		      sequence = sequence.thenIdle(2);
		    } else {
		      sequence = sequence.thenWait(() => {
		        for (let line = 0; line < 4; line++) {
		          const expected = state.charAt(line);
		          const expectedPos = expected == "X" ? -1 : expected - "0";
		          for (let linePos = 0; linePos < 4; linePos++) {
		            const blockWorldPos = test.worldBlockLocation(linesPos[line][linePos]);
		            const block = dimension.getBlock(blockWorldPos);
		            const blockPerm = block.permutation;
		            const blockType = blockPerm.type;
		
		            if (linePos == expectedPos) {
		              test.assert(
		                blockType.id == "minecraft:powered_repeater",
		                "Unexpected Block State. Expected: powered. Actual: unpowered"
		              );
		            } else {
		              test.assert(
		                blockType.id == "minecraft:unpowered_repeater",
		                "Unexpected Block State. Expected: unpowered. Actual: powered"
		              );
		            }
		          }
		        }
		      });
		    }
		  }
		  sequence.thenSucceed();
		})
		  .structureName("RedstoneTests:repeater_delay_lines")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "repeater_clock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const startPos = new BlockLocation(0, 4, 0);
		  const stagesPos = [
		    new BlockLocation(0, 1, 0),
		    new BlockLocation(2, 1, 0),
		    new BlockLocation(2, 1, 2),
		    new BlockLocation(0, 1, 2),
		  ];
		
		  test.pulseRedstone(startPos, 3);
		
		  let sequence = test.startSequence();
		  for (let i = 0; i < 32; i++) {
		    const active = i % 4;
		    sequence = sequence.thenWaitAfter(i == 0 ? 0 : 2, () => {
		      for (let b = 0; b < 4; b++) {
		        testEx.assertBlockProperty("open_bit", b == active ? 1 : 0, stagesPos[b]);
		      }
		    });
		  }
		  sequence.thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //The speed of the redstone pulse is different between Java and Bedrock.
		
		GameTest.register("RedstoneTests", "repeater_clock_bedrock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const startPos = new BlockLocation(0, 4, 0);
		  const stagesPos = [
		    new BlockLocation(0, 1, 0),
		    new BlockLocation(2, 1, 0),
		    new BlockLocation(2, 1, 2),
		    new BlockLocation(0, 1, 2),
		  ];
		
		  test.pulseRedstone(startPos, 3); //Change redstone pulse form 2 ticks to 3.
		
		  let sequence = test.startSequence();
		  for (let i = 0; i < 32; i++) {
		    const active = i % 4;
		    sequence = sequence.thenWait(() => {
		      for (let b = 0; b < 4; b++) {
		        testEx.assertBlockProperty("open_bit", b == active ? 1 : 0, stagesPos[b]);
		      }
		    });
		  }
		  sequence.thenSucceed();
		})
		  .structureName("RedstoneTests:repeater_clock")
		  .maxTicks(80)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "torch_nor", async (test) => {
		  const testEx = new GameTestExtensions(test);
		  const inputA = new BlockLocation(4, 2, 0);
		  const inputB = new BlockLocation(0, 2, 0);
		  const output = new BlockLocation(2, 3, 0);
		  const FlatNorthSouth = 0;
		  const FlatEastWest = 1;
		
		  test.pullLever(inputA);
		  await test.idle(1);
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatEastWest, output);
		  });
		  
		  test.pullLever(inputA);
		  await test.idle(1);
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatEastWest, output);
		  });
		      
		  test.pullLever(inputB);
		  await test.idle(1);
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatNorthSouth, output);
		  });
		        
		  test.pullLever(inputB);
		  await test.idle(1);
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatEastWest, output);
		  });
		  
		  test.pullLever(inputA);
		  await test.idle(1);
		  test.pullLever(inputB);
		  await test.idle(1);
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatNorthSouth, output);
		  });
		  
		  test.pullLever(inputA);
		  await test.idle(1);
		  test.pullLever(inputB);    
		  await test.idle(1)
		  await test.until(() => {
		      testEx.assertBlockProperty("open_bit", FlatEastWest, output);
		  })
		  
		  test.succeed();
		}).tag(GameTest.Tags.suiteDisabled); // test has 50% pass rate due to "timing" issues.
		
		GameTest.register("RedstoneTests", "rs_latch", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const r = new BlockLocation(1, 2, 0);
		  const s = new BlockLocation(2, 2, 5);
		
		  const q = new BlockLocation(0, 4, 2);
		  const notQ = new BlockLocation(3, 4, 3);
		
		  test
		    .startSequence()
		    .thenExecute(() => test.pulseRedstone(r, 2))
		    .thenIdle(4)
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 1, q);
		      testEx.assertBlockProperty("open_bit", 0, notQ);
		    })
		    .thenExecute(() => test.pulseRedstone(r, 2))
		    .thenExecuteAfter(4, () => {
		      testEx.assertBlockProperty("open_bit", 1, q);
		      testEx.assertBlockProperty("open_bit", 0, notQ);
		    })
		
		    .thenExecute(() => test.pulseRedstone(s, 2))
		    .thenIdle(4)
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 0, q);
		      testEx.assertBlockProperty("open_bit", 1, notQ);
		    })
		
		    .thenExecute(() => test.pulseRedstone(s, 2))
		    .thenExecuteAfter(4, () => {
		      testEx.assertBlockProperty("open_bit", 0, q);
		      testEx.assertBlockProperty("open_bit", 1, notQ);
		    })
		    .thenSucceed();
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); // Redstone timing inconsistencies between java and bedrock.
		
		GameTest.register("RedstoneTests", "rs_latch_bedrock", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const r = new BlockLocation(1, 2, 0);
		  const s = new BlockLocation(2, 2, 5);
		
		  const q = new BlockLocation(0, 4, 2);
		  const notQ = new BlockLocation(3, 4, 3);
		
		  test
		    .startSequence()
		    .thenIdle(2)
		    .thenExecute(() => test.pulseRedstone(r, 4))
		    .thenIdle(6)
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 0, q);
		      testEx.assertBlockProperty("open_bit", 1, notQ);
		    })
		    .thenExecute(() => test.pulseRedstone(r, 4))
		    .thenExecuteAfter(6, () => {
		      testEx.assertBlockProperty("open_bit", 0, q);
		      testEx.assertBlockProperty("open_bit", 1, notQ);
		    })
		
		    .thenExecute(() => test.pulseRedstone(s, 4))
		    .thenIdle(6)
		    .thenWait(() => {
		      testEx.assertBlockProperty("open_bit", 1, q);
		      testEx.assertBlockProperty("open_bit", 0, notQ);
		    })
		
		    .thenExecute(() => test.pulseRedstone(s, 4))
		    .thenExecuteAfter(6, () => {
		      testEx.assertBlockProperty("open_bit", 1, q);
		      testEx.assertBlockProperty("open_bit", 0, notQ);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "repeater_delay", (test) => {
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(0, 2, 5));
		
		  const lamp1 = new BlockLocation(1, 2, 0);
		  const lamp2 = new BlockLocation(3, 2, 0);
		
		  test
		    .startSequence()
		    .thenWait(() => {
		      test.assertRedstonePower(lamp1, 15);
		    })
		    .thenExecute(() => {
		      test.assertRedstonePower(lamp2, 15);
		    })
		    .thenWait(() => {
		      test.assertRedstonePower(lamp1, 0);
		    })
		    .thenExecute(() => {
		      test.assertRedstonePower(lamp2, 0);
		    })
		    .thenSucceed();
		})
		  .maxTicks(TicksPerSecond * 10)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //The ticks of Redstone repeater is too short in structure, causing the Redstone lamp will not go out.
		
		GameTest.register("RedstoneTests", "repeater_delay_bedrock", (test) => {
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(0, 2, 5));
		
		  const lamp1 = new BlockLocation(1, 2, 0);
		  const lamp2 = new BlockLocation(3, 2, 0);
		
		  test
		    .startSequence()
		    .thenWait(() => {
		      test.assertRedstonePower(lamp1, 15);
		    })
		    .thenExecute(() => {
		      test.assertRedstonePower(lamp2, 15);
		    })
		    .thenWait(() => {
		      test.assertRedstonePower(lamp1, 0);
		    })
		    .thenExecute(() => {
		      test.assertRedstonePower(lamp2, 0);
		    })
		    .thenSucceed();
		})
		  .maxTicks(TicksPerSecond * 10)
		  .tag(GameTest.Tags.suiteDefault); //Change the ticks of Redstone repeater to the longest in structure.
		
		function distManhattan(pos, loc) {
		  const xd = Math.abs(pos.x - loc.x);
		  const yd = Math.abs(pos.y - loc.y);
		  const zd = Math.abs(pos.z - loc.z);
		
		  return xd + yd + zd;
		}
		
		GameTest.register("RedstoneTests", "dust_loop_depowering", (test) => {
		  const source = new BlockLocation(2, 2, 0);
		  const input = new BlockLocation(2, 2, 1);
		  const pointA = new BlockLocation(4, 2, 1);
		  const pointB = new BlockLocation(0, 2, 16);
		  const pointC = new BlockLocation(4, 2, 1);
		  const pointD = new BlockLocation(0, 2, 16);
		
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, source);
		
		  pointA.blocksBetween(pointB).forEach((p) => {
		    test.assertRedstonePower(p, Math.max(0, 15 - distManhattan(p, input)));
		  });
		
		  test.setBlockType(MinecraftBlockTypes.air, source);
		
		  test.succeedWhen(() => {
		    pointC.blocksBetween(pointD).forEach((p) => {
		      test.assertRedstonePower(p, 0);
		    });
		  });
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //In Java the redstone signal is sent as soon as the redstone block is placed but in Bedrock it need to take a tick or two
		
		GameTest.register("RedstoneTests", "dust_loop_depowering_bedrock", (test) => {
		  const source = new BlockLocation(2, 2, 0);
		  const input = new BlockLocation(2, 2, 1);
		  const pointA = new BlockLocation(4, 2, 1);
		  const pointB = new BlockLocation(0, 2, 16);
		  const pointC = new BlockLocation(4, 2, 1);
		  const pointD = new BlockLocation(0, 2, 16);
		
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, source);
		
		  test.runAfterDelay(2, () => {
		    pointA.blocksBetween(pointB).forEach((p) => {
		      test.assertRedstonePower(p, Math.max(0, 15 - distManhattan(p, input)));
		    });
		  });
		
		  test.setBlockType(MinecraftBlockTypes.air, source);
		
		  test.succeedWhen(() => {
		    pointC.blocksBetween(pointD).forEach((p) => {
		      test.assertRedstonePower(p, 0);
		    });
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "lever_power", (test) => {
		  const powered = [
		    new BlockLocation(1, 2, 0),
		    new BlockLocation(1, 2, 3),
		
		    new BlockLocation(2, 2, 1),
		    new BlockLocation(2, 2, 2),
		
		    new BlockLocation(0, 2, 1),
		    new BlockLocation(0, 2, 2),
		
		    new BlockLocation(1, 3, 1),
		    new BlockLocation(1, 3, 2),
		
		    new BlockLocation(1, 1, 1),
		    new BlockLocation(1, 1, 2),
		
		    new BlockLocation(1, 2, 2),
		  ];
		
		  const leverPos = new BlockLocation(1, 2, 1);
		  test.pullLever(leverPos);
		
		  const pointA = new BlockLocation(0, 1, 0);
		  const pointB = new BlockLocation(2, 3, 3);
		
		  test.succeedIf(() => {
		    pointA
		      .blocksBetween(pointB)
		      .filter((p) => !p.equals(leverPos))
		      .forEach((p) => test.assertRedstonePower(p, powered.includes(p) ? 15 : 0));
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "dust_propagation", (test) => {
		  let levels = new Map();
		  const origin = new BlockLocation(2, 2, 1);
		
		  {
		    origin
		      .blocksBetween(new BlockLocation(2, 2, 17))
		      .forEach((p) => levels.set(p, Math.max(15 - distManhattan(origin, p), 0)));
		  }
		
		  {
		    levels.set(new BlockLocation(3, 2, 2), 13);
		    levels.set(new BlockLocation(3, 2, 9), 6);
		    const leftRoot = new BlockLocation(4, 2, 2);
		    leftRoot
		      .blocksBetween(new BlockLocation(4, 2, 14))
		      .forEach((p) => levels.set(p, Math.max(12 - distManhattan(leftRoot, p), 0)));
		  }
		
		  {
		    levels.set(new BlockLocation(1, 2, 3), 12);
		    const rightRoot = new BlockLocation(0, 2, 3);
		    rightRoot
		      .blocksBetween(new BlockLocation(0, 2, 14))
		      .forEach((p) => levels.set(p, Math.max(11 - distManhattan(rightRoot, p), 0)));
		  }
		
		  const source = new BlockLocation(2, 2, 0);
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, source);
		
		  for (let [pos, level] of levels) {
		    test.assertRedstonePower(pos, level);
		  }
		
		  test.setBlockType(MinecraftBlockTypes.air, source);
		
		  test.succeedIf(() => {
		    for (let pos of levels.keys()) {
		      test.assertRedstonePower(pos, 0);
		    }
		  });
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //In Java the redstone signal is sent as soon as the redstone block is placed but in Bedrock it need to take a tick or two
		
		GameTest.register("RedstoneTests", "dust_propagation_bedrock", (test) => {
		  let levels = new Map();
		  const origin = new BlockLocation(2, 2, 1);
		
		  {
		    origin
		      .blocksBetween(new BlockLocation(2, 2, 17))
		      .forEach((p) => levels.set(p, Math.max(15 - distManhattan(origin, p), 0)));
		  }
		
		  {
		    levels.set(new BlockLocation(3, 2, 2), 13);
		    levels.set(new BlockLocation(3, 2, 9), 6);
		    const leftRoot = new BlockLocation(4, 2, 2);
		    leftRoot
		      .blocksBetween(new BlockLocation(4, 2, 14))
		      .forEach((p) => levels.set(p, Math.max(12 - distManhattan(leftRoot, p), 0)));
		  }
		
		  {
		    levels.set(new BlockLocation(1, 2, 3), 12);
		    const rightRoot = new BlockLocation(0, 2, 3);
		    rightRoot
		      .blocksBetween(new BlockLocation(0, 2, 14))
		      .forEach((p) => levels.set(p, Math.max(11 - distManhattan(rightRoot, p), 0)));
		  }
		
		  const source = new BlockLocation(2, 2, 0);
		  test.setBlockType(MinecraftBlockTypes.redstoneBlock, source);
		
		  test.runAfterDelay(2, () => {
		    for (let [pos, level] of levels) {
		      test.assertRedstonePower(pos, level);
		    }
		  });
		
		  test.setBlockType(MinecraftBlockTypes.air, source);
		
		  test.succeedIf(() => {
		    for (let pos of levels.keys()) {
		      test.assertRedstonePower(pos, 0);
		    }
		  });
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "torch_nand", (test) => {
		  const testEx = new GameTestExtensions(test);
		  const inputA = new BlockLocation(4, 2, 0);
		  const inputB = new BlockLocation(0, 2, 0);
		  const output = new BlockLocation(2, 2, 4);
		
		  test
		    .startSequence()
		    .thenExecute(() => test.pullLever(inputA))
		    .thenIdle(2)
		    .thenExecute(() => testEx.assertBlockProperty("open_bit", 1, output))
		    .thenExecuteAfter(2, () => test.pullLever(inputA))
		
		    .thenExecuteAfter(2, () => test.pullLever(inputB))
		    .thenIdle(2)
		    .thenExecute(() => testEx.assertBlockProperty("open_bit", 1, output))
		    .thenExecuteAfter(2, () => test.pullLever(inputB))
		
		    .thenExecuteAfter(2, () => {
		      test.pullLever(inputA);
		      test.pullLever(inputB);
		    })
		    .thenIdle(4)
		    .thenExecute(() => testEx.assertBlockProperty("open_bit", 0, output))
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "comparator_logic", (test) => {
		  const mainInput = new BlockLocation(3, 2, 2);
		  const sideInput = new BlockLocation(1, 2, 0);
		  const output = new BlockLocation(0, 2, 2);
		
		  const mainMusicPlayerComp = test.getBlock(mainInput).getComponent("recordPlayer");
		  const sideMusicPlayerComp = test.getBlock(sideInput).getComponent("recordPlayer");
		
		  let sequence = test.startSequence();
		  for (const [mainLevel, mainRecord] of LEVEL_TO_RECORDS) {
		    for (const [sideLevel, sideRecord] of LEVEL_TO_RECORDS) {
		      let value = mainLevel >= sideLevel ? mainLevel : 0;
		      sequence = sequence
		        .thenExecute(() => {
		          if (mainLevel == 0) {
		            mainMusicPlayerComp.clearRecord();
		          } else {
		            mainMusicPlayerComp.setRecord(mainRecord);
		          }
		          if (sideLevel == 0) {
		            sideMusicPlayerComp.clearRecord();
		          } else {
		            sideMusicPlayerComp.setRecord(sideRecord);
		          }
		        })
		        .thenWaitAfter(4, () => {
		          test.assertRedstonePower(output, value);
		        });
		    }
		  }
		  sequence.thenSucceed();
		})
		  .maxTicks(TicksPerSecond * 60)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RedstoneTests", "subtractor_logic", (test) => {
		  const mainInput = new BlockLocation(3, 2, 2);
		  const sideInput = new BlockLocation(1, 2, 0);
		  const output = new BlockLocation(0, 2, 2);
		
		  const mainMusicPlayerComp = test.getBlock(mainInput).getComponent("recordPlayer");
		  const sideMusicPlayerComp = test.getBlock(sideInput).getComponent("recordPlayer");
		
		  let sequence = test.startSequence();
		  for (const [mainLevel, mainRecord] of LEVEL_TO_RECORDS) {
		    for (const [sideLevel, sideRecord] of LEVEL_TO_RECORDS) {
		      let value = Math.max(mainLevel - sideLevel, 0);
		      sequence = sequence
		        .thenExecute(() => {
		          if (mainLevel == 0) {
		            mainMusicPlayerComp.clearRecord();
		          } else {
		            mainMusicPlayerComp.setRecord(mainRecord);
		          }
		          if (sideLevel == 0) {
		            sideMusicPlayerComp.clearRecord();
		          } else {
		            sideMusicPlayerComp.setRecord(sideRecord);
		          }
		        })
		        .thenWaitAfter(3, () => {
		          test.assertRedstonePower(output, value);
		        });
		    }
		  }
		  sequence.thenSucceed();
		})
		  .maxTicks(TicksPerSecond * 60)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "RespawnAnchorTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes } from "mojang-minecraft";
		
		let respawnanchor_explosion = (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 2));
		  const anchorPos = new BlockLocation(1, 2, 2);
		  const woolPos = anchorPos.above();
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.respawnAnchor, anchorPos);
		      test.assertBlockPresent(MinecraftBlockTypes.wool, woolPos);
		    })
		    .thenExecuteAfter(5, () => {
		      player.interactWithBlock(anchorPos)
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.water, anchorPos);
		      test.assertBlockPresent(MinecraftBlockTypes.wool, woolPos);
		    })
		    .thenSucceed();
		};
		
		GameTest.register("RespawnAnchorTests", "inwater_explosion_not_destructive", (test) => respawnanchor_explosion(test))
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RespawnAnchorTests", "waterlogged_neighbour_explosion", (test) => respawnanchor_explosion(test))
		  // Having waterlogged neighbour blocks counts as being in water
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("RespawnAnchorTests", "onland_explosion_destructive", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 1));
		  const anchorPos = new BlockLocation(1, 2, 1);
		  const woolPos = anchorPos.above();
		
		  test
		    .startSequence()
		    .thenExecute(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.respawnAnchor, anchorPos);
		      test.assertBlockPresent(MinecraftBlockTypes.wool, woolPos);
		    })
		    .thenExecuteAfter(5, () => {
		      player.interactWithBlock(anchorPos)
		    })
		    .thenWait(() => {
		      test.assertBlockState(anchorPos, (block) => {
		        return block.type == MinecraftBlockTypes.air || block.type == MinecraftBlockTypes.fire
		      })
		      test.assertBlockPresent(MinecraftBlockTypes.air, woolPos);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		'''
	script "SculkTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, BlockProperties, MinecraftBlockTypes, TicksPerSecond } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TEST_PADDING = 5;
		
		function spreadFromBlockOrAssert(test, sculkSpreader, spreaderPos, sculkBlockType, sculkBlockPos, charge) {
		    test.assertBlockPresent(sculkBlockType, sculkBlockPos);
		    const cursorOffset = new BlockLocation(
		        sculkBlockPos.x - spreaderPos.x,
		        sculkBlockPos.y - spreaderPos.y,
		        sculkBlockPos.z - spreaderPos.z);
		    sculkSpreader.addCursorsWithOffset(cursorOffset, charge);
		}
		
		function placeSculkAndSpread(test, sculkSpreader, spreaderPos, pos, charge) {
		    test.setBlockType(MinecraftBlockTypes.sculk, pos);
		    spreadFromBlockOrAssert(test, sculkSpreader, spreaderPos, MinecraftBlockTypes.sculk, pos, charge);
		}
		
		function placeSculkVeinAndSpread(test, sculkSpreader, spreaderPos, pos, faceMask, charge) {
		    let downFacingSculkVeinBlock = MinecraftBlockTypes.sculkVein.createDefaultBlockPermutation();
		    downFacingSculkVeinBlock.getProperty(BlockProperties.multiFaceDirectionBits).value = faceMask;
		    test.setBlockPermutation(downFacingSculkVeinBlock, pos);
		    spreadFromBlockOrAssert(test, sculkSpreader, spreaderPos, MinecraftBlockTypes.sculkVein, pos, charge);
		}
		
		GameTest.register("SculkTests", "spread", (test) => {
		    const spawnPos = new BlockLocation(2, 5, 2);
		    test.spawn("minecraft:creeper", spawnPos).kill();
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 2));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(3, 4, 2));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(1, 4, 2));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 1));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_path", (test) => {
		    const spawnPos = new BlockLocation(0, 5, 1);
		    test.spawn("minecraft:guardian", spawnPos).kill();
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculkVein, new BlockLocation(4, 5, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(4, 4, 2));
		        test.assertBlockPresent(MinecraftBlockTypes.stone, new BlockLocation(4, 4, 1));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_path_restricted", (test) => {
		    const spawnPos = new BlockLocation(1, 5, 1);
		    test.spawn("minecraft:creeper", spawnPos).kill();
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(3, 4, 3));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_uneven", (test) => {
		    const MIN_CONSUMED_BLOCKS_COUNT = 25;
		    const MAX_RESIDUAL_CHARGE = 5;
		    const INITIAL_CHARGE_SMALL = 5;
		    const INITIAL_CHARGE_BIG = 30;
		
		    const sculkCatalystPos = new BlockLocation(2, 3, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !== undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos1 = new BlockLocation(0, 4, 0);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos1, /* faceMask (down) = */ 1, INITIAL_CHARGE_SMALL);
		    const spreadStartPos2 = new BlockLocation(4, 4, 4);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos2, /* faceMask (down) = */ 1, INITIAL_CHARGE_BIG);
		
		    test.succeedWhen(() => {
		        var sculkCount = 0;
		        for (var x = 0; x < 5; ++x) {
		            for (var y = 0; y < 5; ++y) {
		                for (var z = 0; z < 5; ++z) {
		                    if (test.getBlock(new BlockLocation(x, y, z)).id ===  "minecraft:sculk") {
		                        ++sculkCount;
		                    }
		                }
		            }
		        };
		
		        test.assert(sculkCount >= MIN_CONSUMED_BLOCKS_COUNT, "Spreading was not successful! Just " + sculkCount + " sculk blocks were placed!");
		        test.assert(sculkSpreader.getTotalCharge() <= MAX_RESIDUAL_CHARGE, "Residual charge of " + sculkSpreader.getTotalCharge() + " is too high!");
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .maxAttempts(5)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_uneven_overcharged", (test) => {
		    const MIN_CONSUMED_BLOCKS_COUNT = 25;
		    const MIN_RESIDUAL_CHARGE = 25;
		    const INITIAL_CHARGE = 30;
		
		    const sculkCatalystPos = new BlockLocation(2, 3, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos1 = new BlockLocation(0, 4, 0);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos1, /* faceMask (down) = */ 1, INITIAL_CHARGE);
		    const spreadStartPos2 = new BlockLocation(4, 4, 4);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos2, /* faceMask (down) = */ 1, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        var sculkCount = 0;
		        for (var x = 0; x < 5; ++x) {
		            for (var y = 0; y < 5; ++y) {
		                for (var z = 0; z < 5; ++z) {
		                    if (test.getBlock(new BlockLocation(x, y, z)).id ===  "minecraft:sculk") {
		                        ++sculkCount;
		                    }
		                }
		            }
		        };
		
		        test.assert(sculkCount >= MIN_CONSUMED_BLOCKS_COUNT, "Spreading was not successful! Just " + sculkCount + " sculk blocks were placed!");
		        test.assert(sculkSpreader.getTotalCharge() >= MIN_RESIDUAL_CHARGE, "Residual charge of " + sculkSpreader.getTotalCharge() + " is too low!");
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .maxAttempts(5)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_stairway_up", (test) => {
		    const CONSUMABLE_BLOCKS_COUNT = 15;
		    const INITIAL_CHARGE = CONSUMABLE_BLOCKS_COUNT;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(0, 3, -1);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (south) = */ 1 << 2, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 4, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 10, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(3, 14, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(0, 17, 0));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_stairway_up_unsupported", (test) => {
		    const CONSUMABLE_BLOCKS_COUNT = 15;
		    const INITIAL_CHARGE = CONSUMABLE_BLOCKS_COUNT;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(0, 3, -1);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (south) = */ 1 << 2, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 4, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 10, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(3, 14, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(0, 17, 0));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_stairway_down", (test) => {
		    const CONSUMABLE_BLOCKS_COUNT = 15;
		    const INITIAL_CHARGE = CONSUMABLE_BLOCKS_COUNT;
		
		    const sculkCatalystPos = new BlockLocation(2, 17, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(0, 17, -1);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (south) = */ 1 << 2, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 4, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(1, 10, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(3, 14, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(0, 3, 0));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_pillar_up", (test) => {
		    const CONSUMABLE_BLOCKS_COUNT = 12;
		    const INITIAL_CHARGE = CONSUMABLE_BLOCKS_COUNT - 1;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(2, 4, 1);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (south) = */ 1 << 2, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(2, 14, 2));
		        test.assertBlockPresent(MinecraftBlockTypes.dirt, new BlockLocation(2, 15, 2));
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_consume_blocks", (test) => {
		    const TEST_AREA_SIZE_X = 10;
		    const TEST_AREA_SIZE_Z = 5;
		    const CONSUME_ROW_DELAY = TEST_AREA_SIZE_X * 2;
		    const CONSUME_ROW_CHARGE = TEST_AREA_SIZE_X;
		
		    const sculkCatalystPos = new BlockLocation(4, 2, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, new BlockLocation(0, 4, 0), /* faceMask (down) = */ 1, CONSUME_ROW_CHARGE);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, new BlockLocation(0, 2, 1), /* faceMask (up) = */ 1 << 1, CONSUME_ROW_CHARGE);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, new BlockLocation(0, 4, 2), /* faceMask (down) = */ 1, CONSUME_ROW_CHARGE);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, new BlockLocation(0, 2, 3), /* faceMask (up) = */ 1 << 1, CONSUME_ROW_CHARGE);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, new BlockLocation(0, 4, 4), /* faceMask (down) = */ 1, CONSUME_ROW_CHARGE);
		
		    test.startSequence().thenExecuteAfter(CONSUME_ROW_DELAY, () => {
		        for (var x = 0; x < TEST_AREA_SIZE_X; x++) {
		            for (var z = 0; z < TEST_AREA_SIZE_Z; z++) {
		                const testPos = new BlockLocation(x, 3, z);
		                var blockID = test.getBlock(testPos).type.id.valueOf();
		                test.assert(blockID ===  "minecraft:sculk", blockID + " is expected to be consumed by sculk.");
		            }
		        }
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_spread_blocks", (test) => {
		    test.spawn("minecraft:creeper", new BlockLocation(2, 4, 2)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(0, 4, 0)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(0, 4, 4)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(4, 4, 0)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(4, 4, 4)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(2, 4, 0)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(0, 4, 2)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(4, 4, 2)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(2, 4, 4)).kill();
		
		    test.succeedWhen(() => {
		        for (var x = 0; x < 5; ++x) {
		            for (var z = 0; z < 5; ++z) {
		                const isSculk = test.getBlock(new BlockLocation(x, 3, z)).id ===  "minecraft:sculk" || test.getBlock(new BlockLocation(x, 4, z)).id ===  "minecraft:sculk_vein";
		                test.assert(isSculk, "Sculk failed to spread to [" + x + ", " + z + "]!");
		            }
		        };
		    });
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_spread_blocks_replaceable", (test) => {
		    test.spawn("minecraft:creeper", new BlockLocation(1, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(1, 3, 3)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(4, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(4, 3, 3)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(6, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(6, 3, 3)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(9, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(9, 3, 3)).kill();
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(1, 2, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(1, 2, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(3, 2, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(3, 2, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(7, 2, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(7, 2, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(9, 2, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(9, 2, 3));
		    });
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_non_spread_blocks", (test) => {
		    test.spawn("minecraft:creeper", new BlockLocation(1, 4, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(1, 4, 3)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(3, 4, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(3, 4, 3)).kill();
		
		    // We need a delay to check if veins spread more then expected, otherwise the
		    // test will succeed the moment the expected amount of veins has been placed.
		    test.succeedOnTickWhen(TicksPerSecond * 2, () => {
		        var sculkVeinCount = 0;
		        for (var x = 0; x < 5; ++x) {
		            for (var z = 0; z < 5; ++z) {
		                if (test.getBlock(new BlockLocation(x, 4, z)).id ===  "minecraft:sculk_vein") {
		                    ++sculkVeinCount;
		                }
		            }
		        };
		        test.assert(sculkVeinCount ===  4, "Only 4 veins where expected to be placed, one for each mob death position!");
		    });
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_non_spread_fire", (test) => {
		    test.spawn("minecraft:creeper", new BlockLocation(1, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(1, 3, 3)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(3, 3, 1)).kill();
		    test.spawn("minecraft:creeper", new BlockLocation(3, 3, 3)).kill();
		
		    test.startSequence().thenExecuteFor(TicksPerSecond * 2, () => {
		        test.assertBlockPresent(MinecraftBlockTypes.fire, new BlockLocation(1, 3, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.fire, new BlockLocation(4, 3, 3));
		        test.assertBlockPresent(MinecraftBlockTypes.soulFire, new BlockLocation(1, 3, 1));
		        test.assertBlockPresent(MinecraftBlockTypes.soulFire, new BlockLocation(4, 3, 1));
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that no sculk vein is placed on a catalyst if a mob dies on top of it.
		GameTest.register("SculkTests", "vein_non_spread_catalyst", (test) => {
		    const spawnPos = new BlockLocation(2, 3, 2);
		    test.spawn("minecraft:creeper", spawnPos).kill();
		
		    test.startSequence().thenExecuteFor(TicksPerSecond * 2, () => {
		        test.assertBlockPresent(MinecraftBlockTypes.air, spawnPos);
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_under_water", (test) => {
		    const INITIAL_CHARGE = 30;
		
		    const sculkCatalystPos = new BlockLocation(2, 7, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(3, 6, 3);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (down) = */ 1, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 2));
		    })
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "vein_non_place_blocks", (test) => {
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    test.spawn("minecraft:creeper", new BlockLocation(1, 30, 2));
		    test.spawn("minecraft:creeper", new BlockLocation(2, 30, 1));
		    test.spawn("minecraft:creeper", new BlockLocation(2, 30, 3));
		    test.spawn("minecraft:creeper", new BlockLocation(3, 30, 2));
		
		    test.startSequence().thenExecuteAfter(TicksPerSecond * 4, () => {
		        var testPos = new BlockLocation(0, 0, 0);
		        for (var y = 2; y < 5; y++) {
		            for (var x = 0; x < 5; x++) {
		                for (var z = 0; z < 5; z++) {
		                    testPos = new BlockLocation(x, y, z);
		                    var blockID = test.getBlock(testPos).type.id.valueOf();
		                    test.assert(blockID !==  "minecraft:sculk", "Sculk should not have spread.");
		                    test.assert(blockID !==  "minecraft:sculk_vein", "Sculk Vein should not have spread.");
		                }
		            }
		        }
		    }).thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 10)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_cap", (test) => {
		    const MERGEABLE_EXPERIENCE_AMOUNT = 25;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const mobSpawnLocation = new BlockLocation(2, 4, 2);
		    test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 3, 2), sculkSpreader.maxCharge - MERGEABLE_EXPERIENCE_AMOUNT);
		
		    test.startSequence().thenExecuteAfter(2, () => {
		        test.assert(sculkSpreader.getNumberOfCursors() ===  1, "Charges should merge up to maximum.");
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		    }).thenExecuteAfter(2, () => {
		        test.assert(sculkSpreader.getNumberOfCursors() ===  1, "Charges should merge up to maximum.");
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		        test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		    }).thenExecuteAfter(2, () => {
		        test.assert(sculkSpreader.getNumberOfCursors() ===  2, "Charges should not merge above maximum.");
		    }).thenSucceed();
		
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that on an experienceless mob death, a catalyst blooms but does not get a cursor.
		GameTest.register("SculkTests", "catalyst_no_xp_death", (test) => {
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const mobSpawnLocation = sculkCatalystPos.offset(0, 1, 0);
		    test.spawn("minecraft:villager_v2<minecraft:spawn_farmer>", mobSpawnLocation).kill();
		
		    test.startSequence().thenExecuteAfter(2, () => {
		        const numberOfCursors = sculkSpreader.getNumberOfCursors();
		        test.assert(numberOfCursors ===  0, "Expected total number of cursors to be 0. Actual amount: " + numberOfCursors);
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("bloom", 1, sculkCatalystPos);
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that on mob death, only the closest catalyst gets a cursor.
		GameTest.register("SculkTests", "multiple_catalysts_one_death", (test) => {
		    const catalystPositions = [
		        new BlockLocation(0, 2, 0),
		        new BlockLocation(4, 2, 0),
		        new BlockLocation(4, 2, 4),
		        new BlockLocation(0, 2, 4)];
		
		    catalystPositions.forEach(location => test.assert(test.getSculkSpreader(location) !==  undefined, "Failed to find sculk catalyst."));
		
		    const closestCatalystPosition = catalystPositions[0];
		    const mobSpawnLocation = closestCatalystPosition.offset(0, 2, 0);
		    test.spawn("minecraft:creeper", mobSpawnLocation).kill();
		
		    test.startSequence().thenExecuteAfter(2, () => {
		        let numberOfCursors = 0;
		        catalystPositions.forEach(position => numberOfCursors += test.getSculkSpreader(position).getNumberOfCursors());
		        test.assert(numberOfCursors ===  1, "Expected total number of cursors to be 1. Actual amount: " + numberOfCursors);
		        const closestCatalystCursors = test.getSculkSpreader(closestCatalystPosition).getNumberOfCursors();
		        test.assert(closestCatalystCursors ===  1, "Expected the closest sculk catalyst to get the cursor.");
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that on mob death, only the closest catalyst gets a cursor. In this case, a mob dies on top
		// of each one of the four catalysts, resulting in four cursors being created, one per catalyst.
		GameTest.register("SculkTests", "multiple_catalysts_multiple_deaths", (test) => {
		    const catalystPositions = [
		        new BlockLocation(0, 2, 0),
		        new BlockLocation(4, 2, 0),
		        new BlockLocation(4, 2, 4),
		        new BlockLocation(0, 2, 4)];
		
		    catalystPositions.forEach(location => {
		        test.assert(test.getSculkSpreader(location) !==  undefined, "Failed to find sculk catalyst.");
		        test.spawn("minecraft:creeper", location.offset(0, 2, 0)).kill();
		    });
		
		    test.startSequence().thenExecuteAfter(2, () => {
		        let numberOfCursors = 0;
		        catalystPositions.forEach(position => numberOfCursors += test.getSculkSpreader(position).getNumberOfCursors());
		        test.assert(numberOfCursors ===  4, "Expected total number of cursors to be 4. Actual amount: " + numberOfCursors);
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_decay_sculk", (test) => {
		    const INITIAL_CHARGE = 20;
		    const FINAL_CHARGE = 19;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 2), INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        const totalCharge = sculkSpreader.getTotalCharge();
		        test.assert(totalCharge ===  FINAL_CHARGE, "Charge should drop to " + FINAL_CHARGE + ". Total charge: " + totalCharge);
		    });
		})
		    .maxAttempts(5)
		    .maxTicks(TicksPerSecond * 20)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_decay_sculk_vein", (test) => {
		    const INITIAL_CHARGE = 20;
		    const FINAL_CHARGE = 0;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const spreadStartPos = new BlockLocation(2, 6, 2);
		    placeSculkVeinAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, /* faceMask (down) = */ 1, INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        const totalCharge = sculkSpreader.getTotalCharge();
		        test.assert(totalCharge ===  FINAL_CHARGE, "Charge should drop to " + FINAL_CHARGE + ". Total charge: " + totalCharge);
		    });
		})
		    .maxAttempts(5)
		    .maxTicks(TicksPerSecond * 20)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "sculk_growth_spawning", (test) => {
		    const INITIAL_CHARGE = 100;
		
		    const sculkCatalystPos = new BlockLocation(4, 4, 2);
		    test.assertBlockPresent(MinecraftBlockTypes.sculkCatalyst, sculkCatalystPos);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    for (var z = 1; z < 4; z++) {
		        const spreadStartPos = new BlockLocation(1, 4, z);
		        placeSculkAndSpread(test, sculkSpreader, sculkCatalystPos, spreadStartPos, INITIAL_CHARGE);
		    }
		
		    test.succeedOnTickWhen(TicksPerSecond * 20, () => {
		        var position = new BlockLocation(0, 0, 0);
		
		        var farGrowths = 0;
		        for (var x = 8; x < 14; x++) {
		            for (var z = 1; z < 4; z++) {
		                position = new BlockLocation(x, 5, z);
		                var blockID = test.getBlock(position).type.id.valueOf();
		                var worldBlockLocation = test.worldBlockLocation(position);
		                if (blockID === "minecraft:sculk_sensor" || blockID === "minecraft:sculk_shrieker") {
		                    farGrowths++;
		                }
		            }
		        }
		
		        test.assert(farGrowths > 1, "At least 2 growths should have spawned from the catalyst. Number spawned: " + farGrowths);
		
		        var nearGrowths = 0;
		        for (var x = 1; x < 8; x++) {
		            for (var z = 1; z < 4; z++) {
		                position = new BlockLocation(x, 5, z);
		                var blockID = test.getBlock(position).type.id.valueOf();
		                if (blockID === "minecraft:sculk_sensor" || blockID === "minecraft:sculk_shrieker") {
		                    nearGrowths++;
		                }
		            }
		        }
		
		        test.assert(nearGrowths ===  0, "No growths should have spawned near the catalyst.");
		    });
		})
		    .maxTicks(TicksPerSecond * 40)
		    .maxAttempts(5)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_forced_direction", (test) => {
		    const INITIAL_CHARGE = 25;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(1, 3, 2), INITIAL_CHARGE);
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(1, 13, 2), INITIAL_CHARGE);
		
		    test.startSequence().thenExecuteAfter(TicksPerSecond * 1, () => {
		        const expected = [
		            new BlockLocation(1, 7, 2),
		            new BlockLocation(1, 9, 2)];
		        const actual = [
		            test.relativeBlockLocation(sculkSpreader.getCursorPosition(0)),
		            test.relativeBlockLocation(sculkSpreader.getCursorPosition(1))];
		
		        test.assert(expected[0].equals(actual[0]),
		            "Expected charge ends up on on (" + expected[0].x + ", " + expected[0].y + ", " + expected[0].z + "), not (" + actual[0].x + ", " + actual[0].y + ", " + actual[0].z + ").");
		        test.assert(expected[1].equals(actual[1]),
		            "Expected charge ends up on on (" + expected[1].x + ", " + expected[1].y + ", " + expected[1].z + "), not (" + actual[1].x + ", " + actual[1].y + ", " + actual[1].z + ").");
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_redirection", (test) => {
		    const INITIAL_CHARGE = 100;
		
		    const sculkCatalystPos = new BlockLocation(5, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(4, 5, 2), INITIAL_CHARGE);
		
		    test.startSequence().thenExecuteAfter(TicksPerSecond * 2, () => {
		        const expectedPos = new BlockLocation(6, 5, 2);
		        const cursorPosition = sculkSpreader.getCursorPosition(0);
		        const existingPos = test.relativeBlockLocation(cursorPosition);
		        test.assert(expectedPos.equals(existingPos),
		            "Expected charge on (" + expectedPos.x + ", " + expectedPos.y + ", " + expectedPos.z + "), not (" + existingPos.x + ", " + existingPos.y + ", " + existingPos.z + ").");
		
		        test.setBlockType(MinecraftBlockTypes.redstoneBlock, new BlockLocation(5, 6, 3));
		    }).thenExecuteAfter(TicksPerSecond * 2, () => {
		        const expectedPos = new BlockLocation(4, 5, 2);
		        const cursorPosition = sculkSpreader.getCursorPosition(0);
		        const existingPos = test.relativeBlockLocation(cursorPosition);
		        test.assert(expectedPos.equals(existingPos),
		            "Expected charge on (" + expectedPos.x + ", " + expectedPos.y + ", " + expectedPos.z + "), not (" + existingPos.x + ", " + existingPos.y + ", " + existingPos.z + ").");
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_merging", (test) => {
		    const INITIAL_CHARGE = 5;
		    const MIN_RESIDUAL_CHARGE = 12;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 5, 0), INITIAL_CHARGE);
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 5, 4), INITIAL_CHARGE);
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(4, 5, 2), INITIAL_CHARGE);
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(0, 5, 2), INITIAL_CHARGE);
		
		    test.succeedWhen(() => {
		        const totalCharge = sculkSpreader.getTotalCharge();
		        const numberOfCursors = sculkSpreader.getNumberOfCursors();
		        test.assert(numberOfCursors ===  1, "There are " + numberOfCursors + " cursors, should be only one");
		        test.assert(totalCharge >= MIN_RESIDUAL_CHARGE, "Total charge of + " + INITIAL_CHARGE * 4 + " + should be roughly preserved, current charge: " + totalCharge);
		    });
		})
		    .maxTicks(TicksPerSecond * 5)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_in_air_disappear", (test) => {
		    const INITIAL_CHARGE = 20;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 2), INITIAL_CHARGE);
		
		    const charge = sculkSpreader.getTotalCharge();
		    test.assert(charge ===  INITIAL_CHARGE, "Total charge of " + INITIAL_CHARGE + " should be still present at this point.");
		
		    test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(2, 4, 2));
		
		    test.startSequence().thenExecuteAfter(3, () => {
		        const numberOfCursors = sculkSpreader.getNumberOfCursors();
		        test.assert(numberOfCursors ===  0, "The cursor did not disappear in 3 ticks despite having no substrate.");
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "charge_in_air_jump", (test) => {
		    const INITIAL_CHARGE = 20;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    spreadFromBlockOrAssert(test, sculkSpreader, sculkCatalystPos, MinecraftBlockTypes.sculk, new BlockLocation(2, 4, 2), INITIAL_CHARGE);
		
		    const charge = sculkSpreader.getTotalCharge();
		    test.assert(charge ===  INITIAL_CHARGE, "Total charge of " + INITIAL_CHARGE + " should be still present at this point.");
		
		    test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(2, 4, 2));
		    test.setBlockType(MinecraftBlockTypes.sculk, new BlockLocation(2, 5, 2));
		
		    test.startSequence().thenExecuteAfter(3, () => {
		        const expectedPos = new BlockLocation(2, 5, 2);
		        const cursorPos = sculkSpreader.getCursorPosition(0);
		        const currentPos = test.relativeBlockLocation(cursorPos);
		        test.assert(expectedPos.equals(currentPos),
		            "Expected charge on (" + expectedPos.x + ", " + expectedPos.y + ", " + expectedPos.z + "), not (" + currentPos.x + ", " + currentPos.y + ", " + currentPos.z + ")");
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_from_moving_blocks", (test) => {
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, new BlockLocation(8, 9, 2));
		
		    test.startSequence().thenExecuteAfter(TicksPerSecond * 10, () => {
		        test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(8, 9, 2));
		
		        for (var x = 1; x < 8; x++) {
		            for (var z = 1; z < 4; z++) {
		                test.assertBlockPresent(MinecraftBlockTypes.sculk, new BlockLocation(x, 0, z), /* isPresent = */ false)
		            }
		        }
		    }).thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 15)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_to_moving_blocks", (test) => {
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, new BlockLocation(8, 9, 2));
		
		    test.startSequence().thenExecuteAfter(TicksPerSecond * 10, () => {
		        // Deactivate the contraption to prevent detection of moving blocks.
		        test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(8, 9, 2));
		    }).thenExecuteAfter(TicksPerSecond * 1, () => {
		        var sculkCount = 0;
		        for (var x = 1; x < 8; x++) {
		            for (var z = 1; z < 4; z++) {
		                if (test.getBlock(new BlockLocation(x, 3, z)).id ===  "minecraft:sculk") {
		                    ++sculkCount;
		                }
		            }
		        }
		
		        test.assert(sculkCount >= 5, "Sculk is expected to spread on slow enough moving blocks!");
		    }).thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 15)
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SculkTests", "spread_on_player_death", (test) => {
		    const DIE_BY_FALL_DAMAGE_HEIGHT = 25;
		    const DIE_BY_FALL_DAMAGE_TIME = TicksPerSecond * 2;
		
		    const sculkCatalystPos = new BlockLocation(2, 2, 2);
		    const sculkSpreader = test.getSculkSpreader(sculkCatalystPos);
		    test.assert(sculkSpreader !==  undefined, "No Sculk Spreader has been retrieved!");
		
		    const grassPos = new BlockLocation(1, 4, 2);
		    const grassWithTallGrassPos = new BlockLocation(3, 4, 2);
		
		    test.startSequence().thenExecute(() => {
		        const player1 = test.spawnSimulatedPlayer(grassPos.offset(0, DIE_BY_FALL_DAMAGE_HEIGHT, 0), "Giovanni");
		        player1.addExperience(10);
		    }).thenExecuteAfter(DIE_BY_FALL_DAMAGE_TIME, () => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, grassPos);
		    }).thenExecute(() => {
		        const player2 = test.spawnSimulatedPlayer(grassWithTallGrassPos.offset(0, DIE_BY_FALL_DAMAGE_HEIGHT, 0), "Giorgio");
		        player2.addExperience(10);
		    }).thenExecuteAfter(DIE_BY_FALL_DAMAGE_TIME, () => {
		        test.assertBlockPresent(MinecraftBlockTypes.sculk, grassWithTallGrassPos);
		    }).thenSucceed();
		})
		    .padding(TEST_PADDING)
		    .tag(GameTest.Tags.suiteDefault);
		'''
	script "SimulatedPlayerTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import GameTestExtensions from "./GameTestExtensions.js";
		import {
		  BlockLocation,
		  Direction,
		  ItemStack,
		  Location,
		  MinecraftBlockTypes,
		  MinecraftItemTypes,
		  world,
		} from "mojang-minecraft";
		
		function isNear(n1, n2) {
		  return Math.abs(n1 - n2) < 0.01;
		}
		
		GameTest.register("SimulatedPlayerTests", "spawn_simulated_player", (test) => {
		  const spawnLoc = new BlockLocation(1, 5, 1);
		  const landLoc = new BlockLocation(1, 2, 1);
		  const playerName = "Test Player";
		  const player = test.spawnSimulatedPlayer(spawnLoc, playerName);
		  test.assertEntityPresent("player", spawnLoc);
		  test.assert(player.nameTag === playerName, "Unexpected name tag");
		  test.succeedWhen(() => {
		    test.assertEntityPresent("player", landLoc);
		  });
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "remove_simulated_player", (test) => {
		  const spawnLoc = new BlockLocation(1, 2, 1);
		  const player = test.spawnSimulatedPlayer(spawnLoc);
		  test.assertEntityPresent("player", spawnLoc);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      test.removeSimulatedPlayer(player);
		      test.assertEntityPresent("player", spawnLoc, false);
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "jump", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const goalLoc = new BlockLocation(1, 2, 3);
		  let jumpCount = 0;
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      player.move(0, 1);
		    })
		    .thenWait(() => {
		      if (player.jump()) {
		        jumpCount++;
		      }
		      test.assertEntityInstancePresent(player, goalLoc);
		      test.assert(jumpCount === 10, "Expected 2 jumps up the stairs and 8 in the snow block");
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "attack_entity", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		  let hitCount = 0;
		  test
		    .startSequence()
		    .thenWait(() => {
		      player.lookAtEntity(cow);
		      if (player.attackEntity(cow)) {
		        hitCount++;
		      }
		      test.assertEntityPresentInArea("cow", false);
		    })
		    .thenExecute(() => {
		      test.assert(hitCount === 10, "It should take 10 hits to kill a Cow.");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "jump_attack_entity", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		  let hitCount = 0;
		  test
		    .startSequence()
		    .thenWait(() => {
		      player.lookAtEntity(cow);
		      player.jump();
		      if (player.velocity.y < -0.3 && player.attackEntity(cow)) {
		        hitCount++;
		      }
		      test.assertEntityPresentInArea("cow", false);
		    })
		    .thenExecute(() => {
		      test.assert(hitCount === 7, "It should take 7 critical hits to kill a Cow.");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "attack", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const cow = test.spawn("minecraft:cow<minecraft:ageable_grow_up>", new BlockLocation(3, 2, 3));
		  let hitCount = 0;
		  test
		    .startSequence()
		    .thenWait(() => {
		      player.lookAtEntity(cow);
		      if (player.attack()) {
		        hitCount++;
		      }
		      test.assertEntityPresentInArea("cow", false);
		    })
		    .thenExecute(() => {
		      test.assert(hitCount === 10, "It should take 10 hits to kill a Cow.");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("ComponentTests:large_animal_pen")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const snowball = new ItemStack(MinecraftItemTypes.snowball, 1);
		  test.spawn("blaze", new BlockLocation(1, 2, 3));
		  let useCount = 0;
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenWait(() => {
		      if (player.useItem(snowball)) {
		        useCount++;
		      }
		      test.assertEntityPresentInArea("blaze", false);
		    })
		    .thenExecute(() => {
		      test.assert(useCount === 7, "It should take 7 snowballs to kill a Blaze");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item_in_slot", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  test.spawn("blaze", new BlockLocation(1, 2, 3));
		  let useCount = 0;
		  const slot = 0;
		  const snowballCount = 10;
		  const inventoryContainer = player.getComponent("inventory").container;
		
		  player.setItem(new ItemStack(MinecraftItemTypes.snowball, snowballCount), slot, true);
		
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenWait(() => {
		      test.assert(
		        inventoryContainer.getItem(slot).amount === snowballCount - useCount,
		        `Player should have ${snowballCount} snowballs`
		      );
		      if (player.useItemInSlot(slot)) {
		        useCount++;
		      }
		      test.assertEntityPresentInArea("blaze", false);
		    })
		    .thenExecute(() => {
		      test.assert(
		        inventoryContainer.getItem(slot).amount === snowballCount - useCount,
		        `Player should have ${snowballCount - useCount} snowballs`
		      );
		      test.assert(useCount === 7, "It should take 7 snowballs to kill a Blaze");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("SimulatedPlayerTests:use_item")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item_on_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  test
		    .startSequence()
		    .thenWait(() => {
		      const armorStand = new ItemStack(MinecraftItemTypes.armorStand, 1);
		      const armorStandLoc = new BlockLocation(1, 1, 1);
		      const used = player.useItemOnBlock(armorStand, armorStandLoc, Direction.up);
		      test.assert(used, "Expected armor stand to be used");
		      test.assertEntityPresent("armor_stand", armorStandLoc.above());
		    })
		    .thenWaitAfter(10, () => {
		      const dirt = new ItemStack(MinecraftItemTypes.dirt, 1);
		      const dirtLoc = new BlockLocation(2, 1, 1);
		      const used = player.useItemOnBlock(dirt, dirtLoc, Direction.up);
		      test.assert(used, "Expected dirt to be used");
		      test.assertBlockPresent(MinecraftBlockTypes.dirt, dirtLoc.above());
		    })
		    .thenWaitAfter(10, () => {
		      const bucket = new ItemStack(MinecraftItemTypes.bucket, 1);
		      const waterLoc = new BlockLocation(1, 2, 3);
		      const used = player.useItemOnBlock(bucket, waterLoc);
		      test.assert(used, "Expected bucket to be used");
		      test.assertBlockPresent(MinecraftBlockTypes.air, waterLoc);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "give_item", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  let useCount = 0;
		
		  test.assert(player.giveItem(new ItemStack(MinecraftItemTypes.snowball, 16), true), "giveItem() returned false");
		  test.spawn("blaze", new BlockLocation(1, 2, 2));
		
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenWait(() => {
		      if (player.useItemInSlot(0)) {
		        useCount++;
		      }
		      test.assertEntityPresentInArea("blaze", false);
		    })
		    .thenExecute(() => {
		      test.assert(useCount === 7, "It should take 7 snowballs to kill a Blaze");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("SimulatedPlayerTests:blaze_trap")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "give_item_full_inventory", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const containerSize = player.getComponent("inventory").container.size;
		  for (let i = 0; i < containerSize; i++) {
		    test.assert(player.giveItem(new ItemStack(MinecraftItemTypes.dirt, 64), false), "");
		  }
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () =>
		      test.assert(!player.giveItem(new ItemStack(MinecraftItemTypes.oakStairs, 64), true), "")
		    )
		    .thenSucceed();
		})
		  .maxTicks(100)
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "set_item", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  let useCount = 0;
		
		  test.assert(player.setItem(new ItemStack(MinecraftItemTypes.snowball, 16), 0), "setItem() failed");
		  test.spawn("blaze", new BlockLocation(1, 2, 2));
		
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenWait(() => {
		      if (player.useItemInSlot(0)) {
		        useCount++;
		      }
		      test.assertEntityPresentInArea("blaze", false);
		    })
		    .thenExecute(() => {
		      test.assert(useCount === 7, "It should take 7 snowballs to kill a Blaze");
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("SimulatedPlayerTests:blaze_trap")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "set_item_full_inventory", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const containerSize = player.getComponent("inventory").container.size;
		  for (let i = 0; i < containerSize; i++) {
		    test.assert(player.giveItem(new ItemStack(MinecraftItemTypes.dirt, 64), false), "");
		  }
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () =>
		      test.assert(player.setItem(new ItemStack(MinecraftItemTypes.oakStairs, 64), 0, true), "setItem() failed")
		    )
		    .thenSucceed();
		})
		  .maxTicks(100)
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "interact_with_entity", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const minecart = test.spawn("minecart", new BlockLocation(1, 2, 1));
		  player.interactWithEntity(minecart);
		  test.succeedWhenEntityPresent("minecraft:player", new BlockLocation(1, 3, 1));
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "destroy_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const fenceLoc = new BlockLocation(1, 2, 0);
		  const chestLoc = new BlockLocation(2, 2, 0);
		  const ironOreLoc = new BlockLocation(0, 2, 1);
		  const planksLoc = new BlockLocation(1, 2, 1);
		  const blockLocs = [fenceLoc, chestLoc, ironOreLoc, planksLoc];
		
		  const blockTypes = [
		    MinecraftBlockTypes.fence,
		    MinecraftBlockTypes.chest,
		    MinecraftBlockTypes.ironOre,
		    MinecraftBlockTypes.planks,
		  ];
		
		  player.giveItem(new ItemStack(MinecraftItemTypes.ironPickaxe, 1), true);
		
		  for (let i = 0; i < blockLocs.length; i++) {
		    test.assertBlockPresent(blockTypes[i], blockLocs[i]);
		  }
		
		  const sequence = test.startSequence().thenIdle(5);
		
		  for (let i = 0; i < blockLocs.length; i++) {
		    sequence
		      .thenExecute(() => {
		        player.breakBlock(blockLocs[i]);
		      })
		      .thenWait(() => {
		        test.assertBlockPresent(blockTypes[i], blockLocs[i], false);
		      });
		  }
		
		  sequence.thenSucceed();
		})
		  .maxTicks(300)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "stop_destroying_block", (test) => {
		  const ironOreLoc = new BlockLocation(1, 2, 1);
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		
		  test.setBlockType(MinecraftBlockTypes.ironOre, ironOreLoc);
		  player.giveItem(new ItemStack(MinecraftItemTypes.ironPickaxe, 1), true);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.breakBlock(ironOreLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      player.stopBreakingBlock();
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.ironOre, ironOreLoc);
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item_while_destroying_block", (test) => {
		  const ironOreLoc = new BlockLocation(1, 2, 1);
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		
		  test.setBlockType(MinecraftBlockTypes.ironOre, ironOreLoc);
		  player.giveItem(new ItemStack(MinecraftItemTypes.ironPickaxe, 1), false);
		  player.giveItem(new ItemStack(MinecraftItemTypes.potion, 1), false);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.breakBlock(ironOreLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      player.useItemInSlot(1); // drink potion
		    })
		    .thenExecuteAfter(30, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.ironOre, ironOreLoc);
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(3, 2, 3));
		
		  test
		    .startSequence()
		    .thenIdle(10)
		    .thenExecute(() => {
		      player.move(0, -1);
		      player.setBodyRotation(180);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.move(1, 1);
		      player.setBodyRotation(50);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.move(-1, 1);
		      player.setBodyRotation(100);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.move(-1, -1);
		      player.setBodyRotation(220);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.move(1, -1);
		      player.setBodyRotation(0);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(2, 2, 0));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(0, 2, 4));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(4, 2, 6));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(6, 2, 2));
		    })
		    .thenSucceed();
		})
		  .maxTicks(110)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move_relative", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(3, 2, 3));
		
		  test
		    .startSequence()
		    .thenIdle(10)
		    .thenExecute(() => {
		      player.moveRelative(0, 1);
		      player.setBodyRotation(180);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.setBodyRotation(-45);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.setBodyRotation(45);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.setBodyRotation(135);
		    })
		    .thenIdle(16)
		    .thenExecute(() => {
		      player.setBodyRotation(225);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(2, 2, 0));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(0, 2, 4));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(4, 2, 6));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(6, 2, 2));
		    })
		    .thenSucceed();
		})
		  .maxTicks(110)
		  .structureName("SimulatedPlayerTests:move")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move_to_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(3, 2, 3));
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(3, 2, 1));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(5, 2, 3));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(3, 2, 5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(1, 2, 3));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(3, 2, 1));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToBlock(new BlockLocation(3, 2, 3));
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(2, 2, 0));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(0, 2, 4));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(4, 2, 6));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(6, 2, 2));
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("SimulatedPlayerTests:move")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move_to_location", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(3, 2, 3));
		  test
		    .startSequence()
		    .thenIdle(5)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(3.5, 2, 1.5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(5.5, 2, 3.5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(3.5, 2, 5.5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(1.5, 2, 3.5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(3.5, 2, 1.5));
		    })
		    .thenIdle(25)
		    .thenExecute(() => {
		      player.moveToLocation(new Location(3.5, 2, 3.5));
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(2, 2, 0));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(0, 2, 4));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(4, 2, 6));
		      test.assertBlockPresent(MinecraftBlockTypes.air, new BlockLocation(6, 2, 2));
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .structureName("SimulatedPlayerTests:move")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "navigate_to_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 0));
		  const goalLoc = new BlockLocation(0, 3, 2);
		  const behindDoorLoc = new BlockLocation(4, 3, 2);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToBlock(behindDoorLoc);
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(path[0].equals(new BlockLocation(2, 2, 0)), "Unexpected starting BlockLocation in navigation path.");
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(4, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, behindDoorLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToBlock(goalLoc);
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(0, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, goalLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(300)
		  .structureName("SimulatedPlayerTests:navigate_to_location")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "navigate_to_entity", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 0));
		  const goalLoc = new BlockLocation(0, 3, 2);
		  const behindDoorLoc = new BlockLocation(4, 3, 2);
		
		  const armorStand1 = test.spawn("armor_stand", behindDoorLoc.above());
		  const armorStand2 = test.spawn("armor_stand", goalLoc.above());
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToEntity(armorStand1);
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(path[0].equals(new BlockLocation(2, 2, 0)), "Unexpected starting BlockLocation in navigation path.");
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(4, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, behindDoorLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToEntity(armorStand2);
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(0, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, goalLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(300)
		  .structureName("SimulatedPlayerTests:navigate_to_location")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "navigate_to_location", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 0));
		  const goalLoc = new BlockLocation(0, 3, 2);
		  const behindDoorLoc = new BlockLocation(4, 3, 2);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToLocation(new Location(4.5, 3, 2.5));
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(path[0].equals(new BlockLocation(2, 2, 0)), "Unexpected starting BlockLocation in navigation path.");
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(4, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, behindDoorLoc);
		    })
		    .thenExecuteAfter(10, () => {
		      const nav = player.navigateToLocation(new Location(0.5, 3, 2.5));
		      test.assert(nav.isFullPath, "Expected successful navigation result");
		      const path = nav.path;
		      test.assert(
		        path[path.length - 1].equals(new BlockLocation(0, 3, 2)),
		        "Unexpected ending BlockLocation in navigation path."
		      );
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, goalLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(300)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "navigate_to_locations", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(2, 2, 0));
		  const goalLoc = new BlockLocation(0, 3, 2);
		  const locations = [new Location(4.5, 3, 2.5), new Location(0.5, 3, 2.5)];
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      player.navigateToLocations(locations);
		    })
		    .thenWait(() => {
		      test.assertEntityInstancePresent(player, goalLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(300)
		  .structureName("SimulatedPlayerTests:navigate_to_location")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "stop_moving", (test) => {
		  const spawnLoc = new BlockLocation(1, 2, 0);
		  const player = test.spawnSimulatedPlayer(spawnLoc);
		  player.move(0, 1);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      player.stopMoving();
		    })
		    .thenExecuteAfter(20, () => {
		      test.assertEntityInstancePresent(player, spawnLoc, false);
		      test.assertEntityInstancePresent(player, new BlockLocation(1, 3, 4), false);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "shoot_bow", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const lampLoc = new BlockLocation(2, 3, 7);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.giveItem(new ItemStack(MinecraftItemTypes.bow, 1), false);
		      player.giveItem(new ItemStack(MinecraftItemTypes.arrow, 64), false);
		    })
		    .thenExecuteAfter(5, () => {
		      player.useItemInSlot(0);
		    })
		    .thenExecuteAfter(50, () => {
		      player.stopUsingItem();
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		    })
		    .thenSucceed();
		})
		  .structureName("SimulatedPlayerTests:target_practice")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "shoot_crossbow", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const lampLoc = new BlockLocation(2, 3, 7);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.giveItem(new ItemStack(MinecraftItemTypes.crossbow, 1), false);
		      player.giveItem(new ItemStack(MinecraftItemTypes.arrow, 64), false);
		    })
		    .thenExecuteAfter(5, () => {
		      player.useItemInSlot(0);
		    })
		    .thenExecuteAfter(50, () => {
		      player.stopUsingItem();
		      player.useItemInSlot(0);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(150)
		  .structureName("SimulatedPlayerTests:target_practice")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move_in_minecart", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const minecart = test.spawn("minecart", new BlockLocation(1, 2, 0));
		  const lampLoc = new BlockLocation(0, 2, 3);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => {
		      player.interactWithEntity(minecart);
		      player.move(0, 1);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		    })
		    .thenSucceed();
		})
		  .maxTicks(200)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "rotate_body", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      test.assert(player.rotation.y === 0, "Expected body rotation of 0 degrees (1)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.setBodyRotation(90);
		      test.assert(player.rotation.y === 90, "Expected body rotation of 90 degrees (2)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.setBodyRotation(-90);
		      test.assert(player.rotation.y === -90, "Expected body rotation of -90 degrees (3)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.setBodyRotation(180);
		      test.assert(player.rotation.y === -180, "Expected body rotation of -180 degrees (4)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.rotateBody(180);
		      test.assert(player.rotation.y === 0, "Expected body rotation of 0 degrees (5)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.rotateBody(90);
		      test.assert(player.rotation.y === 90, "Expected body rotation of 90 degrees (6)");
		    })
		    .thenExecuteAfter(5, () => {
		      player.rotateBody(-180);
		      test.assert(player.rotation.y === -90, "Expected body rotation of -90 degrees (7)");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "look_at_entity", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const leftArmorStand = test.spawn("armor_stand", new BlockLocation(2, 2, 1));
		  const rightArmorStand = test.spawn("armor_stand", new BlockLocation(0, 2, 1));
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.lookAtEntity(leftArmorStand);
		      test.assert(player.rotation.y === -90, "Expected body rotation of -90 degrees");
		    })
		    .thenExecuteAfter(5, () => {
		      player.lookAtEntity(rightArmorStand);
		      test.assert(player.rotation.y === 90, "Expected body rotation of 90 degrees");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "look_at_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const leftBlockLoc = new BlockLocation(2, 2, 1);
		  const rightBlockLoc = new BlockLocation(0, 2, 1);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      test.assert(player.rotation.y === 0, "Expected body rotation of 0 degrees");
		      test.assert(player.headRotation.x === 0, "Expected head pitch of 0 degrees");
		      test.assert(player.headRotation.y === 0, "Expected head yaw of 0 degrees");
		      player.lookAtBlock(leftBlockLoc);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assert(player.rotation.y === -90, "Expected body rotation of -90 degrees");
		      test.assert(isNear(player.headRotation.x, 48.24), "Expected head pitch of ~48.24 degrees");
		      test.assert(player.headRotation.y === -90, "Expected head yaw of -90 degrees");
		    })
		    .thenExecuteAfter(10, () => {
		      player.lookAtBlock(rightBlockLoc);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assert(player.rotation.y === 90, "Expected body rotation of 90 degrees");
		      test.assert(isNear(player.headRotation.x, 48.24), "Expected head pitch of ~48.24 degrees");
		      test.assert(player.headRotation.y === 90, "Expected head yaw of 90 degrees");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "look_at_location", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1));
		  const leftLoc = new Location(2.5, 2, 1.5);
		  const rightLoc = new Location(0.5, 2, 1.5);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      test.assert(player.rotation.y === 0, "Expected body rotation of 0 degrees");
		      test.assert(player.headRotation.x === 0, "Expected head pitch of 0 degrees");
		      test.assert(player.headRotation.y === 0, "Expected head yaw of 0 degrees");
		      player.lookAtLocation(leftLoc);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assert(player.rotation.y === -90, "Expected body rotation of -90 degrees");
		      test.assert(isNear(player.headRotation.x, 58.31), "Expected head pitch of ~58.31 degrees");
		      test.assert(player.headRotation.y === -90, "Expected head yaw of -90 degrees");
		    })
		    .thenExecuteAfter(10, () => {
		      player.lookAtLocation(rightLoc);
		    })
		    .thenExecuteAfter(20, () => {
		      test.assert(player.rotation.y === 90, "Expected body rotation of 90 degrees");
		      test.assert(isNear(player.headRotation.x, 58.31), "Expected head pitch of ~58.31 degrees");
		      test.assert(player.headRotation.y === 90, "Expected head yaw of 90 degrees");
		    })
		    .thenSucceed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item_in_slot_on_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const wallLoc = new BlockLocation(1, 3, 2);
		  const slabLoc = new BlockLocation(1, 3, 1);
		  const woodenSlabSlot = 1;
		  const inventoryContainer = player.getComponent("inventory").container;
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.setItem(new ItemStack(MinecraftItemTypes.crimsonSlab, 2), 0);
		      player.setItem(new ItemStack(MinecraftItemTypes.woodenSlab, 2), woodenSlabSlot);
		      player.setItem(new ItemStack(MinecraftItemTypes.warpedSlab, 2), 2);
		      test.assert(inventoryContainer.getItem(woodenSlabSlot).amount === 2, "Player should have 2 wooden slabs");
		    })
		    .thenExecuteAfter(10, () => {
		      player.useItemInSlotOnBlock(woodenSlabSlot, wallLoc, Direction.north, 0.5, 0.75); // place upper slab
		      test.assert(inventoryContainer.getItem(woodenSlabSlot).amount === 1, "Player should have 1 wooden slab");
		    })
		    .thenExecuteAfter(10, () => {
		      player.useItemInSlotOnBlock(woodenSlabSlot, wallLoc, Direction.north, 0.5, 0.25); // place lower slab
		      test.assert(inventoryContainer.getItem(woodenSlabSlot) === undefined, "Player should have 0 wooden slabs");
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.doubleWoodenSlab, slabLoc);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "use_item_on_block_2", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const wallLoc = new BlockLocation(1, 3, 2);
		  const slabLoc = new BlockLocation(1, 3, 1);
		  const woodenSlab = new ItemStack(MinecraftItemTypes.woodenSlab, 1);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      player.useItemOnBlock(woodenSlab, wallLoc, Direction.north, 0.5, 0.75); // place upper slab
		    })
		    .thenExecuteAfter(10, () => {
		      player.useItemOnBlock(woodenSlab, wallLoc, Direction.north, 0.5, 0.25); // place lower slab
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.doubleWoodenSlab, slabLoc);
		    })
		    .thenSucceed();
		})
		  .structureName("SimulatedPlayerTests:use_item_in_slot_on_block")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "interact", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const leverLoc = new BlockLocation(1, 3, 2);
		  const lampLoc = new BlockLocation(2, 2, 2);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.lookAtBlock(leverLoc);
		      player.interact();
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "interact_with_block", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const leverLoc = new BlockLocation(1, 3, 2);
		  const lampLoc = new BlockLocation(2, 2, 2);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.interactWithBlock(leverLoc);
		    })
		    .thenWait(() => {
		      test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		    })
		    .thenSucceed();
		})
		  .structureName("SimulatedPlayerTests:interact")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "one_tick", (test) => {
		  for (let i = 0; i < 3; i++) {
		    test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  }
		  test.succeedOnTick(1);
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "destroy_block_creative", (test) => {
		  const blockLoc = new BlockLocation(2, 2, 1);
		  const spawnLoc = new BlockLocation(2, 2, 3);
		  const playerName = "Simulated Player (Creative)";
		
		  let player = test.spawnSimulatedPlayer(spawnLoc, playerName);
		  test
		    .startSequence()
		    .thenExecuteAfter(5, () => {
		      player.runCommand("gamemode creative");
		    })
		    .thenExecute(() => {
		      player.breakBlock(blockLoc);
		    })
		    .thenExecuteAfter(1, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.air, blockLoc);
		      test.setBlockType(MinecraftBlockTypes.goldBlock, blockLoc);
		    })
		    .thenExecuteAfter(2, () => {
		      test.assertBlockPresent(MinecraftBlockTypes.goldBlock, blockLoc);
		    })
		    .thenSucceed();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("SimulatedPlayerTests", "run_command_after_spawn", async (test) => {
		  const spawnLoc = new BlockLocation(1, 2, 2);
		
		  let player = test.spawnSimulatedPlayer(spawnLoc);
		  test.assertEntityPresent("player", spawnLoc);
		  player.runCommand("kill @s");
		  test.assertEntityPresent("player", spawnLoc, false);
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "sneaking", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const goalLoc = new BlockLocation(1, 2, 3);
		  const healthComponent = player.getComponent("minecraft:health");
		
		  player.isSneaking = true;
		  player.moveToBlock(goalLoc);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => {
		      test.assertEntityInstancePresent(player, goalLoc, false);
		    })
		    .thenExecuteAfter(60, () => {
		      test.assertEntityInstancePresent(player, goalLoc);
		      test.assert(healthComponent.current === healthComponent.value, "Player should not be hurt");
		    })
		    .thenSucceed();
		
		  test.startSequence();
		}).tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SimulatedPlayerTests", "move_to_block_slowly", (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0));
		  const goalLoc = new BlockLocation(1, 2, 3);
		  const healthComponent = player.getComponent("minecraft:health");
		
		  player.moveToBlock(goalLoc, 0.3);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(20, () => {
		      test.assertEntityInstancePresent(player, goalLoc, false);
		    })
		    .thenExecuteAfter(60, () => {
		      test.assertEntityInstancePresent(player, goalLoc);
		      test.assert(healthComponent.current !== healthComponent.value, "Player should be hurt");
		    })
		    .thenSucceed();
		
		  test.startSequence();
		})
		  .structureName("SimulatedPlayerTests:sneaking")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("SimulatedPlayerTests", "player_join_leave_events", async (test) => {
		  const thePlayerName = "Gary_The_Duck_411";
		
		  let expectedPlayerJoined = false;
		  const playerJoinCallback = world.events.playerJoin.subscribe((e) => {
		    if (e.player.name == thePlayerName) {
		      expectedPlayerJoined = true;
		    }
		  });
		
		  let expectedPlayerLeft = false;
		  const playerLeaveCallback = world.events.playerLeave.subscribe((e) => {
		    if (e.playerName == thePlayerName) {
		      expectedPlayerLeft = true;
		    }
		  });
		
		  let simPlayer = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0), thePlayerName);
		  await test.idle(1);
		
		  if (!expectedPlayerJoined) {
		    test.fail("Expected playerJoin event");
		  }
		
		  test.removeSimulatedPlayer(simPlayer);
		  await test.idle(1);
		
		  if (!expectedPlayerLeft) {
		    test.fail("Expected playerLeave event");
		  }
		
		  world.events.playerJoin.unsubscribe(playerJoinCallback);
		  world.events.playerLeave.unsubscribe(playerLeaveCallback);
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("SimulatedPlayerTests", "player_update_selected_slot", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		
		  await test.idle(1);
		
		  test.assert(player.selectedSlot === 0, "Expected default selected slot of the player to be 0");
		
		  player.selectedSlot = 1;
		
		  test.assert(player.selectedSlot === 1, "Expected player selected slot to be updated after change");
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.registerAsync("SimulatedPlayerTests", "player_uses_correct_item_from_updated_slot", async (test) => {
		  const player = test.spawnSimulatedPlayer(new BlockLocation(0, 2, 0));
		  const blockLoc = new BlockLocation(2, 1, 1);
		  const dirt = new ItemStack(MinecraftItemTypes.dirt, 1);
		  const stone = new ItemStack(MinecraftItemTypes.stone, 1);
		
		  await test.idle(1);
		
		  player.giveItem(dirt, false);
		  player.giveItem(stone, false);
		
		  await test.idle(1);
		
		  test.assert(player.selectedSlot === 0, "Player selected slot should not have been updated");
		
		  player.selectedSlot = 1;
		
		  player.useItemInSlotOnBlock(player.selectedSlot, blockLoc, Direction.up);
		
		  await test.idle(1);
		
		  test.assertBlockPresent(MinecraftBlockTypes.stone, blockLoc.above(), true);
		
		  test.succeed();
		})
		  .structureName("ComponentTests:platform")
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "SmallMobTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Location } from "mojang-minecraft";
		
		GameTest.register("SmallMobTests", "fence_corner", (test) => {
		  const piglinEntityType = "minecraft:piglin<minecraft:entity_born>";
		  const entityLoc = new Location(0.8, 2, 0.8);
		  const piglin = test.spawnWithoutBehaviorsAtLocation(piglinEntityType, entityLoc);
		
		  const targetPos = new BlockLocation(3, 2, 3);
		  test.walkTo(piglin, targetPos, 1);
		  test.succeedWhenEntityPresent(piglinEntityType, targetPos, true);
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SmallMobTests", "fence_side", (test) => {
		  const piglinEntityType = "minecraft:piglin<minecraft:entity_born>";
		  const entityLoc = new Location(2.8, 2, 2.05);
		  const piglin = test.spawnWithoutBehaviorsAtLocation(piglinEntityType, entityLoc);
		
		  const targetPos = new BlockLocation(0, 2, 2);
		  test.walkTo(piglin, targetPos, 1);
		  test.succeedWhenEntityPresent(piglinEntityType, targetPos, true);
		  test.runAfterDelay(10, () => {
		    test.assertCanReachLocation(piglin, targetPos, false);
		    test.succeed();
		  });
		})
		  .rotateTest(true)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("SmallMobTests", "fence_post", (test) => {
		  const chickenEntityType = "minecraft:chicken";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  const chicken = test.spawnWithoutBehaviors(chickenEntityType, entityLoc);
		
		  const targetPos = new BlockLocation(3, 2, 3);
		  test.walkTo(chicken, targetPos, 1);
		  test.succeedWhenEntityPresent(chickenEntityType, targetPos, true);
		})
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteDisabled); //game parity,the chicken cannot walk between the fenceposts
		'''
	script "TntTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes } from "mojang-minecraft";
		
		function locToStr(loc) {
		  return [loc.x.toFixed(3), loc.y.toFixed(3), loc.z.toFixed(3)].join(", ");
		}
		
		function locationToBlockLocation(loc) {
		  return new BlockLocation(Math.floor(loc.x), Math.floor(loc.y), Math.floor(loc.z));
		}
		
		// because of the barrier blocks, these positions are offset (2, 0, 40) from the Java tests
		GameTest.register("TntTests", "cannon", (test) => {
		  const projectilePosition = new BlockLocation(3, 10, 41);
		  const chargePosition = new BlockLocation(3, 10, 43);
		
		  for (var i = 0; i < 5; i++) {
		    var chargeTnt = test.spawn("minecraft:tnt", chargePosition);
		    test.setTntFuse(chargeTnt, 20);
		  }
		
		  var projectiles = new Array(5);
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      for (var projectile of projectiles) {
		        projectile = test.spawn("minecraft:tnt", projectilePosition);
		        test.setTntFuse(projectile, 30);
		      }
		    })
		    .thenExecuteAfter(1, () => {
		      test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(2, 10, 40));
		    })
		    .thenExecuteFor(19, () => {
		      const expectedBlockLocation = locationToBlockLocation(projectiles[0].location);
		      const expectedVelocity = projectiles[0].velocity;
		
		      for (var i = 1; i < projectiles.length; i++) {
		        const blockLoc = locationToBlockLocation(projectiles[i].location);
		        if (!blockLoc.equals(expectedBlockLocation)) {
		          test.fail(
		            "All projectile tnt should be in the same location, but they have spread apart. Expected " +
		              locToStr(expectedBlockLocation) +
		              ", but got " +
		              locToStr(blockLoc)
		          );
		        }
		
		        if (!projectiles[i].velocity.equals(expectedVelocity)) {
		          test.fail(
		            "All projectile tnt should have the same velocity, but they do not. Expected " +
		              locToStr(expectedVelocity) +
		              ", but got " +
		              locToStr(projectiles[i].velocity)
		          );
		        }
		
		        // java tests the projectiles are still "alive". This seems unecessary because the TNT shouldn't be moving unless it is alive.
		      }
		    })
		    .thenExecute(() => {
		      const expectedLocation = new BlockLocation(3, 14, 4);
		      for (const projectile of projectiles) {
		        test.assertEntityInstancePresent(projectile, expectedLocation);
		      }
		    })
		    .thenSucceed();
		})
		  .maxTicks(30)
		  .tag("suite:java_parity");
		
		GameTest.register("TntTests", "bedrock_cannon", (test) => {
		  const projectilePosition = new BlockLocation(3, 9, 19);
		  const chargePosition = new BlockLocation(3, 9, 22);
		
		  for (var i = 0; i < 5; i++) {
		    var chargeTnt = test.spawn("minecraft:tnt", chargePosition);
		    test.setTntFuse(chargeTnt, 20);
		  }
		
		  var projectile = null;
		
		  test
		    .startSequence()
		    .thenExecuteAfter(10, () => {
		      for (var i = 0; i < 5; i++) {
		        projectile = test.spawn("minecraft:tnt", projectilePosition);
		        test.setTntFuse(projectile, 15);
		      }
		    })
		    .thenExecuteAfter(10, () => {
		      test.setBlockType(MinecraftBlockTypes.air, new BlockLocation(3, 9, 18));
		    })
		    .thenExecuteAfter(5, () => {
		      const expectedLocation = new BlockLocation(3, 9, 7);
		
		      test.assertEntityInstancePresent(projectile, expectedLocation);
		    })
		    .thenSucceed();
		})
		  .maxTicks(26)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	script "VibrationTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Direction, ItemStack, Location, MinecraftBlockTypes, MinecraftItemTypes, TicksPerSecond } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const SENSOR_ACTIVE_TICKS = 40;
		const SENSOR_COOLDOWN_TICKS = 1;
		const SENSOR_MAX_DELAY_TICKS = 8;
		const REDSTONE_DELAY_TICKS = 2;
		
		function succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency) {
		    test.succeedWhen(() => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    });
		}
		
		function failOnVibrationDetected(test, sensorPos, duration, delay = 0) {
		    test.startSequence().thenIdle(delay).thenExecuteFor(duration, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenSucceed();
		}
		
		// Tests that a Sculk Sensor does not detect Dirt being destroyed in a 9 blocks radius around it.
		GameTest.register("VibrationTests", "detection_radius", (test) => {
		    const sensorPos = new BlockLocation(9, 11, 9);
		
		    const minDestroyPos = new BlockLocation(0, 2, 0);
		    const maxDestroyPos = new BlockLocation(18, 20, 18);
		
		    minDestroyPos.blocksBetween(maxDestroyPos).forEach((pos) => {
		        if (test.getBlock(pos).id == "minecraft:dirt") {
		            test.destroyBlock(pos);
		        }
		    });
		
		    failOnVibrationDetected(test, sensorPos, SENSOR_MAX_DELAY_TICKS);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		function destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, destroyPos, expectedLitPos) {
		    sequence.thenExecute(() => {
		        test.destroyBlock(destroyPos);
		    }).thenExecuteAfter(SENSOR_MAX_DELAY_TICKS + REDSTONE_DELAY_TICKS, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, expectedLitPos);
		    }).thenIdle(SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		}
		
		function spawnCreeperAndTestComparatorOutput(test, sequence, sensorPos, spawnPos, expectedLitPos) {
		    sequence.thenExecute(() => {
		        test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		    }).thenExecuteAfter(SENSOR_MAX_DELAY_TICKS + REDSTONE_DELAY_TICKS, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, expectedLitPos);
		    }).thenIdle(SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		}
		
		// Tests that the output strenght of a Sculk Sensor (verified by checking Redstone Lamps being powered) is correct for a vibration
		// emitted at a certain distance (produced by destroying a block).
		GameTest.register("VibrationTests", "output_distance", (test) => {
		    const sensorPos = new BlockLocation(16, 2, 9);
		
		    let sequence = test.startSequence();
		
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -8), sensorPos.offset(-1, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -7), sensorPos.offset(-2, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(3, 0, -6), sensorPos.offset(-3, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -6), sensorPos.offset(-4, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(3, 0, -5), sensorPos.offset(-5, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -5), sensorPos.offset(-6, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(2, 0, -4), sensorPos.offset(-7, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -4), sensorPos.offset(-8, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(2, 0, -3), sensorPos.offset(-9, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -3), sensorPos.offset(-10, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(1, 0, -2), sensorPos.offset(-11, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -2), sensorPos.offset(-12, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(1, 0, -1), sensorPos.offset(-13, -1, 1));
		    destroyBlockAndTestComparatorOutput(test, sequence, sensorPos, sensorPos.offset(0, 0, -1), sensorPos.offset(-14, -1, 1));
		    spawnCreeperAndTestComparatorOutput(test, sequence, sensorPos, new Location(16.5, 3, 9.5), sensorPos.offset(-15, -1, 1));
		
		    sequence.thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 60)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor reacts to the closest vibration emitted in a tick.
		GameTest.register("VibrationTests", "activation_multiple_vibrations", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const testEx = new GameTestExtensions(test);
		
		    const destroyPosFar = new BlockLocation(9, 2, 1);
		    const destroyPosClose = new BlockLocation(9, 2, 10);
		
		    test.startSequence().thenExecute(() => {
		        // Executed at tick 0.
		        test.destroyBlock(destroyPosFar);
		        test.destroyBlock(destroyPosClose);
		    }).thenExecuteAfter(1, () => {
		        // Executed at tick 1. Sensor have been activated by second vibration.
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		function destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, destroyPos, delay) {
		    sequence.thenExecute(() => {
		        test.destroyBlock(destroyPos);
		    }).thenExecuteAfter(delay, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenIdle(SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		}
		
		// Tests that a Sculk Sensor activates with a delay in ticks equal to the distance a vibration has been emitted at.
		GameTest.register("VibrationTests", "activation_delay", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    let sequence = test.startSequence();
		
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -8), 8);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -7), 7);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -6), 6);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -5), 5);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -4), 4);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -3), 3);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -2), 2);
		    destroyBlockAndTestVibrationDetected(test, sequence, sensorPos, sensorPos.offset(0, 0, -1), 1);
		
		    sequence.thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 60)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor activates and stays active for the expected amount of time when receiving a vibration.
		GameTest.register("VibrationTests", "activation_duration", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const testEx = new GameTestExtensions(test);
		
		    const destroyPos = new BlockLocation(8, 2, 9);
		
		    test.startSequence().thenExecute(() => {
		        test.destroyBlock(destroyPos);
		    }).thenWaitAfter(1, () => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenWaitAfter(SENSOR_ACTIVE_TICKS, () => {
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor ignores vibrations while on cooldown.
		GameTest.register("VibrationTests", "activation_cooldown", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const testEx = new GameTestExtensions(test);
		
		    const destroyPos1 = new BlockLocation(8, 2, 9);
		    const destroyPos2 = new BlockLocation(10, 2, 9);
		
		    test.startSequence().thenExecute(() => {
		        test.destroyBlock(destroyPos1);
		    }).thenWaitAfter(1, () => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenWaitAfter(SENSOR_ACTIVE_TICKS, () => {
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenExecute(() => {
		        test.destroyBlock(destroyPos2);
		    }).thenWaitAfter(SENSOR_COOLDOWN_TICKS, () => {
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor can react to vibrations (emitted by destroying a block) only if they are not occluded by Wool.
		GameTest.register("VibrationTests", "activation_wool_occlusion", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const testEx = new GameTestExtensions(test);
		
		    const occuledDestroyPos1 = new BlockLocation(5, 2, 9);
		    const occuledDestroyPos2 = new BlockLocation(9, 2, 13);
		    const occuledDestroyPos3 = new BlockLocation(13, 2, 9);
		    const unocculedDestroyPos1 = new BlockLocation(9, 2, 5);
		    const unocculedDestroyPos2 = new BlockLocation(9, 6, 9);
		
		    test.startSequence().thenExecute(() => {
		        test.destroyBlock(occuledDestroyPos1);
		        test.destroyBlock(occuledDestroyPos2);
		        test.destroyBlock(occuledDestroyPos3);
		    }).thenExecuteAfter(SENSOR_MAX_DELAY_TICKS, () => {
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenExecute(() => {
		        test.destroyBlock(unocculedDestroyPos1);
		    }).thenWait(() => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenExecuteAfter(SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS, () => {
		        test.destroyBlock(unocculedDestroyPos2);
		    }).thenWait(() => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor cannot react to vibrations (emitted by destroying a block) occluded by Wool, no matter the relative position of the occluded source.
		GameTest.register("VibrationTests", "activation_wool_occlusion_no_bias", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const occuledDestroyPos1 = new BlockLocation(6, 2, 6);
		    const occuledDestroyPos2 = new BlockLocation(6, 2, 12);
		    const occuledDestroyPos3 = new BlockLocation(12, 2, 6);
		    const occuledDestroyPos4 = new BlockLocation(12, 2, 12);
		
		    test.destroyBlock(occuledDestroyPos1);
		    test.destroyBlock(occuledDestroyPos2);
		    test.destroyBlock(occuledDestroyPos3);
		    test.destroyBlock(occuledDestroyPos4);
		
		    failOnVibrationDetected(test, sensorPos, SENSOR_MAX_DELAY_TICKS);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a moving entity produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_entity_move", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 1;
		
		    const spawnPos = new Location(16.5, 2, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 7);
		    test.walkTo(pig, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity moving through Cobwebs produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_entity_move_cobweb", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 1;
		
		    const spawnPos = new Location(11.5, 2, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    const targetPos = new BlockLocation(7, 2, 7);
		    test.walkTo(pig, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity moving through Pownder Snow produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_entity_move_powder_snow", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 1;
		
		    const spawnPos = new Location(11.5, 2, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    const targetPos = new BlockLocation(7, 2, 7);
		    test.walkTo(pig, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a moving entity does not produce vibrations while on Wool.
		GameTest.register("VibrationTests", "event_entity_move_wool", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(16.5, 2, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 7);
		    test.walkTo(pig, targetPos, 1);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a moving entity does not produce vibrations while on Wool Carpet.
		GameTest.register("VibrationTests", "event_entity_move_carpet", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(16.5, 2.5, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 7);
		    test.walkTo(pig, targetPos, 1);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a vibration dampening entity (Warden) does not produce vibrations when moving.
		GameTest.register("VibrationTests", "event_entity_move_dampening", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(16.5, 2, 7.5);
		    const warden = test.spawnWithoutBehaviorsAtLocation("minecraft:warden", spawnPos);
		
		    const targetPos = new BlockLocation(2, 2, 7);
		    test.walkTo(warden, targetPos, 1);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity standing still in Scaffolding does not produce vibrations.
		GameTest.register("VibrationTests", "event_entity_move_scaffolding", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(9.5, 3, 7.5);
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a moving player does not produce vibrations when sneaking, but does otherwise.
		GameTest.register("VibrationTests", "event_entity_move_sneaking", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 1;
		
		    const spawnPos = new BlockLocation(11, 2, 7);
		    const targetPos = new BlockLocation(7, 2, 7);
		    const player = test.spawnSimulatedPlayer(spawnPos, "Gordon");
		
		    test.startSequence().thenExecute(() => {
		        player.isSneaking = true;
		        player.moveToBlock(targetPos);
		    }).thenExecuteFor(TicksPerSecond * 5, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 0, sensorPos);
		    }).thenExecute(() => {
		        player.isSneaking = false;
		        player.moveToBlock(spawnPos);
		    }).thenWait(() => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    }).thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 30)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor can receive vibrations from a sneaking entity only if the entity is moving on top of it.
		GameTest.register("VibrationTests", "event_entity_move_sneaking_on_sensor", (test) => {
		    const sneakOnSensorPos = new BlockLocation(9, 2, 9);
		    const unaffectedSensorPos = new BlockLocation(9, 5, 9);
		
		    const spawnPos = new Location(7.5, 2, 9.5);
		    const targetPos = new BlockLocation(11, 2, 9);
		    // Using a Pig as for some reason Simulated Players do not trigger onStandOn.
		    const pig = test.spawnWithoutBehaviorsAtLocation("minecraft:pig", spawnPos);
		
		    test.startSequence().thenExecute(() => {
		        pig.isSneaking = true;
		        test.walkTo(pig, targetPos, 1);
		    }).thenWait(() => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sneakOnSensorPos);
		    }).thenExecuteFor(TicksPerSecond * 5, () => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 0, unaffectedSensorPos);
		    }).thenSucceed();
		})
		    .maxTicks(TicksPerSecond * 30)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a flying parrot produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_flap_parrot", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 2;
		
		    const spawnPos = new Location(11.5, 2, 9.5);
		    const parrot = test.spawnWithoutBehaviorsAtLocation("minecraft:parrot", spawnPos);
		
		    const targetPos = new BlockLocation(7, 2, 9);
		    test.walkTo(parrot, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a flying bee produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_flap_bee", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 2;
		
		    const spawnPos = new Location(11.5, 2, 9.5);
		    const bee = test.spawnWithoutBehaviorsAtLocation("minecraft:bee", spawnPos);
		
		    const targetPos = new BlockLocation(7, 2, 9);
		    test.walkTo(bee, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a falling chicken produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_flap_chicken", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 2;
		
		    const spawnPos = new Location(9.5, 5, 7.5);
		    test.spawnWithoutBehaviorsAtLocation("minecraft:chicken", spawnPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a swimming entity produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_swim", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 3;
		
		    const spawnPos = new Location(11.5, 2, 9.5);
		    const fish = test.spawnWithoutBehaviorsAtLocation("minecraft:tropicalfish", spawnPos);
		
		    const targetPos = new BlockLocation(7, 2, 9);
		    test.walkTo(fish, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a swimming entity staying still in water does not produce vibrations.
		GameTest.register("VibrationTests", "event_swim_still", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(9.5, 2, 7.5);
		    test.spawnAtLocation("minecraft:tropicalfish", spawnPos);
		
		    // When the fish is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 1, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Boat moving on water produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_swim_boat", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 3;
		
		    const spawnPos = new Location(11.5, 3, 6.5);
		    const boat = test.spawnAtLocation("minecraft:boat", spawnPos);
		
		    const targetPos = new BlockLocation(6, 3, 7);
		    test.walkTo(boat, targetPos, 1);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Boat staying still on water does not produce vibrations.
		GameTest.register("VibrationTests", "event_swim_boat_still", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(9.5, 3, 6.5);
		    test.spawnAtLocation("minecraft:boat", spawnPos);
		
		    // When the Boat is spawned, it emits a splash vibration, so we wait for the sensor to reset before checking for further ones.
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 4, SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		})
		    .tag(GameTest.Tags.suiteDefault)
		    .maxTicks(TicksPerSecond * 5 + SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS);
		
		// Tests that an entity hitting ground produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_hit_ground", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 5;
		
		    const spawnPos = new Location(9.5, 5, 7.5);
		    test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// [Bug 734008] Tests that a vibration dampening item (a Wool block, ejected by powering a Dispenser containing it) does not produce vibrations when hitting ground.
		GameTest.register("VibrationTests", "event_hit_ground_dampening", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const placeAtPos = new BlockLocation(9, 6, 6);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity falling on Wool does not produce vibrations.
		GameTest.register("VibrationTests", "event_hit_ground_wool", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const spawnPos = new Location(9.5, 5, 7.5);
		    test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Sculk Sensor detects Wool in item form (retrieved from the .mcstructure) lying on top of it.
		GameTest.register("VibrationTests", "event_sculk_touch_wool", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 1;
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity falling in Water produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_splash", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 6;
		
		    const spawnPos = new Location(9.5, 5, 7.5);
		    test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Boat (retrieved from the .mcstructure) on top of a Bubble Column produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_splash_boat_on_bubble_column", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 6;
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .maxTicks(TicksPerSecond * 15)
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a projectile being shot (by powering a Dispenser) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_projectile_shoot", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 8);
		    const expectedFrequency = 7;
		
		    const placeAtPos = new BlockLocation(9, 4, 4);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a landing projectile (shot by powering a Dispenser) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_projectile_land", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 8;
		
		    const placeAtPos = new BlockLocation(9, 4, 4);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a projectile (shot by powering a Dispenser) does not produce vibrations when landing on wool.
		GameTest.register("VibrationTests", "event_projectile_land_wool", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		
		    const placeAtPos = new BlockLocation(9, 7, 4);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    failOnVibrationDetected(test, sensorPos, TicksPerSecond * 2);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an entity being damaged (by standing on Magma) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_entity_damage", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 8;
		
		    const spawnPos = new Location(9.5, 2, 7.5);
		    test.spawnWithoutBehaviorsAtLocation("minecraft:creeper", spawnPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that an emtpy Dispenser trying to dispense produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_dispense_fail", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 10;
		
		    const placeAtPos = new BlockLocation(9, 2, 3);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Fence Gate being closed (by removing the Redstone Block powering it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_block_close", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 10;
		
		    const placeAtPos = new BlockLocation(12, 2, 5);
		    test.setBlockType(MinecraftBlockTypes.air, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Fence Gate being opened (by placing a Redstone Block to power it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_block_open", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 11;
		
		    const placeAtPos = new BlockLocation(12, 2, 5);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that picking-up Water (by powering a Dispenser with an Empty Bucket in it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_fluid_pickup", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 13;
		
		    const placeAtPos = new BlockLocation(9, 2, 3);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that placing Water (by powering a Dispenser with a Water Bucket in it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_fluid_place", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 12;
		
		    const placeAtPos = new BlockLocation(9, 2, 3);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a player destroying a block produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_block_destroy", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 13;
		
		    const spawnPos = new BlockLocation(9, 2, 6);
		    const player = test.spawnSimulatedPlayer(spawnPos, "Ralph");
		
		    const breakPos = new BlockLocation(9, 2, 7);
		    player.lookAtBlock(breakPos);
		    player.breakBlock(breakPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a player closing a Chest produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_container_close", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 14;
		
		    const spawnPos = new BlockLocation(9, 2, 5);
		    const chestPos = new BlockLocation(9, 2, 7);
		    const player = test.spawnSimulatedPlayer(spawnPos, "Corvo");
		
		    test.startSequence().thenExecuteAfter(20, () => {
		        player.interactWithBlock(chestPos);
		    }).thenExecuteAfter(SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS, () => {
		        player.stopInteracting();
		    }).thenWait(() => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    }).thenSucceed();
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a player opening a Chest produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_container_open", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 15;
		
		    const spawnPos = new BlockLocation(9, 2, 5);
		    const chestPos = new BlockLocation(9, 2, 7);
		    const player = test.spawnSimulatedPlayer(spawnPos, "John");
		
		    test.startSequence().thenExecuteAfter(20, () => {
		        player.interactWithBlock(chestPos);
		    }).thenWait(() => {
		        const testEx = new GameTestExtensions(test);
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that spawning a Pillager (by powering a Dispenser with a Spawn Egg in it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_entity_place", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 12;
		
		    const placeAtPos = new BlockLocation(9, 2, 4);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that equipping an Armor Stand (by powering a Dispenser with equipment in it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_equip", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 9;
		
		    const placeAtToDispenseSwordPos = new BlockLocation(7, 2, 6);
		    const placeAtToDispenseHelmetPos = new BlockLocation(11, 2, 6);
		
		    const testEx = new GameTestExtensions(test);
		
		    test.startSequence().thenExecute(() => {
		        test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtToDispenseSwordPos);
		    }).thenWait(() => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    }).thenExecuteAfter(SENSOR_MAX_DELAY_TICKS + SENSOR_ACTIVE_TICKS + SENSOR_COOLDOWN_TICKS, () => {
		        test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtToDispenseHelmetPos);
		    }).thenWait(() => {
		        testEx.assertBlockProperty("powered_bit", 1, sensorPos);
		        test.assertRedstonePower(comparatorPos, expectedFrequency);
		    }).thenSucceed();
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that exploding TNT (ignited by placing a Redstone Block) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_explode", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 15;
		
		    const placeAtPos = new BlockLocation(9, 3, 6);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a piston being contracted (by removing the Redstone Block powering it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_piston_contract", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 14;
		
		    const placeAtPos = new BlockLocation(9, 2, 5);
		    test.setBlockType(MinecraftBlockTypes.air, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a piston being extened (by placing a Redstone Block to power it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_piston_extend", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 15;
		
		    const placeAtPos = new BlockLocation(9, 2, 5);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a Cake with Candle being ignited (by powering a Dispenser with a Flint and Steel in it) produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_block_change", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 6;
		
		    const placeAtPos = new BlockLocation(9, 2, 5);
		    test.setBlockType(MinecraftBlockTypes.redstoneBlock, placeAtPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		
		// Tests that a lightning produces vibrations of the expected frequency.
		GameTest.register("VibrationTests", "event_lightning_strike", (test) => {
		    const sensorPos = new BlockLocation(9, 2, 9);
		    const comparatorPos = new BlockLocation(9, 2, 10);
		    const expectedFrequency = 15;
		
		    const spawnPos = new Location(9.5, 2, 5.5);
		    test.spawnAtLocation("minecraft:lightning_bolt", spawnPos);
		
		    succeedOnVibrationDetected(test, sensorPos, comparatorPos, expectedFrequency);
		})
		    .tag(GameTest.Tags.suiteDefault);
		'''
	script "WardenTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, TicksPerSecond, Location } from "mojang-minecraft";
		const WARDEN_TESTS_PADDING = 16; // The paddings is there to make sure vibrations don't interefere with the warden 
		
		
		GameTest.register("WardenTests", "warden_despawn", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const startPos = new BlockLocation(3, 1, 3);
		    test.spawn(wardenEntityType, startPos.above());
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresentInArea(wardenEntityType, false);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 100).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 100 seconds
		
		GameTest.register("WardenTests", "warden_kill_moving_entity", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const pigEntityType = "minecraft:pig";
		    const startPosWarden = new BlockLocation(1, 1, 1);
		    const startPosPig = new Location(6, 2, 6);
		    const walkPosPig = new Location(6, 2, 1);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    const pig = test.spawnWithoutBehaviorsAtLocation(pigEntityType, startPosPig);
		
		    let sequence = test.startSequence().thenIdle(1);
		
		    for (let i = 1; i <= 10; i++) {
		        sequence
		            .thenExecute(() => {
		                test.walkToLocation(pig, walkPosPig, 1);
		            })
		            .thenIdle(TicksPerSecond * 3)
		            .thenExecute(() => {
		                test.walkToLocation(pig, startPosPig, 1);
		            })
		            .thenIdle(TicksPerSecond * 3)
		    }
		    sequence
		        .thenWait(() => {
		            test.assertEntityPresentInArea(pigEntityType, false);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 90).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 90 seconds
		
		GameTest.register("WardenTests", "warden_sniff_and_kill_static_entity", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const pigEntityType = "minecraft:pig";
		    const startPosWarden = new BlockLocation(1, 1, 1);
		    const startPosPig = new Location(7, 2, 7);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    test.spawnWithoutBehaviorsAtLocation(pigEntityType, startPosPig);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresentInArea(pigEntityType, false);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 60).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 60 seconds
		
		GameTest.register("WardenTests", "warden_sniff_and_kill_player_before_mob", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const pigEntityType = "minecraft:pig";
		    const startPosWarden = new BlockLocation(1, 1, 1);
		    const startPosPlayer = new BlockLocation(1, 2, 6);
		    const startPosPig = new Location(6, 2, 6);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    test.spawnWithoutBehaviorsAtLocation(pigEntityType, startPosPig);
		    test.spawnSimulatedPlayer(startPosPlayer, "playerSim_warden");
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresentInArea("minecraft:player", false);
		        })
		        .thenWait(() => {
		            test.assertEntityPresentInArea("minecraft:pig", true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 60).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 60 seconds
		
		GameTest.register("WardenTests", "warden_go_to_projectile", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const startPosWarden = new BlockLocation(1, 1, 1);
		    const snowballEntityType = "minecraft:snowball";
		    // spawns snowball above the ground so that it falls down and breaks
		    const startPosSnowball = new BlockLocation(7, 4, 7);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    test.spawn(snowballEntityType, startPosSnowball);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresent(wardenEntityType, startPosSnowball, true);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 10).padding(WARDEN_TESTS_PADDING); //timeout after 10 seconds
		
		GameTest.register("WardenTests", "warden_path_lava", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const pigEntityType = "minecraft:pig";
		    const startPosWarden = new BlockLocation(1, 3, 2);
		    const startPosPig = new Location(7, 3, 2);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    test.spawnWithoutBehaviorsAtLocation(pigEntityType, startPosPig);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresentInArea("minecraft:pig", false);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 60).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 60 seconds
		
		GameTest.register("WardenTests", "warden_path_water", (test) => {
		    const wardenEntityType = "minecraft:warden";
		    const pigEntityType = "minecraft:pig";
		    const startPosWarden = new BlockLocation(1, 3, 2);
		    const startPosPig = new Location(7, 3, 2);
		    test.spawn(wardenEntityType, startPosWarden.above());
		    test.spawnWithoutBehaviorsAtLocation(pigEntityType, startPosPig);
		
		    test
		        .startSequence()
		        .thenWait(() => {
		            test.assertEntityPresentInArea("minecraft:pig", false);
		        })
		        .thenSucceed();
		}).maxTicks(TicksPerSecond * 60).tag(GameTest.Tags.suiteDefault).padding(WARDEN_TESTS_PADDING); //timeout after 60 seconds
		'''
	script "WaterPathfindingTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, Location } from "mojang-minecraft";
		
		const TicksPerSecond = 20;
		
		GameTest.register("WaterPathfindingTests", "axolotl_lava_walkaround", (test) => {
		  const spawnType = "minecraft:axolotl";
		  const mob = test.spawnWithoutBehaviorsAtLocation(spawnType, new Location(0.0, 3.0, 2.0));
		  const targetPos = new BlockLocation(6, 3, 2);
		  test.walkTo(mob, targetPos, 1);
		  test.succeedWhenEntityPresent(spawnType, targetPos, true);
		})
		  .maxTicks(TicksPerSecond * 20)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("WaterPathfindingTests", "fish_corner_swimaround", (test) => {
		  const spawnType = "minecraft:tropicalfish";
		  const mob = test.spawnWithoutBehaviorsAtLocation(spawnType, new Location(1.5, 2.0, 1.5));
		  const targetPos = new BlockLocation(3, 2, 3);
		  test.walkTo(mob, targetPos, 1);
		  test.succeedWhenEntityPresent(spawnType, targetPos, true);
		})
		  .maxTicks(TicksPerSecond * 20)
		  .tag(GameTest.Tags.suiteDefault);
		'''
Added behavior pack "vanilla_gametest_alpha":
	script "vanilla-gametest-alpha.js":
		'''
		/*!  Copyright (c) Mojang AB.  All rights reserved. */
		import * as __WEBPACK_EXTERNAL_MODULE__minecraft_server_fb7572af__ from "@minecraft/server";
		import * as __WEBPACK_EXTERNAL_MODULE__minecraft_server_gametest_e5aa2fb2__ from "@minecraft/server-gametest";
		/******/ var __webpack_modules__ = ({
		
		/***/ "../../module-wrappers/server-alpha-wrapper/index.js":
		/*!***********************************************************!*\
		  !*** ../../module-wrappers/server-alpha-wrapper/index.js ***!
		  \***********************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   BiomeSearchOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeSearchOptions),
		/* harmony export */   BiomeType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeType),
		/* harmony export */   BiomeTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeTypes),
		/* harmony export */   Block: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Block),
		/* harmony export */   BlockComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponent),
		/* harmony export */   BlockComponentEntityFallOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentEntityFallOnEvent),
		/* harmony export */   BlockComponentOnPlaceEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentOnPlaceEvent),
		/* harmony export */   BlockComponentPlayerDestroyEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerDestroyEvent),
		/* harmony export */   BlockComponentPlayerInteractEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerInteractEvent),
		/* harmony export */   BlockComponentPlayerPlaceBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerPlaceBeforeEvent),
		/* harmony export */   BlockComponentRandomTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRandomTickEvent),
		/* harmony export */   BlockComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRegistry),
		/* harmony export */   BlockComponentStepOffEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOffEvent),
		/* harmony export */   BlockComponentStepOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOnEvent),
		/* harmony export */   BlockComponentTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTickEvent),
		/* harmony export */   BlockComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTypes),
		/* harmony export */   BlockCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponent),
		/* harmony export */   BlockCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentAlreadyRegisteredError),
		/* harmony export */   BlockCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewComponentError),
		/* harmony export */   BlockCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewEventError),
		/* harmony export */   BlockCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadVersionError),
		/* harmony export */   BlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEvent),
		/* harmony export */   BlockEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEventOptions),
		/* harmony export */   BlockExplodeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEvent),
		/* harmony export */   BlockExplodeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEventSignal),
		/* harmony export */   BlockFillOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFillOptions),
		/* harmony export */   BlockFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFilter),
		/* harmony export */   BlockFluidContainerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFluidContainerComponent),
		/* harmony export */   BlockHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockHitInformation),
		/* harmony export */   BlockInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockInventoryComponent),
		/* harmony export */   BlockLocationIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockLocationIterator),
		/* harmony export */   BlockPermutation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation),
		/* harmony export */   BlockPistonComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonComponent),
		/* harmony export */   BlockPistonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonState),
		/* harmony export */   BlockRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastHit),
		/* harmony export */   BlockRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastOptions),
		/* harmony export */   BlockRecordPlayerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRecordPlayerComponent),
		/* harmony export */   BlockSignComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockSignComponent),
		/* harmony export */   BlockStateType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStateType),
		/* harmony export */   BlockStates: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStates),
		/* harmony export */   BlockType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockType),
		/* harmony export */   BlockTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockTypes),
		/* harmony export */   BlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolume),
		/* harmony export */   BlockVolumeBase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeBase),
		/* harmony export */   BlockVolumeIntersection: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeIntersection),
		/* harmony export */   BoundingBox: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBox),
		/* harmony export */   BoundingBoxUtils: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBoxUtils),
		/* harmony export */   ButtonPushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEvent),
		/* harmony export */   ButtonPushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEventSignal),
		/* harmony export */   ButtonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonState),
		/* harmony export */   Camera: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Camera),
		/* harmony export */   CameraDefaultOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraDefaultOptions),
		/* harmony export */   CameraEaseOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraEaseOptions),
		/* harmony export */   CameraFadeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeOptions),
		/* harmony export */   CameraFadeTimeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeTimeOptions),
		/* harmony export */   CameraFixedBoomOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFixedBoomOptions),
		/* harmony export */   CameraSetFacingOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetFacingOptions),
		/* harmony export */   CameraSetLocationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetLocationOptions),
		/* harmony export */   CameraSetPosOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetPosOptions),
		/* harmony export */   CameraSetRotOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetRotOptions),
		/* harmony export */   CameraTargetOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraTargetOptions),
		/* harmony export */   ChatSendAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEvent),
		/* harmony export */   ChatSendAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEventSignal),
		/* harmony export */   ChatSendBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEvent),
		/* harmony export */   ChatSendBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEventSignal),
		/* harmony export */   ClientSystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ClientSystemInfo),
		/* harmony export */   CommandError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandError),
		/* harmony export */   CommandResult: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandResult),
		/* harmony export */   Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Component),
		/* harmony export */   CompoundBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolume),
		/* harmony export */   CompoundBlockVolumeAction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeAction),
		/* harmony export */   CompoundBlockVolumeItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeItem),
		/* harmony export */   CompoundBlockVolumePositionRelativity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumePositionRelativity),
		/* harmony export */   Container: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Container),
		/* harmony export */   ContainerSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ContainerSlot),
		/* harmony export */   CustomComponentInvalidRegistryError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentInvalidRegistryError),
		/* harmony export */   CustomComponentNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameError),
		/* harmony export */   CustomComponentNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameErrorReason),
		/* harmony export */   DataDrivenEntityTriggerAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEvent),
		/* harmony export */   DataDrivenEntityTriggerAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEventSignal),
		/* harmony export */   DefinitionModifier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DefinitionModifier),
		/* harmony export */   Difficulty: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Difficulty),
		/* harmony export */   Dimension: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Dimension),
		/* harmony export */   DimensionLocation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionLocation),
		/* harmony export */   DimensionType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionType),
		/* harmony export */   DimensionTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionTypes),
		/* harmony export */   Direction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Direction),
		/* harmony export */   DisplaySlotId: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DisplaySlotId),
		/* harmony export */   DyeColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DyeColor),
		/* harmony export */   EasingType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EasingType),
		/* harmony export */   Effect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Effect),
		/* harmony export */   EffectAddAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEvent),
		/* harmony export */   EffectAddAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEventSignal),
		/* harmony export */   EffectAddBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEvent),
		/* harmony export */   EffectAddBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEventSignal),
		/* harmony export */   EffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectType),
		/* harmony export */   EffectTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectTypes),
		/* harmony export */   Enchantment: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Enchantment),
		/* harmony export */   EnchantmentLevelOutOfBoundsError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentLevelOutOfBoundsError),
		/* harmony export */   EnchantmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentSlot),
		/* harmony export */   EnchantmentType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentType),
		/* harmony export */   EnchantmentTypeNotCompatibleError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeNotCompatibleError),
		/* harmony export */   EnchantmentTypeUnknownIdError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeUnknownIdError),
		/* harmony export */   EnchantmentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypes),
		/* harmony export */   Entity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Entity),
		/* harmony export */   EntityAddRiderComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAddRiderComponent),
		/* harmony export */   EntityAgeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAgeableComponent),
		/* harmony export */   EntityApplyDamageByProjectileOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageByProjectileOptions),
		/* harmony export */   EntityApplyDamageOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageOptions),
		/* harmony export */   EntityAttributeComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAttributeComponent),
		/* harmony export */   EntityBaseMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBaseMovementComponent),
		/* harmony export */   EntityBreathableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBreathableComponent),
		/* harmony export */   EntityCanClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanClimbComponent),
		/* harmony export */   EntityCanFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanFlyComponent),
		/* harmony export */   EntityCanPowerJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanPowerJumpComponent),
		/* harmony export */   EntityColor2Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColor2Component),
		/* harmony export */   EntityColorComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColorComponent),
		/* harmony export */   EntityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponent),
		/* harmony export */   EntityComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponentTypes),
		/* harmony export */   EntityDamageCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageCause),
		/* harmony export */   EntityDamageSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageSource),
		/* harmony export */   EntityDataDrivenTriggerEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDataDrivenTriggerEventOptions),
		/* harmony export */   EntityDefinitionFeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDefinitionFeedItem),
		/* harmony export */   EntityDieAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEvent),
		/* harmony export */   EntityDieAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEventSignal),
		/* harmony export */   EntityEffectOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEffectOptions),
		/* harmony export */   EntityEquippableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEquippableComponent),
		/* harmony export */   EntityEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEventOptions),
		/* harmony export */   EntityFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFilter),
		/* harmony export */   EntityFireImmuneComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFireImmuneComponent),
		/* harmony export */   EntityFloatsInLiquidComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFloatsInLiquidComponent),
		/* harmony export */   EntityFlyingSpeedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFlyingSpeedComponent),
		/* harmony export */   EntityFrictionModifierComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFrictionModifierComponent),
		/* harmony export */   EntityGroundOffsetComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityGroundOffsetComponent),
		/* harmony export */   EntityHealableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealableComponent),
		/* harmony export */   EntityHealthChangedAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEvent),
		/* harmony export */   EntityHealthChangedAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEventSignal),
		/* harmony export */   EntityHealthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthComponent),
		/* harmony export */   EntityHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEvent),
		/* harmony export */   EntityHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEventSignal),
		/* harmony export */   EntityHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEvent),
		/* harmony export */   EntityHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEventSignal),
		/* harmony export */   EntityHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitInformation),
		/* harmony export */   EntityHurtAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEvent),
		/* harmony export */   EntityHurtAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEventSignal),
		/* harmony export */   EntityInitializationCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInitializationCause),
		/* harmony export */   EntityInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInventoryComponent),
		/* harmony export */   EntityIsBabyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsBabyComponent),
		/* harmony export */   EntityIsChargedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChargedComponent),
		/* harmony export */   EntityIsChestedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChestedComponent),
		/* harmony export */   EntityIsDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsDyeableComponent),
		/* harmony export */   EntityIsHiddenWhenInvisibleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsHiddenWhenInvisibleComponent),
		/* harmony export */   EntityIsIgnitedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIgnitedComponent),
		/* harmony export */   EntityIsIllagerCaptainComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIllagerCaptainComponent),
		/* harmony export */   EntityIsSaddledComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsSaddledComponent),
		/* harmony export */   EntityIsShakingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShakingComponent),
		/* harmony export */   EntityIsShearedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShearedComponent),
		/* harmony export */   EntityIsStackableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStackableComponent),
		/* harmony export */   EntityIsStunnedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStunnedComponent),
		/* harmony export */   EntityIsTamedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsTamedComponent),
		/* harmony export */   EntityItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityItemComponent),
		/* harmony export */   EntityIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIterator),
		/* harmony export */   EntityLavaMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLavaMovementComponent),
		/* harmony export */   EntityLeashableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLeashableComponent),
		/* harmony export */   EntityLoadAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEvent),
		/* harmony export */   EntityLoadAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEventSignal),
		/* harmony export */   EntityMarkVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMarkVariantComponent),
		/* harmony export */   EntityMovementAmphibiousComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementAmphibiousComponent),
		/* harmony export */   EntityMovementBasicComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementBasicComponent),
		/* harmony export */   EntityMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementComponent),
		/* harmony export */   EntityMovementFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementFlyComponent),
		/* harmony export */   EntityMovementGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGenericComponent),
		/* harmony export */   EntityMovementGlideComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGlideComponent),
		/* harmony export */   EntityMovementHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementHoverComponent),
		/* harmony export */   EntityMovementJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementJumpComponent),
		/* harmony export */   EntityMovementSkipComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSkipComponent),
		/* harmony export */   EntityMovementSwayComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSwayComponent),
		/* harmony export */   EntityNavigationClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationClimbComponent),
		/* harmony export */   EntityNavigationComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationComponent),
		/* harmony export */   EntityNavigationFloatComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFloatComponent),
		/* harmony export */   EntityNavigationFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFlyComponent),
		/* harmony export */   EntityNavigationGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationGenericComponent),
		/* harmony export */   EntityNavigationHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationHoverComponent),
		/* harmony export */   EntityNavigationWalkComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationWalkComponent),
		/* harmony export */   EntityNpcComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNpcComponent),
		/* harmony export */   EntityOnFireComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityOnFireComponent),
		/* harmony export */   EntityProjectileComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityProjectileComponent),
		/* harmony export */   EntityPushThroughComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityPushThroughComponent),
		/* harmony export */   EntityQueryOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryOptions),
		/* harmony export */   EntityQueryPropertyOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryPropertyOptions),
		/* harmony export */   EntityQueryScoreOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryScoreOptions),
		/* harmony export */   EntityRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastHit),
		/* harmony export */   EntityRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastOptions),
		/* harmony export */   EntityRemoveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEvent),
		/* harmony export */   EntityRemoveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEventSignal),
		/* harmony export */   EntityRemoveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEvent),
		/* harmony export */   EntityRemoveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEventSignal),
		/* harmony export */   EntityRideableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRideableComponent),
		/* harmony export */   EntityRidingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRidingComponent),
		/* harmony export */   EntityScaleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityScaleComponent),
		/* harmony export */   EntitySkinIdComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySkinIdComponent),
		/* harmony export */   EntitySpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEvent),
		/* harmony export */   EntitySpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEventSignal),
		/* harmony export */   EntityStrengthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityStrengthComponent),
		/* harmony export */   EntityTameMountComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameMountComponent),
		/* harmony export */   EntityTameableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameableComponent),
		/* harmony export */   EntityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityType),
		/* harmony export */   EntityTypeFamilyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeFamilyComponent),
		/* harmony export */   EntityTypeIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeIterator),
		/* harmony export */   EntityTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypes),
		/* harmony export */   EntityUnderwaterMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityUnderwaterMovementComponent),
		/* harmony export */   EntityVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityVariantComponent),
		/* harmony export */   EntityWantsJockeyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityWantsJockeyComponent),
		/* harmony export */   EqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EqualsComparison),
		/* harmony export */   EquipmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EquipmentSlot),
		/* harmony export */   ExplosionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEvent),
		/* harmony export */   ExplosionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEventSignal),
		/* harmony export */   ExplosionBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEvent),
		/* harmony export */   ExplosionBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEventSignal),
		/* harmony export */   ExplosionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionOptions),
		/* harmony export */   FeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItem),
		/* harmony export */   FeedItemEffect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItemEffect),
		/* harmony export */   FilterGroup: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FilterGroup),
		/* harmony export */   FluidContainer: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidContainer),
		/* harmony export */   FluidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidType),
		/* harmony export */   GameMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameMode),
		/* harmony export */   GameRule: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRule),
		/* harmony export */   GameRuleChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEvent),
		/* harmony export */   GameRuleChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEventSignal),
		/* harmony export */   GameRules: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRules),
		/* harmony export */   GreaterThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanComparison),
		/* harmony export */   GreaterThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanOrEqualsComparison),
		/* harmony export */   HudElement: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElement),
		/* harmony export */   HudElementsCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElementsCount),
		/* harmony export */   HudVisibility: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibility),
		/* harmony export */   HudVisibilityCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibilityCount),
		/* harmony export */   InputButton: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputButton),
		/* harmony export */   InputEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputEventOptions),
		/* harmony export */   InputInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputInfo),
		/* harmony export */   InputMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputMode),
		/* harmony export */   InputPermissionCategory: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputPermissionCategory),
		/* harmony export */   InvalidContainerSlotError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidContainerSlotError),
		/* harmony export */   InvalidEntityError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidEntityError),
		/* harmony export */   InvalidIteratorError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidIteratorError),
		/* harmony export */   InvalidStructureError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidStructureError),
		/* harmony export */   ItemCompleteUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEvent),
		/* harmony export */   ItemCompleteUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEventSignal),
		/* harmony export */   ItemCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseEvent),
		/* harmony export */   ItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponent),
		/* harmony export */   ItemComponentBeforeDurabilityDamageEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentBeforeDurabilityDamageEvent),
		/* harmony export */   ItemComponentCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentCompleteUseEvent),
		/* harmony export */   ItemComponentConsumeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentConsumeEvent),
		/* harmony export */   ItemComponentHitEntityEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentHitEntityEvent),
		/* harmony export */   ItemComponentMineBlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentMineBlockEvent),
		/* harmony export */   ItemComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentRegistry),
		/* harmony export */   ItemComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentTypes),
		/* harmony export */   ItemComponentUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseEvent),
		/* harmony export */   ItemComponentUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseOnEvent),
		/* harmony export */   ItemCompostableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompostableComponent),
		/* harmony export */   ItemCooldownComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCooldownComponent),
		/* harmony export */   ItemCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponent),
		/* harmony export */   ItemCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentAlreadyRegisteredError),
		/* harmony export */   ItemCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewComponentError),
		/* harmony export */   ItemCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewEventError),
		/* harmony export */   ItemCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadVersionError),
		/* harmony export */   ItemDurabilityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDurabilityComponent),
		/* harmony export */   ItemDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDyeableComponent),
		/* harmony export */   ItemEnchantableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemEnchantableComponent),
		/* harmony export */   ItemFoodComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemFoodComponent),
		/* harmony export */   ItemLockMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemLockMode),
		/* harmony export */   ItemPotionComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemPotionComponent),
		/* harmony export */   ItemReleaseUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEvent),
		/* harmony export */   ItemReleaseUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEventSignal),
		/* harmony export */   ItemStack: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStack),
		/* harmony export */   ItemStartUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEvent),
		/* harmony export */   ItemStartUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEventSignal),
		/* harmony export */   ItemStartUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEvent),
		/* harmony export */   ItemStartUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEventSignal),
		/* harmony export */   ItemStopUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEvent),
		/* harmony export */   ItemStopUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEventSignal),
		/* harmony export */   ItemStopUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEvent),
		/* harmony export */   ItemStopUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEventSignal),
		/* harmony export */   ItemType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemType),
		/* harmony export */   ItemTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemTypes),
		/* harmony export */   ItemUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEvent),
		/* harmony export */   ItemUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEventSignal),
		/* harmony export */   ItemUseBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEvent),
		/* harmony export */   ItemUseBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEventSignal),
		/* harmony export */   ItemUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEvent),
		/* harmony export */   ItemUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEventSignal),
		/* harmony export */   ItemUseOnBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEvent),
		/* harmony export */   ItemUseOnBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEventSignal),
		/* harmony export */   ItemUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnEvent),
		/* harmony export */   JigsawPlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawPlaceOptions),
		/* harmony export */   JigsawStructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawStructurePlaceOptions),
		/* harmony export */   LessThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanComparison),
		/* harmony export */   LessThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanOrEqualsComparison),
		/* harmony export */   LeverActionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEvent),
		/* harmony export */   LeverActionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEventSignal),
		/* harmony export */   LiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LiquidType),
		/* harmony export */   ListBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ListBlockVolume),
		/* harmony export */   LocationInUnloadedChunkError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationInUnloadedChunkError),
		/* harmony export */   LocationOutOfWorldBoundariesError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationOutOfWorldBoundariesError),
		/* harmony export */   MemoryTier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MemoryTier),
		/* harmony export */   MessageReceiveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MessageReceiveAfterEvent),
		/* harmony export */   MolangVariableMap: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MolangVariableMap),
		/* harmony export */   MoonPhase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhase),
		/* harmony export */   MoonPhaseCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhaseCount),
		/* harmony export */   MusicOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MusicOptions),
		/* harmony export */   NamespaceNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameError),
		/* harmony export */   NamespaceNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameErrorReason),
		/* harmony export */   NotEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NotEqualsComparison),
		/* harmony export */   ObjectiveSortOrder: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ObjectiveSortOrder),
		/* harmony export */   PaletteColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PaletteColor),
		/* harmony export */   PistonActivateAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEvent),
		/* harmony export */   PistonActivateAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEventSignal),
		/* harmony export */   PlaceJigsawError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlaceJigsawError),
		/* harmony export */   PlatformType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlatformType),
		/* harmony export */   PlayAnimationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayAnimationOptions),
		/* harmony export */   Player: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Player),
		/* harmony export */   PlayerBreakBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEvent),
		/* harmony export */   PlayerBreakBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEventSignal),
		/* harmony export */   PlayerBreakBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEvent),
		/* harmony export */   PlayerBreakBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEventSignal),
		/* harmony export */   PlayerButtonInputAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEvent),
		/* harmony export */   PlayerButtonInputAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEventSignal),
		/* harmony export */   PlayerCursorInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerCursorInventoryComponent),
		/* harmony export */   PlayerDimensionChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEvent),
		/* harmony export */   PlayerDimensionChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEventSignal),
		/* harmony export */   PlayerEmoteAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEvent),
		/* harmony export */   PlayerEmoteAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEvent),
		/* harmony export */   PlayerGameModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEvent),
		/* harmony export */   PlayerGameModeChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEventSignal),
		/* harmony export */   PlayerInputModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEvent),
		/* harmony export */   PlayerInputModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEvent),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissions),
		/* harmony export */   PlayerInteractWithBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEvent),
		/* harmony export */   PlayerInteractWithBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEventSignal),
		/* harmony export */   PlayerInteractWithBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEvent),
		/* harmony export */   PlayerInteractWithBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEventSignal),
		/* harmony export */   PlayerInteractWithEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEvent),
		/* harmony export */   PlayerInteractWithEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEventSignal),
		/* harmony export */   PlayerInteractWithEntityBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEvent),
		/* harmony export */   PlayerInteractWithEntityBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEventSignal),
		/* harmony export */   PlayerIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerIterator),
		/* harmony export */   PlayerJoinAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEvent),
		/* harmony export */   PlayerJoinAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEventSignal),
		/* harmony export */   PlayerLeaveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEvent),
		/* harmony export */   PlayerLeaveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEventSignal),
		/* harmony export */   PlayerLeaveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEvent),
		/* harmony export */   PlayerLeaveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEventSignal),
		/* harmony export */   PlayerPlaceBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEvent),
		/* harmony export */   PlayerPlaceBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEventSignal),
		/* harmony export */   PlayerPlaceBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEvent),
		/* harmony export */   PlayerPlaceBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEventSignal),
		/* harmony export */   PlayerSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSoundOptions),
		/* harmony export */   PlayerSpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEvent),
		/* harmony export */   PlayerSpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEventSignal),
		/* harmony export */   PotionEffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionEffectType),
		/* harmony export */   PotionLiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionLiquidType),
		/* harmony export */   PotionModifierType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionModifierType),
		/* harmony export */   PotionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionOptions),
		/* harmony export */   Potions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Potions),
		/* harmony export */   PressurePlatePopAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEvent),
		/* harmony export */   PressurePlatePopAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEventSignal),
		/* harmony export */   PressurePlatePushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEvent),
		/* harmony export */   PressurePlatePushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEventSignal),
		/* harmony export */   ProjectileHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEvent),
		/* harmony export */   ProjectileHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEventSignal),
		/* harmony export */   ProjectileHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEvent),
		/* harmony export */   ProjectileHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEventSignal),
		/* harmony export */   ProjectileShootOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileShootOptions),
		/* harmony export */   RGB: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGB),
		/* harmony export */   RGBA: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGBA),
		/* harmony export */   RangeComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RangeComparison),
		/* harmony export */   RawMessage: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessage),
		/* harmony export */   RawMessageScore: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessageScore),
		/* harmony export */   RawText: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawText),
		/* harmony export */   Scoreboard: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Scoreboard),
		/* harmony export */   ScoreboardIdentity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentity),
		/* harmony export */   ScoreboardIdentityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentityType),
		/* harmony export */   ScoreboardObjective: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjective),
		/* harmony export */   ScoreboardObjectiveDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjectiveDisplayOptions),
		/* harmony export */   ScoreboardScoreInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardScoreInfo),
		/* harmony export */   ScreenDisplay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScreenDisplay),
		/* harmony export */   ScriptEventCommandMessageAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEvent),
		/* harmony export */   ScriptEventCommandMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEventSignal),
		/* harmony export */   ScriptEventMessageFilterOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventMessageFilterOptions),
		/* harmony export */   ScriptEventSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventSource),
		/* harmony export */   Seat: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Seat),
		/* harmony export */   ServerMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ServerMessageAfterEventSignal),
		/* harmony export */   ShutdownBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownBeforeEventSignal),
		/* harmony export */   ShutdownEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownEvent),
		/* harmony export */   SignSide: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SignSide),
		/* harmony export */   SpawnEntityOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SpawnEntityOptions),
		/* harmony export */   StartupBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StartupBeforeEventSignal),
		/* harmony export */   StartupEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StartupEvent),
		/* harmony export */   Structure: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Structure),
		/* harmony export */   StructureAnimationMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureAnimationMode),
		/* harmony export */   StructureCreateOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureCreateOptions),
		/* harmony export */   StructureManager: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureManager),
		/* harmony export */   StructureMirrorAxis: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureMirrorAxis),
		/* harmony export */   StructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructurePlaceOptions),
		/* harmony export */   StructureRotation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureRotation),
		/* harmony export */   StructureSaveMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureSaveMode),
		/* harmony export */   System: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.System),
		/* harmony export */   SystemAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemAfterEvents),
		/* harmony export */   SystemBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemBeforeEvents),
		/* harmony export */   SystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemInfo),
		/* harmony export */   TargetBlockHitAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEvent),
		/* harmony export */   TargetBlockHitAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEventSignal),
		/* harmony export */   TeleportOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TeleportOptions),
		/* harmony export */   TicksPerDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerDay),
		/* harmony export */   TicksPerSecond: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerSecond),
		/* harmony export */   TimeOfDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TimeOfDay),
		/* harmony export */   TitleDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TitleDisplayOptions),
		/* harmony export */   Trigger: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Trigger),
		/* harmony export */   TripWireTripAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEvent),
		/* harmony export */   TripWireTripAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEventSignal),
		/* harmony export */   UnloadedChunksError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.UnloadedChunksError),
		/* harmony export */   Vector2: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector2),
		/* harmony export */   Vector3: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector3),
		/* harmony export */   VectorXZ: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.VectorXZ),
		/* harmony export */   WatchdogTerminateBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEvent),
		/* harmony export */   WatchdogTerminateBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEventSignal),
		/* harmony export */   WatchdogTerminateReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateReason),
		/* harmony export */   WeatherChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEvent),
		/* harmony export */   WeatherChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEventSignal),
		/* harmony export */   WeatherChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEvent),
		/* harmony export */   WeatherChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEventSignal),
		/* harmony export */   WeatherType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherType),
		/* harmony export */   World: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.World),
		/* harmony export */   WorldAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldAfterEvents),
		/* harmony export */   WorldBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldBeforeEvents),
		/* harmony export */   WorldLoadAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldLoadAfterEvent),
		/* harmony export */   WorldLoadAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldLoadAfterEventSignal),
		/* harmony export */   WorldSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldSoundOptions),
		/* harmony export */   isAlpha: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.isAlpha),
		/* harmony export */   isInternal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.isInternal),
		/* harmony export */   system: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.system),
		/* harmony export */   world: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.world)
		/* harmony export */ });
		/* harmony import */ var _minecraft_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server */ "@minecraft/server");
		
		
		
		/***/ }),
		
		/***/ "../../module-wrappers/server-gametest-alpha-wrapper/index.js":
		/*!********************************************************************!*\
		  !*** ../../module-wrappers/server-gametest-alpha-wrapper/index.js ***!
		  \********************************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   FenceConnectivity: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.FenceConnectivity),
		/* harmony export */   GameTestDebug: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestDebug),
		/* harmony export */   GameTestError: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestError),
		/* harmony export */   GameTestErrorContext: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestErrorContext),
		/* harmony export */   GameTestErrorType: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestErrorType),
		/* harmony export */   GameTestSequence: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestSequence),
		/* harmony export */   LookDuration: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.LookDuration),
		/* harmony export */   MoveToOptions: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.MoveToOptions),
		/* harmony export */   NavigationResult: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.NavigationResult),
		/* harmony export */   RegistrationBuilder: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.RegistrationBuilder),
		/* harmony export */   SculkSpreader: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.SculkSpreader),
		/* harmony export */   SimulatedPlayer: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.SimulatedPlayer),
		/* harmony export */   Tags: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.Tags),
		/* harmony export */   Test: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.Test),
		/* harmony export */   register: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.register),
		/* harmony export */   registerAsync: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.registerAsync)
		/* harmony export */ });
		/* harmony import */ var _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server-gametest */ "@minecraft/server-gametest");
		
		
		
		/***/ }),
		
		/***/ "../../module-wrappers/server-wrapper/index.js":
		/*!*****************************************************!*\
		  !*** ../../module-wrappers/server-wrapper/index.js ***!
		  \*****************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   BiomeSearchOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeSearchOptions),
		/* harmony export */   BiomeType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeType),
		/* harmony export */   BiomeTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeTypes),
		/* harmony export */   Block: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Block),
		/* harmony export */   BlockComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponent),
		/* harmony export */   BlockComponentEntityFallOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentEntityFallOnEvent),
		/* harmony export */   BlockComponentOnPlaceEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentOnPlaceEvent),
		/* harmony export */   BlockComponentPlayerDestroyEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerDestroyEvent),
		/* harmony export */   BlockComponentPlayerInteractEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerInteractEvent),
		/* harmony export */   BlockComponentPlayerPlaceBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerPlaceBeforeEvent),
		/* harmony export */   BlockComponentRandomTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRandomTickEvent),
		/* harmony export */   BlockComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRegistry),
		/* harmony export */   BlockComponentStepOffEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOffEvent),
		/* harmony export */   BlockComponentStepOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOnEvent),
		/* harmony export */   BlockComponentTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTickEvent),
		/* harmony export */   BlockComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTypes),
		/* harmony export */   BlockCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponent),
		/* harmony export */   BlockCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentAlreadyRegisteredError),
		/* harmony export */   BlockCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewComponentError),
		/* harmony export */   BlockCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewEventError),
		/* harmony export */   BlockCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadVersionError),
		/* harmony export */   BlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEvent),
		/* harmony export */   BlockEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEventOptions),
		/* harmony export */   BlockExplodeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEvent),
		/* harmony export */   BlockExplodeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEventSignal),
		/* harmony export */   BlockFillOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFillOptions),
		/* harmony export */   BlockFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFilter),
		/* harmony export */   BlockFluidContainerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFluidContainerComponent),
		/* harmony export */   BlockHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockHitInformation),
		/* harmony export */   BlockInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockInventoryComponent),
		/* harmony export */   BlockLocationIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockLocationIterator),
		/* harmony export */   BlockPermutation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation),
		/* harmony export */   BlockPistonComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonComponent),
		/* harmony export */   BlockPistonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonState),
		/* harmony export */   BlockRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastHit),
		/* harmony export */   BlockRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastOptions),
		/* harmony export */   BlockRecordPlayerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRecordPlayerComponent),
		/* harmony export */   BlockSignComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockSignComponent),
		/* harmony export */   BlockStateType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStateType),
		/* harmony export */   BlockStates: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStates),
		/* harmony export */   BlockType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockType),
		/* harmony export */   BlockTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockTypes),
		/* harmony export */   BlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolume),
		/* harmony export */   BlockVolumeBase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeBase),
		/* harmony export */   BlockVolumeIntersection: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeIntersection),
		/* harmony export */   BoundingBox: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBox),
		/* harmony export */   BoundingBoxUtils: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBoxUtils),
		/* harmony export */   ButtonPushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEvent),
		/* harmony export */   ButtonPushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEventSignal),
		/* harmony export */   ButtonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonState),
		/* harmony export */   Camera: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Camera),
		/* harmony export */   CameraDefaultOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraDefaultOptions),
		/* harmony export */   CameraEaseOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraEaseOptions),
		/* harmony export */   CameraFadeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeOptions),
		/* harmony export */   CameraFadeTimeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeTimeOptions),
		/* harmony export */   CameraFixedBoomOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFixedBoomOptions),
		/* harmony export */   CameraSetFacingOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetFacingOptions),
		/* harmony export */   CameraSetLocationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetLocationOptions),
		/* harmony export */   CameraSetPosOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetPosOptions),
		/* harmony export */   CameraSetRotOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetRotOptions),
		/* harmony export */   CameraTargetOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraTargetOptions),
		/* harmony export */   ChatSendAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEvent),
		/* harmony export */   ChatSendAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEventSignal),
		/* harmony export */   ChatSendBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEvent),
		/* harmony export */   ChatSendBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEventSignal),
		/* harmony export */   ClientSystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ClientSystemInfo),
		/* harmony export */   CommandError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandError),
		/* harmony export */   CommandResult: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandResult),
		/* harmony export */   Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Component),
		/* harmony export */   CompoundBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolume),
		/* harmony export */   CompoundBlockVolumeAction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeAction),
		/* harmony export */   CompoundBlockVolumeItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeItem),
		/* harmony export */   CompoundBlockVolumePositionRelativity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumePositionRelativity),
		/* harmony export */   Container: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Container),
		/* harmony export */   ContainerSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ContainerSlot),
		/* harmony export */   CustomComponentInvalidRegistryError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentInvalidRegistryError),
		/* harmony export */   CustomComponentNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameError),
		/* harmony export */   CustomComponentNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameErrorReason),
		/* harmony export */   DataDrivenEntityTriggerAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEvent),
		/* harmony export */   DataDrivenEntityTriggerAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEventSignal),
		/* harmony export */   DefinitionModifier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DefinitionModifier),
		/* harmony export */   Difficulty: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Difficulty),
		/* harmony export */   Dimension: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Dimension),
		/* harmony export */   DimensionLocation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionLocation),
		/* harmony export */   DimensionType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionType),
		/* harmony export */   DimensionTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionTypes),
		/* harmony export */   Direction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Direction),
		/* harmony export */   DisplaySlotId: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DisplaySlotId),
		/* harmony export */   DyeColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DyeColor),
		/* harmony export */   EasingType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EasingType),
		/* harmony export */   Effect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Effect),
		/* harmony export */   EffectAddAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEvent),
		/* harmony export */   EffectAddAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEventSignal),
		/* harmony export */   EffectAddBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEvent),
		/* harmony export */   EffectAddBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEventSignal),
		/* harmony export */   EffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectType),
		/* harmony export */   EffectTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectTypes),
		/* harmony export */   Enchantment: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Enchantment),
		/* harmony export */   EnchantmentLevelOutOfBoundsError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentLevelOutOfBoundsError),
		/* harmony export */   EnchantmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentSlot),
		/* harmony export */   EnchantmentType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentType),
		/* harmony export */   EnchantmentTypeNotCompatibleError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeNotCompatibleError),
		/* harmony export */   EnchantmentTypeUnknownIdError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeUnknownIdError),
		/* harmony export */   EnchantmentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypes),
		/* harmony export */   Entity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Entity),
		/* harmony export */   EntityAddRiderComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAddRiderComponent),
		/* harmony export */   EntityAgeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAgeableComponent),
		/* harmony export */   EntityApplyDamageByProjectileOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageByProjectileOptions),
		/* harmony export */   EntityApplyDamageOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageOptions),
		/* harmony export */   EntityAttributeComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAttributeComponent),
		/* harmony export */   EntityBaseMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBaseMovementComponent),
		/* harmony export */   EntityBreathableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBreathableComponent),
		/* harmony export */   EntityCanClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanClimbComponent),
		/* harmony export */   EntityCanFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanFlyComponent),
		/* harmony export */   EntityCanPowerJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanPowerJumpComponent),
		/* harmony export */   EntityColor2Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColor2Component),
		/* harmony export */   EntityColorComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColorComponent),
		/* harmony export */   EntityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponent),
		/* harmony export */   EntityComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponentTypes),
		/* harmony export */   EntityDamageCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageCause),
		/* harmony export */   EntityDamageSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageSource),
		/* harmony export */   EntityDataDrivenTriggerEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDataDrivenTriggerEventOptions),
		/* harmony export */   EntityDefinitionFeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDefinitionFeedItem),
		/* harmony export */   EntityDieAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEvent),
		/* harmony export */   EntityDieAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEventSignal),
		/* harmony export */   EntityEffectOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEffectOptions),
		/* harmony export */   EntityEquippableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEquippableComponent),
		/* harmony export */   EntityEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEventOptions),
		/* harmony export */   EntityFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFilter),
		/* harmony export */   EntityFireImmuneComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFireImmuneComponent),
		/* harmony export */   EntityFloatsInLiquidComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFloatsInLiquidComponent),
		/* harmony export */   EntityFlyingSpeedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFlyingSpeedComponent),
		/* harmony export */   EntityFrictionModifierComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFrictionModifierComponent),
		/* harmony export */   EntityGroundOffsetComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityGroundOffsetComponent),
		/* harmony export */   EntityHealableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealableComponent),
		/* harmony export */   EntityHealthChangedAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEvent),
		/* harmony export */   EntityHealthChangedAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEventSignal),
		/* harmony export */   EntityHealthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthComponent),
		/* harmony export */   EntityHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEvent),
		/* harmony export */   EntityHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEventSignal),
		/* harmony export */   EntityHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEvent),
		/* harmony export */   EntityHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEventSignal),
		/* harmony export */   EntityHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitInformation),
		/* harmony export */   EntityHurtAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEvent),
		/* harmony export */   EntityHurtAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEventSignal),
		/* harmony export */   EntityInitializationCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInitializationCause),
		/* harmony export */   EntityInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInventoryComponent),
		/* harmony export */   EntityIsBabyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsBabyComponent),
		/* harmony export */   EntityIsChargedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChargedComponent),
		/* harmony export */   EntityIsChestedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChestedComponent),
		/* harmony export */   EntityIsDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsDyeableComponent),
		/* harmony export */   EntityIsHiddenWhenInvisibleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsHiddenWhenInvisibleComponent),
		/* harmony export */   EntityIsIgnitedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIgnitedComponent),
		/* harmony export */   EntityIsIllagerCaptainComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIllagerCaptainComponent),
		/* harmony export */   EntityIsSaddledComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsSaddledComponent),
		/* harmony export */   EntityIsShakingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShakingComponent),
		/* harmony export */   EntityIsShearedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShearedComponent),
		/* harmony export */   EntityIsStackableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStackableComponent),
		/* harmony export */   EntityIsStunnedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStunnedComponent),
		/* harmony export */   EntityIsTamedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsTamedComponent),
		/* harmony export */   EntityItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityItemComponent),
		/* harmony export */   EntityIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIterator),
		/* harmony export */   EntityLavaMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLavaMovementComponent),
		/* harmony export */   EntityLeashableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLeashableComponent),
		/* harmony export */   EntityLoadAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEvent),
		/* harmony export */   EntityLoadAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEventSignal),
		/* harmony export */   EntityMarkVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMarkVariantComponent),
		/* harmony export */   EntityMovementAmphibiousComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementAmphibiousComponent),
		/* harmony export */   EntityMovementBasicComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementBasicComponent),
		/* harmony export */   EntityMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementComponent),
		/* harmony export */   EntityMovementFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementFlyComponent),
		/* harmony export */   EntityMovementGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGenericComponent),
		/* harmony export */   EntityMovementGlideComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGlideComponent),
		/* harmony export */   EntityMovementHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementHoverComponent),
		/* harmony export */   EntityMovementJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementJumpComponent),
		/* harmony export */   EntityMovementSkipComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSkipComponent),
		/* harmony export */   EntityMovementSwayComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSwayComponent),
		/* harmony export */   EntityNavigationClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationClimbComponent),
		/* harmony export */   EntityNavigationComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationComponent),
		/* harmony export */   EntityNavigationFloatComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFloatComponent),
		/* harmony export */   EntityNavigationFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFlyComponent),
		/* harmony export */   EntityNavigationGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationGenericComponent),
		/* harmony export */   EntityNavigationHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationHoverComponent),
		/* harmony export */   EntityNavigationWalkComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationWalkComponent),
		/* harmony export */   EntityNpcComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNpcComponent),
		/* harmony export */   EntityOnFireComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityOnFireComponent),
		/* harmony export */   EntityProjectileComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityProjectileComponent),
		/* harmony export */   EntityPushThroughComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityPushThroughComponent),
		/* harmony export */   EntityQueryOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryOptions),
		/* harmony export */   EntityQueryPropertyOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryPropertyOptions),
		/* harmony export */   EntityQueryScoreOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryScoreOptions),
		/* harmony export */   EntityRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastHit),
		/* harmony export */   EntityRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastOptions),
		/* harmony export */   EntityRemoveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEvent),
		/* harmony export */   EntityRemoveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEventSignal),
		/* harmony export */   EntityRemoveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEvent),
		/* harmony export */   EntityRemoveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEventSignal),
		/* harmony export */   EntityRideableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRideableComponent),
		/* harmony export */   EntityRidingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRidingComponent),
		/* harmony export */   EntityScaleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityScaleComponent),
		/* harmony export */   EntitySkinIdComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySkinIdComponent),
		/* harmony export */   EntitySpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEvent),
		/* harmony export */   EntitySpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEventSignal),
		/* harmony export */   EntityStrengthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityStrengthComponent),
		/* harmony export */   EntityTameMountComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameMountComponent),
		/* harmony export */   EntityTameableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameableComponent),
		/* harmony export */   EntityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityType),
		/* harmony export */   EntityTypeFamilyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeFamilyComponent),
		/* harmony export */   EntityTypeIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeIterator),
		/* harmony export */   EntityTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypes),
		/* harmony export */   EntityUnderwaterMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityUnderwaterMovementComponent),
		/* harmony export */   EntityVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityVariantComponent),
		/* harmony export */   EntityWantsJockeyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityWantsJockeyComponent),
		/* harmony export */   EqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EqualsComparison),
		/* harmony export */   EquipmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EquipmentSlot),
		/* harmony export */   ExplosionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEvent),
		/* harmony export */   ExplosionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEventSignal),
		/* harmony export */   ExplosionBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEvent),
		/* harmony export */   ExplosionBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEventSignal),
		/* harmony export */   ExplosionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionOptions),
		/* harmony export */   FeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItem),
		/* harmony export */   FeedItemEffect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItemEffect),
		/* harmony export */   FilterGroup: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FilterGroup),
		/* harmony export */   FluidContainer: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidContainer),
		/* harmony export */   FluidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidType),
		/* harmony export */   GameMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameMode),
		/* harmony export */   GameRule: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRule),
		/* harmony export */   GameRuleChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEvent),
		/* harmony export */   GameRuleChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEventSignal),
		/* harmony export */   GameRules: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRules),
		/* harmony export */   GreaterThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanComparison),
		/* harmony export */   GreaterThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanOrEqualsComparison),
		/* harmony export */   HudElement: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElement),
		/* harmony export */   HudElementsCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElementsCount),
		/* harmony export */   HudVisibility: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibility),
		/* harmony export */   HudVisibilityCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibilityCount),
		/* harmony export */   IButtonPushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IButtonPushAfterEventSignal),
		/* harmony export */   ILeverActionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ILeverActionAfterEventSignal),
		/* harmony export */   IPlayerJoinAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerJoinAfterEventSignal),
		/* harmony export */   IPlayerLeaveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerLeaveAfterEventSignal),
		/* harmony export */   IPlayerSpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerSpawnAfterEventSignal),
		/* harmony export */   InputButton: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputButton),
		/* harmony export */   InputEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputEventOptions),
		/* harmony export */   InputInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputInfo),
		/* harmony export */   InputMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputMode),
		/* harmony export */   InputPermissionCategory: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputPermissionCategory),
		/* harmony export */   InvalidContainerSlotError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidContainerSlotError),
		/* harmony export */   InvalidEntityError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidEntityError),
		/* harmony export */   InvalidIteratorError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidIteratorError),
		/* harmony export */   InvalidStructureError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidStructureError),
		/* harmony export */   ItemCompleteUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEvent),
		/* harmony export */   ItemCompleteUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEventSignal),
		/* harmony export */   ItemCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseEvent),
		/* harmony export */   ItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponent),
		/* harmony export */   ItemComponentBeforeDurabilityDamageEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentBeforeDurabilityDamageEvent),
		/* harmony export */   ItemComponentCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentCompleteUseEvent),
		/* harmony export */   ItemComponentConsumeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentConsumeEvent),
		/* harmony export */   ItemComponentHitEntityEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentHitEntityEvent),
		/* harmony export */   ItemComponentMineBlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentMineBlockEvent),
		/* harmony export */   ItemComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentRegistry),
		/* harmony export */   ItemComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentTypes),
		/* harmony export */   ItemComponentUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseEvent),
		/* harmony export */   ItemComponentUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseOnEvent),
		/* harmony export */   ItemCompostableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompostableComponent),
		/* harmony export */   ItemCooldownComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCooldownComponent),
		/* harmony export */   ItemCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponent),
		/* harmony export */   ItemCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentAlreadyRegisteredError),
		/* harmony export */   ItemCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewComponentError),
		/* harmony export */   ItemCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewEventError),
		/* harmony export */   ItemCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadVersionError),
		/* harmony export */   ItemDurabilityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDurabilityComponent),
		/* harmony export */   ItemDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDyeableComponent),
		/* harmony export */   ItemEnchantableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemEnchantableComponent),
		/* harmony export */   ItemFoodComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemFoodComponent),
		/* harmony export */   ItemLockMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemLockMode),
		/* harmony export */   ItemPotionComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemPotionComponent),
		/* harmony export */   ItemReleaseUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEvent),
		/* harmony export */   ItemReleaseUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEventSignal),
		/* harmony export */   ItemStack: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStack),
		/* harmony export */   ItemStartUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEvent),
		/* harmony export */   ItemStartUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEventSignal),
		/* harmony export */   ItemStartUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEvent),
		/* harmony export */   ItemStartUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEventSignal),
		/* harmony export */   ItemStopUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEvent),
		/* harmony export */   ItemStopUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEventSignal),
		/* harmony export */   ItemStopUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEvent),
		/* harmony export */   ItemStopUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEventSignal),
		/* harmony export */   ItemType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemType),
		/* harmony export */   ItemTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemTypes),
		/* harmony export */   ItemUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEvent),
		/* harmony export */   ItemUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEventSignal),
		/* harmony export */   ItemUseBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEvent),
		/* harmony export */   ItemUseBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEventSignal),
		/* harmony export */   ItemUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEvent),
		/* harmony export */   ItemUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEventSignal),
		/* harmony export */   ItemUseOnBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEvent),
		/* harmony export */   ItemUseOnBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEventSignal),
		/* harmony export */   ItemUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnEvent),
		/* harmony export */   JigsawPlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawPlaceOptions),
		/* harmony export */   JigsawStructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawStructurePlaceOptions),
		/* harmony export */   LessThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanComparison),
		/* harmony export */   LessThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanOrEqualsComparison),
		/* harmony export */   LeverActionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEvent),
		/* harmony export */   LeverActionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEventSignal),
		/* harmony export */   LiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LiquidType),
		/* harmony export */   ListBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ListBlockVolume),
		/* harmony export */   LocationInUnloadedChunkError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationInUnloadedChunkError),
		/* harmony export */   LocationOutOfWorldBoundariesError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationOutOfWorldBoundariesError),
		/* harmony export */   MemoryTier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MemoryTier),
		/* harmony export */   MessageReceiveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MessageReceiveAfterEvent),
		/* harmony export */   MinecraftDimensionTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MinecraftDimensionTypes),
		/* harmony export */   MolangVariableMap: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MolangVariableMap),
		/* harmony export */   MoonPhase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhase),
		/* harmony export */   MoonPhaseCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhaseCount),
		/* harmony export */   MusicOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MusicOptions),
		/* harmony export */   NamespaceNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameError),
		/* harmony export */   NamespaceNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameErrorReason),
		/* harmony export */   NotEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NotEqualsComparison),
		/* harmony export */   ObjectiveSortOrder: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ObjectiveSortOrder),
		/* harmony export */   PaletteColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PaletteColor),
		/* harmony export */   PistonActivateAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEvent),
		/* harmony export */   PistonActivateAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEventSignal),
		/* harmony export */   PlaceJigsawError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlaceJigsawError),
		/* harmony export */   PlatformType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlatformType),
		/* harmony export */   PlayAnimationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayAnimationOptions),
		/* harmony export */   Player: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Player),
		/* harmony export */   PlayerBreakBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEvent),
		/* harmony export */   PlayerBreakBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEventSignal),
		/* harmony export */   PlayerBreakBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEvent),
		/* harmony export */   PlayerBreakBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEventSignal),
		/* harmony export */   PlayerButtonInputAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEvent),
		/* harmony export */   PlayerButtonInputAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEventSignal),
		/* harmony export */   PlayerCursorInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerCursorInventoryComponent),
		/* harmony export */   PlayerDimensionChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEvent),
		/* harmony export */   PlayerDimensionChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEventSignal),
		/* harmony export */   PlayerEmoteAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEvent),
		/* harmony export */   PlayerEmoteAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEvent),
		/* harmony export */   PlayerGameModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEvent),
		/* harmony export */   PlayerGameModeChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEventSignal),
		/* harmony export */   PlayerInputModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEvent),
		/* harmony export */   PlayerInputModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEvent),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissions),
		/* harmony export */   PlayerInteractWithBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEvent),
		/* harmony export */   PlayerInteractWithBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEventSignal),
		/* harmony export */   PlayerInteractWithBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEvent),
		/* harmony export */   PlayerInteractWithBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEventSignal),
		/* harmony export */   PlayerInteractWithEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEvent),
		/* harmony export */   PlayerInteractWithEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEventSignal),
		/* harmony export */   PlayerInteractWithEntityBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEvent),
		/* harmony export */   PlayerInteractWithEntityBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEventSignal),
		/* harmony export */   PlayerIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerIterator),
		/* harmony export */   PlayerJoinAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEvent),
		/* harmony export */   PlayerJoinAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEventSignal),
		/* harmony export */   PlayerLeaveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEvent),
		/* harmony export */   PlayerLeaveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEventSignal),
		/* harmony export */   PlayerLeaveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEvent),
		/* harmony export */   PlayerLeaveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEventSignal),
		/* harmony export */   PlayerPlaceBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEvent),
		/* harmony export */   PlayerPlaceBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEventSignal),
		/* harmony export */   PlayerPlaceBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEvent),
		/* harmony export */   PlayerPlaceBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEventSignal),
		/* harmony export */   PlayerSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSoundOptions),
		/* harmony export */   PlayerSpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEvent),
		/* harmony export */   PlayerSpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEventSignal),
		/* harmony export */   PotionEffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionEffectType),
		/* harmony export */   PotionLiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionLiquidType),
		/* harmony export */   PotionModifierType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionModifierType),
		/* harmony export */   PotionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionOptions),
		/* harmony export */   Potions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Potions),
		/* harmony export */   PressurePlatePopAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEvent),
		/* harmony export */   PressurePlatePopAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEventSignal),
		/* harmony export */   PressurePlatePushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEvent),
		/* harmony export */   PressurePlatePushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEventSignal),
		/* harmony export */   ProjectileHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEvent),
		/* harmony export */   ProjectileHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEventSignal),
		/* harmony export */   ProjectileHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEvent),
		/* harmony export */   ProjectileHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEventSignal),
		/* harmony export */   ProjectileShootOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileShootOptions),
		/* harmony export */   RGB: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGB),
		/* harmony export */   RGBA: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGBA),
		/* harmony export */   RangeComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RangeComparison),
		/* harmony export */   RawMessage: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessage),
		/* harmony export */   RawMessageScore: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessageScore),
		/* harmony export */   RawText: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawText),
		/* harmony export */   Scoreboard: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Scoreboard),
		/* harmony export */   ScoreboardIdentity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentity),
		/* harmony export */   ScoreboardIdentityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentityType),
		/* harmony export */   ScoreboardObjective: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjective),
		/* harmony export */   ScoreboardObjectiveDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjectiveDisplayOptions),
		/* harmony export */   ScoreboardScoreInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardScoreInfo),
		/* harmony export */   ScreenDisplay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScreenDisplay),
		/* harmony export */   ScriptEventCommandMessageAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEvent),
		/* harmony export */   ScriptEventCommandMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEventSignal),
		/* harmony export */   ScriptEventMessageFilterOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventMessageFilterOptions),
		/* harmony export */   ScriptEventSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventSource),
		/* harmony export */   Seat: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Seat),
		/* harmony export */   ServerMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ServerMessageAfterEventSignal),
		/* harmony export */   ShutdownBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownBeforeEventSignal),
		/* harmony export */   ShutdownEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownEvent),
		/* harmony export */   SignSide: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SignSide),
		/* harmony export */   SpawnEntityOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SpawnEntityOptions),
		/* harmony export */   Structure: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Structure),
		/* harmony export */   StructureAnimationMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureAnimationMode),
		/* harmony export */   StructureCreateOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureCreateOptions),
		/* harmony export */   StructureManager: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureManager),
		/* harmony export */   StructureMirrorAxis: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureMirrorAxis),
		/* harmony export */   StructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructurePlaceOptions),
		/* harmony export */   StructureRotation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureRotation),
		/* harmony export */   StructureSaveMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureSaveMode),
		/* harmony export */   System: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.System),
		/* harmony export */   SystemAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemAfterEvents),
		/* harmony export */   SystemBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemBeforeEvents),
		/* harmony export */   SystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemInfo),
		/* harmony export */   TargetBlockHitAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEvent),
		/* harmony export */   TargetBlockHitAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEventSignal),
		/* harmony export */   TeleportOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TeleportOptions),
		/* harmony export */   TicksPerDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerDay),
		/* harmony export */   TicksPerSecond: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerSecond),
		/* harmony export */   TimeOfDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TimeOfDay),
		/* harmony export */   TitleDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TitleDisplayOptions),
		/* harmony export */   Trigger: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Trigger),
		/* harmony export */   TripWireTripAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEvent),
		/* harmony export */   TripWireTripAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEventSignal),
		/* harmony export */   UnloadedChunksError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.UnloadedChunksError),
		/* harmony export */   Vector2: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector2),
		/* harmony export */   Vector3: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector3),
		/* harmony export */   VectorXZ: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.VectorXZ),
		/* harmony export */   WatchdogTerminateBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEvent),
		/* harmony export */   WatchdogTerminateBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEventSignal),
		/* harmony export */   WatchdogTerminateReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateReason),
		/* harmony export */   WeatherChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEvent),
		/* harmony export */   WeatherChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEventSignal),
		/* harmony export */   WeatherChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEvent),
		/* harmony export */   WeatherChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEventSignal),
		/* harmony export */   WeatherType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherType),
		/* harmony export */   World: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.World),
		/* harmony export */   WorldAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldAfterEvents),
		/* harmony export */   WorldBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldBeforeEvents),
		/* harmony export */   WorldInitializeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeAfterEvent),
		/* harmony export */   WorldInitializeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeAfterEventSignal),
		/* harmony export */   WorldInitializeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeBeforeEvent),
		/* harmony export */   WorldInitializeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeBeforeEventSignal),
		/* harmony export */   WorldSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldSoundOptions),
		/* harmony export */   isInternal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.isInternal),
		/* harmony export */   system: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.system),
		/* harmony export */   world: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.world)
		/* harmony export */ });
		/* harmony import */ var _minecraft_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server */ "@minecraft/server");
		
		
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/general/clamp.js":
		/*!***************************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/general/clamp.js ***!
		  \***************************************************************/
		/***/ ((__unused_webpack_module, exports) => {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		exports.clampNumber = void 0;
		/**
		 * Clamps the passed in number to the passed in min and max values.
		 *
		 * @public
		 */
		function clampNumber(val, min, max) {
		    return Math.min(Math.max(val, min), max);
		}
		exports.clampNumber = clampNumber;
		//# sourceMappingURL=clamp.js.map
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/general/index.js":
		/*!***************************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/general/index.js ***!
		  \***************************************************************/
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (this && this.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		__exportStar(__webpack_require__(/*! ./clamp */ "../../node_modules/@minecraft/math/lib/general/clamp.js"), exports);
		//# sourceMappingURL=index.js.map
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/index.js":
		/*!*******************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/index.js ***!
		  \*******************************************************/
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (this && this.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		__exportStar(__webpack_require__(/*! ./vector3 */ "../../node_modules/@minecraft/math/lib/vector3/index.js"), exports);
		__exportStar(__webpack_require__(/*! ./general */ "../../node_modules/@minecraft/math/lib/general/index.js"), exports);
		//# sourceMappingURL=index.js.map
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/vector3/coreHelpers.js":
		/*!*********************************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/vector3/coreHelpers.js ***!
		  \*********************************************************************/
		/***/ ((__unused_webpack_module, exports, __webpack_require__) => {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		exports.VECTOR3_SOUTH = exports.VECTOR3_NORTH = exports.VECTOR3_EAST = exports.VECTOR3_WEST = exports.VECTOR3_ZERO = exports.VECTOR3_ONE = exports.VECTOR3_BACK = exports.VECTOR3_FORWARD = exports.VECTOR3_RIGHT = exports.VECTOR3_LEFT = exports.VECTOR3_DOWN = exports.VECTOR3_UP = exports.Vector2Utils = exports.Vector3Utils = void 0;
		const clamp_1 = __webpack_require__(/*! ../general/clamp */ "../../node_modules/@minecraft/math/lib/general/clamp.js");
		/**
		 * Utilities operating on Vector3 objects. All methods are static and do not modify the input objects.
		 *
		 * @public
		 */
		class Vector3Utils {
		    /**
		     * equals
		     *
		     * Check the equality of two vectors
		     */
		    static equals(v1, v2) {
		        return v1.x === v2.x && v1.y === v2.y && v1.z === v2.z;
		    }
		    /**
		     * add
		     *
		     * Add two vectors to produce a new vector
		     */
		    static add(v1, v2) {
		        return { x: v1.x + v2.x, y: v1.y + v2.y, z: v1.z + v2.z };
		    }
		    /**
		     * subtract
		     *
		     * Subtract two vectors to produce a new vector (v1-v2)
		     */
		    static subtract(v1, v2) {
		        return { x: v1.x - v2.x, y: v1.y - v2.y, z: v1.z - v2.z };
		    }
		    /** scale
		     *
		     * Multiple all entries in a vector by a single scalar value producing a new vector
		     */
		    static scale(v1, scale) {
		        return { x: v1.x * scale, y: v1.y * scale, z: v1.z * scale };
		    }
		    /**
		     * dot
		     *
		     * Calculate the dot product of two vectors
		     */
		    static dot(a, b) {
		        return a.x * b.x + a.y * b.y + a.z * b.z;
		    }
		    /**
		     * cross
		     *
		     * Calculate the cross product of two vectors. Returns a new vector.
		     */
		    static cross(a, b) {
		        return {
		            x: a.y * b.z - a.z * b.y,
		            y: a.z * b.x - a.x * b.z,
		            z: a.x * b.y - a.y * b.x,
		        };
		    }
		    /**
		     * magnitude
		     *
		     * The magnitude of a vector
		     */
		    static magnitude(v) {
		        return Math.sqrt(v.x ** 2 + v.y ** 2 + v.z ** 2);
		    }
		    /**
		     * normalize
		     *
		     * Takes a vector 3 and normalizes it to a unit vector
		     */
		    static normalize(v) {
		        const mag = Vector3Utils.magnitude(v);
		        return { x: v.x / mag, y: v.y / mag, z: v.z / mag };
		    }
		    /**
		     * floor
		     *
		     * Floor the components of a vector to produce a new vector
		     */
		    static floor(v) {
		        return { x: Math.floor(v.x), y: Math.floor(v.y), z: Math.floor(v.z) };
		    }
		    /**
		     * toString
		     *
		     * Create a string representation of a vector3
		     */
		    static toString(v, options) {
		        const decimals = options?.decimals ?? 2;
		        const str = [v.x.toFixed(decimals), v.y.toFixed(decimals), v.z.toFixed(decimals)];
		        return str.join(options?.delimiter ?? ', ');
		    }
		    /**
		     * clamp
		     *
		     * Clamps the components of a vector to limits to produce a new vector
		     */
		    static clamp(v, limits) {
		        return {
		            x: (0, clamp_1.clampNumber)(v.x, limits?.min?.x ?? Number.MIN_SAFE_INTEGER, limits?.max?.x ?? Number.MAX_SAFE_INTEGER),
		            y: (0, clamp_1.clampNumber)(v.y, limits?.min?.y ?? Number.MIN_SAFE_INTEGER, limits?.max?.y ?? Number.MAX_SAFE_INTEGER),
		            z: (0, clamp_1.clampNumber)(v.z, limits?.min?.z ?? Number.MIN_SAFE_INTEGER, limits?.max?.z ?? Number.MAX_SAFE_INTEGER),
		        };
		    }
		}
		exports.Vector3Utils = Vector3Utils;
		/**
		 * Utilities operating on Vector2 objects. All methods are static and do not modify the input objects.
		 *
		 * @public
		 */
		class Vector2Utils {
		    /**
		     * toString
		     *
		     * Create a string representation of a vector2
		     */
		    static toString(v, options) {
		        const decimals = options?.decimals ?? 2;
		        const str = [v.x.toFixed(decimals), v.y.toFixed(decimals)];
		        return str.join(options?.delimiter ?? ', ');
		    }
		}
		exports.Vector2Utils = Vector2Utils;
		/**
		 * up
		 *
		 * A unit vector representing the world UP direction (0,1,0)
		 *
		 * @public
		 */
		exports.VECTOR3_UP = { x: 0, y: 1, z: 0 };
		/**
		 * down
		 *
		 * A unit vector representing the world DOWN direction (0,-1,0)
		 *
		 * @public
		 */
		exports.VECTOR3_DOWN = { x: 0, y: -1, z: 0 };
		/**
		 * left
		 *
		 * A unit vector representing the world LEFT direction (-1,0,0)
		 *
		 * @public
		 */
		exports.VECTOR3_LEFT = { x: -1, y: 0, z: 0 };
		/**
		 * right
		 *
		 * A unit vector representing the world RIGHT direction (1,0,0)
		 *
		 * @public
		 */
		exports.VECTOR3_RIGHT = { x: 1, y: 0, z: 0 };
		/**
		 * forward
		 *
		 * A unit vector representing the world FORWARD direction (0,0,1)
		 *
		 * @public
		 */
		exports.VECTOR3_FORWARD = { x: 0, y: 0, z: 1 };
		/**
		 * back
		 *
		 * A unit vector representing the world BACK direction (0,0,-1)
		 *
		 * @public
		 */
		exports.VECTOR3_BACK = { x: 0, y: 0, z: -1 };
		/**
		 * one
		 *
		 * A unit vector representing the value of 1 in all directions (1,1,1)
		 *
		 * @public
		 */
		exports.VECTOR3_ONE = { x: 1, y: 1, z: 1 };
		/**
		 * zero
		 *
		 * A unit vector representing the value of 0 in all directions (0,0,0)
		 *
		 * @public
		 */
		exports.VECTOR3_ZERO = { x: 0, y: 0, z: 0 };
		/**
		 * west
		 *
		 * A unit vector representing the world WEST direction (-1,0,0)
		 *   (same as LEFT)
		 *
		 * @public
		 */
		exports.VECTOR3_WEST = { x: -1, y: 0, z: 0 };
		/**
		 * east
		 *
		 * A unit vector representing the world EAST direction (-1,0,0)
		 *   (same as RIGHT)
		 *
		 * @public
		 */
		exports.VECTOR3_EAST = { x: 1, y: 0, z: 0 };
		/**
		 * north
		 *
		 * A unit vector representing the world NORTH direction (-1,0,0)
		 *   (same as FORWARD)
		 *
		 * @public
		 */
		exports.VECTOR3_NORTH = { x: 0, y: 0, z: 1 };
		/**
		 * south
		 *
		 * A unit vector representing the world SOUTH direction (-1,0,0)
		 *   (same as BACK)
		 *
		 * @public
		 */
		exports.VECTOR3_SOUTH = { x: 0, y: 0, z: -1 };
		//# sourceMappingURL=coreHelpers.js.map
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/vector3/index.js":
		/*!***************************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/vector3/index.js ***!
		  \***************************************************************/
		/***/ (function(__unused_webpack_module, exports, __webpack_require__) {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (this && this.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		__exportStar(__webpack_require__(/*! ./coreHelpers */ "../../node_modules/@minecraft/math/lib/vector3/coreHelpers.js"), exports);
		__exportStar(__webpack_require__(/*! ./vectorWrapper */ "../../node_modules/@minecraft/math/lib/vector3/vectorWrapper.js"), exports);
		//# sourceMappingURL=index.js.map
		
		/***/ }),
		
		/***/ "../../node_modules/@minecraft/math/lib/vector3/vectorWrapper.js":
		/*!***********************************************************************!*\
		  !*** ../../node_modules/@minecraft/math/lib/vector3/vectorWrapper.js ***!
		  \***********************************************************************/
		/***/ ((__unused_webpack_module, exports, __webpack_require__) => {
		
		
		// Copyright (c) Mojang AB.  All rights reserved.
		Object.defineProperty(exports, "__esModule", ({ value: true }));
		exports.Vector2Builder = exports.Vector3Builder = void 0;
		const coreHelpers_1 = __webpack_require__(/*! ./coreHelpers */ "../../node_modules/@minecraft/math/lib/vector3/coreHelpers.js");
		/**
		 * Vector3 wrapper class which can be used as a Vector3 for APIs on \@minecraft/server-wrapper which require a Vector,
		 * but also contain additional helper methods. This is an alternative to using the core Vector 3 utility
		 * methods directly, for those who prefer a more object-oriented approach. This version of the class is mutable
		 * and changes state inline.
		 *
		 * For an immutable version of the build, use ImmutableVector3Builder.
		 *
		 * @public
		 */
		class Vector3Builder {
		    constructor(first, y, z) {
		        if (typeof first === 'object') {
		            this.x = first.x;
		            this.y = first.y;
		            this.z = first.z;
		        }
		        else {
		            this.x = first;
		            this.y = y ?? 0;
		            this.z = z ?? 0;
		        }
		    }
		    /**
		     * Assigns the values of the passed in vector to this vector. Returns itself.
		     */
		    assign(vec) {
		        this.x = vec.x;
		        this.y = vec.y;
		        this.z = vec.z;
		        return this;
		    }
		    /**
		     * equals
		     *
		     * Check the equality of two vectors
		     */
		    equals(v) {
		        return coreHelpers_1.Vector3Utils.equals(this, v);
		    }
		    /**
		     * add
		     *
		     * Adds the vector v to this, returning itself.
		     */
		    add(v) {
		        return this.assign(coreHelpers_1.Vector3Utils.add(this, v));
		    }
		    /**
		     * subtract
		     *
		     * Subtracts the vector v from this, returning itself.
		     */
		    subtract(v) {
		        return this.assign(coreHelpers_1.Vector3Utils.subtract(this, v));
		    }
		    /** scale
		     *
		     * Scales this by the passed in value, returning itself.
		     */
		    scale(val) {
		        return this.assign(coreHelpers_1.Vector3Utils.scale(this, val));
		    }
		    /**
		     * dot
		     *
		     * Computes the dot product of this and the passed in vector.
		     */
		    dot(vec) {
		        return coreHelpers_1.Vector3Utils.dot(this, vec);
		    }
		    /**
		     * cross
		     *
		     * Computes the cross product of this and the passed in vector, returning itself.
		     */
		    cross(vec) {
		        return this.assign(coreHelpers_1.Vector3Utils.cross(this, vec));
		    }
		    /**
		     * magnitude
		     *
		     * The magnitude of the vector
		     */
		    magnitude() {
		        return coreHelpers_1.Vector3Utils.magnitude(this);
		    }
		    /**
		     * normalize
		     *
		     * Normalizes this vector, returning itself.
		     */
		    normalize() {
		        return this.assign(coreHelpers_1.Vector3Utils.normalize(this));
		    }
		    /**
		     * floor
		     *
		     * Floor the components of a vector to produce a new vector
		     */
		    floor() {
		        return this.assign(coreHelpers_1.Vector3Utils.floor(this));
		    }
		    /**
		     * toString
		     *
		     * Create a string representation of a vector
		     */
		    toString(options) {
		        return coreHelpers_1.Vector3Utils.toString(this, options);
		    }
		    /**
		     * clamp
		     *
		     * Clamps the components of a vector to limits to produce a new vector
		     */
		    clamp(limits) {
		        return this.assign(coreHelpers_1.Vector3Utils.clamp(this, limits));
		    }
		}
		exports.Vector3Builder = Vector3Builder;
		/**
		 * Vector2 wrapper class which can be used as a Vector2 for APIs on \@minecraft/server-wrapper which require a Vector2.
		 * @public
		 */
		class Vector2Builder {
		    constructor(first, y) {
		        if (typeof first === 'object') {
		            this.x = first.x;
		            this.y = first.y;
		        }
		        else {
		            this.x = first;
		            this.y = y ?? 0;
		        }
		    }
		    toString(options) {
		        return coreHelpers_1.Vector2Utils.toString(this, options);
		    }
		}
		exports.Vector2Builder = Vector2Builder;
		//# sourceMappingURL=vectorWrapper.js.map
		
		/***/ }),
		
		/***/ "./src/scripts/AlphaTests.ts":
		/*!***********************************!*\
		  !*** ./src/scripts/AlphaTests.ts ***!
		  \***********************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony import */ var _minecraft_server_gametest_alpha_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server-gametest-alpha-wrapper */ "../../module-wrappers/server-gametest-alpha-wrapper/index.js");
		/* harmony import */ var _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @minecraft/server-alpha-wrapper */ "../../module-wrappers/server-alpha-wrapper/index.js");
		/* harmony import */ var _GameTestExtensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameTestExtensions */ "./src/scripts/GameTestExtensions.ts");
		// Copyright (c) Mojang AB.  All rights reserved.
		
		
		
		// Totally contrived test to ensure alpha is set up as expected and game test extensions work
		_minecraft_server_gametest_alpha_wrapper__WEBPACK_IMPORTED_MODULE_0__.register('AlphaTests', 'alpha_is_true', test => {
		    const testExtensions = new _GameTestExtensions__WEBPACK_IMPORTED_MODULE_2__["default"](test);
		    testExtensions.assertNumberEqual(1, _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.isAlpha ? 1 : 0, 'Alpha is not true!');
		    test.assert(_minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.isAlpha, 'Is not alpha!');
		    test.succeed();
		})
		    .structureName('Generic:flat_5x5x5')
		    .tag(_minecraft_server_gametest_alpha_wrapper__WEBPACK_IMPORTED_MODULE_0__.Tags.suiteDefault);
		
		
		/***/ }),
		
		/***/ "./src/scripts/GameTestExtensions.ts":
		/*!*******************************************!*\
		  !*** ./src/scripts/GameTestExtensions.ts ***!
		  \*******************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   "default": () => (/* binding */ GameTestExtensions)
		/* harmony export */ });
		/* harmony import */ var _minecraft_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/math */ "../../node_modules/@minecraft/math/lib/index.js");
		/* harmony import */ var _minecraft_math__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_minecraft_math__WEBPACK_IMPORTED_MODULE_0__);
		/* harmony import */ var _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @minecraft/server-alpha-wrapper */ "../../module-wrappers/server-alpha-wrapper/index.js");
		// Copyright (c) Mojang AB.  All rights reserved.
		
		
		class GameTestExtensions {
		    constructor(test) {
		        this.test = test;
		    }
		    static getBlockComponentOrAssert(test, block, componentId) {
		        const component = block.getComponent(componentId);
		        GameTestExtensions.assertDefined(component, `Component ${componentId} expected to be defined`);
		        return component;
		    }
		    static getEntityComponentOrAssert(test, entity, componentId) {
		        const component = entity.getComponent(componentId);
		        GameTestExtensions.assertDefined(component, `Component ${componentId} expected to be defined`);
		        return component;
		    }
		    static getItemComponentOrAssert(test, item, componentId) {
		        const component = item.getComponent(componentId);
		        GameTestExtensions.assertDefined(component, `Component ${componentId} expected to be defined`);
		        return component;
		    }
		    static getBlockOrAssert(test, dimension, location) {
		        const block = dimension.getBlock(location);
		        test.assert(block !== undefined, `Block at location ${JSON.stringify(location)} expected to be defined`);
		        return block;
		    }
		    static isNear(n1, n2, epsilon = 0.01) {
		        return Math.abs(n1 - n2) < epsilon;
		    }
		    static assertDefinedTypeGuard(test, value, message) {
		        test.assert(value !== undefined, message);
		    }
		    static isNearVec(a, b, epsilon = 0.001) {
		        /**
		         * The cast here is necessary until we have vector libraries just for PODs
		         */
		        return (_minecraft_math__WEBPACK_IMPORTED_MODULE_0__.Vector3Utils.magnitude(_minecraft_math__WEBPACK_IMPORTED_MODULE_0__.Vector3Utils.subtract({ x: a.x, y: a.y, z: a.z }, { x: b.x, y: b.y, z: b.z })) <
		            epsilon);
		    }
		    addEntityInBoat(entityType, blockLoc) {
		        const boat = this.test.spawn('boat', blockLoc);
		        this.test.assert(boat !== undefined, 'Failed to spawn boat');
		        const rider = this.test.spawn(entityType, blockLoc);
		        this.test.assert(rider !== undefined, 'Failed to spawn rider');
		        const boatRideableComp = boat.getComponent('rideable');
		        this.test.assert(boatRideableComp !== undefined, 'Boat missing rideable component');
		        this.test.assert(boatRideableComp.addRider(rider), 'Failed to add rider');
		        return rider;
		    }
		    makeAboutToDrown(entity) {
		        this.test.assert(entity !== undefined, 'Expected entity');
		        const healthComp = entity.getComponent('health');
		        this.test.assert(healthComp !== undefined, 'Entity missing health component');
		        const breathableComp = entity.getComponent('breathable');
		        this.test.assert(breathableComp !== undefined, 'Entity missing breathable component');
		        healthComp.setCurrentValue(1);
		        breathableComp.airSupply = 0;
		    }
		    assertBlockProperty(propertyName, value, blockLocation) {
		        this.test.assertBlockState(blockLocation, block => {
		            // Use any casting right now because getState returns a generic IBlockProperty which
		            // we won't be able to guarantee has a value field. This likely needs a closer look at the
		            // types. Will be addressed with ADO:926397 . Alongside the any casting, we also rely on `==` rather
		            // than `===` here as the tests rely on automatic type conversion for some of the tests to pass.
		            // This should be evaluated again in the future, ADO:927189
		            //
		            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access, eqeqeq
		            return block.permutation.getAllStates()[propertyName] == value;
		        });
		    }
		    giveItem(entity, itemType, amount = 1, slot = 0) {
		        const inventory = GameTestExtensions.getEntityComponentOrAssert(this.test, entity, 'inventory');
		        GameTestExtensions.assertDefined(inventory.container, 'Container should be defined');
		        inventory.container.addItem(new _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.ItemStack(itemType, amount));
		        if (entity instanceof _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Player) {
		            entity.selectedSlotIndex = slot;
		        }
		    }
		    getVineDirection(direction) {
		        switch (direction) {
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.North:
		                return 2;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.East:
		                return 3;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.South:
		                return 0;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.West:
		                return 1;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Up:
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Down:
		                this.test.fail('Unexpected direction passed to getVineDirection');
		                return -1;
		        }
		    }
		    getMultiFaceDirection(direction) {
		        switch (direction) {
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Down:
		                return 0;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Up:
		                return 1;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.North:
		                return 4;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.East:
		                return 5;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.South:
		                return 2;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.West:
		                return 3;
		        }
		    }
		    getFacingDirection(direction) {
		        switch (direction) {
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Down:
		                return 0;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.Up:
		                return 1;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.North:
		                return 2;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.East:
		                return 5;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.South:
		                return 3;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.West:
		                return 4;
		        }
		    }
		    rotateVolume(volume) {
		        switch (this.test.getTestDirection()) {
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.East:
		                volume.z = -volume.z;
		                break;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.West:
		                volume.x = -volume.x;
		                break;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.North:
		                volume.x = -volume.x;
		                volume.z = -volume.z;
		                break;
		        }
		        return volume;
		    }
		    rotateAngle(angle) {
		        switch (this.test.getTestDirection()) {
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.East:
		                angle -= 90;
		                break;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.West:
		                angle -= 270;
		                break;
		            case _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.Direction.North:
		                angle -= 180;
		                break;
		        }
		        if (angle < -180) {
		            angle += 360;
		        }
		        return angle;
		    }
		    isLocationInTest(worldLoc) {
		        const size = 4;
		        const loc = this.test.relativeBlockLocation(worldLoc);
		        return loc.x >= 0 && loc.y >= 0 && loc.z >= 0 && loc.x < size && loc.y < size && loc.z < size;
		    }
		    validateExpectedException(e, expectedException) {
		        if (expectedException !== undefined) {
		            let actualException = '';
		            if (typeof e === 'string') {
		                if (!e.includes(expectedException)) {
		                    actualException = e;
		                }
		                // eslint-disable-next-line unicorn/no-null
		            }
		            else if (typeof e === 'object' && e !== null && 'message' in e) {
		                if (!e.message.includes(expectedException)) {
		                    actualException = e.message;
		                }
		            }
		            else {
		                actualException = 'Unknown Exception';
		            }
		            if (actualException.length > 0) {
		                this.test.fail('An exception was thrown, but did not match the expected exception\nExpected: ' +
		                    expectedException +
		                    '\nActual: ' +
		                    actualException);
		            }
		        }
		    }
		    /**
		     * Returns when a throw occurs as expected, otherwise throws an error if the predicate did _not_ throw
		     * @param predicate - The predicate which should throw when called
		     * @param message - The message for the error when a throw does not occur as expected
		     * @param expectedException - The specific exception message expected when an error is thrown - Optional
		     */
		    expectThrow(predicate, message, expectedException) {
		        try {
		            predicate();
		        }
		        catch (e) {
		            this.validateExpectedException(e, expectedException);
		            return;
		        }
		        this.test.fail(message);
		    }
		    /**
		     * Returns when a throw occurs as expected, otherwise throws an error if the predicate did _not_ throw
		     * @param predicate - The predicate which should throw when called
		     * @param message - The message for the error when a throw does not occur as expected
		     * @param expectedException - The specific exception message expected when an error is thrown - Optional
		     */
		    async expectThrowAsync(predicate, message, expectedException) {
		        try {
		            await predicate();
		        }
		        catch (e) {
		            this.validateExpectedException(e, expectedException);
		            return;
		        }
		        this.test.fail(message);
		    }
		    /**
		     * Returns when a throw occurs as expected or if the predicate did _not_ throw. Otherwise throws an error as the predicate did throw an unexpected error.
		     * @param predicate - The predicate which should throw when called
		     * @param expectedException - The specific exception message expected when an error is thrown - Optional
		     */
		    async expectSuccessOrThrowKnownErrorAsync(predicate, expectedException) {
		        try {
		            await predicate();
		        }
		        catch (e) {
		            this.validateExpectedException(e, expectedException);
		        }
		    }
		    assertJsonEqual(actual, expected, failMsg) {
		        const expectedMsg = JSON.stringify(expected);
		        const actualMsg = JSON.stringify(actual);
		        return this.test.assert(expectedMsg === actualMsg, `${failMsg}\nExpected: ${expectedMsg}\nActual: ${actualMsg}`);
		    }
		    assertVectorEqual(actual, expected, failMsg) {
		        return this.test.assert(_minecraft_math__WEBPACK_IMPORTED_MODULE_0__.Vector3Utils.equals(expected, actual), `${failMsg}\nExpected: ${_minecraft_math__WEBPACK_IMPORTED_MODULE_0__.Vector3Utils.toString(expected)}\nActual: ${_minecraft_math__WEBPACK_IMPORTED_MODULE_0__.Vector3Utils.toString(actual)}`);
		    }
		    static assertDefined(value, message) {
		        if (value === undefined) {
		            throw Error(message);
		        }
		    }
		    static getItemTypeOrThrow(itemTypeId) {
		        const itemType = _minecraft_server_alpha_wrapper__WEBPACK_IMPORTED_MODULE_1__.ItemTypes.get(itemTypeId);
		        GameTestExtensions.assertDefined(itemType, `${itemTypeId} is not a valid item type`);
		        return itemType;
		    }
		    assertNumberEqual(expected, actual, msg) {
		        this.test.assert(expected === actual, `${msg}\n\tExpected: ${expected}\n\tActual: ${actual}`);
		    }
		}
		
		
		/***/ }),
		
		/***/ "@minecraft/server":
		/*!************************************!*\
		  !*** external "@minecraft/server" ***!
		  \************************************/
		/***/ ((module) => {
		
		var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }
		var y = x => () => x
		module.exports = __WEBPACK_EXTERNAL_MODULE__minecraft_server_fb7572af__;
		
		/***/ }),
		
		/***/ "@minecraft/server-gametest":
		/*!*********************************************!*\
		  !*** external "@minecraft/server-gametest" ***!
		  \*********************************************/
		/***/ ((module) => {
		
		var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }
		var y = x => () => x
		module.exports = __WEBPACK_EXTERNAL_MODULE__minecraft_server_gametest_e5aa2fb2__;
		
		/***/ })
		
		/******/ });
		/************************************************************************/
		/******/ // The module cache
		/******/ var __webpack_module_cache__ = {};
		/******/ 
		/******/ // The require function
		/******/ function __webpack_require__(moduleId) {
		/******/ 	// Check if module is in cache
		/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
		/******/ 	if (cachedModule !== undefined) {
		/******/ 		return cachedModule.exports;
		/******/ 	}
		/******/ 	// Create a new module (and put it into the cache)
		/******/ 	var module = __webpack_module_cache__[moduleId] = {
		/******/ 		// no module.id needed
		/******/ 		// no module.loaded needed
		/******/ 		exports: {}
		/******/ 	};
		/******/ 
		/******/ 	// Execute the module function
		/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/ 
		/******/ 	// Return the exports of the module
		/******/ 	return module.exports;
		/******/ }
		/******/ 
		/************************************************************************/
		/******/ /* webpack/runtime/compat get default export */
		/******/ (() => {
		/******/ 	// getDefaultExport function for compatibility with non-harmony modules
		/******/ 	__webpack_require__.n = (module) => {
		/******/ 		var getter = module && module.__esModule ?
		/******/ 			() => (module['default']) :
		/******/ 			() => (module);
		/******/ 		__webpack_require__.d(getter, { a: getter });
		/******/ 		return getter;
		/******/ 	};
		/******/ })();
		/******/ 
		/******/ /* webpack/runtime/define property getters */
		/******/ (() => {
		/******/ 	// define getter functions for harmony exports
		/******/ 	__webpack_require__.d = (exports, definition) => {
		/******/ 		for(var key in definition) {
		/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
		/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
		/******/ 			}
		/******/ 		}
		/******/ 	};
		/******/ })();
		/******/ 
		/******/ /* webpack/runtime/hasOwnProperty shorthand */
		/******/ (() => {
		/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
		/******/ })();
		/******/ 
		/******/ /* webpack/runtime/make namespace object */
		/******/ (() => {
		/******/ 	// define __esModule on exports
		/******/ 	__webpack_require__.r = (exports) => {
		/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
		/******/ 		}
		/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
		/******/ 	};
		/******/ })();
		/******/ 
		/************************************************************************/
		var __webpack_exports__ = {};
		// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
		(() => {
		/*!*********************!*\
		  !*** ./src/Main.ts ***!
		  \*********************/
		__webpack_require__.r(__webpack_exports__);
		/* harmony import */ var _scripts_AlphaTests__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/AlphaTests */ "./src/scripts/AlphaTests.ts");
		/* harmony import */ var _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @minecraft/server-wrapper */ "../../module-wrappers/server-wrapper/index.js");
		// Copyright (c) Mojang AB.  All rights reserved.
		
		
		_minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_1__.system.beforeEvents.watchdogTerminate.subscribe(e => {
		    e.cancel = true;
		});
		
		})();
		
		'''
Added behavior pack "warsaw_gametest":
	script "warsaw-gametest.js":
		'''
		/*!  Copyright (c) Mojang AB.  All rights reserved. */
		import * as __WEBPACK_EXTERNAL_MODULE__minecraft_server_fb7572af__ from "@minecraft/server";
		import * as __WEBPACK_EXTERNAL_MODULE__minecraft_server_gametest_e5aa2fb2__ from "@minecraft/server-gametest";
		/******/ var __webpack_modules__ = ({
		
		/***/ "./src/scripts/Redstone.js":
		/*!*********************************!*\
		  !*** ./src/scripts/Redstone.js ***!
		  \*********************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony import */ var _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server-wrapper */ "../../module-wrappers/server-wrapper/index.js");
		/* harmony import */ var _minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @minecraft/vanilla-data-wrapper */ "../../module-wrappers/vanilla-data-wrapper/lib-vanilla/index.js");
		/* harmony import */ var _minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @minecraft/server-gametest-wrapper */ "../../module-wrappers/server-gametest-wrapper/index.js");
		// Copyright (c) Mojang AB.  All rights reserved.
		
		
		
		
		
		async function getBlockInventoryComponentOrAssert(test, blockLoc) {
		    const block = test.getBlock(blockLoc);
		    const blockInventory = block.getComponent('inventory');
		    test.assert(blockInventory !== undefined, `Inventory component was not found on ${block.typeId}`);
		
		    return blockInventory.container;
		}
		async function getEntityInventoryComponentOrAssert(test, entity) {
		    const entityInventory = entity.getComponent('inventory');
		    test.assert(entityInventory !== undefined, `Inventory component was not found on ${entity.typeId}`);
		
		    return entityInventory.container;
		}
		function addItemsToContainer(containerComponent, itemStack, itemCount) {
		    containerComponent.clearAll();
		    for (let i = 0; i < itemCount; i++) {
		        containerComponent.addItem(itemStack);
		    }
		}
		async function matchRedstonePowerOrAssert(test, blockLoc, expectedPower) {
		    // test.assertRedstonePower(blockLoc, expectedPower);
		    const detectedPower = test.getBlock(blockLoc).getRedstonePower();
		    test.assert(
		        detectedPower === expectedPower,
		        `Detected ${detectedPower} but expected ${expectedPower} redstone output`
		    );
		}
		
		// test logic for comparator block inventory tests
		async function comparatorBlockInventoryOutputTestFunction(test, inventory, output, testData) {
		    const item = new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.Dirt);
		
		    test.idle(1);
		    for (let i = 0; i < testData.length; i++) {
		        addItemsToContainer(inventory, item, testData[i].itemCount);
		        // wait a moment for redstone comparator to update
		        await test.idle(3);
		        await matchRedstonePowerOrAssert(test, output, testData[i].expectedPower);
		    }
		}
		
		//Setup: Line of redstone connected into the comprator
		//Pass condition: Output signal strength is equal to input strength
		//Verifies: Comparator output maintains the input strength
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_maintain', test => {
		    const powerInput = { x: 3, y: 2, z: 2 };
		    const comparatorInput = { x: 1, y: 2, z: 1 };
		    const comparatorOutput = { x: 1, y: 2, z: 3 };
		
		    test.startSequence()
		        .thenWait(() => {
		            test.assertRedstonePower(comparatorInput, 0);
		            test.assertRedstonePower(comparatorOutput, 0);
		        })
		        .thenExecuteAfter(2, () => test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.RedstoneBlock, powerInput))
		        .thenWait(() => {
		            test.assertRedstonePower(comparatorInput, 13);
		            test.assertRedstonePower(comparatorOutput, 13);
		        })
		        .thenExecuteAfter(2, () => test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Air, powerInput))
		        .thenWait(() => {
		            test.assertRedstonePower(comparatorInput, 0);
		            test.assertRedstonePower(comparatorOutput, 0);
		        })
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:maintain')
		    .maxTicks(30)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Back and side input connected into the comparator
		//Pass condition: Output signal is only ON when side input is <= (or OFF) than back input
		//Verifies: Comparator output maintains the input strength
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_compare', test => {
		    const backInput14 = { x: 4, y: 3, z: 1 };
		    const sideInput13 = { x: 1, y: 3, z: 1 };
		    const sideInput14 = { x: 1, y: 3, z: 2 };
		    const sideInput15 = { x: 2, y: 3, z: 2 };
		    const output = { x: 3, y: 2, z: 3 };
		
		    test.startSequence()
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecute(() => test.pulseRedstone(backInput14, 4))
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 14))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput14, 4);
		            test.pulseRedstone(sideInput15, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 0))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput14, 4);
		            test.pulseRedstone(sideInput14, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 14))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput14, 4);
		            test.pulseRedstone(sideInput13, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 14))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:compare')
		    .maxTicks(30)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Back and side input connected into the comparator set into substract mode
		//Pass condition: Output signal equals back - side input
		//Verifies: Comparator output maintains the input strength
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_subtract', test => {
		    const backInput15 = { x: 3, y: 3, z: 1 };
		    const sideInput13 = { x: 1, y: 3, z: 1 };
		    const sideInput14 = { x: 1, y: 3, z: 2 };
		    const sideInput15 = { x: 2, y: 3, z: 2 };
		    const output = { x: 3, y: 2, z: 3 };
		
		    test.startSequence()
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecute(() => test.pulseRedstone(backInput15, 4))
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 15))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput15, 4);
		            test.pulseRedstone(sideInput15, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 0))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput15, 4);
		            test.pulseRedstone(sideInput14, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 1))
		        .thenExecute(() => {
		            test.pulseRedstone(backInput15, 4);
		            test.pulseRedstone(sideInput13, 4);
		        })
		        .thenWaitAfter(6, () => test.assertRedstonePower(output, 2))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:subtract')
		    .maxTicks(30)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator measuring directly, through an opaque block and through a transparent block
		//Pass condition: Comparator is ON when measuring directly and through opaque blocks, OFF through transparent
		//Verifies: Comparator can measure block state directly and through opaque blocks. Aims to test whether it works in general, not accurately
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_general', test => {
		    const outputDirect = { x: 1, y: 2, z: 1 };
		    const outputThroughBlock = { x: 2, y: 2, z: 3 };
		
		    // to switch to transparent block and check whether output is off
		    const blockPos = { x: 2, y: 2, z: 2 };
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => {
		            const chestBlock = test.getBlock({ x: 2, y: 2, z: 1 });
		            const chestInv = chestBlock.getComponent('inventory').container;
		            chestInv.addItem(new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.Dirt, 1));
		        })
		        .thenWait(() => {
		            test.assertRedstonePower(outputDirect, 1);
		            test.assertRedstonePower(outputThroughBlock, 1);
		        })
		        .thenExecuteAfter(2, () => test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Glass, blockPos))
		        .thenWait(() => test.assertRedstonePower(outputThroughBlock, 0))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_through_block')
		    .maxTicks(30)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator measuring differently stacking items
		//Pass condition: Stack of 64 produces the same output as stack of 16 and non-stackable items
		//Verifies: Comparator is on
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_stackables_and_nonstackables', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const dispenserPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Dispenser, dispenserPos);
		    const dispenserBlock = test.getBlock(dispenserPos);
		    const dispenserInv = dispenserBlock.getComponent('inventory').container;
		
		    const item64stack = new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.Dirt, 64);
		    const item16stack = new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.Egg, 16);
		    const itemNonStackable = new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.WoodenSword);
		
		    function add9Stacks(itemstack) {
		        for (let i = 0; i < 9; i++) {
		            dispenserInv.addItem(itemstack);
		        }
		    }
		
		    test.startSequence()
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => add9Stacks(item64stack))
		        .thenWait(() => test.assertRedstonePower(output, 15))
		        .thenExecuteAfter(2, () => dispenserInv.clearAll())
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => add9Stacks(item16stack))
		        .thenWait(() => test.assertRedstonePower(output, 15))
		        .thenExecuteAfter(2, () => dispenserInv.clearAll())
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => add9Stacks(itemNonStackable))
		        .thenWait(() => test.assertRedstonePower(output, 15))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(30)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a furnace
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_furnace', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Furnace, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 14 },
		        { expectedPower: 3, itemCount: 28 },
		        { expectedPower: 4, itemCount: 42 },
		        { expectedPower: 5, itemCount: 55 },
		        { expectedPower: 6, itemCount: 69 },
		        { expectedPower: 7, itemCount: 83 },
		        { expectedPower: 8, itemCount: 96 },
		        { expectedPower: 9, itemCount: 110 },
		        { expectedPower: 10, itemCount: 124 },
		        { expectedPower: 11, itemCount: 138 },
		        { expectedPower: 12, itemCount: 151 },
		        { expectedPower: 13, itemCount: 165 },
		        { expectedPower: 14, itemCount: 179 },
		        { expectedPower: 15, itemCount: 192 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a blast furnace
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_blast_furnace', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.BlastFurnace, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 14 },
		        { expectedPower: 3, itemCount: 28 },
		        { expectedPower: 4, itemCount: 42 },
		        { expectedPower: 5, itemCount: 55 },
		        { expectedPower: 6, itemCount: 69 },
		        { expectedPower: 7, itemCount: 83 },
		        { expectedPower: 8, itemCount: 96 },
		        { expectedPower: 9, itemCount: 110 },
		        { expectedPower: 10, itemCount: 124 },
		        { expectedPower: 11, itemCount: 138 },
		        { expectedPower: 12, itemCount: 151 },
		        { expectedPower: 13, itemCount: 165 },
		        { expectedPower: 14, itemCount: 179 },
		        { expectedPower: 15, itemCount: 192 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a smoker
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_smoker', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Smoker, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 14 },
		        { expectedPower: 3, itemCount: 28 },
		        { expectedPower: 4, itemCount: 42 },
		        { expectedPower: 5, itemCount: 55 },
		        { expectedPower: 6, itemCount: 69 },
		        { expectedPower: 7, itemCount: 83 },
		        { expectedPower: 8, itemCount: 96 },
		        { expectedPower: 9, itemCount: 110 },
		        { expectedPower: 10, itemCount: 124 },
		        { expectedPower: 11, itemCount: 138 },
		        { expectedPower: 12, itemCount: 151 },
		        { expectedPower: 13, itemCount: 165 },
		        { expectedPower: 14, itemCount: 179 },
		        { expectedPower: 15, itemCount: 192 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a hopper
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_hopper', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Hopper, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 23 },
		        { expectedPower: 3, itemCount: 46 },
		        { expectedPower: 4, itemCount: 69 },
		        { expectedPower: 5, itemCount: 92 },
		        { expectedPower: 6, itemCount: 115 },
		        { expectedPower: 7, itemCount: 138 },
		        { expectedPower: 8, itemCount: 160 },
		        { expectedPower: 9, itemCount: 183 },
		        { expectedPower: 10, itemCount: 206 },
		        { expectedPower: 11, itemCount: 229 },
		        { expectedPower: 12, itemCount: 252 },
		        { expectedPower: 13, itemCount: 275 },
		        { expectedPower: 14, itemCount: 298 },
		        { expectedPower: 15, itemCount: 320 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a hopper minecart on top of detector rail
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_hopper_minecart', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.DetectorRail, blockPos);
		    const entity = test.spawn(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftEntityTypes.HopperMinecart, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 23 },
		        { expectedPower: 3, itemCount: 46 },
		        { expectedPower: 4, itemCount: 69 },
		        { expectedPower: 5, itemCount: 92 },
		        { expectedPower: 6, itemCount: 115 },
		        { expectedPower: 7, itemCount: 138 },
		        { expectedPower: 8, itemCount: 160 },
		        { expectedPower: 9, itemCount: 183 },
		        { expectedPower: 10, itemCount: 206 },
		        { expectedPower: 11, itemCount: 229 },
		        { expectedPower: 12, itemCount: 252 },
		        { expectedPower: 13, itemCount: 275 },
		        { expectedPower: 14, itemCount: 298 },
		        { expectedPower: 15, itemCount: 320 },
		    ];
		
		    const inv = await getEntityInventoryComponentOrAssert(test, entity);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a brewing stand
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_brewing_stand', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.BrewingStand, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 23 },
		        { expectedPower: 3, itemCount: 46 },
		        { expectedPower: 4, itemCount: 69 },
		        { expectedPower: 5, itemCount: 92 },
		        { expectedPower: 6, itemCount: 115 },
		        { expectedPower: 7, itemCount: 138 },
		        { expectedPower: 8, itemCount: 160 },
		        { expectedPower: 9, itemCount: 183 },
		        { expectedPower: 10, itemCount: 206 },
		        { expectedPower: 11, itemCount: 229 },
		        { expectedPower: 12, itemCount: 252 },
		        { expectedPower: 13, itemCount: 275 },
		        { expectedPower: 14, itemCount: 298 },
		        { expectedPower: 15, itemCount: 320 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    // add one item to be consumed by the brewing stand,
		    // because otherwise all calculatorations are thrown out
		    // the consumed item is not counted after being consumed, so it works out
		    inv.setItem(4, new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.BlazePowder));
		    await test.idle(1);
		
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a dispenser
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_dispenser', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Dispenser, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 42 },
		        { expectedPower: 3, itemCount: 83 },
		        { expectedPower: 4, itemCount: 124 },
		        { expectedPower: 5, itemCount: 165 },
		        { expectedPower: 6, itemCount: 206 },
		        { expectedPower: 7, itemCount: 247 },
		        { expectedPower: 8, itemCount: 288 },
		        { expectedPower: 9, itemCount: 330 },
		        { expectedPower: 10, itemCount: 371 },
		        { expectedPower: 11, itemCount: 412 },
		        { expectedPower: 12, itemCount: 453 },
		        { expectedPower: 13, itemCount: 494 },
		        { expectedPower: 14, itemCount: 535 },
		        { expectedPower: 15, itemCount: 576 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a dropper
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_dropper', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Dropper, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 42 },
		        { expectedPower: 3, itemCount: 83 },
		        { expectedPower: 4, itemCount: 124 },
		        { expectedPower: 5, itemCount: 165 },
		        { expectedPower: 6, itemCount: 206 },
		        { expectedPower: 7, itemCount: 247 },
		        { expectedPower: 8, itemCount: 288 },
		        { expectedPower: 9, itemCount: 330 },
		        { expectedPower: 10, itemCount: 371 },
		        { expectedPower: 11, itemCount: 412 },
		        { expectedPower: 12, itemCount: 453 },
		        { expectedPower: 13, itemCount: 494 },
		        { expectedPower: 14, itemCount: 535 },
		        { expectedPower: 15, itemCount: 576 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a chest
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_single_chest', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Chest, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 124 },
		        { expectedPower: 3, itemCount: 247 },
		        { expectedPower: 4, itemCount: 371 },
		        { expectedPower: 5, itemCount: 494 },
		        { expectedPower: 6, itemCount: 618 },
		        { expectedPower: 7, itemCount: 741 },
		        { expectedPower: 8, itemCount: 864 },
		        { expectedPower: 9, itemCount: 988 },
		        { expectedPower: 10, itemCount: 1111 },
		        { expectedPower: 11, itemCount: 1235 },
		        { expectedPower: 12, itemCount: 1358 },
		        { expectedPower: 13, itemCount: 1482 },
		        { expectedPower: 14, itemCount: 1605 },
		        { expectedPower: 15, itemCount: 1728 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a chest minecart on top of detector rail
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_chest_minecart', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const railPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.DetectorRail, railPos);
		    const entity = test.spawn(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftEntityTypes.ChestMinecart, railPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 124 },
		        { expectedPower: 3, itemCount: 247 },
		        { expectedPower: 4, itemCount: 371 },
		        { expectedPower: 5, itemCount: 494 },
		        { expectedPower: 6, itemCount: 618 },
		        { expectedPower: 7, itemCount: 741 },
		        { expectedPower: 8, itemCount: 864 },
		        { expectedPower: 9, itemCount: 988 },
		        { expectedPower: 10, itemCount: 1111 },
		        { expectedPower: 11, itemCount: 1235 },
		        { expectedPower: 12, itemCount: 1358 },
		        { expectedPower: 13, itemCount: 1482 },
		        { expectedPower: 14, itemCount: 1605 },
		        { expectedPower: 15, itemCount: 1728 },
		    ];
		
		    const inv = await getEntityInventoryComponentOrAssert(test, entity);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a shulker
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_shulker', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.UndyedShulkerBox, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 124 },
		        { expectedPower: 3, itemCount: 247 },
		        { expectedPower: 4, itemCount: 371 },
		        { expectedPower: 5, itemCount: 494 },
		        { expectedPower: 6, itemCount: 618 },
		        { expectedPower: 7, itemCount: 741 },
		        { expectedPower: 8, itemCount: 864 },
		        { expectedPower: 9, itemCount: 988 },
		        { expectedPower: 10, itemCount: 1111 },
		        { expectedPower: 11, itemCount: 1235 },
		        { expectedPower: 12, itemCount: 1358 },
		        { expectedPower: 13, itemCount: 1482 },
		        { expectedPower: 14, itemCount: 1605 },
		        { expectedPower: 15, itemCount: 1728 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a barrel
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_barrel', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Barrel, blockPos);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 124 },
		        { expectedPower: 3, itemCount: 247 },
		        { expectedPower: 4, itemCount: 371 },
		        { expectedPower: 5, itemCount: 494 },
		        { expectedPower: 6, itemCount: 618 },
		        { expectedPower: 7, itemCount: 741 },
		        { expectedPower: 8, itemCount: 864 },
		        { expectedPower: 9, itemCount: 988 },
		        { expectedPower: 10, itemCount: 1111 },
		        { expectedPower: 11, itemCount: 1235 },
		        { expectedPower: 12, itemCount: 1358 },
		        { expectedPower: 13, itemCount: 1482 },
		        { expectedPower: 14, itemCount: 1605 },
		        { expectedPower: 15, itemCount: 1728 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a jukebox
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_jukebox', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const blockPos = { x: 1, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Jukebox, blockPos);
		    const testData = [
		        { expectedPower: 1, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDisc13) },
		        { expectedPower: 2, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscCat) },
		        // switch up the order so that the same redstone powers are not next to each other
		        // if they were, they would pass the redstone power check immediatelly before the comparator could update
		        { expectedPower: 14, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscRelic) },
		        { expectedPower: 3, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscBlocks) },
		        { expectedPower: 4, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscChirp) },
		        { expectedPower: 5, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscFar) },
		        { expectedPower: 6, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscMall) },
		        { expectedPower: 7, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscMellohi) },
		        { expectedPower: 8, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscStal) },
		        { expectedPower: 9, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscStrad) },
		        { expectedPower: 10, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscWard) },
		        { expectedPower: 11, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDisc11) },
		        { expectedPower: 12, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscWait) },
		        { expectedPower: 13, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscPigstep) },
		        { expectedPower: 14, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDiscOtherside) },
		        { expectedPower: 15, disc: new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.MusicDisc5) },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, blockPos);
		
		    test.idle(1);
		    for (let i = 0; i < testData.length; i++) {
		        addItemsToContainer(inv, testData[i].disc, 1);
		        // wait a moment for redstone comparator to update
		        await test.idle(3);
		        await matchRedstonePowerOrAssert(test, output, testData[i].expectedPower);
		    }
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a chest
		//Pass condition: Comparator output increases strength in order from 0 to 15 based on number of items inside
		//Verifies: Comparator strength accurately scales with the fullness of the container
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.registerAsync('warsaw', 'comparator_measure_double_chest', async test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const chestPos1 = { x: 1, y: 2, z: 1 };
		    const chestPos2 = { x: 2, y: 2, z: 1 };
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Chest, chestPos1);
		    test.setBlockType(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftBlockTypes.Chest, chestPos2);
		    const testData = [
		        { expectedPower: 0, itemCount: 0 },
		        { expectedPower: 1, itemCount: 1 },
		        { expectedPower: 2, itemCount: 247 },
		        { expectedPower: 3, itemCount: 494 },
		        { expectedPower: 4, itemCount: 741 },
		        { expectedPower: 5, itemCount: 988 },
		        { expectedPower: 6, itemCount: 1235 },
		        { expectedPower: 7, itemCount: 1482 },
		        { expectedPower: 8, itemCount: 1728 },
		        { expectedPower: 9, itemCount: 1975 },
		        { expectedPower: 10, itemCount: 2222 },
		        { expectedPower: 11, itemCount: 2469 },
		        { expectedPower: 12, itemCount: 2716 },
		        { expectedPower: 13, itemCount: 2963 },
		        { expectedPower: 14, itemCount: 3210 },
		        { expectedPower: 15, itemCount: 3456 },
		    ];
		
		    const inv = await getBlockInventoryComponentOrAssert(test, chestPos1);
		    await comparatorBlockInventoryOutputTestFunction(test, inv, output, testData);
		    test.succeed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(80)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a bee nest and then a beehive
		//Pass condition: Output equals the current honey level for all honey levels
		//Verifies: Comparator output is equal to current honey level inside the bee nest and beehive
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_beehive_and_beenest', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const hivePos = { x: 1, y: 2, z: 1 };
		
		    function placeHive(hiveType, honeyLevel) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve(hiveType, { honey_level: honeyLevel });
		        test.setBlockPermutation(perm, hivePos);
		    }
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 0))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 3))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 4))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => placeHive('bee_nest', 5))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenExecuteAfter(2, () => placeHive('beehive', 0))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => placeHive('beehive', 1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeHive('beehive', 2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeHive('beehive', 3))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeHive('beehive', 4))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => placeHive('beehive', 5))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(50)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a cake
		//Pass condition: Output scales with how much cake there is
		//Verifies: Comparator output is reduced by 2 for every missing slice, full cake is 14 strength
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_cake', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const cakePos = { x: 1, y: 2, z: 1 };
		
		    function placeCake(bite_counter) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('cake', { bite_counter });
		        test.setBlockPermutation(perm, cakePos);
		    }
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeCake(0))
		        .thenWait(() => test.assertRedstonePower(output, 14))
		        .thenExecuteAfter(2, () => placeCake(1))
		        .thenWait(() => test.assertRedstonePower(output, 12))
		        .thenExecuteAfter(2, () => placeCake(2))
		        .thenWait(() => test.assertRedstonePower(output, 10))
		        .thenExecuteAfter(2, () => placeCake(3))
		        .thenWait(() => test.assertRedstonePower(output, 8))
		        .thenExecuteAfter(2, () => placeCake(4))
		        .thenWait(() => test.assertRedstonePower(output, 6))
		        .thenExecuteAfter(2, () => placeCake(5))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => placeCake(6))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(50)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a cauldron
		//Pass condition: Comparator output is either 1, 2 or 3, depending on the fill_level
		//Verifies: Output scales with how much liquid there is
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'measure_cauldron', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const cauldronPos = { x: 1, y: 2, z: 1 };
		
		    function placeCauldron(liquidType, fill_level) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('cauldron', { cauldron_liquid: liquidType, fill_level });
		        test.setBlockPermutation(perm, cauldronPos);
		    }
		
		    // the order of fill_levels is shuffled, that way
		    // the individual strength tests don't pass before the comparator output updates
		    // no two same strength tests are next to each other
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeCauldron('lava', 1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('lava', 3))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeCauldron('lava', 6))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('lava', 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('lava', 5))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('lava', 4))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeCauldron('water', 1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('water', 3))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeCauldron('water', 6))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('water', 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('water', 5))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('water', 4))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 3))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 6))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 5))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeCauldron('powder_snow', 4))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a composter
		//Pass condition: Output is between 0 and 8, depending on amount of compost
		//Verifies: Output scales with how much compost is inside the block
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_composter', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const composterPos = { x: 1, y: 2, z: 1 };
		
		    function placeComposter(composter_fill_level) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('composter', { composter_fill_level });
		        test.setBlockPermutation(perm, composterPos);
		    }
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeComposter(1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => placeComposter(2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => placeComposter(3))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeComposter(4))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => placeComposter(5))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenExecuteAfter(2, () => placeComposter(6))
		        .thenWait(() => test.assertRedstonePower(output, 6))
		        .thenExecuteAfter(2, () => placeComposter(7))
		        .thenWait(() => test.assertRedstonePower(output, 7))
		        .thenExecuteAfter(2, () => placeComposter(8))
		        .thenWait(() => test.assertRedstonePower(output, 8))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(50)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a command block
		//Pass condition: Output 1 when the command succeed and output 1-15 depending on the successCount
		// for commands like "/execute"
		//Verifies: Comparator output is tied to the command success (and in case of "execute", to successCount)
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_command_block', test => {
		    const powerA = { x: 2, y: 2, z: 1 };
		    const itemInputA = { x: 1.5, y: 3.1, z: 1.5 };
		    const outputA = { x: 1, y: 2, z: 2 };
		
		    const powerB = { x: 3, y: 2, z: 1 };
		    const itemInputB = { x: 3.5, y: 3.1, z: 2.5 };
		    const outputB = { x: 2, y: 2, z: 2 };
		
		    function spawnNonStackableItem(count, where) {
		        const nonStackableItemstack = new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack('wooden_sword');
		        for (let i = 0; i < count; i++) {
		            test.spawnItem(nonStackableItemstack, where);
		        }
		    }
		    function pulseBothCommandBlocks() {
		        test.pulseRedstone(powerA, 4);
		        test.pulseRedstone(powerB, 4);
		    }
		
		    test.startSequence()
		        // make sure both comparators are OFF
		        .thenWait(() => {
		            test.assertRedstonePower(outputA, 0);
		            test.assertRedstonePower(outputB, 0);
		        })
		        // spawn 1 item for commandBlock A and expect output 1
		        .thenExecute(() => spawnNonStackableItem(1, itemInputA))
		        .thenExecuteAfter(2, () => test.pulseRedstone(powerA, 4))
		        .thenWait(() => test.assertRedstonePower(outputA, 1))
		        .thenExecute(() => test.killAllEntities())
		        // spawn 8 on A, 5 on B, expect output: 8-5 -> 3
		        .thenExecute(() => {
		            spawnNonStackableItem(8, itemInputA);
		            spawnNonStackableItem(5, itemInputB);
		        })
		        .thenExecuteAfter(2, pulseBothCommandBlocks)
		        .thenWait(() => {
		            test.assertRedstonePower(outputA, 3); // 8-5 -> 3
		            test.assertRedstonePower(outputB, 5);
		        })
		        .thenExecute(() => test.killAllEntities())
		        // technically successCount can be more than 15, and the comparator outputs more
		        // but as soon as redstone is connected, that value is clamped to max15
		        // I have not found any circuit that could use it, except subtracting from it
		        // in this case, outputA is technically 23
		        // and we subtract outputB 13 from it, to produce 10
		        .thenExecute(() => {
		            spawnNonStackableItem(23, itemInputA);
		            spawnNonStackableItem(13, itemInputB);
		        })
		        .thenExecuteAfter(2, pulseBothCommandBlocks)
		        .thenWait(() => {
		            test.assertRedstonePower(outputA, 10); // 23-13 -> 10
		        })
		        // do another crazy comparator math
		        .thenExecute(() => test.killAllEntities())
		        // spawn 19 on A, 11 on B, expect: 19-11 -> 8
		        .thenExecute(() => {
		            spawnNonStackableItem(19, itemInputA);
		            spawnNonStackableItem(11, itemInputB);
		        })
		        .thenExecuteAfter(2, pulseBothCommandBlocks)
		        .thenWait(() => {
		            test.assertRedstonePower(outputA, 8); // 19-11 -> 8
		        })
		        .thenExecute(() => test.killAllEntities())
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_impulse_command_block')
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to an end portal frame
		//Pass condition: Output is 15 when eye is inside, 0 otherwise
		//Verifies: Comparator can read whether eye of ender is inside the portal frame
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_end_portal_frame', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const endPortalFramePos = { x: 1, y: 2, z: 1 };
		
		    function placeEndFrame(isEyeInside) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('end_portal_frame', { end_portal_eye_bit: isEyeInside });
		        test.setBlockPermutation(perm, endPortalFramePos);
		    }
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeEndFrame(true))
		        .thenWait(() => test.assertRedstonePower(output, 15))
		        .thenExecuteAfter(2, () => placeEndFrame(false))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(50)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to an item frame
		//Pass condition: Output is between 1 and 8, depending on amount of compost
		//Verifies: Output scales with how much compost is inside the block
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_item_frames', test => {
		    const output = { x: 1, y: 2, z: 3 };
		
		    const itemFramePos = { x: 1, y: 2, z: 1 };
		
		    // spawn a simulated player and add a torch into the main hand
		    const simPlayer = test.spawnSimulatedPlayer(itemFramePos, 'ItemFrame rotator', _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.GameMode.survival);
		    simPlayer.getComponent('inventory').container.addItem(new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack('redstone_torch', 2));
		
		    const itemFrameBlock = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('frame', { facing_direction: 2 });
		    const glowItemFrameBlock = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('glow_frame', { facing_direction: 2 });
		
		    test.startSequence()
		        // set an empty item frame
		        .thenExecuteAfter(2, () => test.setBlockPermutation(itemFrameBlock, itemFramePos))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        // first interact puts the redstone torch inside the item frame
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 6))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 7))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 8))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        // set an empty item frame
		        .thenExecuteAfter(2, () => test.setBlockPermutation(glowItemFrameBlock, itemFramePos))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        // first interact puts the redstone torch inside the item frame
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 6))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 7))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 8))
		        .thenExecuteAfter(2, () => simPlayer.interactWithBlock(itemFramePos, 2))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank_through_block')
		    .setupTicks(10)
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to 20 lecterns, each with a book set to a different page
		//Pass condition: Output follows the Math.floor(1 + ((currentPage - 1) / (numberOfPages - 1)) * 14) formula
		//Verifies: Lectern creates signal strength depends on the currently selected page
		//Note: Due to how the book UI looks, two pages are displayed at once,
		//      the currentPage in the equation above is always the one on the right
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_lectern', test => {
		    test.startSequence()
		        // book length 30 | currentPages 1-2 (2 on the right) | expect strength: 1
		        .thenWait(() => test.assertRedstonePower({ x: 1, y: 2, z: 2 }, 1))
		
		        // book length 30 | currentPages 3-4 (4 on the right) | expect strength: 2
		        .thenWait(() => test.assertRedstonePower({ x: 2, y: 2, z: 2 }, 2))
		
		        // book length 30 | currentPages 5-6 (6 on the right) | expect strength: 3
		        .thenWait(() => test.assertRedstonePower({ x: 3, y: 2, z: 2 }, 3))
		
		        // book length 30 | currentPages 7-8 (8 on the right) | expect strength: 4
		        .thenWait(() => test.assertRedstonePower({ x: 4, y: 2, z: 2 }, 4))
		
		        // book length 30 | currentPages 9-10 (10 on the right) | expect strength: 5
		        .thenWait(() => test.assertRedstonePower({ x: 5, y: 2, z: 2 }, 5))
		
		        // book length 30 | currentPages 11-12 (12 on the right) | expect strength: 6
		        .thenWait(() => test.assertRedstonePower({ x: 6, y: 2, z: 2 }, 6))
		
		        // book length 30 | currentPages 13-14 (14 on the right) | expect strength: 7
		        .thenWait(() => test.assertRedstonePower({ x: 7, y: 2, z: 2 }, 7))
		
		        // book length 30 | currentPages 15-16 (16 on the right) | expect strength: 8
		        .thenWait(() => test.assertRedstonePower({ x: 8, y: 2, z: 2 }, 8))
		
		        // book length 30 | currentPages 17-18 (18 on the right) | expect strength: 9
		        .thenWait(() => test.assertRedstonePower({ x: 9, y: 2, z: 2 }, 9))
		
		        // book length 30 | currentPages 19-20 (20 on the right) | expect strength: 10
		        .thenWait(() => test.assertRedstonePower({ x: 10, y: 2, z: 2 }, 10))
		
		        // book length 30 | currentPages 21-22 (22 on the right) | expect strength: 11
		        .thenWait(() => test.assertRedstonePower({ x: 1, y: 2, z: 4 }, 11))
		
		        // book length 30 | currentPages 23-24 (24 on the right) | expect strength: 12
		        .thenWait(() => test.assertRedstonePower({ x: 2, y: 2, z: 4 }, 12))
		
		        // book length 30 | currentPages 25-26 (26 on the right) | expect strength: 13
		        .thenWait(() => test.assertRedstonePower({ x: 3, y: 2, z: 4 }, 13))
		
		        // book length 30 | currentPages 27-28 (28 on the right) | expect strength: 14
		        .thenWait(() => test.assertRedstonePower({ x: 4, y: 2, z: 4 }, 14))
		
		        // book length 30 | currentPages 29-30 (30 on the right) | expect strength: 15
		        .thenWait(() => test.assertRedstonePower({ x: 5, y: 2, z: 4 }, 15))
		
		        // Additional tests to verify the formula
		        // empty lectern | no book, no redstone output | expect strength: 0
		        .thenWait(() => test.assertRedstonePower({ x: 6, y: 2, z: 4 }, 0))
		
		        // book length 50 (max) | currentPages 25-26
		        // expect strength: Math.floor(1 + ((currentPage - 1) / (numberOfPages - 1)) * 14) =>
		        // Math.floor(1 + ((26 - 1) / (50 - 1)) * 14) =>
		        // Math.floor(1 + (25 / 49) * 14) => Math.floor(1 + 0.5102040816326531 * 14) =>
		        // Math.floor(1 + 7.142857142857143) => 8
		        .thenWait(() => test.assertRedstonePower({ x: 7, y: 2, z: 4 }, 8))
		
		        // book length 50 (max) | currentPages 17-18
		        // expect strength: Math.floor(1 + ((currentPage - 1) / (numberOfPages - 1)) * 14) =>
		        // Math.floor(1 + ((18 - 1) / (50 - 1)) * 14) =>
		        // Math.floor(1 + (17 / 49) * 14) => Math.floor(1 + 0.3469387755102041 * 14) =>
		        // Math.floor(1 + 4.857142857142857) => 5
		        .thenWait(() => test.assertRedstonePower({ x: 8, y: 2, z: 4 }, 5))
		
		        // book length 34 | currentPages 21-22
		        // expect strength: Math.floor(1 + ((currentPage - 1) / (numberOfPages - 1)) * 14) =>
		        // Math.floor(1 + ((22 - 1) / (34 - 1)) * 14) =>
		        // Math.floor(1 + (21 / 33) * 14) => Math.floor(1 + 0.6363636363636364 * 14) =>
		        // Math.floor(1 + 8.909090909090908) => 9
		        .thenWait(() => test.assertRedstonePower({ x: 9, y: 2, z: 4 }, 9))
		
		        // book length 1 | currentPages 1-1 | expect power: 15
		        // which for some reason is treated as length: 2 and currentPage: 2
		        // or some special logic is used for book lengths of 1
		        // because if not, its divide by 0 error
		        .thenWait(() => test.assertRedstonePower({ x: 10, y: 2, z: 4 }, 15))
		
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_20_lecterns')
		    .setupTicks(10)
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a respawn anchor
		//Pass condition: Output is 0 when empty, then 3, 7, 11, 15 depending on the numberOfCharges
		//Verifies: Comparator can read the state of the respawn anchor block
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_respawn_anchor', test => {
		    const output = { x: 1, y: 2, z: 2 };
		
		    const respawnAnchorPos = { x: 1, y: 2, z: 1 };
		
		    function placeRespawnAnchor(chargeLevel) {
		        const perm = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('respawn_anchor', { respawn_anchor_charge: chargeLevel });
		        test.setBlockPermutation(perm, respawnAnchorPos);
		    }
		
		    test.startSequence()
		        .thenExecuteAfter(2, () => placeRespawnAnchor(0))
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(2, () => placeRespawnAnchor(1))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(2, () => placeRespawnAnchor(2))
		        .thenWait(() => test.assertRedstonePower(output, 7))
		        .thenExecuteAfter(2, () => placeRespawnAnchor(3))
		        .thenWait(() => test.assertRedstonePower(output, 11))
		        .thenExecuteAfter(2, () => placeRespawnAnchor(4))
		        .thenWait(() => test.assertRedstonePower(output, 15))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank')
		    .maxTicks(50)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		//Setup: Comparator connected to a chiseled bookshelf
		//Pass condition: Output is 0 if bookshelf wasn't interacted with, otherwise the index of last interacted slot
		//Verifies: Chiseled bookshelf produces signal strength based on the last interacted slot
		_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.register('warsaw', 'comparator_measure_chiseled_bookshelf', test => {
		    const output = { x: 1, y: 2, z: 3 };
		
		    const chiseledBookshelfPos = { x: 1, y: 2, z: 2 };
		
		    const chiselefBookshelfBlock = _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation.resolve('chiseled_bookshelf', { direction: 2 });
		    test.setBlockPermutation(chiselefBookshelfBlock, chiseledBookshelfPos);
		
		    // spawn a simulated player and add books into the main hand
		    const simPlayer = test.spawnSimulatedPlayer({ x: 1, y: 2, z: 1 }, 'ChiseledBookshelf filler', _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.GameMode.survival);
		    simPlayer.getComponent('inventory').container.addItem(new _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.ItemStack(_minecraft_vanilla_data_wrapper__WEBPACK_IMPORTED_MODULE_1__.MinecraftItemTypes.Book, 6));
		
		    // these faceXYs are wacky, they will work in this rotation only
		    // I can't seem to figure out the relationship between facing rotation and 0 0 of the face
		    const faceXYsOfBooks = {
		        book1: { x: 0.8, y: 0.75, z: 0 },
		        book2: { x: 0.5, y: 0.75, z: 0 },
		        book3: { x: 0.2, y: 0.75, z: 0 },
		        book4: { x: 0.8, y: 0.25, z: 0 },
		        book5: { x: 0.5, y: 0.25, z: 0 },
		        book6: { x: 0.2, y: 0.25, z: 0 },
		    };
		
		    function putBookInBookshelf(bookIndex) {
		        simPlayer.useItemInSlotOnBlock(0, chiseledBookshelfPos, _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_0__.Direction.North, bookIndex);
		    }
		
		    test.startSequence()
		        .thenWait(() => test.assertRedstonePower(output, 0))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book1))
		        .thenWait(() => test.assertRedstonePower(output, 1))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book2))
		        .thenWait(() => test.assertRedstonePower(output, 2))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book3))
		        .thenWait(() => test.assertRedstonePower(output, 3))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book4))
		        .thenWait(() => test.assertRedstonePower(output, 4))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book5))
		        .thenWait(() => test.assertRedstonePower(output, 5))
		        .thenExecuteAfter(10, () => putBookInBookshelf(faceXYsOfBooks.book6))
		        .thenWait(() => test.assertRedstonePower(output, 6))
		        .thenSucceed();
		})
		    .structureName('redstone/comparator:measure_blank_through_block')
		    .maxTicks(100)
		    .tag('redstone')
		    .tag(_minecraft_server_gametest_wrapper__WEBPACK_IMPORTED_MODULE_2__.Tags.suiteDefault);
		
		
		/***/ }),
		
		/***/ "../../module-wrappers/server-gametest-wrapper/index.js":
		/*!**************************************************************!*\
		  !*** ../../module-wrappers/server-gametest-wrapper/index.js ***!
		  \**************************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   FenceConnectivity: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.FenceConnectivity),
		/* harmony export */   GameTestDebug: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestDebug),
		/* harmony export */   GameTestError: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestError),
		/* harmony export */   GameTestErrorContext: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestErrorContext),
		/* harmony export */   GameTestErrorType: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestErrorType),
		/* harmony export */   GameTestSequence: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.GameTestSequence),
		/* harmony export */   LookDuration: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.LookDuration),
		/* harmony export */   MoveToOptions: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.MoveToOptions),
		/* harmony export */   NavigationResult: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.NavigationResult),
		/* harmony export */   RegistrationBuilder: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.RegistrationBuilder),
		/* harmony export */   SculkSpreader: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.SculkSpreader),
		/* harmony export */   SimulatedPlayer: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.SimulatedPlayer),
		/* harmony export */   Tags: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.Tags),
		/* harmony export */   Test: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.Test),
		/* harmony export */   register: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.register),
		/* harmony export */   registerAsync: () => (/* reexport safe */ _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__.registerAsync)
		/* harmony export */ });
		/* harmony import */ var _minecraft_server_gametest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server-gametest */ "@minecraft/server-gametest");
		
		
		
		/***/ }),
		
		/***/ "../../module-wrappers/server-wrapper/index.js":
		/*!*****************************************************!*\
		  !*** ../../module-wrappers/server-wrapper/index.js ***!
		  \*****************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   BiomeSearchOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeSearchOptions),
		/* harmony export */   BiomeType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeType),
		/* harmony export */   BiomeTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BiomeTypes),
		/* harmony export */   Block: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Block),
		/* harmony export */   BlockComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponent),
		/* harmony export */   BlockComponentEntityFallOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentEntityFallOnEvent),
		/* harmony export */   BlockComponentOnPlaceEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentOnPlaceEvent),
		/* harmony export */   BlockComponentPlayerDestroyEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerDestroyEvent),
		/* harmony export */   BlockComponentPlayerInteractEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerInteractEvent),
		/* harmony export */   BlockComponentPlayerPlaceBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentPlayerPlaceBeforeEvent),
		/* harmony export */   BlockComponentRandomTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRandomTickEvent),
		/* harmony export */   BlockComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentRegistry),
		/* harmony export */   BlockComponentStepOffEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOffEvent),
		/* harmony export */   BlockComponentStepOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentStepOnEvent),
		/* harmony export */   BlockComponentTickEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTickEvent),
		/* harmony export */   BlockComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockComponentTypes),
		/* harmony export */   BlockCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponent),
		/* harmony export */   BlockCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentAlreadyRegisteredError),
		/* harmony export */   BlockCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewComponentError),
		/* harmony export */   BlockCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadNewEventError),
		/* harmony export */   BlockCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockCustomComponentReloadVersionError),
		/* harmony export */   BlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEvent),
		/* harmony export */   BlockEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockEventOptions),
		/* harmony export */   BlockExplodeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEvent),
		/* harmony export */   BlockExplodeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockExplodeAfterEventSignal),
		/* harmony export */   BlockFillOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFillOptions),
		/* harmony export */   BlockFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFilter),
		/* harmony export */   BlockFluidContainerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockFluidContainerComponent),
		/* harmony export */   BlockHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockHitInformation),
		/* harmony export */   BlockInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockInventoryComponent),
		/* harmony export */   BlockLocationIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockLocationIterator),
		/* harmony export */   BlockPermutation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPermutation),
		/* harmony export */   BlockPistonComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonComponent),
		/* harmony export */   BlockPistonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockPistonState),
		/* harmony export */   BlockRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastHit),
		/* harmony export */   BlockRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRaycastOptions),
		/* harmony export */   BlockRecordPlayerComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockRecordPlayerComponent),
		/* harmony export */   BlockSignComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockSignComponent),
		/* harmony export */   BlockStateType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStateType),
		/* harmony export */   BlockStates: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockStates),
		/* harmony export */   BlockType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockType),
		/* harmony export */   BlockTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockTypes),
		/* harmony export */   BlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolume),
		/* harmony export */   BlockVolumeBase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeBase),
		/* harmony export */   BlockVolumeIntersection: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BlockVolumeIntersection),
		/* harmony export */   BoundingBox: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBox),
		/* harmony export */   BoundingBoxUtils: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.BoundingBoxUtils),
		/* harmony export */   ButtonPushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEvent),
		/* harmony export */   ButtonPushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonPushAfterEventSignal),
		/* harmony export */   ButtonState: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ButtonState),
		/* harmony export */   Camera: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Camera),
		/* harmony export */   CameraDefaultOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraDefaultOptions),
		/* harmony export */   CameraEaseOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraEaseOptions),
		/* harmony export */   CameraFadeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeOptions),
		/* harmony export */   CameraFadeTimeOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFadeTimeOptions),
		/* harmony export */   CameraFixedBoomOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraFixedBoomOptions),
		/* harmony export */   CameraSetFacingOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetFacingOptions),
		/* harmony export */   CameraSetLocationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetLocationOptions),
		/* harmony export */   CameraSetPosOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetPosOptions),
		/* harmony export */   CameraSetRotOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraSetRotOptions),
		/* harmony export */   CameraTargetOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CameraTargetOptions),
		/* harmony export */   ChatSendAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEvent),
		/* harmony export */   ChatSendAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendAfterEventSignal),
		/* harmony export */   ChatSendBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEvent),
		/* harmony export */   ChatSendBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ChatSendBeforeEventSignal),
		/* harmony export */   ClientSystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ClientSystemInfo),
		/* harmony export */   CommandError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandError),
		/* harmony export */   CommandResult: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CommandResult),
		/* harmony export */   Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Component),
		/* harmony export */   CompoundBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolume),
		/* harmony export */   CompoundBlockVolumeAction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeAction),
		/* harmony export */   CompoundBlockVolumeItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumeItem),
		/* harmony export */   CompoundBlockVolumePositionRelativity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CompoundBlockVolumePositionRelativity),
		/* harmony export */   Container: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Container),
		/* harmony export */   ContainerSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ContainerSlot),
		/* harmony export */   CustomComponentInvalidRegistryError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentInvalidRegistryError),
		/* harmony export */   CustomComponentNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameError),
		/* harmony export */   CustomComponentNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.CustomComponentNameErrorReason),
		/* harmony export */   DataDrivenEntityTriggerAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEvent),
		/* harmony export */   DataDrivenEntityTriggerAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DataDrivenEntityTriggerAfterEventSignal),
		/* harmony export */   DefinitionModifier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DefinitionModifier),
		/* harmony export */   Difficulty: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Difficulty),
		/* harmony export */   Dimension: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Dimension),
		/* harmony export */   DimensionLocation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionLocation),
		/* harmony export */   DimensionType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionType),
		/* harmony export */   DimensionTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DimensionTypes),
		/* harmony export */   Direction: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Direction),
		/* harmony export */   DisplaySlotId: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DisplaySlotId),
		/* harmony export */   DyeColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.DyeColor),
		/* harmony export */   EasingType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EasingType),
		/* harmony export */   Effect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Effect),
		/* harmony export */   EffectAddAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEvent),
		/* harmony export */   EffectAddAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddAfterEventSignal),
		/* harmony export */   EffectAddBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEvent),
		/* harmony export */   EffectAddBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectAddBeforeEventSignal),
		/* harmony export */   EffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectType),
		/* harmony export */   EffectTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EffectTypes),
		/* harmony export */   Enchantment: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Enchantment),
		/* harmony export */   EnchantmentLevelOutOfBoundsError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentLevelOutOfBoundsError),
		/* harmony export */   EnchantmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentSlot),
		/* harmony export */   EnchantmentType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentType),
		/* harmony export */   EnchantmentTypeNotCompatibleError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeNotCompatibleError),
		/* harmony export */   EnchantmentTypeUnknownIdError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypeUnknownIdError),
		/* harmony export */   EnchantmentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EnchantmentTypes),
		/* harmony export */   Entity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Entity),
		/* harmony export */   EntityAddRiderComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAddRiderComponent),
		/* harmony export */   EntityAgeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAgeableComponent),
		/* harmony export */   EntityApplyDamageByProjectileOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageByProjectileOptions),
		/* harmony export */   EntityApplyDamageOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityApplyDamageOptions),
		/* harmony export */   EntityAttributeComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityAttributeComponent),
		/* harmony export */   EntityBaseMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBaseMovementComponent),
		/* harmony export */   EntityBreathableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityBreathableComponent),
		/* harmony export */   EntityCanClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanClimbComponent),
		/* harmony export */   EntityCanFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanFlyComponent),
		/* harmony export */   EntityCanPowerJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityCanPowerJumpComponent),
		/* harmony export */   EntityColor2Component: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColor2Component),
		/* harmony export */   EntityColorComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityColorComponent),
		/* harmony export */   EntityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponent),
		/* harmony export */   EntityComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityComponentTypes),
		/* harmony export */   EntityDamageCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageCause),
		/* harmony export */   EntityDamageSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDamageSource),
		/* harmony export */   EntityDataDrivenTriggerEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDataDrivenTriggerEventOptions),
		/* harmony export */   EntityDefinitionFeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDefinitionFeedItem),
		/* harmony export */   EntityDieAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEvent),
		/* harmony export */   EntityDieAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityDieAfterEventSignal),
		/* harmony export */   EntityEffectOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEffectOptions),
		/* harmony export */   EntityEquippableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEquippableComponent),
		/* harmony export */   EntityEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityEventOptions),
		/* harmony export */   EntityFilter: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFilter),
		/* harmony export */   EntityFireImmuneComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFireImmuneComponent),
		/* harmony export */   EntityFloatsInLiquidComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFloatsInLiquidComponent),
		/* harmony export */   EntityFlyingSpeedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFlyingSpeedComponent),
		/* harmony export */   EntityFrictionModifierComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityFrictionModifierComponent),
		/* harmony export */   EntityGroundOffsetComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityGroundOffsetComponent),
		/* harmony export */   EntityHealableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealableComponent),
		/* harmony export */   EntityHealthChangedAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEvent),
		/* harmony export */   EntityHealthChangedAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthChangedAfterEventSignal),
		/* harmony export */   EntityHealthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHealthComponent),
		/* harmony export */   EntityHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEvent),
		/* harmony export */   EntityHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitBlockAfterEventSignal),
		/* harmony export */   EntityHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEvent),
		/* harmony export */   EntityHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitEntityAfterEventSignal),
		/* harmony export */   EntityHitInformation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHitInformation),
		/* harmony export */   EntityHurtAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEvent),
		/* harmony export */   EntityHurtAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityHurtAfterEventSignal),
		/* harmony export */   EntityInitializationCause: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInitializationCause),
		/* harmony export */   EntityInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityInventoryComponent),
		/* harmony export */   EntityIsBabyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsBabyComponent),
		/* harmony export */   EntityIsChargedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChargedComponent),
		/* harmony export */   EntityIsChestedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsChestedComponent),
		/* harmony export */   EntityIsDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsDyeableComponent),
		/* harmony export */   EntityIsHiddenWhenInvisibleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsHiddenWhenInvisibleComponent),
		/* harmony export */   EntityIsIgnitedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIgnitedComponent),
		/* harmony export */   EntityIsIllagerCaptainComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsIllagerCaptainComponent),
		/* harmony export */   EntityIsSaddledComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsSaddledComponent),
		/* harmony export */   EntityIsShakingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShakingComponent),
		/* harmony export */   EntityIsShearedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsShearedComponent),
		/* harmony export */   EntityIsStackableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStackableComponent),
		/* harmony export */   EntityIsStunnedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsStunnedComponent),
		/* harmony export */   EntityIsTamedComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIsTamedComponent),
		/* harmony export */   EntityItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityItemComponent),
		/* harmony export */   EntityIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityIterator),
		/* harmony export */   EntityLavaMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLavaMovementComponent),
		/* harmony export */   EntityLeashableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLeashableComponent),
		/* harmony export */   EntityLoadAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEvent),
		/* harmony export */   EntityLoadAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityLoadAfterEventSignal),
		/* harmony export */   EntityMarkVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMarkVariantComponent),
		/* harmony export */   EntityMovementAmphibiousComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementAmphibiousComponent),
		/* harmony export */   EntityMovementBasicComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementBasicComponent),
		/* harmony export */   EntityMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementComponent),
		/* harmony export */   EntityMovementFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementFlyComponent),
		/* harmony export */   EntityMovementGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGenericComponent),
		/* harmony export */   EntityMovementGlideComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementGlideComponent),
		/* harmony export */   EntityMovementHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementHoverComponent),
		/* harmony export */   EntityMovementJumpComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementJumpComponent),
		/* harmony export */   EntityMovementSkipComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSkipComponent),
		/* harmony export */   EntityMovementSwayComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityMovementSwayComponent),
		/* harmony export */   EntityNavigationClimbComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationClimbComponent),
		/* harmony export */   EntityNavigationComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationComponent),
		/* harmony export */   EntityNavigationFloatComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFloatComponent),
		/* harmony export */   EntityNavigationFlyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationFlyComponent),
		/* harmony export */   EntityNavigationGenericComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationGenericComponent),
		/* harmony export */   EntityNavigationHoverComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationHoverComponent),
		/* harmony export */   EntityNavigationWalkComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNavigationWalkComponent),
		/* harmony export */   EntityNpcComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityNpcComponent),
		/* harmony export */   EntityOnFireComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityOnFireComponent),
		/* harmony export */   EntityProjectileComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityProjectileComponent),
		/* harmony export */   EntityPushThroughComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityPushThroughComponent),
		/* harmony export */   EntityQueryOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryOptions),
		/* harmony export */   EntityQueryPropertyOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryPropertyOptions),
		/* harmony export */   EntityQueryScoreOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityQueryScoreOptions),
		/* harmony export */   EntityRaycastHit: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastHit),
		/* harmony export */   EntityRaycastOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRaycastOptions),
		/* harmony export */   EntityRemoveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEvent),
		/* harmony export */   EntityRemoveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveAfterEventSignal),
		/* harmony export */   EntityRemoveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEvent),
		/* harmony export */   EntityRemoveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRemoveBeforeEventSignal),
		/* harmony export */   EntityRideableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRideableComponent),
		/* harmony export */   EntityRidingComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityRidingComponent),
		/* harmony export */   EntityScaleComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityScaleComponent),
		/* harmony export */   EntitySkinIdComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySkinIdComponent),
		/* harmony export */   EntitySpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEvent),
		/* harmony export */   EntitySpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntitySpawnAfterEventSignal),
		/* harmony export */   EntityStrengthComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityStrengthComponent),
		/* harmony export */   EntityTameMountComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameMountComponent),
		/* harmony export */   EntityTameableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTameableComponent),
		/* harmony export */   EntityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityType),
		/* harmony export */   EntityTypeFamilyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeFamilyComponent),
		/* harmony export */   EntityTypeIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypeIterator),
		/* harmony export */   EntityTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityTypes),
		/* harmony export */   EntityUnderwaterMovementComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityUnderwaterMovementComponent),
		/* harmony export */   EntityVariantComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityVariantComponent),
		/* harmony export */   EntityWantsJockeyComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EntityWantsJockeyComponent),
		/* harmony export */   EqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EqualsComparison),
		/* harmony export */   EquipmentSlot: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.EquipmentSlot),
		/* harmony export */   ExplosionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEvent),
		/* harmony export */   ExplosionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionAfterEventSignal),
		/* harmony export */   ExplosionBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEvent),
		/* harmony export */   ExplosionBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionBeforeEventSignal),
		/* harmony export */   ExplosionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ExplosionOptions),
		/* harmony export */   FeedItem: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItem),
		/* harmony export */   FeedItemEffect: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FeedItemEffect),
		/* harmony export */   FilterGroup: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FilterGroup),
		/* harmony export */   FluidContainer: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidContainer),
		/* harmony export */   FluidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.FluidType),
		/* harmony export */   GameMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameMode),
		/* harmony export */   GameRule: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRule),
		/* harmony export */   GameRuleChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEvent),
		/* harmony export */   GameRuleChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRuleChangeAfterEventSignal),
		/* harmony export */   GameRules: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GameRules),
		/* harmony export */   GreaterThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanComparison),
		/* harmony export */   GreaterThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.GreaterThanOrEqualsComparison),
		/* harmony export */   HudElement: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElement),
		/* harmony export */   HudElementsCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudElementsCount),
		/* harmony export */   HudVisibility: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibility),
		/* harmony export */   HudVisibilityCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.HudVisibilityCount),
		/* harmony export */   IButtonPushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IButtonPushAfterEventSignal),
		/* harmony export */   ILeverActionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ILeverActionAfterEventSignal),
		/* harmony export */   IPlayerJoinAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerJoinAfterEventSignal),
		/* harmony export */   IPlayerLeaveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerLeaveAfterEventSignal),
		/* harmony export */   IPlayerSpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.IPlayerSpawnAfterEventSignal),
		/* harmony export */   InputButton: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputButton),
		/* harmony export */   InputEventOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputEventOptions),
		/* harmony export */   InputInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputInfo),
		/* harmony export */   InputMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputMode),
		/* harmony export */   InputPermissionCategory: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InputPermissionCategory),
		/* harmony export */   InvalidContainerSlotError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidContainerSlotError),
		/* harmony export */   InvalidEntityError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidEntityError),
		/* harmony export */   InvalidIteratorError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidIteratorError),
		/* harmony export */   InvalidStructureError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.InvalidStructureError),
		/* harmony export */   ItemCompleteUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEvent),
		/* harmony export */   ItemCompleteUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseAfterEventSignal),
		/* harmony export */   ItemCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompleteUseEvent),
		/* harmony export */   ItemComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponent),
		/* harmony export */   ItemComponentBeforeDurabilityDamageEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentBeforeDurabilityDamageEvent),
		/* harmony export */   ItemComponentCompleteUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentCompleteUseEvent),
		/* harmony export */   ItemComponentConsumeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentConsumeEvent),
		/* harmony export */   ItemComponentHitEntityEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentHitEntityEvent),
		/* harmony export */   ItemComponentMineBlockEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentMineBlockEvent),
		/* harmony export */   ItemComponentRegistry: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentRegistry),
		/* harmony export */   ItemComponentTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentTypes),
		/* harmony export */   ItemComponentUseEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseEvent),
		/* harmony export */   ItemComponentUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemComponentUseOnEvent),
		/* harmony export */   ItemCompostableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCompostableComponent),
		/* harmony export */   ItemCooldownComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCooldownComponent),
		/* harmony export */   ItemCustomComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponent),
		/* harmony export */   ItemCustomComponentAlreadyRegisteredError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentAlreadyRegisteredError),
		/* harmony export */   ItemCustomComponentReloadNewComponentError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewComponentError),
		/* harmony export */   ItemCustomComponentReloadNewEventError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadNewEventError),
		/* harmony export */   ItemCustomComponentReloadVersionError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemCustomComponentReloadVersionError),
		/* harmony export */   ItemDurabilityComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDurabilityComponent),
		/* harmony export */   ItemDyeableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemDyeableComponent),
		/* harmony export */   ItemEnchantableComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemEnchantableComponent),
		/* harmony export */   ItemFoodComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemFoodComponent),
		/* harmony export */   ItemLockMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemLockMode),
		/* harmony export */   ItemPotionComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemPotionComponent),
		/* harmony export */   ItemReleaseUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEvent),
		/* harmony export */   ItemReleaseUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemReleaseUseAfterEventSignal),
		/* harmony export */   ItemStack: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStack),
		/* harmony export */   ItemStartUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEvent),
		/* harmony export */   ItemStartUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseAfterEventSignal),
		/* harmony export */   ItemStartUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEvent),
		/* harmony export */   ItemStartUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStartUseOnAfterEventSignal),
		/* harmony export */   ItemStopUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEvent),
		/* harmony export */   ItemStopUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseAfterEventSignal),
		/* harmony export */   ItemStopUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEvent),
		/* harmony export */   ItemStopUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemStopUseOnAfterEventSignal),
		/* harmony export */   ItemType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemType),
		/* harmony export */   ItemTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemTypes),
		/* harmony export */   ItemUseAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEvent),
		/* harmony export */   ItemUseAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseAfterEventSignal),
		/* harmony export */   ItemUseBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEvent),
		/* harmony export */   ItemUseBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseBeforeEventSignal),
		/* harmony export */   ItemUseOnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEvent),
		/* harmony export */   ItemUseOnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnAfterEventSignal),
		/* harmony export */   ItemUseOnBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEvent),
		/* harmony export */   ItemUseOnBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnBeforeEventSignal),
		/* harmony export */   ItemUseOnEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ItemUseOnEvent),
		/* harmony export */   JigsawPlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawPlaceOptions),
		/* harmony export */   JigsawStructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.JigsawStructurePlaceOptions),
		/* harmony export */   LessThanComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanComparison),
		/* harmony export */   LessThanOrEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LessThanOrEqualsComparison),
		/* harmony export */   LeverActionAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEvent),
		/* harmony export */   LeverActionAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LeverActionAfterEventSignal),
		/* harmony export */   LiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LiquidType),
		/* harmony export */   ListBlockVolume: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ListBlockVolume),
		/* harmony export */   LocationInUnloadedChunkError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationInUnloadedChunkError),
		/* harmony export */   LocationOutOfWorldBoundariesError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.LocationOutOfWorldBoundariesError),
		/* harmony export */   MemoryTier: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MemoryTier),
		/* harmony export */   MessageReceiveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MessageReceiveAfterEvent),
		/* harmony export */   MinecraftDimensionTypes: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MinecraftDimensionTypes),
		/* harmony export */   MolangVariableMap: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MolangVariableMap),
		/* harmony export */   MoonPhase: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhase),
		/* harmony export */   MoonPhaseCount: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MoonPhaseCount),
		/* harmony export */   MusicOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.MusicOptions),
		/* harmony export */   NamespaceNameError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameError),
		/* harmony export */   NamespaceNameErrorReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NamespaceNameErrorReason),
		/* harmony export */   NotEqualsComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.NotEqualsComparison),
		/* harmony export */   ObjectiveSortOrder: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ObjectiveSortOrder),
		/* harmony export */   PaletteColor: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PaletteColor),
		/* harmony export */   PistonActivateAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEvent),
		/* harmony export */   PistonActivateAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PistonActivateAfterEventSignal),
		/* harmony export */   PlaceJigsawError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlaceJigsawError),
		/* harmony export */   PlatformType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlatformType),
		/* harmony export */   PlayAnimationOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayAnimationOptions),
		/* harmony export */   Player: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Player),
		/* harmony export */   PlayerBreakBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEvent),
		/* harmony export */   PlayerBreakBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockAfterEventSignal),
		/* harmony export */   PlayerBreakBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEvent),
		/* harmony export */   PlayerBreakBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerBreakBlockBeforeEventSignal),
		/* harmony export */   PlayerButtonInputAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEvent),
		/* harmony export */   PlayerButtonInputAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerButtonInputAfterEventSignal),
		/* harmony export */   PlayerCursorInventoryComponent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerCursorInventoryComponent),
		/* harmony export */   PlayerDimensionChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEvent),
		/* harmony export */   PlayerDimensionChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerDimensionChangeAfterEventSignal),
		/* harmony export */   PlayerEmoteAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEvent),
		/* harmony export */   PlayerEmoteAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerEmoteAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEvent),
		/* harmony export */   PlayerGameModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeAfterEventSignal),
		/* harmony export */   PlayerGameModeChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEvent),
		/* harmony export */   PlayerGameModeChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerGameModeChangeBeforeEventSignal),
		/* harmony export */   PlayerInputModeChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEvent),
		/* harmony export */   PlayerInputModeChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputModeChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEvent),
		/* harmony export */   PlayerInputPermissionCategoryChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissionCategoryChangeAfterEventSignal),
		/* harmony export */   PlayerInputPermissions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInputPermissions),
		/* harmony export */   PlayerInteractWithBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEvent),
		/* harmony export */   PlayerInteractWithBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockAfterEventSignal),
		/* harmony export */   PlayerInteractWithBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEvent),
		/* harmony export */   PlayerInteractWithBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithBlockBeforeEventSignal),
		/* harmony export */   PlayerInteractWithEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEvent),
		/* harmony export */   PlayerInteractWithEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityAfterEventSignal),
		/* harmony export */   PlayerInteractWithEntityBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEvent),
		/* harmony export */   PlayerInteractWithEntityBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerInteractWithEntityBeforeEventSignal),
		/* harmony export */   PlayerIterator: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerIterator),
		/* harmony export */   PlayerJoinAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEvent),
		/* harmony export */   PlayerJoinAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerJoinAfterEventSignal),
		/* harmony export */   PlayerLeaveAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEvent),
		/* harmony export */   PlayerLeaveAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveAfterEventSignal),
		/* harmony export */   PlayerLeaveBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEvent),
		/* harmony export */   PlayerLeaveBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerLeaveBeforeEventSignal),
		/* harmony export */   PlayerPlaceBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEvent),
		/* harmony export */   PlayerPlaceBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockAfterEventSignal),
		/* harmony export */   PlayerPlaceBlockBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEvent),
		/* harmony export */   PlayerPlaceBlockBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerPlaceBlockBeforeEventSignal),
		/* harmony export */   PlayerSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSoundOptions),
		/* harmony export */   PlayerSpawnAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEvent),
		/* harmony export */   PlayerSpawnAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PlayerSpawnAfterEventSignal),
		/* harmony export */   PotionEffectType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionEffectType),
		/* harmony export */   PotionLiquidType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionLiquidType),
		/* harmony export */   PotionModifierType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionModifierType),
		/* harmony export */   PotionOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PotionOptions),
		/* harmony export */   Potions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Potions),
		/* harmony export */   PressurePlatePopAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEvent),
		/* harmony export */   PressurePlatePopAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePopAfterEventSignal),
		/* harmony export */   PressurePlatePushAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEvent),
		/* harmony export */   PressurePlatePushAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.PressurePlatePushAfterEventSignal),
		/* harmony export */   ProjectileHitBlockAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEvent),
		/* harmony export */   ProjectileHitBlockAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitBlockAfterEventSignal),
		/* harmony export */   ProjectileHitEntityAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEvent),
		/* harmony export */   ProjectileHitEntityAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileHitEntityAfterEventSignal),
		/* harmony export */   ProjectileShootOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ProjectileShootOptions),
		/* harmony export */   RGB: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGB),
		/* harmony export */   RGBA: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RGBA),
		/* harmony export */   RangeComparison: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RangeComparison),
		/* harmony export */   RawMessage: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessage),
		/* harmony export */   RawMessageScore: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawMessageScore),
		/* harmony export */   RawText: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.RawText),
		/* harmony export */   Scoreboard: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Scoreboard),
		/* harmony export */   ScoreboardIdentity: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentity),
		/* harmony export */   ScoreboardIdentityType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardIdentityType),
		/* harmony export */   ScoreboardObjective: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjective),
		/* harmony export */   ScoreboardObjectiveDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardObjectiveDisplayOptions),
		/* harmony export */   ScoreboardScoreInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScoreboardScoreInfo),
		/* harmony export */   ScreenDisplay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScreenDisplay),
		/* harmony export */   ScriptEventCommandMessageAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEvent),
		/* harmony export */   ScriptEventCommandMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventCommandMessageAfterEventSignal),
		/* harmony export */   ScriptEventMessageFilterOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventMessageFilterOptions),
		/* harmony export */   ScriptEventSource: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ScriptEventSource),
		/* harmony export */   Seat: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Seat),
		/* harmony export */   ServerMessageAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ServerMessageAfterEventSignal),
		/* harmony export */   ShutdownBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownBeforeEventSignal),
		/* harmony export */   ShutdownEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.ShutdownEvent),
		/* harmony export */   SignSide: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SignSide),
		/* harmony export */   SpawnEntityOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SpawnEntityOptions),
		/* harmony export */   Structure: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Structure),
		/* harmony export */   StructureAnimationMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureAnimationMode),
		/* harmony export */   StructureCreateOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureCreateOptions),
		/* harmony export */   StructureManager: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureManager),
		/* harmony export */   StructureMirrorAxis: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureMirrorAxis),
		/* harmony export */   StructurePlaceOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructurePlaceOptions),
		/* harmony export */   StructureRotation: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureRotation),
		/* harmony export */   StructureSaveMode: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.StructureSaveMode),
		/* harmony export */   System: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.System),
		/* harmony export */   SystemAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemAfterEvents),
		/* harmony export */   SystemBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemBeforeEvents),
		/* harmony export */   SystemInfo: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.SystemInfo),
		/* harmony export */   TargetBlockHitAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEvent),
		/* harmony export */   TargetBlockHitAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TargetBlockHitAfterEventSignal),
		/* harmony export */   TeleportOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TeleportOptions),
		/* harmony export */   TicksPerDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerDay),
		/* harmony export */   TicksPerSecond: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TicksPerSecond),
		/* harmony export */   TimeOfDay: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TimeOfDay),
		/* harmony export */   TitleDisplayOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TitleDisplayOptions),
		/* harmony export */   Trigger: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Trigger),
		/* harmony export */   TripWireTripAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEvent),
		/* harmony export */   TripWireTripAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.TripWireTripAfterEventSignal),
		/* harmony export */   UnloadedChunksError: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.UnloadedChunksError),
		/* harmony export */   Vector2: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector2),
		/* harmony export */   Vector3: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.Vector3),
		/* harmony export */   VectorXZ: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.VectorXZ),
		/* harmony export */   WatchdogTerminateBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEvent),
		/* harmony export */   WatchdogTerminateBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateBeforeEventSignal),
		/* harmony export */   WatchdogTerminateReason: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WatchdogTerminateReason),
		/* harmony export */   WeatherChangeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEvent),
		/* harmony export */   WeatherChangeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeAfterEventSignal),
		/* harmony export */   WeatherChangeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEvent),
		/* harmony export */   WeatherChangeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherChangeBeforeEventSignal),
		/* harmony export */   WeatherType: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WeatherType),
		/* harmony export */   World: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.World),
		/* harmony export */   WorldAfterEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldAfterEvents),
		/* harmony export */   WorldBeforeEvents: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldBeforeEvents),
		/* harmony export */   WorldInitializeAfterEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeAfterEvent),
		/* harmony export */   WorldInitializeAfterEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeAfterEventSignal),
		/* harmony export */   WorldInitializeBeforeEvent: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeBeforeEvent),
		/* harmony export */   WorldInitializeBeforeEventSignal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldInitializeBeforeEventSignal),
		/* harmony export */   WorldSoundOptions: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.WorldSoundOptions),
		/* harmony export */   isInternal: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.isInternal),
		/* harmony export */   system: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.system),
		/* harmony export */   world: () => (/* reexport safe */ _minecraft_server__WEBPACK_IMPORTED_MODULE_0__.world)
		/* harmony export */ });
		/* harmony import */ var _minecraft_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @minecraft/server */ "@minecraft/server");
		
		
		
		/***/ }),
		
		/***/ "../../module-wrappers/vanilla-data-wrapper/lib-vanilla/index.js":
		/*!***********************************************************************!*\
		  !*** ../../module-wrappers/vanilla-data-wrapper/lib-vanilla/index.js ***!
		  \***********************************************************************/
		/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
		
		__webpack_require__.r(__webpack_exports__);
		/* harmony export */ __webpack_require__.d(__webpack_exports__, {
		/* harmony export */   MinecraftBiomeTypes: () => (/* binding */ MinecraftBiomeTypes),
		/* harmony export */   MinecraftBlockTypes: () => (/* binding */ MinecraftBlockTypes),
		/* harmony export */   MinecraftCameraPresetsTypes: () => (/* binding */ MinecraftCameraPresetsTypes),
		/* harmony export */   MinecraftCooldownCategoryTypes: () => (/* binding */ MinecraftCooldownCategoryTypes),
		/* harmony export */   MinecraftDimensionTypes: () => (/* binding */ MinecraftDimensionTypes),
		/* harmony export */   MinecraftEffectTypes: () => (/* binding */ MinecraftEffectTypes),
		/* harmony export */   MinecraftEnchantmentTypes: () => (/* binding */ MinecraftEnchantmentTypes),
		/* harmony export */   MinecraftEntityTypes: () => (/* binding */ MinecraftEntityTypes),
		/* harmony export */   MinecraftFeatureTypes: () => (/* binding */ MinecraftFeatureTypes),
		/* harmony export */   MinecraftItemTypes: () => (/* binding */ MinecraftItemTypes),
		/* harmony export */   MinecraftPotionEffectTypes: () => (/* binding */ MinecraftPotionEffectTypes),
		/* harmony export */   MinecraftPotionLiquidTypes: () => (/* binding */ MinecraftPotionLiquidTypes),
		/* harmony export */   MinecraftPotionModifierTypes: () => (/* binding */ MinecraftPotionModifierTypes)
		/* harmony export */ });
		// src/mojang-biome.ts
		var MinecraftBiomeTypes = /* @__PURE__ */ (MinecraftBiomeTypes2 => {
		    MinecraftBiomeTypes2['BambooJungle'] = 'minecraft:bamboo_jungle';
		    MinecraftBiomeTypes2['BambooJungleHills'] = 'minecraft:bamboo_jungle_hills';
		    MinecraftBiomeTypes2['BasaltDeltas'] = 'minecraft:basalt_deltas';
		    MinecraftBiomeTypes2['Beach'] = 'minecraft:beach';
		    MinecraftBiomeTypes2['BirchForest'] = 'minecraft:birch_forest';
		    MinecraftBiomeTypes2['BirchForestHills'] = 'minecraft:birch_forest_hills';
		    MinecraftBiomeTypes2['BirchForestHillsMutated'] = 'minecraft:birch_forest_hills_mutated';
		    MinecraftBiomeTypes2['BirchForestMutated'] = 'minecraft:birch_forest_mutated';
		    MinecraftBiomeTypes2['CherryGrove'] = 'minecraft:cherry_grove';
		    MinecraftBiomeTypes2['ColdBeach'] = 'minecraft:cold_beach';
		    MinecraftBiomeTypes2['ColdOcean'] = 'minecraft:cold_ocean';
		    MinecraftBiomeTypes2['ColdTaiga'] = 'minecraft:cold_taiga';
		    MinecraftBiomeTypes2['ColdTaigaHills'] = 'minecraft:cold_taiga_hills';
		    MinecraftBiomeTypes2['ColdTaigaMutated'] = 'minecraft:cold_taiga_mutated';
		    MinecraftBiomeTypes2['CrimsonForest'] = 'minecraft:crimson_forest';
		    MinecraftBiomeTypes2['DeepColdOcean'] = 'minecraft:deep_cold_ocean';
		    MinecraftBiomeTypes2['DeepDark'] = 'minecraft:deep_dark';
		    MinecraftBiomeTypes2['DeepFrozenOcean'] = 'minecraft:deep_frozen_ocean';
		    MinecraftBiomeTypes2['DeepLukewarmOcean'] = 'minecraft:deep_lukewarm_ocean';
		    MinecraftBiomeTypes2['DeepOcean'] = 'minecraft:deep_ocean';
		    MinecraftBiomeTypes2['DeepWarmOcean'] = 'minecraft:deep_warm_ocean';
		    MinecraftBiomeTypes2['Desert'] = 'minecraft:desert';
		    MinecraftBiomeTypes2['DesertHills'] = 'minecraft:desert_hills';
		    MinecraftBiomeTypes2['DesertMutated'] = 'minecraft:desert_mutated';
		    MinecraftBiomeTypes2['DripstoneCaves'] = 'minecraft:dripstone_caves';
		    MinecraftBiomeTypes2['ExtremeHills'] = 'minecraft:extreme_hills';
		    MinecraftBiomeTypes2['ExtremeHillsEdge'] = 'minecraft:extreme_hills_edge';
		    MinecraftBiomeTypes2['ExtremeHillsMutated'] = 'minecraft:extreme_hills_mutated';
		    MinecraftBiomeTypes2['ExtremeHillsPlusTrees'] = 'minecraft:extreme_hills_plus_trees';
		    MinecraftBiomeTypes2['ExtremeHillsPlusTreesMutated'] = 'minecraft:extreme_hills_plus_trees_mutated';
		    MinecraftBiomeTypes2['FlowerForest'] = 'minecraft:flower_forest';
		    MinecraftBiomeTypes2['Forest'] = 'minecraft:forest';
		    MinecraftBiomeTypes2['ForestHills'] = 'minecraft:forest_hills';
		    MinecraftBiomeTypes2['FrozenOcean'] = 'minecraft:frozen_ocean';
		    MinecraftBiomeTypes2['FrozenPeaks'] = 'minecraft:frozen_peaks';
		    MinecraftBiomeTypes2['FrozenRiver'] = 'minecraft:frozen_river';
		    MinecraftBiomeTypes2['Grove'] = 'minecraft:grove';
		    MinecraftBiomeTypes2['Hell'] = 'minecraft:hell';
		    MinecraftBiomeTypes2['IceMountains'] = 'minecraft:ice_mountains';
		    MinecraftBiomeTypes2['IcePlains'] = 'minecraft:ice_plains';
		    MinecraftBiomeTypes2['IcePlainsSpikes'] = 'minecraft:ice_plains_spikes';
		    MinecraftBiomeTypes2['JaggedPeaks'] = 'minecraft:jagged_peaks';
		    MinecraftBiomeTypes2['Jungle'] = 'minecraft:jungle';
		    MinecraftBiomeTypes2['JungleEdge'] = 'minecraft:jungle_edge';
		    MinecraftBiomeTypes2['JungleEdgeMutated'] = 'minecraft:jungle_edge_mutated';
		    MinecraftBiomeTypes2['JungleHills'] = 'minecraft:jungle_hills';
		    MinecraftBiomeTypes2['JungleMutated'] = 'minecraft:jungle_mutated';
		    MinecraftBiomeTypes2['LegacyFrozenOcean'] = 'minecraft:legacy_frozen_ocean';
		    MinecraftBiomeTypes2['LukewarmOcean'] = 'minecraft:lukewarm_ocean';
		    MinecraftBiomeTypes2['LushCaves'] = 'minecraft:lush_caves';
		    MinecraftBiomeTypes2['MangroveSwamp'] = 'minecraft:mangrove_swamp';
		    MinecraftBiomeTypes2['Meadow'] = 'minecraft:meadow';
		    MinecraftBiomeTypes2['MegaTaiga'] = 'minecraft:mega_taiga';
		    MinecraftBiomeTypes2['MegaTaigaHills'] = 'minecraft:mega_taiga_hills';
		    MinecraftBiomeTypes2['Mesa'] = 'minecraft:mesa';
		    MinecraftBiomeTypes2['MesaBryce'] = 'minecraft:mesa_bryce';
		    MinecraftBiomeTypes2['MesaPlateau'] = 'minecraft:mesa_plateau';
		    MinecraftBiomeTypes2['MesaPlateauMutated'] = 'minecraft:mesa_plateau_mutated';
		    MinecraftBiomeTypes2['MesaPlateauStone'] = 'minecraft:mesa_plateau_stone';
		    MinecraftBiomeTypes2['MesaPlateauStoneMutated'] = 'minecraft:mesa_plateau_stone_mutated';
		    MinecraftBiomeTypes2['MushroomIsland'] = 'minecraft:mushroom_island';
		    MinecraftBiomeTypes2['MushroomIslandShore'] = 'minecraft:mushroom_island_shore';
		    MinecraftBiomeTypes2['Ocean'] = 'minecraft:ocean';
		    MinecraftBiomeTypes2['PaleGarden'] = 'minecraft:pale_garden';
		    MinecraftBiomeTypes2['Plains'] = 'minecraft:plains';
		    MinecraftBiomeTypes2['RedwoodTaigaHillsMutated'] = 'minecraft:redwood_taiga_hills_mutated';
		    MinecraftBiomeTypes2['RedwoodTaigaMutated'] = 'minecraft:redwood_taiga_mutated';
		    MinecraftBiomeTypes2['River'] = 'minecraft:river';
		    MinecraftBiomeTypes2['RoofedForest'] = 'minecraft:roofed_forest';
		    MinecraftBiomeTypes2['RoofedForestMutated'] = 'minecraft:roofed_forest_mutated';
		    MinecraftBiomeTypes2['Savanna'] = 'minecraft:savanna';
		    MinecraftBiomeTypes2['SavannaMutated'] = 'minecraft:savanna_mutated';
		    MinecraftBiomeTypes2['SavannaPlateau'] = 'minecraft:savanna_plateau';
		    MinecraftBiomeTypes2['SavannaPlateauMutated'] = 'minecraft:savanna_plateau_mutated';
		    MinecraftBiomeTypes2['SnowySlopes'] = 'minecraft:snowy_slopes';
		    MinecraftBiomeTypes2['SoulsandValley'] = 'minecraft:soulsand_valley';
		    MinecraftBiomeTypes2['StoneBeach'] = 'minecraft:stone_beach';
		    MinecraftBiomeTypes2['StonyPeaks'] = 'minecraft:stony_peaks';
		    MinecraftBiomeTypes2['SunflowerPlains'] = 'minecraft:sunflower_plains';
		    MinecraftBiomeTypes2['Swampland'] = 'minecraft:swampland';
		    MinecraftBiomeTypes2['SwamplandMutated'] = 'minecraft:swampland_mutated';
		    MinecraftBiomeTypes2['Taiga'] = 'minecraft:taiga';
		    MinecraftBiomeTypes2['TaigaHills'] = 'minecraft:taiga_hills';
		    MinecraftBiomeTypes2['TaigaMutated'] = 'minecraft:taiga_mutated';
		    MinecraftBiomeTypes2['TheEnd'] = 'minecraft:the_end';
		    MinecraftBiomeTypes2['WarmOcean'] = 'minecraft:warm_ocean';
		    MinecraftBiomeTypes2['WarpedForest'] = 'minecraft:warped_forest';
		    return MinecraftBiomeTypes2;
		})(MinecraftBiomeTypes || {});
		
		// src/mojang-block.ts
		var MinecraftBlockTypes = /* @__PURE__ */ (MinecraftBlockTypes2 => {
		    MinecraftBlockTypes2['AcaciaButton'] = 'minecraft:acacia_button';
		    MinecraftBlockTypes2['AcaciaDoor'] = 'minecraft:acacia_door';
		    MinecraftBlockTypes2['AcaciaDoubleSlab'] = 'minecraft:acacia_double_slab';
		    MinecraftBlockTypes2['AcaciaFence'] = 'minecraft:acacia_fence';
		    MinecraftBlockTypes2['AcaciaFenceGate'] = 'minecraft:acacia_fence_gate';
		    MinecraftBlockTypes2['AcaciaHangingSign'] = 'minecraft:acacia_hanging_sign';
		    MinecraftBlockTypes2['AcaciaLeaves'] = 'minecraft:acacia_leaves';
		    MinecraftBlockTypes2['AcaciaLog'] = 'minecraft:acacia_log';
		    MinecraftBlockTypes2['AcaciaPlanks'] = 'minecraft:acacia_planks';
		    MinecraftBlockTypes2['AcaciaPressurePlate'] = 'minecraft:acacia_pressure_plate';
		    MinecraftBlockTypes2['AcaciaSapling'] = 'minecraft:acacia_sapling';
		    MinecraftBlockTypes2['AcaciaSlab'] = 'minecraft:acacia_slab';
		    MinecraftBlockTypes2['AcaciaStairs'] = 'minecraft:acacia_stairs';
		    MinecraftBlockTypes2['AcaciaStandingSign'] = 'minecraft:acacia_standing_sign';
		    MinecraftBlockTypes2['AcaciaTrapdoor'] = 'minecraft:acacia_trapdoor';
		    MinecraftBlockTypes2['AcaciaWallSign'] = 'minecraft:acacia_wall_sign';
		    MinecraftBlockTypes2['AcaciaWood'] = 'minecraft:acacia_wood';
		    MinecraftBlockTypes2['ActivatorRail'] = 'minecraft:activator_rail';
		    MinecraftBlockTypes2['Air'] = 'minecraft:air';
		    MinecraftBlockTypes2['Allium'] = 'minecraft:allium';
		    MinecraftBlockTypes2['Allow'] = 'minecraft:allow';
		    MinecraftBlockTypes2['AmethystBlock'] = 'minecraft:amethyst_block';
		    MinecraftBlockTypes2['AmethystCluster'] = 'minecraft:amethyst_cluster';
		    MinecraftBlockTypes2['AncientDebris'] = 'minecraft:ancient_debris';
		    MinecraftBlockTypes2['Andesite'] = 'minecraft:andesite';
		    MinecraftBlockTypes2['AndesiteDoubleSlab'] = 'minecraft:andesite_double_slab';
		    MinecraftBlockTypes2['AndesiteSlab'] = 'minecraft:andesite_slab';
		    MinecraftBlockTypes2['AndesiteStairs'] = 'minecraft:andesite_stairs';
		    MinecraftBlockTypes2['AndesiteWall'] = 'minecraft:andesite_wall';
		    MinecraftBlockTypes2['Anvil'] = 'minecraft:anvil';
		    MinecraftBlockTypes2['Azalea'] = 'minecraft:azalea';
		    MinecraftBlockTypes2['AzaleaLeaves'] = 'minecraft:azalea_leaves';
		    MinecraftBlockTypes2['AzaleaLeavesFlowered'] = 'minecraft:azalea_leaves_flowered';
		    MinecraftBlockTypes2['AzureBluet'] = 'minecraft:azure_bluet';
		    MinecraftBlockTypes2['Bamboo'] = 'minecraft:bamboo';
		    MinecraftBlockTypes2['BambooBlock'] = 'minecraft:bamboo_block';
		    MinecraftBlockTypes2['BambooButton'] = 'minecraft:bamboo_button';
		    MinecraftBlockTypes2['BambooDoor'] = 'minecraft:bamboo_door';
		    MinecraftBlockTypes2['BambooDoubleSlab'] = 'minecraft:bamboo_double_slab';
		    MinecraftBlockTypes2['BambooFence'] = 'minecraft:bamboo_fence';
		    MinecraftBlockTypes2['BambooFenceGate'] = 'minecraft:bamboo_fence_gate';
		    MinecraftBlockTypes2['BambooHangingSign'] = 'minecraft:bamboo_hanging_sign';
		    MinecraftBlockTypes2['BambooMosaic'] = 'minecraft:bamboo_mosaic';
		    MinecraftBlockTypes2['BambooMosaicDoubleSlab'] = 'minecraft:bamboo_mosaic_double_slab';
		    MinecraftBlockTypes2['BambooMosaicSlab'] = 'minecraft:bamboo_mosaic_slab';
		    MinecraftBlockTypes2['BambooMosaicStairs'] = 'minecraft:bamboo_mosaic_stairs';
		    MinecraftBlockTypes2['BambooPlanks'] = 'minecraft:bamboo_planks';
		    MinecraftBlockTypes2['BambooPressurePlate'] = 'minecraft:bamboo_pressure_plate';
		    MinecraftBlockTypes2['BambooSapling'] = 'minecraft:bamboo_sapling';
		    MinecraftBlockTypes2['BambooSlab'] = 'minecraft:bamboo_slab';
		    MinecraftBlockTypes2['BambooStairs'] = 'minecraft:bamboo_stairs';
		    MinecraftBlockTypes2['BambooStandingSign'] = 'minecraft:bamboo_standing_sign';
		    MinecraftBlockTypes2['BambooTrapdoor'] = 'minecraft:bamboo_trapdoor';
		    MinecraftBlockTypes2['BambooWallSign'] = 'minecraft:bamboo_wall_sign';
		    MinecraftBlockTypes2['Barrel'] = 'minecraft:barrel';
		    MinecraftBlockTypes2['Barrier'] = 'minecraft:barrier';
		    MinecraftBlockTypes2['Basalt'] = 'minecraft:basalt';
		    MinecraftBlockTypes2['Beacon'] = 'minecraft:beacon';
		    MinecraftBlockTypes2['Bed'] = 'minecraft:bed';
		    MinecraftBlockTypes2['Bedrock'] = 'minecraft:bedrock';
		    MinecraftBlockTypes2['BeeNest'] = 'minecraft:bee_nest';
		    MinecraftBlockTypes2['Beehive'] = 'minecraft:beehive';
		    MinecraftBlockTypes2['Beetroot'] = 'minecraft:beetroot';
		    MinecraftBlockTypes2['Bell'] = 'minecraft:bell';
		    MinecraftBlockTypes2['BigDripleaf'] = 'minecraft:big_dripleaf';
		    MinecraftBlockTypes2['BirchButton'] = 'minecraft:birch_button';
		    MinecraftBlockTypes2['BirchDoor'] = 'minecraft:birch_door';
		    MinecraftBlockTypes2['BirchDoubleSlab'] = 'minecraft:birch_double_slab';
		    MinecraftBlockTypes2['BirchFence'] = 'minecraft:birch_fence';
		    MinecraftBlockTypes2['BirchFenceGate'] = 'minecraft:birch_fence_gate';
		    MinecraftBlockTypes2['BirchHangingSign'] = 'minecraft:birch_hanging_sign';
		    MinecraftBlockTypes2['BirchLeaves'] = 'minecraft:birch_leaves';
		    MinecraftBlockTypes2['BirchLog'] = 'minecraft:birch_log';
		    MinecraftBlockTypes2['BirchPlanks'] = 'minecraft:birch_planks';
		    MinecraftBlockTypes2['BirchPressurePlate'] = 'minecraft:birch_pressure_plate';
		    MinecraftBlockTypes2['BirchSapling'] = 'minecraft:birch_sapling';
		    MinecraftBlockTypes2['BirchSlab'] = 'minecraft:birch_slab';
		    MinecraftBlockTypes2['BirchStairs'] = 'minecraft:birch_stairs';
		    MinecraftBlockTypes2['BirchStandingSign'] = 'minecraft:birch_standing_sign';
		    MinecraftBlockTypes2['BirchTrapdoor'] = 'minecraft:birch_trapdoor';
		    MinecraftBlockTypes2['BirchWallSign'] = 'minecraft:birch_wall_sign';
		    MinecraftBlockTypes2['BirchWood'] = 'minecraft:birch_wood';
		    MinecraftBlockTypes2['BlackCandle'] = 'minecraft:black_candle';
		    MinecraftBlockTypes2['BlackCandleCake'] = 'minecraft:black_candle_cake';
		    MinecraftBlockTypes2['BlackCarpet'] = 'minecraft:black_carpet';
		    MinecraftBlockTypes2['BlackConcrete'] = 'minecraft:black_concrete';
		    MinecraftBlockTypes2['BlackConcretePowder'] = 'minecraft:black_concrete_powder';
		    MinecraftBlockTypes2['BlackGlazedTerracotta'] = 'minecraft:black_glazed_terracotta';
		    MinecraftBlockTypes2['BlackShulkerBox'] = 'minecraft:black_shulker_box';
		    MinecraftBlockTypes2['BlackStainedGlass'] = 'minecraft:black_stained_glass';
		    MinecraftBlockTypes2['BlackStainedGlassPane'] = 'minecraft:black_stained_glass_pane';
		    MinecraftBlockTypes2['BlackTerracotta'] = 'minecraft:black_terracotta';
		    MinecraftBlockTypes2['BlackWool'] = 'minecraft:black_wool';
		    MinecraftBlockTypes2['Blackstone'] = 'minecraft:blackstone';
		    MinecraftBlockTypes2['BlackstoneDoubleSlab'] = 'minecraft:blackstone_double_slab';
		    MinecraftBlockTypes2['BlackstoneSlab'] = 'minecraft:blackstone_slab';
		    MinecraftBlockTypes2['BlackstoneStairs'] = 'minecraft:blackstone_stairs';
		    MinecraftBlockTypes2['BlackstoneWall'] = 'minecraft:blackstone_wall';
		    MinecraftBlockTypes2['BlastFurnace'] = 'minecraft:blast_furnace';
		    MinecraftBlockTypes2['BlueCandle'] = 'minecraft:blue_candle';
		    MinecraftBlockTypes2['BlueCandleCake'] = 'minecraft:blue_candle_cake';
		    MinecraftBlockTypes2['BlueCarpet'] = 'minecraft:blue_carpet';
		    MinecraftBlockTypes2['BlueConcrete'] = 'minecraft:blue_concrete';
		    MinecraftBlockTypes2['BlueConcretePowder'] = 'minecraft:blue_concrete_powder';
		    MinecraftBlockTypes2['BlueGlazedTerracotta'] = 'minecraft:blue_glazed_terracotta';
		    MinecraftBlockTypes2['BlueIce'] = 'minecraft:blue_ice';
		    MinecraftBlockTypes2['BlueOrchid'] = 'minecraft:blue_orchid';
		    MinecraftBlockTypes2['BlueShulkerBox'] = 'minecraft:blue_shulker_box';
		    MinecraftBlockTypes2['BlueStainedGlass'] = 'minecraft:blue_stained_glass';
		    MinecraftBlockTypes2['BlueStainedGlassPane'] = 'minecraft:blue_stained_glass_pane';
		    MinecraftBlockTypes2['BlueTerracotta'] = 'minecraft:blue_terracotta';
		    MinecraftBlockTypes2['BlueWool'] = 'minecraft:blue_wool';
		    MinecraftBlockTypes2['BoneBlock'] = 'minecraft:bone_block';
		    MinecraftBlockTypes2['Bookshelf'] = 'minecraft:bookshelf';
		    MinecraftBlockTypes2['BorderBlock'] = 'minecraft:border_block';
		    MinecraftBlockTypes2['BrainCoral'] = 'minecraft:brain_coral';
		    MinecraftBlockTypes2['BrainCoralBlock'] = 'minecraft:brain_coral_block';
		    MinecraftBlockTypes2['BrainCoralFan'] = 'minecraft:brain_coral_fan';
		    MinecraftBlockTypes2['BrainCoralWallFan'] = 'minecraft:brain_coral_wall_fan';
		    MinecraftBlockTypes2['BrewingStand'] = 'minecraft:brewing_stand';
		    MinecraftBlockTypes2['BrickBlock'] = 'minecraft:brick_block';
		    MinecraftBlockTypes2['BrickDoubleSlab'] = 'minecraft:brick_double_slab';
		    MinecraftBlockTypes2['BrickSlab'] = 'minecraft:brick_slab';
		    MinecraftBlockTypes2['BrickStairs'] = 'minecraft:brick_stairs';
		    MinecraftBlockTypes2['BrickWall'] = 'minecraft:brick_wall';
		    MinecraftBlockTypes2['BrownCandle'] = 'minecraft:brown_candle';
		    MinecraftBlockTypes2['BrownCandleCake'] = 'minecraft:brown_candle_cake';
		    MinecraftBlockTypes2['BrownCarpet'] = 'minecraft:brown_carpet';
		    MinecraftBlockTypes2['BrownConcrete'] = 'minecraft:brown_concrete';
		    MinecraftBlockTypes2['BrownConcretePowder'] = 'minecraft:brown_concrete_powder';
		    MinecraftBlockTypes2['BrownGlazedTerracotta'] = 'minecraft:brown_glazed_terracotta';
		    MinecraftBlockTypes2['BrownMushroom'] = 'minecraft:brown_mushroom';
		    MinecraftBlockTypes2['BrownMushroomBlock'] = 'minecraft:brown_mushroom_block';
		    MinecraftBlockTypes2['BrownShulkerBox'] = 'minecraft:brown_shulker_box';
		    MinecraftBlockTypes2['BrownStainedGlass'] = 'minecraft:brown_stained_glass';
		    MinecraftBlockTypes2['BrownStainedGlassPane'] = 'minecraft:brown_stained_glass_pane';
		    MinecraftBlockTypes2['BrownTerracotta'] = 'minecraft:brown_terracotta';
		    MinecraftBlockTypes2['BrownWool'] = 'minecraft:brown_wool';
		    MinecraftBlockTypes2['BubbleColumn'] = 'minecraft:bubble_column';
		    MinecraftBlockTypes2['BubbleCoral'] = 'minecraft:bubble_coral';
		    MinecraftBlockTypes2['BubbleCoralBlock'] = 'minecraft:bubble_coral_block';
		    MinecraftBlockTypes2['BubbleCoralFan'] = 'minecraft:bubble_coral_fan';
		    MinecraftBlockTypes2['BubbleCoralWallFan'] = 'minecraft:bubble_coral_wall_fan';
		    MinecraftBlockTypes2['BuddingAmethyst'] = 'minecraft:budding_amethyst';
		    MinecraftBlockTypes2['Cactus'] = 'minecraft:cactus';
		    MinecraftBlockTypes2['Cake'] = 'minecraft:cake';
		    MinecraftBlockTypes2['Calcite'] = 'minecraft:calcite';
		    MinecraftBlockTypes2['CalibratedSculkSensor'] = 'minecraft:calibrated_sculk_sensor';
		    MinecraftBlockTypes2['Camera'] = 'minecraft:camera';
		    MinecraftBlockTypes2['Campfire'] = 'minecraft:campfire';
		    MinecraftBlockTypes2['Candle'] = 'minecraft:candle';
		    MinecraftBlockTypes2['CandleCake'] = 'minecraft:candle_cake';
		    MinecraftBlockTypes2['Carrots'] = 'minecraft:carrots';
		    MinecraftBlockTypes2['CartographyTable'] = 'minecraft:cartography_table';
		    MinecraftBlockTypes2['CarvedPumpkin'] = 'minecraft:carved_pumpkin';
		    MinecraftBlockTypes2['Cauldron'] = 'minecraft:cauldron';
		    MinecraftBlockTypes2['CaveVines'] = 'minecraft:cave_vines';
		    MinecraftBlockTypes2['CaveVinesBodyWithBerries'] = 'minecraft:cave_vines_body_with_berries';
		    MinecraftBlockTypes2['CaveVinesHeadWithBerries'] = 'minecraft:cave_vines_head_with_berries';
		    MinecraftBlockTypes2['Chain'] = 'minecraft:chain';
		    MinecraftBlockTypes2['ChainCommandBlock'] = 'minecraft:chain_command_block';
		    MinecraftBlockTypes2['ChemicalHeat'] = 'minecraft:chemical_heat';
		    MinecraftBlockTypes2['CherryButton'] = 'minecraft:cherry_button';
		    MinecraftBlockTypes2['CherryDoor'] = 'minecraft:cherry_door';
		    MinecraftBlockTypes2['CherryDoubleSlab'] = 'minecraft:cherry_double_slab';
		    MinecraftBlockTypes2['CherryFence'] = 'minecraft:cherry_fence';
		    MinecraftBlockTypes2['CherryFenceGate'] = 'minecraft:cherry_fence_gate';
		    MinecraftBlockTypes2['CherryHangingSign'] = 'minecraft:cherry_hanging_sign';
		    MinecraftBlockTypes2['CherryLeaves'] = 'minecraft:cherry_leaves';
		    MinecraftBlockTypes2['CherryLog'] = 'minecraft:cherry_log';
		    MinecraftBlockTypes2['CherryPlanks'] = 'minecraft:cherry_planks';
		    MinecraftBlockTypes2['CherryPressurePlate'] = 'minecraft:cherry_pressure_plate';
		    MinecraftBlockTypes2['CherrySapling'] = 'minecraft:cherry_sapling';
		    MinecraftBlockTypes2['CherrySlab'] = 'minecraft:cherry_slab';
		    MinecraftBlockTypes2['CherryStairs'] = 'minecraft:cherry_stairs';
		    MinecraftBlockTypes2['CherryStandingSign'] = 'minecraft:cherry_standing_sign';
		    MinecraftBlockTypes2['CherryTrapdoor'] = 'minecraft:cherry_trapdoor';
		    MinecraftBlockTypes2['CherryWallSign'] = 'minecraft:cherry_wall_sign';
		    MinecraftBlockTypes2['CherryWood'] = 'minecraft:cherry_wood';
		    MinecraftBlockTypes2['Chest'] = 'minecraft:chest';
		    MinecraftBlockTypes2['ChippedAnvil'] = 'minecraft:chipped_anvil';
		    MinecraftBlockTypes2['ChiseledBookshelf'] = 'minecraft:chiseled_bookshelf';
		    MinecraftBlockTypes2['ChiseledCopper'] = 'minecraft:chiseled_copper';
		    MinecraftBlockTypes2['ChiseledDeepslate'] = 'minecraft:chiseled_deepslate';
		    MinecraftBlockTypes2['ChiseledNetherBricks'] = 'minecraft:chiseled_nether_bricks';
		    MinecraftBlockTypes2['ChiseledPolishedBlackstone'] = 'minecraft:chiseled_polished_blackstone';
		    MinecraftBlockTypes2['ChiseledQuartzBlock'] = 'minecraft:chiseled_quartz_block';
		    MinecraftBlockTypes2['ChiseledRedSandstone'] = 'minecraft:chiseled_red_sandstone';
		    MinecraftBlockTypes2['ChiseledResinBricks'] = 'minecraft:chiseled_resin_bricks';
		    MinecraftBlockTypes2['ChiseledSandstone'] = 'minecraft:chiseled_sandstone';
		    MinecraftBlockTypes2['ChiseledStoneBricks'] = 'minecraft:chiseled_stone_bricks';
		    MinecraftBlockTypes2['ChiseledTuff'] = 'minecraft:chiseled_tuff';
		    MinecraftBlockTypes2['ChiseledTuffBricks'] = 'minecraft:chiseled_tuff_bricks';
		    MinecraftBlockTypes2['ChorusFlower'] = 'minecraft:chorus_flower';
		    MinecraftBlockTypes2['ChorusPlant'] = 'minecraft:chorus_plant';
		    MinecraftBlockTypes2['Clay'] = 'minecraft:clay';
		    MinecraftBlockTypes2['ClosedEyeblossom'] = 'minecraft:closed_eyeblossom';
		    MinecraftBlockTypes2['CoalBlock'] = 'minecraft:coal_block';
		    MinecraftBlockTypes2['CoalOre'] = 'minecraft:coal_ore';
		    MinecraftBlockTypes2['CoarseDirt'] = 'minecraft:coarse_dirt';
		    MinecraftBlockTypes2['CobbledDeepslate'] = 'minecraft:cobbled_deepslate';
		    MinecraftBlockTypes2['CobbledDeepslateDoubleSlab'] = 'minecraft:cobbled_deepslate_double_slab';
		    MinecraftBlockTypes2['CobbledDeepslateSlab'] = 'minecraft:cobbled_deepslate_slab';
		    MinecraftBlockTypes2['CobbledDeepslateStairs'] = 'minecraft:cobbled_deepslate_stairs';
		    MinecraftBlockTypes2['CobbledDeepslateWall'] = 'minecraft:cobbled_deepslate_wall';
		    MinecraftBlockTypes2['Cobblestone'] = 'minecraft:cobblestone';
		    MinecraftBlockTypes2['CobblestoneDoubleSlab'] = 'minecraft:cobblestone_double_slab';
		    MinecraftBlockTypes2['CobblestoneSlab'] = 'minecraft:cobblestone_slab';
		    MinecraftBlockTypes2['CobblestoneWall'] = 'minecraft:cobblestone_wall';
		    MinecraftBlockTypes2['Cocoa'] = 'minecraft:cocoa';
		    MinecraftBlockTypes2['ColoredTorchBlue'] = 'minecraft:colored_torch_blue';
		    MinecraftBlockTypes2['ColoredTorchGreen'] = 'minecraft:colored_torch_green';
		    MinecraftBlockTypes2['ColoredTorchPurple'] = 'minecraft:colored_torch_purple';
		    MinecraftBlockTypes2['ColoredTorchRed'] = 'minecraft:colored_torch_red';
		    MinecraftBlockTypes2['CommandBlock'] = 'minecraft:command_block';
		    MinecraftBlockTypes2['Composter'] = 'minecraft:composter';
		    MinecraftBlockTypes2['CompoundCreator'] = 'minecraft:compound_creator';
		    MinecraftBlockTypes2['Conduit'] = 'minecraft:conduit';
		    MinecraftBlockTypes2['CopperBlock'] = 'minecraft:copper_block';
		    MinecraftBlockTypes2['CopperBulb'] = 'minecraft:copper_bulb';
		    MinecraftBlockTypes2['CopperDoor'] = 'minecraft:copper_door';
		    MinecraftBlockTypes2['CopperGrate'] = 'minecraft:copper_grate';
		    MinecraftBlockTypes2['CopperOre'] = 'minecraft:copper_ore';
		    MinecraftBlockTypes2['CopperTrapdoor'] = 'minecraft:copper_trapdoor';
		    MinecraftBlockTypes2['Cornflower'] = 'minecraft:cornflower';
		    MinecraftBlockTypes2['CrackedDeepslateBricks'] = 'minecraft:cracked_deepslate_bricks';
		    MinecraftBlockTypes2['CrackedDeepslateTiles'] = 'minecraft:cracked_deepslate_tiles';
		    MinecraftBlockTypes2['CrackedNetherBricks'] = 'minecraft:cracked_nether_bricks';
		    MinecraftBlockTypes2['CrackedPolishedBlackstoneBricks'] = 'minecraft:cracked_polished_blackstone_bricks';
		    MinecraftBlockTypes2['CrackedStoneBricks'] = 'minecraft:cracked_stone_bricks';
		    MinecraftBlockTypes2['Crafter'] = 'minecraft:crafter';
		    MinecraftBlockTypes2['CraftingTable'] = 'minecraft:crafting_table';
		    MinecraftBlockTypes2['CreakingHeart'] = 'minecraft:creaking_heart';
		    MinecraftBlockTypes2['CreeperHead'] = 'minecraft:creeper_head';
		    MinecraftBlockTypes2['CrimsonButton'] = 'minecraft:crimson_button';
		    MinecraftBlockTypes2['CrimsonDoor'] = 'minecraft:crimson_door';
		    MinecraftBlockTypes2['CrimsonDoubleSlab'] = 'minecraft:crimson_double_slab';
		    MinecraftBlockTypes2['CrimsonFence'] = 'minecraft:crimson_fence';
		    MinecraftBlockTypes2['CrimsonFenceGate'] = 'minecraft:crimson_fence_gate';
		    MinecraftBlockTypes2['CrimsonFungus'] = 'minecraft:crimson_fungus';
		    MinecraftBlockTypes2['CrimsonHangingSign'] = 'minecraft:crimson_hanging_sign';
		    MinecraftBlockTypes2['CrimsonHyphae'] = 'minecraft:crimson_hyphae';
		    MinecraftBlockTypes2['CrimsonNylium'] = 'minecraft:crimson_nylium';
		    MinecraftBlockTypes2['CrimsonPlanks'] = 'minecraft:crimson_planks';
		    MinecraftBlockTypes2['CrimsonPressurePlate'] = 'minecraft:crimson_pressure_plate';
		    MinecraftBlockTypes2['CrimsonRoots'] = 'minecraft:crimson_roots';
		    MinecraftBlockTypes2['CrimsonSlab'] = 'minecraft:crimson_slab';
		    MinecraftBlockTypes2['CrimsonStairs'] = 'minecraft:crimson_stairs';
		    MinecraftBlockTypes2['CrimsonStandingSign'] = 'minecraft:crimson_standing_sign';
		    MinecraftBlockTypes2['CrimsonStem'] = 'minecraft:crimson_stem';
		    MinecraftBlockTypes2['CrimsonTrapdoor'] = 'minecraft:crimson_trapdoor';
		    MinecraftBlockTypes2['CrimsonWallSign'] = 'minecraft:crimson_wall_sign';
		    MinecraftBlockTypes2['CryingObsidian'] = 'minecraft:crying_obsidian';
		    MinecraftBlockTypes2['CutCopper'] = 'minecraft:cut_copper';
		    MinecraftBlockTypes2['CutCopperSlab'] = 'minecraft:cut_copper_slab';
		    MinecraftBlockTypes2['CutCopperStairs'] = 'minecraft:cut_copper_stairs';
		    MinecraftBlockTypes2['CutRedSandstone'] = 'minecraft:cut_red_sandstone';
		    MinecraftBlockTypes2['CutRedSandstoneDoubleSlab'] = 'minecraft:cut_red_sandstone_double_slab';
		    MinecraftBlockTypes2['CutRedSandstoneSlab'] = 'minecraft:cut_red_sandstone_slab';
		    MinecraftBlockTypes2['CutSandstone'] = 'minecraft:cut_sandstone';
		    MinecraftBlockTypes2['CutSandstoneDoubleSlab'] = 'minecraft:cut_sandstone_double_slab';
		    MinecraftBlockTypes2['CutSandstoneSlab'] = 'minecraft:cut_sandstone_slab';
		    MinecraftBlockTypes2['CyanCandle'] = 'minecraft:cyan_candle';
		    MinecraftBlockTypes2['CyanCandleCake'] = 'minecraft:cyan_candle_cake';
		    MinecraftBlockTypes2['CyanCarpet'] = 'minecraft:cyan_carpet';
		    MinecraftBlockTypes2['CyanConcrete'] = 'minecraft:cyan_concrete';
		    MinecraftBlockTypes2['CyanConcretePowder'] = 'minecraft:cyan_concrete_powder';
		    MinecraftBlockTypes2['CyanGlazedTerracotta'] = 'minecraft:cyan_glazed_terracotta';
		    MinecraftBlockTypes2['CyanShulkerBox'] = 'minecraft:cyan_shulker_box';
		    MinecraftBlockTypes2['CyanStainedGlass'] = 'minecraft:cyan_stained_glass';
		    MinecraftBlockTypes2['CyanStainedGlassPane'] = 'minecraft:cyan_stained_glass_pane';
		    MinecraftBlockTypes2['CyanTerracotta'] = 'minecraft:cyan_terracotta';
		    MinecraftBlockTypes2['CyanWool'] = 'minecraft:cyan_wool';
		    MinecraftBlockTypes2['DamagedAnvil'] = 'minecraft:damaged_anvil';
		    MinecraftBlockTypes2['Dandelion'] = 'minecraft:dandelion';
		    MinecraftBlockTypes2['DarkOakButton'] = 'minecraft:dark_oak_button';
		    MinecraftBlockTypes2['DarkOakDoor'] = 'minecraft:dark_oak_door';
		    MinecraftBlockTypes2['DarkOakDoubleSlab'] = 'minecraft:dark_oak_double_slab';
		    MinecraftBlockTypes2['DarkOakFence'] = 'minecraft:dark_oak_fence';
		    MinecraftBlockTypes2['DarkOakFenceGate'] = 'minecraft:dark_oak_fence_gate';
		    MinecraftBlockTypes2['DarkOakHangingSign'] = 'minecraft:dark_oak_hanging_sign';
		    MinecraftBlockTypes2['DarkOakLeaves'] = 'minecraft:dark_oak_leaves';
		    MinecraftBlockTypes2['DarkOakLog'] = 'minecraft:dark_oak_log';
		    MinecraftBlockTypes2['DarkOakPlanks'] = 'minecraft:dark_oak_planks';
		    MinecraftBlockTypes2['DarkOakPressurePlate'] = 'minecraft:dark_oak_pressure_plate';
		    MinecraftBlockTypes2['DarkOakSapling'] = 'minecraft:dark_oak_sapling';
		    MinecraftBlockTypes2['DarkOakSlab'] = 'minecraft:dark_oak_slab';
		    MinecraftBlockTypes2['DarkOakStairs'] = 'minecraft:dark_oak_stairs';
		    MinecraftBlockTypes2['DarkOakTrapdoor'] = 'minecraft:dark_oak_trapdoor';
		    MinecraftBlockTypes2['DarkOakWood'] = 'minecraft:dark_oak_wood';
		    MinecraftBlockTypes2['DarkPrismarine'] = 'minecraft:dark_prismarine';
		    MinecraftBlockTypes2['DarkPrismarineDoubleSlab'] = 'minecraft:dark_prismarine_double_slab';
		    MinecraftBlockTypes2['DarkPrismarineSlab'] = 'minecraft:dark_prismarine_slab';
		    MinecraftBlockTypes2['DarkPrismarineStairs'] = 'minecraft:dark_prismarine_stairs';
		    MinecraftBlockTypes2['DarkoakStandingSign'] = 'minecraft:darkoak_standing_sign';
		    MinecraftBlockTypes2['DarkoakWallSign'] = 'minecraft:darkoak_wall_sign';
		    MinecraftBlockTypes2['DaylightDetector'] = 'minecraft:daylight_detector';
		    MinecraftBlockTypes2['DaylightDetectorInverted'] = 'minecraft:daylight_detector_inverted';
		    MinecraftBlockTypes2['DeadBrainCoral'] = 'minecraft:dead_brain_coral';
		    MinecraftBlockTypes2['DeadBrainCoralBlock'] = 'minecraft:dead_brain_coral_block';
		    MinecraftBlockTypes2['DeadBrainCoralFan'] = 'minecraft:dead_brain_coral_fan';
		    MinecraftBlockTypes2['DeadBrainCoralWallFan'] = 'minecraft:dead_brain_coral_wall_fan';
		    MinecraftBlockTypes2['DeadBubbleCoral'] = 'minecraft:dead_bubble_coral';
		    MinecraftBlockTypes2['DeadBubbleCoralBlock'] = 'minecraft:dead_bubble_coral_block';
		    MinecraftBlockTypes2['DeadBubbleCoralFan'] = 'minecraft:dead_bubble_coral_fan';
		    MinecraftBlockTypes2['DeadBubbleCoralWallFan'] = 'minecraft:dead_bubble_coral_wall_fan';
		    MinecraftBlockTypes2['DeadFireCoral'] = 'minecraft:dead_fire_coral';
		    MinecraftBlockTypes2['DeadFireCoralBlock'] = 'minecraft:dead_fire_coral_block';
		    MinecraftBlockTypes2['DeadFireCoralFan'] = 'minecraft:dead_fire_coral_fan';
		    MinecraftBlockTypes2['DeadFireCoralWallFan'] = 'minecraft:dead_fire_coral_wall_fan';
		    MinecraftBlockTypes2['DeadHornCoral'] = 'minecraft:dead_horn_coral';
		    MinecraftBlockTypes2['DeadHornCoralBlock'] = 'minecraft:dead_horn_coral_block';
		    MinecraftBlockTypes2['DeadHornCoralFan'] = 'minecraft:dead_horn_coral_fan';
		    MinecraftBlockTypes2['DeadHornCoralWallFan'] = 'minecraft:dead_horn_coral_wall_fan';
		    MinecraftBlockTypes2['DeadTubeCoral'] = 'minecraft:dead_tube_coral';
		    MinecraftBlockTypes2['DeadTubeCoralBlock'] = 'minecraft:dead_tube_coral_block';
		    MinecraftBlockTypes2['DeadTubeCoralFan'] = 'minecraft:dead_tube_coral_fan';
		    MinecraftBlockTypes2['DeadTubeCoralWallFan'] = 'minecraft:dead_tube_coral_wall_fan';
		    MinecraftBlockTypes2['Deadbush'] = 'minecraft:deadbush';
		    MinecraftBlockTypes2['DecoratedPot'] = 'minecraft:decorated_pot';
		    MinecraftBlockTypes2['Deepslate'] = 'minecraft:deepslate';
		    MinecraftBlockTypes2['DeepslateBrickDoubleSlab'] = 'minecraft:deepslate_brick_double_slab';
		    MinecraftBlockTypes2['DeepslateBrickSlab'] = 'minecraft:deepslate_brick_slab';
		    MinecraftBlockTypes2['DeepslateBrickStairs'] = 'minecraft:deepslate_brick_stairs';
		    MinecraftBlockTypes2['DeepslateBrickWall'] = 'minecraft:deepslate_brick_wall';
		    MinecraftBlockTypes2['DeepslateBricks'] = 'minecraft:deepslate_bricks';
		    MinecraftBlockTypes2['DeepslateCoalOre'] = 'minecraft:deepslate_coal_ore';
		    MinecraftBlockTypes2['DeepslateCopperOre'] = 'minecraft:deepslate_copper_ore';
		    MinecraftBlockTypes2['DeepslateDiamondOre'] = 'minecraft:deepslate_diamond_ore';
		    MinecraftBlockTypes2['DeepslateEmeraldOre'] = 'minecraft:deepslate_emerald_ore';
		    MinecraftBlockTypes2['DeepslateGoldOre'] = 'minecraft:deepslate_gold_ore';
		    MinecraftBlockTypes2['DeepslateIronOre'] = 'minecraft:deepslate_iron_ore';
		    MinecraftBlockTypes2['DeepslateLapisOre'] = 'minecraft:deepslate_lapis_ore';
		    MinecraftBlockTypes2['DeepslateRedstoneOre'] = 'minecraft:deepslate_redstone_ore';
		    MinecraftBlockTypes2['DeepslateTileDoubleSlab'] = 'minecraft:deepslate_tile_double_slab';
		    MinecraftBlockTypes2['DeepslateTileSlab'] = 'minecraft:deepslate_tile_slab';
		    MinecraftBlockTypes2['DeepslateTileStairs'] = 'minecraft:deepslate_tile_stairs';
		    MinecraftBlockTypes2['DeepslateTileWall'] = 'minecraft:deepslate_tile_wall';
		    MinecraftBlockTypes2['DeepslateTiles'] = 'minecraft:deepslate_tiles';
		    MinecraftBlockTypes2['Deny'] = 'minecraft:deny';
		    MinecraftBlockTypes2['DetectorRail'] = 'minecraft:detector_rail';
		    MinecraftBlockTypes2['DiamondBlock'] = 'minecraft:diamond_block';
		    MinecraftBlockTypes2['DiamondOre'] = 'minecraft:diamond_ore';
		    MinecraftBlockTypes2['Diorite'] = 'minecraft:diorite';
		    MinecraftBlockTypes2['DioriteDoubleSlab'] = 'minecraft:diorite_double_slab';
		    MinecraftBlockTypes2['DioriteSlab'] = 'minecraft:diorite_slab';
		    MinecraftBlockTypes2['DioriteStairs'] = 'minecraft:diorite_stairs';
		    MinecraftBlockTypes2['DioriteWall'] = 'minecraft:diorite_wall';
		    MinecraftBlockTypes2['Dirt'] = 'minecraft:dirt';
		    MinecraftBlockTypes2['DirtWithRoots'] = 'minecraft:dirt_with_roots';
		    MinecraftBlockTypes2['Dispenser'] = 'minecraft:dispenser';
		    MinecraftBlockTypes2['DoubleCutCopperSlab'] = 'minecraft:double_cut_copper_slab';
		    MinecraftBlockTypes2['DragonEgg'] = 'minecraft:dragon_egg';
		    MinecraftBlockTypes2['DragonHead'] = 'minecraft:dragon_head';
		    MinecraftBlockTypes2['DriedKelpBlock'] = 'minecraft:dried_kelp_block';
		    MinecraftBlockTypes2['DripstoneBlock'] = 'minecraft:dripstone_block';
		    MinecraftBlockTypes2['Dropper'] = 'minecraft:dropper';
		    MinecraftBlockTypes2['Element0'] = 'minecraft:element_0';
		    MinecraftBlockTypes2['Element1'] = 'minecraft:element_1';
		    MinecraftBlockTypes2['Element10'] = 'minecraft:element_10';
		    MinecraftBlockTypes2['Element100'] = 'minecraft:element_100';
		    MinecraftBlockTypes2['Element101'] = 'minecraft:element_101';
		    MinecraftBlockTypes2['Element102'] = 'minecraft:element_102';
		    MinecraftBlockTypes2['Element103'] = 'minecraft:element_103';
		    MinecraftBlockTypes2['Element104'] = 'minecraft:element_104';
		    MinecraftBlockTypes2['Element105'] = 'minecraft:element_105';
		    MinecraftBlockTypes2['Element106'] = 'minecraft:element_106';
		    MinecraftBlockTypes2['Element107'] = 'minecraft:element_107';
		    MinecraftBlockTypes2['Element108'] = 'minecraft:element_108';
		    MinecraftBlockTypes2['Element109'] = 'minecraft:element_109';
		    MinecraftBlockTypes2['Element11'] = 'minecraft:element_11';
		    MinecraftBlockTypes2['Element110'] = 'minecraft:element_110';
		    MinecraftBlockTypes2['Element111'] = 'minecraft:element_111';
		    MinecraftBlockTypes2['Element112'] = 'minecraft:element_112';
		    MinecraftBlockTypes2['Element113'] = 'minecraft:element_113';
		    MinecraftBlockTypes2['Element114'] = 'minecraft:element_114';
		    MinecraftBlockTypes2['Element115'] = 'minecraft:element_115';
		    MinecraftBlockTypes2['Element116'] = 'minecraft:element_116';
		    MinecraftBlockTypes2['Element117'] = 'minecraft:element_117';
		    MinecraftBlockTypes2['Element118'] = 'minecraft:element_118';
		    MinecraftBlockTypes2['Element12'] = 'minecraft:element_12';
		    MinecraftBlockTypes2['Element13'] = 'minecraft:element_13';
		    MinecraftBlockTypes2['Element14'] = 'minecraft:element_14';
		    MinecraftBlockTypes2['Element15'] = 'minecraft:element_15';
		    MinecraftBlockTypes2['Element16'] = 'minecraft:element_16';
		    MinecraftBlockTypes2['Element17'] = 'minecraft:element_17';
		    MinecraftBlockTypes2['Element18'] = 'minecraft:element_18';
		    MinecraftBlockTypes2['Element19'] = 'minecraft:element_19';
		    MinecraftBlockTypes2['Element2'] = 'minecraft:element_2';
		    MinecraftBlockTypes2['Element20'] = 'minecraft:element_20';
		    MinecraftBlockTypes2['Element21'] = 'minecraft:element_21';
		    MinecraftBlockTypes2['Element22'] = 'minecraft:element_22';
		    MinecraftBlockTypes2['Element23'] = 'minecraft:element_23';
		    MinecraftBlockTypes2['Element24'] = 'minecraft:element_24';
		    MinecraftBlockTypes2['Element25'] = 'minecraft:element_25';
		    MinecraftBlockTypes2['Element26'] = 'minecraft:element_26';
		    MinecraftBlockTypes2['Element27'] = 'minecraft:element_27';
		    MinecraftBlockTypes2['Element28'] = 'minecraft:element_28';
		    MinecraftBlockTypes2['Element29'] = 'minecraft:element_29';
		    MinecraftBlockTypes2['Element3'] = 'minecraft:element_3';
		    MinecraftBlockTypes2['Element30'] = 'minecraft:element_30';
		    MinecraftBlockTypes2['Element31'] = 'minecraft:element_31';
		    MinecraftBlockTypes2['Element32'] = 'minecraft:element_32';
		    MinecraftBlockTypes2['Element33'] = 'minecraft:element_33';
		    MinecraftBlockTypes2['Element34'] = 'minecraft:element_34';
		    MinecraftBlockTypes2['Element35'] = 'minecraft:element_35';
		    MinecraftBlockTypes2['Element36'] = 'minecraft:element_36';
		    MinecraftBlockTypes2['Element37'] = 'minecraft:element_37';
		    MinecraftBlockTypes2['Element38'] = 'minecraft:element_38';
		    MinecraftBlockTypes2['Element39'] = 'minecraft:element_39';
		    MinecraftBlockTypes2['Element4'] = 'minecraft:element_4';
		    MinecraftBlockTypes2['Element40'] = 'minecraft:element_40';
		    MinecraftBlockTypes2['Element41'] = 'minecraft:element_41';
		    MinecraftBlockTypes2['Element42'] = 'minecraft:element_42';
		    MinecraftBlockTypes2['Element43'] = 'minecraft:element_43';
		    MinecraftBlockTypes2['Element44'] = 'minecraft:element_44';
		    MinecraftBlockTypes2['Element45'] = 'minecraft:element_45';
		    MinecraftBlockTypes2['Element46'] = 'minecraft:element_46';
		    MinecraftBlockTypes2['Element47'] = 'minecraft:element_47';
		    MinecraftBlockTypes2['Element48'] = 'minecraft:element_48';
		    MinecraftBlockTypes2['Element49'] = 'minecraft:element_49';
		    MinecraftBlockTypes2['Element5'] = 'minecraft:element_5';
		    MinecraftBlockTypes2['Element50'] = 'minecraft:element_50';
		    MinecraftBlockTypes2['Element51'] = 'minecraft:element_51';
		    MinecraftBlockTypes2['Element52'] = 'minecraft:element_52';
		    MinecraftBlockTypes2['Element53'] = 'minecraft:element_53';
		    MinecraftBlockTypes2['Element54'] = 'minecraft:element_54';
		    MinecraftBlockTypes2['Element55'] = 'minecraft:element_55';
		    MinecraftBlockTypes2['Element56'] = 'minecraft:element_56';
		    MinecraftBlockTypes2['Element57'] = 'minecraft:element_57';
		    MinecraftBlockTypes2['Element58'] = 'minecraft:element_58';
		    MinecraftBlockTypes2['Element59'] = 'minecraft:element_59';
		    MinecraftBlockTypes2['Element6'] = 'minecraft:element_6';
		    MinecraftBlockTypes2['Element60'] = 'minecraft:element_60';
		    MinecraftBlockTypes2['Element61'] = 'minecraft:element_61';
		    MinecraftBlockTypes2['Element62'] = 'minecraft:element_62';
		    MinecraftBlockTypes2['Element63'] = 'minecraft:element_63';
		    MinecraftBlockTypes2['Element64'] = 'minecraft:element_64';
		    MinecraftBlockTypes2['Element65'] = 'minecraft:element_65';
		    MinecraftBlockTypes2['Element66'] = 'minecraft:element_66';
		    MinecraftBlockTypes2['Element67'] = 'minecraft:element_67';
		    MinecraftBlockTypes2['Element68'] = 'minecraft:element_68';
		    MinecraftBlockTypes2['Element69'] = 'minecraft:element_69';
		    MinecraftBlockTypes2['Element7'] = 'minecraft:element_7';
		    MinecraftBlockTypes2['Element70'] = 'minecraft:element_70';
		    MinecraftBlockTypes2['Element71'] = 'minecraft:element_71';
		    MinecraftBlockTypes2['Element72'] = 'minecraft:element_72';
		    MinecraftBlockTypes2['Element73'] = 'minecraft:element_73';
		    MinecraftBlockTypes2['Element74'] = 'minecraft:element_74';
		    MinecraftBlockTypes2['Element75'] = 'minecraft:element_75';
		    MinecraftBlockTypes2['Element76'] = 'minecraft:element_76';
		    MinecraftBlockTypes2['Element77'] = 'minecraft:element_77';
		    MinecraftBlockTypes2['Element78'] = 'minecraft:element_78';
		    MinecraftBlockTypes2['Element79'] = 'minecraft:element_79';
		    MinecraftBlockTypes2['Element8'] = 'minecraft:element_8';
		    MinecraftBlockTypes2['Element80'] = 'minecraft:element_80';
		    MinecraftBlockTypes2['Element81'] = 'minecraft:element_81';
		    MinecraftBlockTypes2['Element82'] = 'minecraft:element_82';
		    MinecraftBlockTypes2['Element83'] = 'minecraft:element_83';
		    MinecraftBlockTypes2['Element84'] = 'minecraft:element_84';
		    MinecraftBlockTypes2['Element85'] = 'minecraft:element_85';
		    MinecraftBlockTypes2['Element86'] = 'minecraft:element_86';
		    MinecraftBlockTypes2['Element87'] = 'minecraft:element_87';
		    MinecraftBlockTypes2['Element88'] = 'minecraft:element_88';
		    MinecraftBlockTypes2['Element89'] = 'minecraft:element_89';
		    MinecraftBlockTypes2['Element9'] = 'minecraft:element_9';
		    MinecraftBlockTypes2['Element90'] = 'minecraft:element_90';
		    MinecraftBlockTypes2['Element91'] = 'minecraft:element_91';
		    MinecraftBlockTypes2['Element92'] = 'minecraft:element_92';
		    MinecraftBlockTypes2['Element93'] = 'minecraft:element_93';
		    MinecraftBlockTypes2['Element94'] = 'minecraft:element_94';
		    MinecraftBlockTypes2['Element95'] = 'minecraft:element_95';
		    MinecraftBlockTypes2['Element96'] = 'minecraft:element_96';
		    MinecraftBlockTypes2['Element97'] = 'minecraft:element_97';
		    MinecraftBlockTypes2['Element98'] = 'minecraft:element_98';
		    MinecraftBlockTypes2['Element99'] = 'minecraft:element_99';
		    MinecraftBlockTypes2['ElementConstructor'] = 'minecraft:element_constructor';
		    MinecraftBlockTypes2['EmeraldBlock'] = 'minecraft:emerald_block';
		    MinecraftBlockTypes2['EmeraldOre'] = 'minecraft:emerald_ore';
		    MinecraftBlockTypes2['EnchantingTable'] = 'minecraft:enchanting_table';
		    MinecraftBlockTypes2['EndBrickStairs'] = 'minecraft:end_brick_stairs';
		    MinecraftBlockTypes2['EndBricks'] = 'minecraft:end_bricks';
		    MinecraftBlockTypes2['EndPortal'] = 'minecraft:end_portal';
		    MinecraftBlockTypes2['EndPortalFrame'] = 'minecraft:end_portal_frame';
		    MinecraftBlockTypes2['EndRod'] = 'minecraft:end_rod';
		    MinecraftBlockTypes2['EndStone'] = 'minecraft:end_stone';
		    MinecraftBlockTypes2['EndStoneBrickDoubleSlab'] = 'minecraft:end_stone_brick_double_slab';
		    MinecraftBlockTypes2['EndStoneBrickSlab'] = 'minecraft:end_stone_brick_slab';
		    MinecraftBlockTypes2['EndStoneBrickWall'] = 'minecraft:end_stone_brick_wall';
		    MinecraftBlockTypes2['EnderChest'] = 'minecraft:ender_chest';
		    MinecraftBlockTypes2['ExposedChiseledCopper'] = 'minecraft:exposed_chiseled_copper';
		    MinecraftBlockTypes2['ExposedCopper'] = 'minecraft:exposed_copper';
		    MinecraftBlockTypes2['ExposedCopperBulb'] = 'minecraft:exposed_copper_bulb';
		    MinecraftBlockTypes2['ExposedCopperDoor'] = 'minecraft:exposed_copper_door';
		    MinecraftBlockTypes2['ExposedCopperGrate'] = 'minecraft:exposed_copper_grate';
		    MinecraftBlockTypes2['ExposedCopperTrapdoor'] = 'minecraft:exposed_copper_trapdoor';
		    MinecraftBlockTypes2['ExposedCutCopper'] = 'minecraft:exposed_cut_copper';
		    MinecraftBlockTypes2['ExposedCutCopperSlab'] = 'minecraft:exposed_cut_copper_slab';
		    MinecraftBlockTypes2['ExposedCutCopperStairs'] = 'minecraft:exposed_cut_copper_stairs';
		    MinecraftBlockTypes2['ExposedDoubleCutCopperSlab'] = 'minecraft:exposed_double_cut_copper_slab';
		    MinecraftBlockTypes2['Farmland'] = 'minecraft:farmland';
		    MinecraftBlockTypes2['FenceGate'] = 'minecraft:fence_gate';
		    MinecraftBlockTypes2['Fern'] = 'minecraft:fern';
		    MinecraftBlockTypes2['Fire'] = 'minecraft:fire';
		    MinecraftBlockTypes2['FireCoral'] = 'minecraft:fire_coral';
		    MinecraftBlockTypes2['FireCoralBlock'] = 'minecraft:fire_coral_block';
		    MinecraftBlockTypes2['FireCoralFan'] = 'minecraft:fire_coral_fan';
		    MinecraftBlockTypes2['FireCoralWallFan'] = 'minecraft:fire_coral_wall_fan';
		    MinecraftBlockTypes2['FletchingTable'] = 'minecraft:fletching_table';
		    MinecraftBlockTypes2['FlowerPot'] = 'minecraft:flower_pot';
		    MinecraftBlockTypes2['FloweringAzalea'] = 'minecraft:flowering_azalea';
		    MinecraftBlockTypes2['FlowingLava'] = 'minecraft:flowing_lava';
		    MinecraftBlockTypes2['FlowingWater'] = 'minecraft:flowing_water';
		    MinecraftBlockTypes2['Frame'] = 'minecraft:frame';
		    MinecraftBlockTypes2['FrogSpawn'] = 'minecraft:frog_spawn';
		    MinecraftBlockTypes2['FrostedIce'] = 'minecraft:frosted_ice';
		    MinecraftBlockTypes2['Furnace'] = 'minecraft:furnace';
		    MinecraftBlockTypes2['GildedBlackstone'] = 'minecraft:gilded_blackstone';
		    MinecraftBlockTypes2['Glass'] = 'minecraft:glass';
		    MinecraftBlockTypes2['GlassPane'] = 'minecraft:glass_pane';
		    MinecraftBlockTypes2['GlowFrame'] = 'minecraft:glow_frame';
		    MinecraftBlockTypes2['GlowLichen'] = 'minecraft:glow_lichen';
		    MinecraftBlockTypes2['Glowstone'] = 'minecraft:glowstone';
		    MinecraftBlockTypes2['GoldBlock'] = 'minecraft:gold_block';
		    MinecraftBlockTypes2['GoldOre'] = 'minecraft:gold_ore';
		    MinecraftBlockTypes2['GoldenRail'] = 'minecraft:golden_rail';
		    MinecraftBlockTypes2['Granite'] = 'minecraft:granite';
		    MinecraftBlockTypes2['GraniteDoubleSlab'] = 'minecraft:granite_double_slab';
		    MinecraftBlockTypes2['GraniteSlab'] = 'minecraft:granite_slab';
		    MinecraftBlockTypes2['GraniteStairs'] = 'minecraft:granite_stairs';
		    MinecraftBlockTypes2['GraniteWall'] = 'minecraft:granite_wall';
		    MinecraftBlockTypes2['GrassBlock'] = 'minecraft:grass_block';
		    MinecraftBlockTypes2['GrassPath'] = 'minecraft:grass_path';
		    MinecraftBlockTypes2['Gravel'] = 'minecraft:gravel';
		    MinecraftBlockTypes2['GrayCandle'] = 'minecraft:gray_candle';
		    MinecraftBlockTypes2['GrayCandleCake'] = 'minecraft:gray_candle_cake';
		    MinecraftBlockTypes2['GrayCarpet'] = 'minecraft:gray_carpet';
		    MinecraftBlockTypes2['GrayConcrete'] = 'minecraft:gray_concrete';
		    MinecraftBlockTypes2['GrayConcretePowder'] = 'minecraft:gray_concrete_powder';
		    MinecraftBlockTypes2['GrayGlazedTerracotta'] = 'minecraft:gray_glazed_terracotta';
		    MinecraftBlockTypes2['GrayShulkerBox'] = 'minecraft:gray_shulker_box';
		    MinecraftBlockTypes2['GrayStainedGlass'] = 'minecraft:gray_stained_glass';
		    MinecraftBlockTypes2['GrayStainedGlassPane'] = 'minecraft:gray_stained_glass_pane';
		    MinecraftBlockTypes2['GrayTerracotta'] = 'minecraft:gray_terracotta';
		    MinecraftBlockTypes2['GrayWool'] = 'minecraft:gray_wool';
		    MinecraftBlockTypes2['GreenCandle'] = 'minecraft:green_candle';
		    MinecraftBlockTypes2['GreenCandleCake'] = 'minecraft:green_candle_cake';
		    MinecraftBlockTypes2['GreenCarpet'] = 'minecraft:green_carpet';
		    MinecraftBlockTypes2['GreenConcrete'] = 'minecraft:green_concrete';
		    MinecraftBlockTypes2['GreenConcretePowder'] = 'minecraft:green_concrete_powder';
		    MinecraftBlockTypes2['GreenGlazedTerracotta'] = 'minecraft:green_glazed_terracotta';
		    MinecraftBlockTypes2['GreenShulkerBox'] = 'minecraft:green_shulker_box';
		    MinecraftBlockTypes2['GreenStainedGlass'] = 'minecraft:green_stained_glass';
		    MinecraftBlockTypes2['GreenStainedGlassPane'] = 'minecraft:green_stained_glass_pane';
		    MinecraftBlockTypes2['GreenTerracotta'] = 'minecraft:green_terracotta';
		    MinecraftBlockTypes2['GreenWool'] = 'minecraft:green_wool';
		    MinecraftBlockTypes2['Grindstone'] = 'minecraft:grindstone';
		    MinecraftBlockTypes2['HangingRoots'] = 'minecraft:hanging_roots';
		    MinecraftBlockTypes2['HardBlackStainedGlass'] = 'minecraft:hard_black_stained_glass';
		    MinecraftBlockTypes2['HardBlackStainedGlassPane'] = 'minecraft:hard_black_stained_glass_pane';
		    MinecraftBlockTypes2['HardBlueStainedGlass'] = 'minecraft:hard_blue_stained_glass';
		    MinecraftBlockTypes2['HardBlueStainedGlassPane'] = 'minecraft:hard_blue_stained_glass_pane';
		    MinecraftBlockTypes2['HardBrownStainedGlass'] = 'minecraft:hard_brown_stained_glass';
		    MinecraftBlockTypes2['HardBrownStainedGlassPane'] = 'minecraft:hard_brown_stained_glass_pane';
		    MinecraftBlockTypes2['HardCyanStainedGlass'] = 'minecraft:hard_cyan_stained_glass';
		    MinecraftBlockTypes2['HardCyanStainedGlassPane'] = 'minecraft:hard_cyan_stained_glass_pane';
		    MinecraftBlockTypes2['HardGlass'] = 'minecraft:hard_glass';
		    MinecraftBlockTypes2['HardGlassPane'] = 'minecraft:hard_glass_pane';
		    MinecraftBlockTypes2['HardGrayStainedGlass'] = 'minecraft:hard_gray_stained_glass';
		    MinecraftBlockTypes2['HardGrayStainedGlassPane'] = 'minecraft:hard_gray_stained_glass_pane';
		    MinecraftBlockTypes2['HardGreenStainedGlass'] = 'minecraft:hard_green_stained_glass';
		    MinecraftBlockTypes2['HardGreenStainedGlassPane'] = 'minecraft:hard_green_stained_glass_pane';
		    MinecraftBlockTypes2['HardLightBlueStainedGlass'] = 'minecraft:hard_light_blue_stained_glass';
		    MinecraftBlockTypes2['HardLightBlueStainedGlassPane'] = 'minecraft:hard_light_blue_stained_glass_pane';
		    MinecraftBlockTypes2['HardLightGrayStainedGlass'] = 'minecraft:hard_light_gray_stained_glass';
		    MinecraftBlockTypes2['HardLightGrayStainedGlassPane'] = 'minecraft:hard_light_gray_stained_glass_pane';
		    MinecraftBlockTypes2['HardLimeStainedGlass'] = 'minecraft:hard_lime_stained_glass';
		    MinecraftBlockTypes2['HardLimeStainedGlassPane'] = 'minecraft:hard_lime_stained_glass_pane';
		    MinecraftBlockTypes2['HardMagentaStainedGlass'] = 'minecraft:hard_magenta_stained_glass';
		    MinecraftBlockTypes2['HardMagentaStainedGlassPane'] = 'minecraft:hard_magenta_stained_glass_pane';
		    MinecraftBlockTypes2['HardOrangeStainedGlass'] = 'minecraft:hard_orange_stained_glass';
		    MinecraftBlockTypes2['HardOrangeStainedGlassPane'] = 'minecraft:hard_orange_stained_glass_pane';
		    MinecraftBlockTypes2['HardPinkStainedGlass'] = 'minecraft:hard_pink_stained_glass';
		    MinecraftBlockTypes2['HardPinkStainedGlassPane'] = 'minecraft:hard_pink_stained_glass_pane';
		    MinecraftBlockTypes2['HardPurpleStainedGlass'] = 'minecraft:hard_purple_stained_glass';
		    MinecraftBlockTypes2['HardPurpleStainedGlassPane'] = 'minecraft:hard_purple_stained_glass_pane';
		    MinecraftBlockTypes2['HardRedStainedGlass'] = 'minecraft:hard_red_stained_glass';
		    MinecraftBlockTypes2['HardRedStainedGlassPane'] = 'minecraft:hard_red_stained_glass_pane';
		    MinecraftBlockTypes2['HardWhiteStainedGlass'] = 'minecraft:hard_white_stained_glass';
		    MinecraftBlockTypes2['HardWhiteStainedGlassPane'] = 'minecraft:hard_white_stained_glass_pane';
		    MinecraftBlockTypes2['HardYellowStainedGlass'] = 'minecraft:hard_yellow_stained_glass';
		    MinecraftBlockTypes2['HardYellowStainedGlassPane'] = 'minecraft:hard_yellow_stained_glass_pane';
		    MinecraftBlockTypes2['HardenedClay'] = 'minecraft:hardened_clay';
		    MinecraftBlockTypes2['HayBlock'] = 'minecraft:hay_block';
		    MinecraftBlockTypes2['HeavyCore'] = 'minecraft:heavy_core';
		    MinecraftBlockTypes2['HeavyWeightedPressurePlate'] = 'minecraft:heavy_weighted_pressure_plate';
		    MinecraftBlockTypes2['HoneyBlock'] = 'minecraft:honey_block';
		    MinecraftBlockTypes2['HoneycombBlock'] = 'minecraft:honeycomb_block';
		    MinecraftBlockTypes2['Hopper'] = 'minecraft:hopper';
		    MinecraftBlockTypes2['HornCoral'] = 'minecraft:horn_coral';
		    MinecraftBlockTypes2['HornCoralBlock'] = 'minecraft:horn_coral_block';
		    MinecraftBlockTypes2['HornCoralFan'] = 'minecraft:horn_coral_fan';
		    MinecraftBlockTypes2['HornCoralWallFan'] = 'minecraft:horn_coral_wall_fan';
		    MinecraftBlockTypes2['Ice'] = 'minecraft:ice';
		    MinecraftBlockTypes2['InfestedChiseledStoneBricks'] = 'minecraft:infested_chiseled_stone_bricks';
		    MinecraftBlockTypes2['InfestedCobblestone'] = 'minecraft:infested_cobblestone';
		    MinecraftBlockTypes2['InfestedCrackedStoneBricks'] = 'minecraft:infested_cracked_stone_bricks';
		    MinecraftBlockTypes2['InfestedDeepslate'] = 'minecraft:infested_deepslate';
		    MinecraftBlockTypes2['InfestedMossyStoneBricks'] = 'minecraft:infested_mossy_stone_bricks';
		    MinecraftBlockTypes2['InfestedStone'] = 'minecraft:infested_stone';
		    MinecraftBlockTypes2['InfestedStoneBricks'] = 'minecraft:infested_stone_bricks';
		    MinecraftBlockTypes2['IronBars'] = 'minecraft:iron_bars';
		    MinecraftBlockTypes2['IronBlock'] = 'minecraft:iron_block';
		    MinecraftBlockTypes2['IronDoor'] = 'minecraft:iron_door';
		    MinecraftBlockTypes2['IronOre'] = 'minecraft:iron_ore';
		    MinecraftBlockTypes2['IronTrapdoor'] = 'minecraft:iron_trapdoor';
		    MinecraftBlockTypes2['Jigsaw'] = 'minecraft:jigsaw';
		    MinecraftBlockTypes2['Jukebox'] = 'minecraft:jukebox';
		    MinecraftBlockTypes2['JungleButton'] = 'minecraft:jungle_button';
		    MinecraftBlockTypes2['JungleDoor'] = 'minecraft:jungle_door';
		    MinecraftBlockTypes2['JungleDoubleSlab'] = 'minecraft:jungle_double_slab';
		    MinecraftBlockTypes2['JungleFence'] = 'minecraft:jungle_fence';
		    MinecraftBlockTypes2['JungleFenceGate'] = 'minecraft:jungle_fence_gate';
		    MinecraftBlockTypes2['JungleHangingSign'] = 'minecraft:jungle_hanging_sign';
		    MinecraftBlockTypes2['JungleLeaves'] = 'minecraft:jungle_leaves';
		    MinecraftBlockTypes2['JungleLog'] = 'minecraft:jungle_log';
		    MinecraftBlockTypes2['JunglePlanks'] = 'minecraft:jungle_planks';
		    MinecraftBlockTypes2['JunglePressurePlate'] = 'minecraft:jungle_pressure_plate';
		    MinecraftBlockTypes2['JungleSapling'] = 'minecraft:jungle_sapling';
		    MinecraftBlockTypes2['JungleSlab'] = 'minecraft:jungle_slab';
		    MinecraftBlockTypes2['JungleStairs'] = 'minecraft:jungle_stairs';
		    MinecraftBlockTypes2['JungleStandingSign'] = 'minecraft:jungle_standing_sign';
		    MinecraftBlockTypes2['JungleTrapdoor'] = 'minecraft:jungle_trapdoor';
		    MinecraftBlockTypes2['JungleWallSign'] = 'minecraft:jungle_wall_sign';
		    MinecraftBlockTypes2['JungleWood'] = 'minecraft:jungle_wood';
		    MinecraftBlockTypes2['Kelp'] = 'minecraft:kelp';
		    MinecraftBlockTypes2['LabTable'] = 'minecraft:lab_table';
		    MinecraftBlockTypes2['Ladder'] = 'minecraft:ladder';
		    MinecraftBlockTypes2['Lantern'] = 'minecraft:lantern';
		    MinecraftBlockTypes2['LapisBlock'] = 'minecraft:lapis_block';
		    MinecraftBlockTypes2['LapisOre'] = 'minecraft:lapis_ore';
		    MinecraftBlockTypes2['LargeAmethystBud'] = 'minecraft:large_amethyst_bud';
		    MinecraftBlockTypes2['LargeFern'] = 'minecraft:large_fern';
		    MinecraftBlockTypes2['Lava'] = 'minecraft:lava';
		    MinecraftBlockTypes2['Lectern'] = 'minecraft:lectern';
		    MinecraftBlockTypes2['Lever'] = 'minecraft:lever';
		    MinecraftBlockTypes2['LightBlock0'] = 'minecraft:light_block_0';
		    MinecraftBlockTypes2['LightBlock1'] = 'minecraft:light_block_1';
		    MinecraftBlockTypes2['LightBlock10'] = 'minecraft:light_block_10';
		    MinecraftBlockTypes2['LightBlock11'] = 'minecraft:light_block_11';
		    MinecraftBlockTypes2['LightBlock12'] = 'minecraft:light_block_12';
		    MinecraftBlockTypes2['LightBlock13'] = 'minecraft:light_block_13';
		    MinecraftBlockTypes2['LightBlock14'] = 'minecraft:light_block_14';
		    MinecraftBlockTypes2['LightBlock15'] = 'minecraft:light_block_15';
		    MinecraftBlockTypes2['LightBlock2'] = 'minecraft:light_block_2';
		    MinecraftBlockTypes2['LightBlock3'] = 'minecraft:light_block_3';
		    MinecraftBlockTypes2['LightBlock4'] = 'minecraft:light_block_4';
		    MinecraftBlockTypes2['LightBlock5'] = 'minecraft:light_block_5';
		    MinecraftBlockTypes2['LightBlock6'] = 'minecraft:light_block_6';
		    MinecraftBlockTypes2['LightBlock7'] = 'minecraft:light_block_7';
		    MinecraftBlockTypes2['LightBlock8'] = 'minecraft:light_block_8';
		    MinecraftBlockTypes2['LightBlock9'] = 'minecraft:light_block_9';
		    MinecraftBlockTypes2['LightBlueCandle'] = 'minecraft:light_blue_candle';
		    MinecraftBlockTypes2['LightBlueCandleCake'] = 'minecraft:light_blue_candle_cake';
		    MinecraftBlockTypes2['LightBlueCarpet'] = 'minecraft:light_blue_carpet';
		    MinecraftBlockTypes2['LightBlueConcrete'] = 'minecraft:light_blue_concrete';
		    MinecraftBlockTypes2['LightBlueConcretePowder'] = 'minecraft:light_blue_concrete_powder';
		    MinecraftBlockTypes2['LightBlueGlazedTerracotta'] = 'minecraft:light_blue_glazed_terracotta';
		    MinecraftBlockTypes2['LightBlueShulkerBox'] = 'minecraft:light_blue_shulker_box';
		    MinecraftBlockTypes2['LightBlueStainedGlass'] = 'minecraft:light_blue_stained_glass';
		    MinecraftBlockTypes2['LightBlueStainedGlassPane'] = 'minecraft:light_blue_stained_glass_pane';
		    MinecraftBlockTypes2['LightBlueTerracotta'] = 'minecraft:light_blue_terracotta';
		    MinecraftBlockTypes2['LightBlueWool'] = 'minecraft:light_blue_wool';
		    MinecraftBlockTypes2['LightGrayCandle'] = 'minecraft:light_gray_candle';
		    MinecraftBlockTypes2['LightGrayCandleCake'] = 'minecraft:light_gray_candle_cake';
		    MinecraftBlockTypes2['LightGrayCarpet'] = 'minecraft:light_gray_carpet';
		    MinecraftBlockTypes2['LightGrayConcrete'] = 'minecraft:light_gray_concrete';
		    MinecraftBlockTypes2['LightGrayConcretePowder'] = 'minecraft:light_gray_concrete_powder';
		    MinecraftBlockTypes2['LightGrayShulkerBox'] = 'minecraft:light_gray_shulker_box';
		    MinecraftBlockTypes2['LightGrayStainedGlass'] = 'minecraft:light_gray_stained_glass';
		    MinecraftBlockTypes2['LightGrayStainedGlassPane'] = 'minecraft:light_gray_stained_glass_pane';
		    MinecraftBlockTypes2['LightGrayTerracotta'] = 'minecraft:light_gray_terracotta';
		    MinecraftBlockTypes2['LightGrayWool'] = 'minecraft:light_gray_wool';
		    MinecraftBlockTypes2['LightWeightedPressurePlate'] = 'minecraft:light_weighted_pressure_plate';
		    MinecraftBlockTypes2['LightningRod'] = 'minecraft:lightning_rod';
		    MinecraftBlockTypes2['Lilac'] = 'minecraft:lilac';
		    MinecraftBlockTypes2['LilyOfTheValley'] = 'minecraft:lily_of_the_valley';
		    MinecraftBlockTypes2['LimeCandle'] = 'minecraft:lime_candle';
		    MinecraftBlockTypes2['LimeCandleCake'] = 'minecraft:lime_candle_cake';
		    MinecraftBlockTypes2['LimeCarpet'] = 'minecraft:lime_carpet';
		    MinecraftBlockTypes2['LimeConcrete'] = 'minecraft:lime_concrete';
		    MinecraftBlockTypes2['LimeConcretePowder'] = 'minecraft:lime_concrete_powder';
		    MinecraftBlockTypes2['LimeGlazedTerracotta'] = 'minecraft:lime_glazed_terracotta';
		    MinecraftBlockTypes2['LimeShulkerBox'] = 'minecraft:lime_shulker_box';
		    MinecraftBlockTypes2['LimeStainedGlass'] = 'minecraft:lime_stained_glass';
		    MinecraftBlockTypes2['LimeStainedGlassPane'] = 'minecraft:lime_stained_glass_pane';
		    MinecraftBlockTypes2['LimeTerracotta'] = 'minecraft:lime_terracotta';
		    MinecraftBlockTypes2['LimeWool'] = 'minecraft:lime_wool';
		    MinecraftBlockTypes2['LitBlastFurnace'] = 'minecraft:lit_blast_furnace';
		    MinecraftBlockTypes2['LitDeepslateRedstoneOre'] = 'minecraft:lit_deepslate_redstone_ore';
		    MinecraftBlockTypes2['LitFurnace'] = 'minecraft:lit_furnace';
		    MinecraftBlockTypes2['LitPumpkin'] = 'minecraft:lit_pumpkin';
		    MinecraftBlockTypes2['LitRedstoneLamp'] = 'minecraft:lit_redstone_lamp';
		    MinecraftBlockTypes2['LitRedstoneOre'] = 'minecraft:lit_redstone_ore';
		    MinecraftBlockTypes2['LitSmoker'] = 'minecraft:lit_smoker';
		    MinecraftBlockTypes2['Lodestone'] = 'minecraft:lodestone';
		    MinecraftBlockTypes2['Loom'] = 'minecraft:loom';
		    MinecraftBlockTypes2['MagentaCandle'] = 'minecraft:magenta_candle';
		    MinecraftBlockTypes2['MagentaCandleCake'] = 'minecraft:magenta_candle_cake';
		    MinecraftBlockTypes2['MagentaCarpet'] = 'minecraft:magenta_carpet';
		    MinecraftBlockTypes2['MagentaConcrete'] = 'minecraft:magenta_concrete';
		    MinecraftBlockTypes2['MagentaConcretePowder'] = 'minecraft:magenta_concrete_powder';
		    MinecraftBlockTypes2['MagentaGlazedTerracotta'] = 'minecraft:magenta_glazed_terracotta';
		    MinecraftBlockTypes2['MagentaShulkerBox'] = 'minecraft:magenta_shulker_box';
		    MinecraftBlockTypes2['MagentaStainedGlass'] = 'minecraft:magenta_stained_glass';
		    MinecraftBlockTypes2['MagentaStainedGlassPane'] = 'minecraft:magenta_stained_glass_pane';
		    MinecraftBlockTypes2['MagentaTerracotta'] = 'minecraft:magenta_terracotta';
		    MinecraftBlockTypes2['MagentaWool'] = 'minecraft:magenta_wool';
		    MinecraftBlockTypes2['Magma'] = 'minecraft:magma';
		    MinecraftBlockTypes2['MangroveButton'] = 'minecraft:mangrove_button';
		    MinecraftBlockTypes2['MangroveDoor'] = 'minecraft:mangrove_door';
		    MinecraftBlockTypes2['MangroveDoubleSlab'] = 'minecraft:mangrove_double_slab';
		    MinecraftBlockTypes2['MangroveFence'] = 'minecraft:mangrove_fence';
		    MinecraftBlockTypes2['MangroveFenceGate'] = 'minecraft:mangrove_fence_gate';
		    MinecraftBlockTypes2['MangroveHangingSign'] = 'minecraft:mangrove_hanging_sign';
		    MinecraftBlockTypes2['MangroveLeaves'] = 'minecraft:mangrove_leaves';
		    MinecraftBlockTypes2['MangroveLog'] = 'minecraft:mangrove_log';
		    MinecraftBlockTypes2['MangrovePlanks'] = 'minecraft:mangrove_planks';
		    MinecraftBlockTypes2['MangrovePressurePlate'] = 'minecraft:mangrove_pressure_plate';
		    MinecraftBlockTypes2['MangrovePropagule'] = 'minecraft:mangrove_propagule';
		    MinecraftBlockTypes2['MangroveRoots'] = 'minecraft:mangrove_roots';
		    MinecraftBlockTypes2['MangroveSlab'] = 'minecraft:mangrove_slab';
		    MinecraftBlockTypes2['MangroveStairs'] = 'minecraft:mangrove_stairs';
		    MinecraftBlockTypes2['MangroveStandingSign'] = 'minecraft:mangrove_standing_sign';
		    MinecraftBlockTypes2['MangroveTrapdoor'] = 'minecraft:mangrove_trapdoor';
		    MinecraftBlockTypes2['MangroveWallSign'] = 'minecraft:mangrove_wall_sign';
		    MinecraftBlockTypes2['MangroveWood'] = 'minecraft:mangrove_wood';
		    MinecraftBlockTypes2['MaterialReducer'] = 'minecraft:material_reducer';
		    MinecraftBlockTypes2['MediumAmethystBud'] = 'minecraft:medium_amethyst_bud';
		    MinecraftBlockTypes2['MelonBlock'] = 'minecraft:melon_block';
		    MinecraftBlockTypes2['MelonStem'] = 'minecraft:melon_stem';
		    MinecraftBlockTypes2['MobSpawner'] = 'minecraft:mob_spawner';
		    MinecraftBlockTypes2['MossBlock'] = 'minecraft:moss_block';
		    MinecraftBlockTypes2['MossCarpet'] = 'minecraft:moss_carpet';
		    MinecraftBlockTypes2['MossyCobblestone'] = 'minecraft:mossy_cobblestone';
		    MinecraftBlockTypes2['MossyCobblestoneDoubleSlab'] = 'minecraft:mossy_cobblestone_double_slab';
		    MinecraftBlockTypes2['MossyCobblestoneSlab'] = 'minecraft:mossy_cobblestone_slab';
		    MinecraftBlockTypes2['MossyCobblestoneStairs'] = 'minecraft:mossy_cobblestone_stairs';
		    MinecraftBlockTypes2['MossyCobblestoneWall'] = 'minecraft:mossy_cobblestone_wall';
		    MinecraftBlockTypes2['MossyStoneBrickDoubleSlab'] = 'minecraft:mossy_stone_brick_double_slab';
		    MinecraftBlockTypes2['MossyStoneBrickSlab'] = 'minecraft:mossy_stone_brick_slab';
		    MinecraftBlockTypes2['MossyStoneBrickStairs'] = 'minecraft:mossy_stone_brick_stairs';
		    MinecraftBlockTypes2['MossyStoneBrickWall'] = 'minecraft:mossy_stone_brick_wall';
		    MinecraftBlockTypes2['MossyStoneBricks'] = 'minecraft:mossy_stone_bricks';
		    MinecraftBlockTypes2['Mud'] = 'minecraft:mud';
		    MinecraftBlockTypes2['MudBrickDoubleSlab'] = 'minecraft:mud_brick_double_slab';
		    MinecraftBlockTypes2['MudBrickSlab'] = 'minecraft:mud_brick_slab';
		    MinecraftBlockTypes2['MudBrickStairs'] = 'minecraft:mud_brick_stairs';
		    MinecraftBlockTypes2['MudBrickWall'] = 'minecraft:mud_brick_wall';
		    MinecraftBlockTypes2['MudBricks'] = 'minecraft:mud_bricks';
		    MinecraftBlockTypes2['MuddyMangroveRoots'] = 'minecraft:muddy_mangrove_roots';
		    MinecraftBlockTypes2['MushroomStem'] = 'minecraft:mushroom_stem';
		    MinecraftBlockTypes2['Mycelium'] = 'minecraft:mycelium';
		    MinecraftBlockTypes2['NetherBrick'] = 'minecraft:nether_brick';
		    MinecraftBlockTypes2['NetherBrickDoubleSlab'] = 'minecraft:nether_brick_double_slab';
		    MinecraftBlockTypes2['NetherBrickFence'] = 'minecraft:nether_brick_fence';
		    MinecraftBlockTypes2['NetherBrickSlab'] = 'minecraft:nether_brick_slab';
		    MinecraftBlockTypes2['NetherBrickStairs'] = 'minecraft:nether_brick_stairs';
		    MinecraftBlockTypes2['NetherBrickWall'] = 'minecraft:nether_brick_wall';
		    MinecraftBlockTypes2['NetherGoldOre'] = 'minecraft:nether_gold_ore';
		    MinecraftBlockTypes2['NetherSprouts'] = 'minecraft:nether_sprouts';
		    MinecraftBlockTypes2['NetherWart'] = 'minecraft:nether_wart';
		    MinecraftBlockTypes2['NetherWartBlock'] = 'minecraft:nether_wart_block';
		    MinecraftBlockTypes2['NetheriteBlock'] = 'minecraft:netherite_block';
		    MinecraftBlockTypes2['Netherrack'] = 'minecraft:netherrack';
		    MinecraftBlockTypes2['NormalStoneDoubleSlab'] = 'minecraft:normal_stone_double_slab';
		    MinecraftBlockTypes2['NormalStoneSlab'] = 'minecraft:normal_stone_slab';
		    MinecraftBlockTypes2['NormalStoneStairs'] = 'minecraft:normal_stone_stairs';
		    MinecraftBlockTypes2['Noteblock'] = 'minecraft:noteblock';
		    MinecraftBlockTypes2['OakDoubleSlab'] = 'minecraft:oak_double_slab';
		    MinecraftBlockTypes2['OakFence'] = 'minecraft:oak_fence';
		    MinecraftBlockTypes2['OakHangingSign'] = 'minecraft:oak_hanging_sign';
		    MinecraftBlockTypes2['OakLeaves'] = 'minecraft:oak_leaves';
		    MinecraftBlockTypes2['OakLog'] = 'minecraft:oak_log';
		    MinecraftBlockTypes2['OakPlanks'] = 'minecraft:oak_planks';
		    MinecraftBlockTypes2['OakSapling'] = 'minecraft:oak_sapling';
		    MinecraftBlockTypes2['OakSlab'] = 'minecraft:oak_slab';
		    MinecraftBlockTypes2['OakStairs'] = 'minecraft:oak_stairs';
		    MinecraftBlockTypes2['OakWood'] = 'minecraft:oak_wood';
		    MinecraftBlockTypes2['Observer'] = 'minecraft:observer';
		    MinecraftBlockTypes2['Obsidian'] = 'minecraft:obsidian';
		    MinecraftBlockTypes2['OchreFroglight'] = 'minecraft:ochre_froglight';
		    MinecraftBlockTypes2['OpenEyeblossom'] = 'minecraft:open_eyeblossom';
		    MinecraftBlockTypes2['OrangeCandle'] = 'minecraft:orange_candle';
		    MinecraftBlockTypes2['OrangeCandleCake'] = 'minecraft:orange_candle_cake';
		    MinecraftBlockTypes2['OrangeCarpet'] = 'minecraft:orange_carpet';
		    MinecraftBlockTypes2['OrangeConcrete'] = 'minecraft:orange_concrete';
		    MinecraftBlockTypes2['OrangeConcretePowder'] = 'minecraft:orange_concrete_powder';
		    MinecraftBlockTypes2['OrangeGlazedTerracotta'] = 'minecraft:orange_glazed_terracotta';
		    MinecraftBlockTypes2['OrangeShulkerBox'] = 'minecraft:orange_shulker_box';
		    MinecraftBlockTypes2['OrangeStainedGlass'] = 'minecraft:orange_stained_glass';
		    MinecraftBlockTypes2['OrangeStainedGlassPane'] = 'minecraft:orange_stained_glass_pane';
		    MinecraftBlockTypes2['OrangeTerracotta'] = 'minecraft:orange_terracotta';
		    MinecraftBlockTypes2['OrangeTulip'] = 'minecraft:orange_tulip';
		    MinecraftBlockTypes2['OrangeWool'] = 'minecraft:orange_wool';
		    MinecraftBlockTypes2['OxeyeDaisy'] = 'minecraft:oxeye_daisy';
		    MinecraftBlockTypes2['OxidizedChiseledCopper'] = 'minecraft:oxidized_chiseled_copper';
		    MinecraftBlockTypes2['OxidizedCopper'] = 'minecraft:oxidized_copper';
		    MinecraftBlockTypes2['OxidizedCopperBulb'] = 'minecraft:oxidized_copper_bulb';
		    MinecraftBlockTypes2['OxidizedCopperDoor'] = 'minecraft:oxidized_copper_door';
		    MinecraftBlockTypes2['OxidizedCopperGrate'] = 'minecraft:oxidized_copper_grate';
		    MinecraftBlockTypes2['OxidizedCopperTrapdoor'] = 'minecraft:oxidized_copper_trapdoor';
		    MinecraftBlockTypes2['OxidizedCutCopper'] = 'minecraft:oxidized_cut_copper';
		    MinecraftBlockTypes2['OxidizedCutCopperSlab'] = 'minecraft:oxidized_cut_copper_slab';
		    MinecraftBlockTypes2['OxidizedCutCopperStairs'] = 'minecraft:oxidized_cut_copper_stairs';
		    MinecraftBlockTypes2['OxidizedDoubleCutCopperSlab'] = 'minecraft:oxidized_double_cut_copper_slab';
		    MinecraftBlockTypes2['PackedIce'] = 'minecraft:packed_ice';
		    MinecraftBlockTypes2['PackedMud'] = 'minecraft:packed_mud';
		    MinecraftBlockTypes2['PaleHangingMoss'] = 'minecraft:pale_hanging_moss';
		    MinecraftBlockTypes2['PaleMossBlock'] = 'minecraft:pale_moss_block';
		    MinecraftBlockTypes2['PaleMossCarpet'] = 'minecraft:pale_moss_carpet';
		    MinecraftBlockTypes2['PaleOakButton'] = 'minecraft:pale_oak_button';
		    MinecraftBlockTypes2['PaleOakDoor'] = 'minecraft:pale_oak_door';
		    MinecraftBlockTypes2['PaleOakDoubleSlab'] = 'minecraft:pale_oak_double_slab';
		    MinecraftBlockTypes2['PaleOakFence'] = 'minecraft:pale_oak_fence';
		    MinecraftBlockTypes2['PaleOakFenceGate'] = 'minecraft:pale_oak_fence_gate';
		    MinecraftBlockTypes2['PaleOakHangingSign'] = 'minecraft:pale_oak_hanging_sign';
		    MinecraftBlockTypes2['PaleOakLeaves'] = 'minecraft:pale_oak_leaves';
		    MinecraftBlockTypes2['PaleOakLog'] = 'minecraft:pale_oak_log';
		    MinecraftBlockTypes2['PaleOakPlanks'] = 'minecraft:pale_oak_planks';
		    MinecraftBlockTypes2['PaleOakPressurePlate'] = 'minecraft:pale_oak_pressure_plate';
		    MinecraftBlockTypes2['PaleOakSapling'] = 'minecraft:pale_oak_sapling';
		    MinecraftBlockTypes2['PaleOakSlab'] = 'minecraft:pale_oak_slab';
		    MinecraftBlockTypes2['PaleOakStairs'] = 'minecraft:pale_oak_stairs';
		    MinecraftBlockTypes2['PaleOakStandingSign'] = 'minecraft:pale_oak_standing_sign';
		    MinecraftBlockTypes2['PaleOakTrapdoor'] = 'minecraft:pale_oak_trapdoor';
		    MinecraftBlockTypes2['PaleOakWallSign'] = 'minecraft:pale_oak_wall_sign';
		    MinecraftBlockTypes2['PaleOakWood'] = 'minecraft:pale_oak_wood';
		    MinecraftBlockTypes2['PearlescentFroglight'] = 'minecraft:pearlescent_froglight';
		    MinecraftBlockTypes2['Peony'] = 'minecraft:peony';
		    MinecraftBlockTypes2['PetrifiedOakDoubleSlab'] = 'minecraft:petrified_oak_double_slab';
		    MinecraftBlockTypes2['PetrifiedOakSlab'] = 'minecraft:petrified_oak_slab';
		    MinecraftBlockTypes2['PiglinHead'] = 'minecraft:piglin_head';
		    MinecraftBlockTypes2['PinkCandle'] = 'minecraft:pink_candle';
		    MinecraftBlockTypes2['PinkCandleCake'] = 'minecraft:pink_candle_cake';
		    MinecraftBlockTypes2['PinkCarpet'] = 'minecraft:pink_carpet';
		    MinecraftBlockTypes2['PinkConcrete'] = 'minecraft:pink_concrete';
		    MinecraftBlockTypes2['PinkConcretePowder'] = 'minecraft:pink_concrete_powder';
		    MinecraftBlockTypes2['PinkGlazedTerracotta'] = 'minecraft:pink_glazed_terracotta';
		    MinecraftBlockTypes2['PinkPetals'] = 'minecraft:pink_petals';
		    MinecraftBlockTypes2['PinkShulkerBox'] = 'minecraft:pink_shulker_box';
		    MinecraftBlockTypes2['PinkStainedGlass'] = 'minecraft:pink_stained_glass';
		    MinecraftBlockTypes2['PinkStainedGlassPane'] = 'minecraft:pink_stained_glass_pane';
		    MinecraftBlockTypes2['PinkTerracotta'] = 'minecraft:pink_terracotta';
		    MinecraftBlockTypes2['PinkTulip'] = 'minecraft:pink_tulip';
		    MinecraftBlockTypes2['PinkWool'] = 'minecraft:pink_wool';
		    MinecraftBlockTypes2['Piston'] = 'minecraft:piston';
		    MinecraftBlockTypes2['PistonArmCollision'] = 'minecraft:piston_arm_collision';
		    MinecraftBlockTypes2['PitcherCrop'] = 'minecraft:pitcher_crop';
		    MinecraftBlockTypes2['PitcherPlant'] = 'minecraft:pitcher_plant';
		    MinecraftBlockTypes2['PlayerHead'] = 'minecraft:player_head';
		    MinecraftBlockTypes2['Podzol'] = 'minecraft:podzol';
		    MinecraftBlockTypes2['PointedDripstone'] = 'minecraft:pointed_dripstone';
		    MinecraftBlockTypes2['PolishedAndesite'] = 'minecraft:polished_andesite';
		    MinecraftBlockTypes2['PolishedAndesiteDoubleSlab'] = 'minecraft:polished_andesite_double_slab';
		    MinecraftBlockTypes2['PolishedAndesiteSlab'] = 'minecraft:polished_andesite_slab';
		    MinecraftBlockTypes2['PolishedAndesiteStairs'] = 'minecraft:polished_andesite_stairs';
		    MinecraftBlockTypes2['PolishedBasalt'] = 'minecraft:polished_basalt';
		    MinecraftBlockTypes2['PolishedBlackstone'] = 'minecraft:polished_blackstone';
		    MinecraftBlockTypes2['PolishedBlackstoneBrickDoubleSlab'] = 'minecraft:polished_blackstone_brick_double_slab';
		    MinecraftBlockTypes2['PolishedBlackstoneBrickSlab'] = 'minecraft:polished_blackstone_brick_slab';
		    MinecraftBlockTypes2['PolishedBlackstoneBrickStairs'] = 'minecraft:polished_blackstone_brick_stairs';
		    MinecraftBlockTypes2['PolishedBlackstoneBrickWall'] = 'minecraft:polished_blackstone_brick_wall';
		    MinecraftBlockTypes2['PolishedBlackstoneBricks'] = 'minecraft:polished_blackstone_bricks';
		    MinecraftBlockTypes2['PolishedBlackstoneButton'] = 'minecraft:polished_blackstone_button';
		    MinecraftBlockTypes2['PolishedBlackstoneDoubleSlab'] = 'minecraft:polished_blackstone_double_slab';
		    MinecraftBlockTypes2['PolishedBlackstonePressurePlate'] = 'minecraft:polished_blackstone_pressure_plate';
		    MinecraftBlockTypes2['PolishedBlackstoneSlab'] = 'minecraft:polished_blackstone_slab';
		    MinecraftBlockTypes2['PolishedBlackstoneStairs'] = 'minecraft:polished_blackstone_stairs';
		    MinecraftBlockTypes2['PolishedBlackstoneWall'] = 'minecraft:polished_blackstone_wall';
		    MinecraftBlockTypes2['PolishedDeepslate'] = 'minecraft:polished_deepslate';
		    MinecraftBlockTypes2['PolishedDeepslateDoubleSlab'] = 'minecraft:polished_deepslate_double_slab';
		    MinecraftBlockTypes2['PolishedDeepslateSlab'] = 'minecraft:polished_deepslate_slab';
		    MinecraftBlockTypes2['PolishedDeepslateStairs'] = 'minecraft:polished_deepslate_stairs';
		    MinecraftBlockTypes2['PolishedDeepslateWall'] = 'minecraft:polished_deepslate_wall';
		    MinecraftBlockTypes2['PolishedDiorite'] = 'minecraft:polished_diorite';
		    MinecraftBlockTypes2['PolishedDioriteDoubleSlab'] = 'minecraft:polished_diorite_double_slab';
		    MinecraftBlockTypes2['PolishedDioriteSlab'] = 'minecraft:polished_diorite_slab';
		    MinecraftBlockTypes2['PolishedDioriteStairs'] = 'minecraft:polished_diorite_stairs';
		    MinecraftBlockTypes2['PolishedGranite'] = 'minecraft:polished_granite';
		    MinecraftBlockTypes2['PolishedGraniteDoubleSlab'] = 'minecraft:polished_granite_double_slab';
		    MinecraftBlockTypes2['PolishedGraniteSlab'] = 'minecraft:polished_granite_slab';
		    MinecraftBlockTypes2['PolishedGraniteStairs'] = 'minecraft:polished_granite_stairs';
		    MinecraftBlockTypes2['PolishedTuff'] = 'minecraft:polished_tuff';
		    MinecraftBlockTypes2['PolishedTuffDoubleSlab'] = 'minecraft:polished_tuff_double_slab';
		    MinecraftBlockTypes2['PolishedTuffSlab'] = 'minecraft:polished_tuff_slab';
		    MinecraftBlockTypes2['PolishedTuffStairs'] = 'minecraft:polished_tuff_stairs';
		    MinecraftBlockTypes2['PolishedTuffWall'] = 'minecraft:polished_tuff_wall';
		    MinecraftBlockTypes2['Poppy'] = 'minecraft:poppy';
		    MinecraftBlockTypes2['Portal'] = 'minecraft:portal';
		    MinecraftBlockTypes2['Potatoes'] = 'minecraft:potatoes';
		    MinecraftBlockTypes2['PowderSnow'] = 'minecraft:powder_snow';
		    MinecraftBlockTypes2['PoweredComparator'] = 'minecraft:powered_comparator';
		    MinecraftBlockTypes2['PoweredRepeater'] = 'minecraft:powered_repeater';
		    MinecraftBlockTypes2['Prismarine'] = 'minecraft:prismarine';
		    MinecraftBlockTypes2['PrismarineBrickDoubleSlab'] = 'minecraft:prismarine_brick_double_slab';
		    MinecraftBlockTypes2['PrismarineBrickSlab'] = 'minecraft:prismarine_brick_slab';
		    MinecraftBlockTypes2['PrismarineBricks'] = 'minecraft:prismarine_bricks';
		    MinecraftBlockTypes2['PrismarineBricksStairs'] = 'minecraft:prismarine_bricks_stairs';
		    MinecraftBlockTypes2['PrismarineDoubleSlab'] = 'minecraft:prismarine_double_slab';
		    MinecraftBlockTypes2['PrismarineSlab'] = 'minecraft:prismarine_slab';
		    MinecraftBlockTypes2['PrismarineStairs'] = 'minecraft:prismarine_stairs';
		    MinecraftBlockTypes2['PrismarineWall'] = 'minecraft:prismarine_wall';
		    MinecraftBlockTypes2['Pumpkin'] = 'minecraft:pumpkin';
		    MinecraftBlockTypes2['PumpkinStem'] = 'minecraft:pumpkin_stem';
		    MinecraftBlockTypes2['PurpleCandle'] = 'minecraft:purple_candle';
		    MinecraftBlockTypes2['PurpleCandleCake'] = 'minecraft:purple_candle_cake';
		    MinecraftBlockTypes2['PurpleCarpet'] = 'minecraft:purple_carpet';
		    MinecraftBlockTypes2['PurpleConcrete'] = 'minecraft:purple_concrete';
		    MinecraftBlockTypes2['PurpleConcretePowder'] = 'minecraft:purple_concrete_powder';
		    MinecraftBlockTypes2['PurpleGlazedTerracotta'] = 'minecraft:purple_glazed_terracotta';
		    MinecraftBlockTypes2['PurpleShulkerBox'] = 'minecraft:purple_shulker_box';
		    MinecraftBlockTypes2['PurpleStainedGlass'] = 'minecraft:purple_stained_glass';
		    MinecraftBlockTypes2['PurpleStainedGlassPane'] = 'minecraft:purple_stained_glass_pane';
		    MinecraftBlockTypes2['PurpleTerracotta'] = 'minecraft:purple_terracotta';
		    MinecraftBlockTypes2['PurpleWool'] = 'minecraft:purple_wool';
		    MinecraftBlockTypes2['PurpurBlock'] = 'minecraft:purpur_block';
		    MinecraftBlockTypes2['PurpurDoubleSlab'] = 'minecraft:purpur_double_slab';
		    MinecraftBlockTypes2['PurpurPillar'] = 'minecraft:purpur_pillar';
		    MinecraftBlockTypes2['PurpurSlab'] = 'minecraft:purpur_slab';
		    MinecraftBlockTypes2['PurpurStairs'] = 'minecraft:purpur_stairs';
		    MinecraftBlockTypes2['QuartzBlock'] = 'minecraft:quartz_block';
		    MinecraftBlockTypes2['QuartzBricks'] = 'minecraft:quartz_bricks';
		    MinecraftBlockTypes2['QuartzDoubleSlab'] = 'minecraft:quartz_double_slab';
		    MinecraftBlockTypes2['QuartzOre'] = 'minecraft:quartz_ore';
		    MinecraftBlockTypes2['QuartzPillar'] = 'minecraft:quartz_pillar';
		    MinecraftBlockTypes2['QuartzSlab'] = 'minecraft:quartz_slab';
		    MinecraftBlockTypes2['QuartzStairs'] = 'minecraft:quartz_stairs';
		    MinecraftBlockTypes2['Rail'] = 'minecraft:rail';
		    MinecraftBlockTypes2['RawCopperBlock'] = 'minecraft:raw_copper_block';
		    MinecraftBlockTypes2['RawGoldBlock'] = 'minecraft:raw_gold_block';
		    MinecraftBlockTypes2['RawIronBlock'] = 'minecraft:raw_iron_block';
		    MinecraftBlockTypes2['RedCandle'] = 'minecraft:red_candle';
		    MinecraftBlockTypes2['RedCandleCake'] = 'minecraft:red_candle_cake';
		    MinecraftBlockTypes2['RedCarpet'] = 'minecraft:red_carpet';
		    MinecraftBlockTypes2['RedConcrete'] = 'minecraft:red_concrete';
		    MinecraftBlockTypes2['RedConcretePowder'] = 'minecraft:red_concrete_powder';
		    MinecraftBlockTypes2['RedGlazedTerracotta'] = 'minecraft:red_glazed_terracotta';
		    MinecraftBlockTypes2['RedMushroom'] = 'minecraft:red_mushroom';
		    MinecraftBlockTypes2['RedMushroomBlock'] = 'minecraft:red_mushroom_block';
		    MinecraftBlockTypes2['RedNetherBrick'] = 'minecraft:red_nether_brick';
		    MinecraftBlockTypes2['RedNetherBrickDoubleSlab'] = 'minecraft:red_nether_brick_double_slab';
		    MinecraftBlockTypes2['RedNetherBrickSlab'] = 'minecraft:red_nether_brick_slab';
		    MinecraftBlockTypes2['RedNetherBrickStairs'] = 'minecraft:red_nether_brick_stairs';
		    MinecraftBlockTypes2['RedNetherBrickWall'] = 'minecraft:red_nether_brick_wall';
		    MinecraftBlockTypes2['RedSand'] = 'minecraft:red_sand';
		    MinecraftBlockTypes2['RedSandstone'] = 'minecraft:red_sandstone';
		    MinecraftBlockTypes2['RedSandstoneDoubleSlab'] = 'minecraft:red_sandstone_double_slab';
		    MinecraftBlockTypes2['RedSandstoneSlab'] = 'minecraft:red_sandstone_slab';
		    MinecraftBlockTypes2['RedSandstoneStairs'] = 'minecraft:red_sandstone_stairs';
		    MinecraftBlockTypes2['RedSandstoneWall'] = 'minecraft:red_sandstone_wall';
		    MinecraftBlockTypes2['RedShulkerBox'] = 'minecraft:red_shulker_box';
		    MinecraftBlockTypes2['RedStainedGlass'] = 'minecraft:red_stained_glass';
		    MinecraftBlockTypes2['RedStainedGlassPane'] = 'minecraft:red_stained_glass_pane';
		    MinecraftBlockTypes2['RedTerracotta'] = 'minecraft:red_terracotta';
		    MinecraftBlockTypes2['RedTulip'] = 'minecraft:red_tulip';
		    MinecraftBlockTypes2['RedWool'] = 'minecraft:red_wool';
		    MinecraftBlockTypes2['RedstoneBlock'] = 'minecraft:redstone_block';
		    MinecraftBlockTypes2['RedstoneLamp'] = 'minecraft:redstone_lamp';
		    MinecraftBlockTypes2['RedstoneOre'] = 'minecraft:redstone_ore';
		    MinecraftBlockTypes2['RedstoneTorch'] = 'minecraft:redstone_torch';
		    MinecraftBlockTypes2['RedstoneWire'] = 'minecraft:redstone_wire';
		    MinecraftBlockTypes2['Reeds'] = 'minecraft:reeds';
		    MinecraftBlockTypes2['ReinforcedDeepslate'] = 'minecraft:reinforced_deepslate';
		    MinecraftBlockTypes2['RepeatingCommandBlock'] = 'minecraft:repeating_command_block';
		    MinecraftBlockTypes2['ResinBlock'] = 'minecraft:resin_block';
		    MinecraftBlockTypes2['ResinBrickDoubleSlab'] = 'minecraft:resin_brick_double_slab';
		    MinecraftBlockTypes2['ResinBrickSlab'] = 'minecraft:resin_brick_slab';
		    MinecraftBlockTypes2['ResinBrickStairs'] = 'minecraft:resin_brick_stairs';
		    MinecraftBlockTypes2['ResinBrickWall'] = 'minecraft:resin_brick_wall';
		    MinecraftBlockTypes2['ResinBricks'] = 'minecraft:resin_bricks';
		    MinecraftBlockTypes2['ResinClump'] = 'minecraft:resin_clump';
		    MinecraftBlockTypes2['RespawnAnchor'] = 'minecraft:respawn_anchor';
		    MinecraftBlockTypes2['RoseBush'] = 'minecraft:rose_bush';
		    MinecraftBlockTypes2['Sand'] = 'minecraft:sand';
		    MinecraftBlockTypes2['Sandstone'] = 'minecraft:sandstone';
		    MinecraftBlockTypes2['SandstoneDoubleSlab'] = 'minecraft:sandstone_double_slab';
		    MinecraftBlockTypes2['SandstoneSlab'] = 'minecraft:sandstone_slab';
		    MinecraftBlockTypes2['SandstoneStairs'] = 'minecraft:sandstone_stairs';
		    MinecraftBlockTypes2['SandstoneWall'] = 'minecraft:sandstone_wall';
		    MinecraftBlockTypes2['Scaffolding'] = 'minecraft:scaffolding';
		    MinecraftBlockTypes2['Sculk'] = 'minecraft:sculk';
		    MinecraftBlockTypes2['SculkCatalyst'] = 'minecraft:sculk_catalyst';
		    MinecraftBlockTypes2['SculkSensor'] = 'minecraft:sculk_sensor';
		    MinecraftBlockTypes2['SculkShrieker'] = 'minecraft:sculk_shrieker';
		    MinecraftBlockTypes2['SculkVein'] = 'minecraft:sculk_vein';
		    MinecraftBlockTypes2['SeaLantern'] = 'minecraft:sea_lantern';
		    MinecraftBlockTypes2['SeaPickle'] = 'minecraft:sea_pickle';
		    MinecraftBlockTypes2['Seagrass'] = 'minecraft:seagrass';
		    MinecraftBlockTypes2['ShortGrass'] = 'minecraft:short_grass';
		    MinecraftBlockTypes2['Shroomlight'] = 'minecraft:shroomlight';
		    MinecraftBlockTypes2['SilverGlazedTerracotta'] = 'minecraft:silver_glazed_terracotta';
		    MinecraftBlockTypes2['SkeletonSkull'] = 'minecraft:skeleton_skull';
		    MinecraftBlockTypes2['Slime'] = 'minecraft:slime';
		    MinecraftBlockTypes2['SmallAmethystBud'] = 'minecraft:small_amethyst_bud';
		    MinecraftBlockTypes2['SmallDripleafBlock'] = 'minecraft:small_dripleaf_block';
		    MinecraftBlockTypes2['SmithingTable'] = 'minecraft:smithing_table';
		    MinecraftBlockTypes2['Smoker'] = 'minecraft:smoker';
		    MinecraftBlockTypes2['SmoothBasalt'] = 'minecraft:smooth_basalt';
		    MinecraftBlockTypes2['SmoothQuartz'] = 'minecraft:smooth_quartz';
		    MinecraftBlockTypes2['SmoothQuartzDoubleSlab'] = 'minecraft:smooth_quartz_double_slab';
		    MinecraftBlockTypes2['SmoothQuartzSlab'] = 'minecraft:smooth_quartz_slab';
		    MinecraftBlockTypes2['SmoothQuartzStairs'] = 'minecraft:smooth_quartz_stairs';
		    MinecraftBlockTypes2['SmoothRedSandstone'] = 'minecraft:smooth_red_sandstone';
		    MinecraftBlockTypes2['SmoothRedSandstoneDoubleSlab'] = 'minecraft:smooth_red_sandstone_double_slab';
		    MinecraftBlockTypes2['SmoothRedSandstoneSlab'] = 'minecraft:smooth_red_sandstone_slab';
		    MinecraftBlockTypes2['SmoothRedSandstoneStairs'] = 'minecraft:smooth_red_sandstone_stairs';
		    MinecraftBlockTypes2['SmoothSandstone'] = 'minecraft:smooth_sandstone';
		    MinecraftBlockTypes2['SmoothSandstoneDoubleSlab'] = 'minecraft:smooth_sandstone_double_slab';
		    MinecraftBlockTypes2['SmoothSandstoneSlab'] = 'minecraft:smooth_sandstone_slab';
		    MinecraftBlockTypes2['SmoothSandstoneStairs'] = 'minecraft:smooth_sandstone_stairs';
		    MinecraftBlockTypes2['SmoothStone'] = 'minecraft:smooth_stone';
		    MinecraftBlockTypes2['SmoothStoneDoubleSlab'] = 'minecraft:smooth_stone_double_slab';
		    MinecraftBlockTypes2['SmoothStoneSlab'] = 'minecraft:smooth_stone_slab';
		    MinecraftBlockTypes2['SnifferEgg'] = 'minecraft:sniffer_egg';
		    MinecraftBlockTypes2['Snow'] = 'minecraft:snow';
		    MinecraftBlockTypes2['SnowLayer'] = 'minecraft:snow_layer';
		    MinecraftBlockTypes2['SoulCampfire'] = 'minecraft:soul_campfire';
		    MinecraftBlockTypes2['SoulFire'] = 'minecraft:soul_fire';
		    MinecraftBlockTypes2['SoulLantern'] = 'minecraft:soul_lantern';
		    MinecraftBlockTypes2['SoulSand'] = 'minecraft:soul_sand';
		    MinecraftBlockTypes2['SoulSoil'] = 'minecraft:soul_soil';
		    MinecraftBlockTypes2['SoulTorch'] = 'minecraft:soul_torch';
		    MinecraftBlockTypes2['Sponge'] = 'minecraft:sponge';
		    MinecraftBlockTypes2['SporeBlossom'] = 'minecraft:spore_blossom';
		    MinecraftBlockTypes2['SpruceButton'] = 'minecraft:spruce_button';
		    MinecraftBlockTypes2['SpruceDoor'] = 'minecraft:spruce_door';
		    MinecraftBlockTypes2['SpruceDoubleSlab'] = 'minecraft:spruce_double_slab';
		    MinecraftBlockTypes2['SpruceFence'] = 'minecraft:spruce_fence';
		    MinecraftBlockTypes2['SpruceFenceGate'] = 'minecraft:spruce_fence_gate';
		    MinecraftBlockTypes2['SpruceHangingSign'] = 'minecraft:spruce_hanging_sign';
		    MinecraftBlockTypes2['SpruceLeaves'] = 'minecraft:spruce_leaves';
		    MinecraftBlockTypes2['SpruceLog'] = 'minecraft:spruce_log';
		    MinecraftBlockTypes2['SprucePlanks'] = 'minecraft:spruce_planks';
		    MinecraftBlockTypes2['SprucePressurePlate'] = 'minecraft:spruce_pressure_plate';
		    MinecraftBlockTypes2['SpruceSapling'] = 'minecraft:spruce_sapling';
		    MinecraftBlockTypes2['SpruceSlab'] = 'minecraft:spruce_slab';
		    MinecraftBlockTypes2['SpruceStairs'] = 'minecraft:spruce_stairs';
		    MinecraftBlockTypes2['SpruceStandingSign'] = 'minecraft:spruce_standing_sign';
		    MinecraftBlockTypes2['SpruceTrapdoor'] = 'minecraft:spruce_trapdoor';
		    MinecraftBlockTypes2['SpruceWallSign'] = 'minecraft:spruce_wall_sign';
		    MinecraftBlockTypes2['SpruceWood'] = 'minecraft:spruce_wood';
		    MinecraftBlockTypes2['StandingBanner'] = 'minecraft:standing_banner';
		    MinecraftBlockTypes2['StandingSign'] = 'minecraft:standing_sign';
		    MinecraftBlockTypes2['StickyPiston'] = 'minecraft:sticky_piston';
		    MinecraftBlockTypes2['StickyPistonArmCollision'] = 'minecraft:sticky_piston_arm_collision';
		    MinecraftBlockTypes2['Stone'] = 'minecraft:stone';
		    MinecraftBlockTypes2['StoneBrickDoubleSlab'] = 'minecraft:stone_brick_double_slab';
		    MinecraftBlockTypes2['StoneBrickSlab'] = 'minecraft:stone_brick_slab';
		    MinecraftBlockTypes2['StoneBrickStairs'] = 'minecraft:stone_brick_stairs';
		    MinecraftBlockTypes2['StoneBrickWall'] = 'minecraft:stone_brick_wall';
		    MinecraftBlockTypes2['StoneBricks'] = 'minecraft:stone_bricks';
		    MinecraftBlockTypes2['StoneButton'] = 'minecraft:stone_button';
		    MinecraftBlockTypes2['StonePressurePlate'] = 'minecraft:stone_pressure_plate';
		    MinecraftBlockTypes2['StoneStairs'] = 'minecraft:stone_stairs';
		    MinecraftBlockTypes2['StonecutterBlock'] = 'minecraft:stonecutter_block';
		    MinecraftBlockTypes2['StrippedAcaciaLog'] = 'minecraft:stripped_acacia_log';
		    MinecraftBlockTypes2['StrippedAcaciaWood'] = 'minecraft:stripped_acacia_wood';
		    MinecraftBlockTypes2['StrippedBambooBlock'] = 'minecraft:stripped_bamboo_block';
		    MinecraftBlockTypes2['StrippedBirchLog'] = 'minecraft:stripped_birch_log';
		    MinecraftBlockTypes2['StrippedBirchWood'] = 'minecraft:stripped_birch_wood';
		    MinecraftBlockTypes2['StrippedCherryLog'] = 'minecraft:stripped_cherry_log';
		    MinecraftBlockTypes2['StrippedCherryWood'] = 'minecraft:stripped_cherry_wood';
		    MinecraftBlockTypes2['StrippedCrimsonHyphae'] = 'minecraft:stripped_crimson_hyphae';
		    MinecraftBlockTypes2['StrippedCrimsonStem'] = 'minecraft:stripped_crimson_stem';
		    MinecraftBlockTypes2['StrippedDarkOakLog'] = 'minecraft:stripped_dark_oak_log';
		    MinecraftBlockTypes2['StrippedDarkOakWood'] = 'minecraft:stripped_dark_oak_wood';
		    MinecraftBlockTypes2['StrippedJungleLog'] = 'minecraft:stripped_jungle_log';
		    MinecraftBlockTypes2['StrippedJungleWood'] = 'minecraft:stripped_jungle_wood';
		    MinecraftBlockTypes2['StrippedMangroveLog'] = 'minecraft:stripped_mangrove_log';
		    MinecraftBlockTypes2['StrippedMangroveWood'] = 'minecraft:stripped_mangrove_wood';
		    MinecraftBlockTypes2['StrippedOakLog'] = 'minecraft:stripped_oak_log';
		    MinecraftBlockTypes2['StrippedOakWood'] = 'minecraft:stripped_oak_wood';
		    MinecraftBlockTypes2['StrippedPaleOakLog'] = 'minecraft:stripped_pale_oak_log';
		    MinecraftBlockTypes2['StrippedPaleOakWood'] = 'minecraft:stripped_pale_oak_wood';
		    MinecraftBlockTypes2['StrippedSpruceLog'] = 'minecraft:stripped_spruce_log';
		    MinecraftBlockTypes2['StrippedSpruceWood'] = 'minecraft:stripped_spruce_wood';
		    MinecraftBlockTypes2['StrippedWarpedHyphae'] = 'minecraft:stripped_warped_hyphae';
		    MinecraftBlockTypes2['StrippedWarpedStem'] = 'minecraft:stripped_warped_stem';
		    MinecraftBlockTypes2['StructureBlock'] = 'minecraft:structure_block';
		    MinecraftBlockTypes2['StructureVoid'] = 'minecraft:structure_void';
		    MinecraftBlockTypes2['Sunflower'] = 'minecraft:sunflower';
		    MinecraftBlockTypes2['SuspiciousGravel'] = 'minecraft:suspicious_gravel';
		    MinecraftBlockTypes2['SuspiciousSand'] = 'minecraft:suspicious_sand';
		    MinecraftBlockTypes2['SweetBerryBush'] = 'minecraft:sweet_berry_bush';
		    MinecraftBlockTypes2['TallGrass'] = 'minecraft:tall_grass';
		    MinecraftBlockTypes2['Target'] = 'minecraft:target';
		    MinecraftBlockTypes2['TintedGlass'] = 'minecraft:tinted_glass';
		    MinecraftBlockTypes2['Tnt'] = 'minecraft:tnt';
		    MinecraftBlockTypes2['Torch'] = 'minecraft:torch';
		    MinecraftBlockTypes2['Torchflower'] = 'minecraft:torchflower';
		    MinecraftBlockTypes2['TorchflowerCrop'] = 'minecraft:torchflower_crop';
		    MinecraftBlockTypes2['Trapdoor'] = 'minecraft:trapdoor';
		    MinecraftBlockTypes2['TrappedChest'] = 'minecraft:trapped_chest';
		    MinecraftBlockTypes2['TrialSpawner'] = 'minecraft:trial_spawner';
		    MinecraftBlockTypes2['TripWire'] = 'minecraft:trip_wire';
		    MinecraftBlockTypes2['TripwireHook'] = 'minecraft:tripwire_hook';
		    MinecraftBlockTypes2['TubeCoral'] = 'minecraft:tube_coral';
		    MinecraftBlockTypes2['TubeCoralBlock'] = 'minecraft:tube_coral_block';
		    MinecraftBlockTypes2['TubeCoralFan'] = 'minecraft:tube_coral_fan';
		    MinecraftBlockTypes2['TubeCoralWallFan'] = 'minecraft:tube_coral_wall_fan';
		    MinecraftBlockTypes2['Tuff'] = 'minecraft:tuff';
		    MinecraftBlockTypes2['TuffBrickDoubleSlab'] = 'minecraft:tuff_brick_double_slab';
		    MinecraftBlockTypes2['TuffBrickSlab'] = 'minecraft:tuff_brick_slab';
		    MinecraftBlockTypes2['TuffBrickStairs'] = 'minecraft:tuff_brick_stairs';
		    MinecraftBlockTypes2['TuffBrickWall'] = 'minecraft:tuff_brick_wall';
		    MinecraftBlockTypes2['TuffBricks'] = 'minecraft:tuff_bricks';
		    MinecraftBlockTypes2['TuffDoubleSlab'] = 'minecraft:tuff_double_slab';
		    MinecraftBlockTypes2['TuffSlab'] = 'minecraft:tuff_slab';
		    MinecraftBlockTypes2['TuffStairs'] = 'minecraft:tuff_stairs';
		    MinecraftBlockTypes2['TuffWall'] = 'minecraft:tuff_wall';
		    MinecraftBlockTypes2['TurtleEgg'] = 'minecraft:turtle_egg';
		    MinecraftBlockTypes2['TwistingVines'] = 'minecraft:twisting_vines';
		    MinecraftBlockTypes2['UnderwaterTnt'] = 'minecraft:underwater_tnt';
		    MinecraftBlockTypes2['UnderwaterTorch'] = 'minecraft:underwater_torch';
		    MinecraftBlockTypes2['UndyedShulkerBox'] = 'minecraft:undyed_shulker_box';
		    MinecraftBlockTypes2['Unknown'] = 'minecraft:unknown';
		    MinecraftBlockTypes2['UnlitRedstoneTorch'] = 'minecraft:unlit_redstone_torch';
		    MinecraftBlockTypes2['UnpoweredComparator'] = 'minecraft:unpowered_comparator';
		    MinecraftBlockTypes2['UnpoweredRepeater'] = 'minecraft:unpowered_repeater';
		    MinecraftBlockTypes2['Vault'] = 'minecraft:vault';
		    MinecraftBlockTypes2['VerdantFroglight'] = 'minecraft:verdant_froglight';
		    MinecraftBlockTypes2['Vine'] = 'minecraft:vine';
		    MinecraftBlockTypes2['WallBanner'] = 'minecraft:wall_banner';
		    MinecraftBlockTypes2['WallSign'] = 'minecraft:wall_sign';
		    MinecraftBlockTypes2['WarpedButton'] = 'minecraft:warped_button';
		    MinecraftBlockTypes2['WarpedDoor'] = 'minecraft:warped_door';
		    MinecraftBlockTypes2['WarpedDoubleSlab'] = 'minecraft:warped_double_slab';
		    MinecraftBlockTypes2['WarpedFence'] = 'minecraft:warped_fence';
		    MinecraftBlockTypes2['WarpedFenceGate'] = 'minecraft:warped_fence_gate';
		    MinecraftBlockTypes2['WarpedFungus'] = 'minecraft:warped_fungus';
		    MinecraftBlockTypes2['WarpedHangingSign'] = 'minecraft:warped_hanging_sign';
		    MinecraftBlockTypes2['WarpedHyphae'] = 'minecraft:warped_hyphae';
		    MinecraftBlockTypes2['WarpedNylium'] = 'minecraft:warped_nylium';
		    MinecraftBlockTypes2['WarpedPlanks'] = 'minecraft:warped_planks';
		    MinecraftBlockTypes2['WarpedPressurePlate'] = 'minecraft:warped_pressure_plate';
		    MinecraftBlockTypes2['WarpedRoots'] = 'minecraft:warped_roots';
		    MinecraftBlockTypes2['WarpedSlab'] = 'minecraft:warped_slab';
		    MinecraftBlockTypes2['WarpedStairs'] = 'minecraft:warped_stairs';
		    MinecraftBlockTypes2['WarpedStandingSign'] = 'minecraft:warped_standing_sign';
		    MinecraftBlockTypes2['WarpedStem'] = 'minecraft:warped_stem';
		    MinecraftBlockTypes2['WarpedTrapdoor'] = 'minecraft:warped_trapdoor';
		    MinecraftBlockTypes2['WarpedWallSign'] = 'minecraft:warped_wall_sign';
		    MinecraftBlockTypes2['WarpedWartBlock'] = 'minecraft:warped_wart_block';
		    MinecraftBlockTypes2['Water'] = 'minecraft:water';
		    MinecraftBlockTypes2['Waterlily'] = 'minecraft:waterlily';
		    MinecraftBlockTypes2['WaxedChiseledCopper'] = 'minecraft:waxed_chiseled_copper';
		    MinecraftBlockTypes2['WaxedCopper'] = 'minecraft:waxed_copper';
		    MinecraftBlockTypes2['WaxedCopperBulb'] = 'minecraft:waxed_copper_bulb';
		    MinecraftBlockTypes2['WaxedCopperDoor'] = 'minecraft:waxed_copper_door';
		    MinecraftBlockTypes2['WaxedCopperGrate'] = 'minecraft:waxed_copper_grate';
		    MinecraftBlockTypes2['WaxedCopperTrapdoor'] = 'minecraft:waxed_copper_trapdoor';
		    MinecraftBlockTypes2['WaxedCutCopper'] = 'minecraft:waxed_cut_copper';
		    MinecraftBlockTypes2['WaxedCutCopperSlab'] = 'minecraft:waxed_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedCutCopperStairs'] = 'minecraft:waxed_cut_copper_stairs';
		    MinecraftBlockTypes2['WaxedDoubleCutCopperSlab'] = 'minecraft:waxed_double_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedExposedChiseledCopper'] = 'minecraft:waxed_exposed_chiseled_copper';
		    MinecraftBlockTypes2['WaxedExposedCopper'] = 'minecraft:waxed_exposed_copper';
		    MinecraftBlockTypes2['WaxedExposedCopperBulb'] = 'minecraft:waxed_exposed_copper_bulb';
		    MinecraftBlockTypes2['WaxedExposedCopperDoor'] = 'minecraft:waxed_exposed_copper_door';
		    MinecraftBlockTypes2['WaxedExposedCopperGrate'] = 'minecraft:waxed_exposed_copper_grate';
		    MinecraftBlockTypes2['WaxedExposedCopperTrapdoor'] = 'minecraft:waxed_exposed_copper_trapdoor';
		    MinecraftBlockTypes2['WaxedExposedCutCopper'] = 'minecraft:waxed_exposed_cut_copper';
		    MinecraftBlockTypes2['WaxedExposedCutCopperSlab'] = 'minecraft:waxed_exposed_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedExposedCutCopperStairs'] = 'minecraft:waxed_exposed_cut_copper_stairs';
		    MinecraftBlockTypes2['WaxedExposedDoubleCutCopperSlab'] = 'minecraft:waxed_exposed_double_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedOxidizedChiseledCopper'] = 'minecraft:waxed_oxidized_chiseled_copper';
		    MinecraftBlockTypes2['WaxedOxidizedCopper'] = 'minecraft:waxed_oxidized_copper';
		    MinecraftBlockTypes2['WaxedOxidizedCopperBulb'] = 'minecraft:waxed_oxidized_copper_bulb';
		    MinecraftBlockTypes2['WaxedOxidizedCopperDoor'] = 'minecraft:waxed_oxidized_copper_door';
		    MinecraftBlockTypes2['WaxedOxidizedCopperGrate'] = 'minecraft:waxed_oxidized_copper_grate';
		    MinecraftBlockTypes2['WaxedOxidizedCopperTrapdoor'] = 'minecraft:waxed_oxidized_copper_trapdoor';
		    MinecraftBlockTypes2['WaxedOxidizedCutCopper'] = 'minecraft:waxed_oxidized_cut_copper';
		    MinecraftBlockTypes2['WaxedOxidizedCutCopperSlab'] = 'minecraft:waxed_oxidized_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedOxidizedCutCopperStairs'] = 'minecraft:waxed_oxidized_cut_copper_stairs';
		    MinecraftBlockTypes2['WaxedOxidizedDoubleCutCopperSlab'] = 'minecraft:waxed_oxidized_double_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedWeatheredChiseledCopper'] = 'minecraft:waxed_weathered_chiseled_copper';
		    MinecraftBlockTypes2['WaxedWeatheredCopper'] = 'minecraft:waxed_weathered_copper';
		    MinecraftBlockTypes2['WaxedWeatheredCopperBulb'] = 'minecraft:waxed_weathered_copper_bulb';
		    MinecraftBlockTypes2['WaxedWeatheredCopperDoor'] = 'minecraft:waxed_weathered_copper_door';
		    MinecraftBlockTypes2['WaxedWeatheredCopperGrate'] = 'minecraft:waxed_weathered_copper_grate';
		    MinecraftBlockTypes2['WaxedWeatheredCopperTrapdoor'] = 'minecraft:waxed_weathered_copper_trapdoor';
		    MinecraftBlockTypes2['WaxedWeatheredCutCopper'] = 'minecraft:waxed_weathered_cut_copper';
		    MinecraftBlockTypes2['WaxedWeatheredCutCopperSlab'] = 'minecraft:waxed_weathered_cut_copper_slab';
		    MinecraftBlockTypes2['WaxedWeatheredCutCopperStairs'] = 'minecraft:waxed_weathered_cut_copper_stairs';
		    MinecraftBlockTypes2['WaxedWeatheredDoubleCutCopperSlab'] = 'minecraft:waxed_weathered_double_cut_copper_slab';
		    MinecraftBlockTypes2['WeatheredChiseledCopper'] = 'minecraft:weathered_chiseled_copper';
		    MinecraftBlockTypes2['WeatheredCopper'] = 'minecraft:weathered_copper';
		    MinecraftBlockTypes2['WeatheredCopperBulb'] = 'minecraft:weathered_copper_bulb';
		    MinecraftBlockTypes2['WeatheredCopperDoor'] = 'minecraft:weathered_copper_door';
		    MinecraftBlockTypes2['WeatheredCopperGrate'] = 'minecraft:weathered_copper_grate';
		    MinecraftBlockTypes2['WeatheredCopperTrapdoor'] = 'minecraft:weathered_copper_trapdoor';
		    MinecraftBlockTypes2['WeatheredCutCopper'] = 'minecraft:weathered_cut_copper';
		    MinecraftBlockTypes2['WeatheredCutCopperSlab'] = 'minecraft:weathered_cut_copper_slab';
		    MinecraftBlockTypes2['WeatheredCutCopperStairs'] = 'minecraft:weathered_cut_copper_stairs';
		    MinecraftBlockTypes2['WeatheredDoubleCutCopperSlab'] = 'minecraft:weathered_double_cut_copper_slab';
		    MinecraftBlockTypes2['Web'] = 'minecraft:web';
		    MinecraftBlockTypes2['WeepingVines'] = 'minecraft:weeping_vines';
		    MinecraftBlockTypes2['WetSponge'] = 'minecraft:wet_sponge';
		    MinecraftBlockTypes2['Wheat'] = 'minecraft:wheat';
		    MinecraftBlockTypes2['WhiteCandle'] = 'minecraft:white_candle';
		    MinecraftBlockTypes2['WhiteCandleCake'] = 'minecraft:white_candle_cake';
		    MinecraftBlockTypes2['WhiteCarpet'] = 'minecraft:white_carpet';
		    MinecraftBlockTypes2['WhiteConcrete'] = 'minecraft:white_concrete';
		    MinecraftBlockTypes2['WhiteConcretePowder'] = 'minecraft:white_concrete_powder';
		    MinecraftBlockTypes2['WhiteGlazedTerracotta'] = 'minecraft:white_glazed_terracotta';
		    MinecraftBlockTypes2['WhiteShulkerBox'] = 'minecraft:white_shulker_box';
		    MinecraftBlockTypes2['WhiteStainedGlass'] = 'minecraft:white_stained_glass';
		    MinecraftBlockTypes2['WhiteStainedGlassPane'] = 'minecraft:white_stained_glass_pane';
		    MinecraftBlockTypes2['WhiteTerracotta'] = 'minecraft:white_terracotta';
		    MinecraftBlockTypes2['WhiteTulip'] = 'minecraft:white_tulip';
		    MinecraftBlockTypes2['WhiteWool'] = 'minecraft:white_wool';
		    MinecraftBlockTypes2['WitherRose'] = 'minecraft:wither_rose';
		    MinecraftBlockTypes2['WitherSkeletonSkull'] = 'minecraft:wither_skeleton_skull';
		    MinecraftBlockTypes2['WoodenButton'] = 'minecraft:wooden_button';
		    MinecraftBlockTypes2['WoodenDoor'] = 'minecraft:wooden_door';
		    MinecraftBlockTypes2['WoodenPressurePlate'] = 'minecraft:wooden_pressure_plate';
		    MinecraftBlockTypes2['YellowCandle'] = 'minecraft:yellow_candle';
		    MinecraftBlockTypes2['YellowCandleCake'] = 'minecraft:yellow_candle_cake';
		    MinecraftBlockTypes2['YellowCarpet'] = 'minecraft:yellow_carpet';
		    MinecraftBlockTypes2['YellowConcrete'] = 'minecraft:yellow_concrete';
		    MinecraftBlockTypes2['YellowConcretePowder'] = 'minecraft:yellow_concrete_powder';
		    MinecraftBlockTypes2['YellowGlazedTerracotta'] = 'minecraft:yellow_glazed_terracotta';
		    MinecraftBlockTypes2['YellowShulkerBox'] = 'minecraft:yellow_shulker_box';
		    MinecraftBlockTypes2['YellowStainedGlass'] = 'minecraft:yellow_stained_glass';
		    MinecraftBlockTypes2['YellowStainedGlassPane'] = 'minecraft:yellow_stained_glass_pane';
		    MinecraftBlockTypes2['YellowTerracotta'] = 'minecraft:yellow_terracotta';
		    MinecraftBlockTypes2['YellowWool'] = 'minecraft:yellow_wool';
		    MinecraftBlockTypes2['ZombieHead'] = 'minecraft:zombie_head';
		    return MinecraftBlockTypes2;
		})(MinecraftBlockTypes || {});
		
		// src/mojang-cameraPresets.ts
		var MinecraftCameraPresetsTypes = /* @__PURE__ */ (MinecraftCameraPresetsTypes2 => {
		    MinecraftCameraPresetsTypes2['FirstPerson'] = 'minecraft:first_person';
		    MinecraftCameraPresetsTypes2['FixedBoom'] = 'minecraft:fixed_boom';
		    MinecraftCameraPresetsTypes2['FollowOrbit'] = 'minecraft:follow_orbit';
		    MinecraftCameraPresetsTypes2['Free'] = 'minecraft:free';
		    MinecraftCameraPresetsTypes2['ThirdPerson'] = 'minecraft:third_person';
		    MinecraftCameraPresetsTypes2['ThirdPersonFront'] = 'minecraft:third_person_front';
		    return MinecraftCameraPresetsTypes2;
		})(MinecraftCameraPresetsTypes || {});
		
		// src/mojang-cooldownCategory.ts
		var MinecraftCooldownCategoryTypes = /* @__PURE__ */ (MinecraftCooldownCategoryTypes2 => {
		    MinecraftCooldownCategoryTypes2['Chorusfruit'] = 'minecraft:chorusfruit';
		    MinecraftCooldownCategoryTypes2['EnderPearl'] = 'minecraft:ender_pearl';
		    MinecraftCooldownCategoryTypes2['GoatHorn'] = 'minecraft:goat_horn';
		    MinecraftCooldownCategoryTypes2['Shield'] = 'minecraft:shield';
		    MinecraftCooldownCategoryTypes2['WindCharge'] = 'minecraft:wind_charge';
		    return MinecraftCooldownCategoryTypes2;
		})(MinecraftCooldownCategoryTypes || {});
		
		// src/mojang-dimension.ts
		var MinecraftDimensionTypes = /* @__PURE__ */ (MinecraftDimensionTypes2 => {
		    MinecraftDimensionTypes2['Nether'] = 'minecraft:nether';
		    MinecraftDimensionTypes2['Overworld'] = 'minecraft:overworld';
		    MinecraftDimensionTypes2['TheEnd'] = 'minecraft:the_end';
		    return MinecraftDimensionTypes2;
		})(MinecraftDimensionTypes || {});
		
		// src/mojang-effect.ts
		var MinecraftEffectTypes = /* @__PURE__ */ (MinecraftEffectTypes2 => {
		    MinecraftEffectTypes2['Absorption'] = 'minecraft:absorption';
		    MinecraftEffectTypes2['BadOmen'] = 'minecraft:bad_omen';
		    MinecraftEffectTypes2['Blindness'] = 'minecraft:blindness';
		    MinecraftEffectTypes2['ConduitPower'] = 'minecraft:conduit_power';
		    MinecraftEffectTypes2['Darkness'] = 'minecraft:darkness';
		    MinecraftEffectTypes2['FatalPoison'] = 'minecraft:fatal_poison';
		    MinecraftEffectTypes2['FireResistance'] = 'minecraft:fire_resistance';
		    MinecraftEffectTypes2['Haste'] = 'minecraft:haste';
		    MinecraftEffectTypes2['HealthBoost'] = 'minecraft:health_boost';
		    MinecraftEffectTypes2['Hunger'] = 'minecraft:hunger';
		    MinecraftEffectTypes2['Infested'] = 'minecraft:infested';
		    MinecraftEffectTypes2['InstantDamage'] = 'minecraft:instant_damage';
		    MinecraftEffectTypes2['InstantHealth'] = 'minecraft:instant_health';
		    MinecraftEffectTypes2['Invisibility'] = 'minecraft:invisibility';
		    MinecraftEffectTypes2['JumpBoost'] = 'minecraft:jump_boost';
		    MinecraftEffectTypes2['Levitation'] = 'minecraft:levitation';
		    MinecraftEffectTypes2['MiningFatigue'] = 'minecraft:mining_fatigue';
		    MinecraftEffectTypes2['Nausea'] = 'minecraft:nausea';
		    MinecraftEffectTypes2['NightVision'] = 'minecraft:night_vision';
		    MinecraftEffectTypes2['Oozing'] = 'minecraft:oozing';
		    MinecraftEffectTypes2['Poison'] = 'minecraft:poison';
		    MinecraftEffectTypes2['RaidOmen'] = 'minecraft:raid_omen';
		    MinecraftEffectTypes2['Regeneration'] = 'minecraft:regeneration';
		    MinecraftEffectTypes2['Resistance'] = 'minecraft:resistance';
		    MinecraftEffectTypes2['Saturation'] = 'minecraft:saturation';
		    MinecraftEffectTypes2['SlowFalling'] = 'minecraft:slow_falling';
		    MinecraftEffectTypes2['Slowness'] = 'minecraft:slowness';
		    MinecraftEffectTypes2['Speed'] = 'minecraft:speed';
		    MinecraftEffectTypes2['Strength'] = 'minecraft:strength';
		    MinecraftEffectTypes2['TrialOmen'] = 'minecraft:trial_omen';
		    MinecraftEffectTypes2['VillageHero'] = 'minecraft:village_hero';
		    MinecraftEffectTypes2['WaterBreathing'] = 'minecraft:water_breathing';
		    MinecraftEffectTypes2['Weakness'] = 'minecraft:weakness';
		    MinecraftEffectTypes2['Weaving'] = 'minecraft:weaving';
		    MinecraftEffectTypes2['WindCharged'] = 'minecraft:wind_charged';
		    MinecraftEffectTypes2['Wither'] = 'minecraft:wither';
		    return MinecraftEffectTypes2;
		})(MinecraftEffectTypes || {});
		
		// src/mojang-enchantment.ts
		var MinecraftEnchantmentTypes = /* @__PURE__ */ (MinecraftEnchantmentTypes2 => {
		    MinecraftEnchantmentTypes2['AquaAffinity'] = 'minecraft:aqua_affinity';
		    MinecraftEnchantmentTypes2['BaneOfArthropods'] = 'minecraft:bane_of_arthropods';
		    MinecraftEnchantmentTypes2['Binding'] = 'minecraft:binding';
		    MinecraftEnchantmentTypes2['BlastProtection'] = 'minecraft:blast_protection';
		    MinecraftEnchantmentTypes2['BowInfinity'] = 'minecraft:infinity';
		    MinecraftEnchantmentTypes2['Breach'] = 'minecraft:breach';
		    MinecraftEnchantmentTypes2['Channeling'] = 'minecraft:channeling';
		    MinecraftEnchantmentTypes2['Density'] = 'minecraft:density';
		    MinecraftEnchantmentTypes2['DepthStrider'] = 'minecraft:depth_strider';
		    MinecraftEnchantmentTypes2['Efficiency'] = 'minecraft:efficiency';
		    MinecraftEnchantmentTypes2['FeatherFalling'] = 'minecraft:feather_falling';
		    MinecraftEnchantmentTypes2['FireAspect'] = 'minecraft:fire_aspect';
		    MinecraftEnchantmentTypes2['FireProtection'] = 'minecraft:fire_protection';
		    MinecraftEnchantmentTypes2['Flame'] = 'minecraft:flame';
		    MinecraftEnchantmentTypes2['Fortune'] = 'minecraft:fortune';
		    MinecraftEnchantmentTypes2['FrostWalker'] = 'minecraft:frost_walker';
		    MinecraftEnchantmentTypes2['Impaling'] = 'minecraft:impaling';
		    MinecraftEnchantmentTypes2['Knockback'] = 'minecraft:knockback';
		    MinecraftEnchantmentTypes2['Looting'] = 'minecraft:looting';
		    MinecraftEnchantmentTypes2['Loyalty'] = 'minecraft:loyalty';
		    MinecraftEnchantmentTypes2['LuckOfTheSea'] = 'minecraft:luck_of_the_sea';
		    MinecraftEnchantmentTypes2['Lure'] = 'minecraft:lure';
		    MinecraftEnchantmentTypes2['Mending'] = 'minecraft:mending';
		    MinecraftEnchantmentTypes2['Multishot'] = 'minecraft:multishot';
		    MinecraftEnchantmentTypes2['Piercing'] = 'minecraft:piercing';
		    MinecraftEnchantmentTypes2['Power'] = 'minecraft:power';
		    MinecraftEnchantmentTypes2['ProjectileProtection'] = 'minecraft:projectile_protection';
		    MinecraftEnchantmentTypes2['Protection'] = 'minecraft:protection';
		    MinecraftEnchantmentTypes2['Punch'] = 'minecraft:punch';
		    MinecraftEnchantmentTypes2['QuickCharge'] = 'minecraft:quick_charge';
		    MinecraftEnchantmentTypes2['Respiration'] = 'minecraft:respiration';
		    MinecraftEnchantmentTypes2['Riptide'] = 'minecraft:riptide';
		    MinecraftEnchantmentTypes2['Sharpness'] = 'minecraft:sharpness';
		    MinecraftEnchantmentTypes2['SilkTouch'] = 'minecraft:silk_touch';
		    MinecraftEnchantmentTypes2['Smite'] = 'minecraft:smite';
		    MinecraftEnchantmentTypes2['SoulSpeed'] = 'minecraft:soul_speed';
		    MinecraftEnchantmentTypes2['SwiftSneak'] = 'minecraft:swift_sneak';
		    MinecraftEnchantmentTypes2['Thorns'] = 'minecraft:thorns';
		    MinecraftEnchantmentTypes2['Unbreaking'] = 'minecraft:unbreaking';
		    MinecraftEnchantmentTypes2['Vanishing'] = 'minecraft:vanishing';
		    MinecraftEnchantmentTypes2['WindBurst'] = 'minecraft:wind_burst';
		    return MinecraftEnchantmentTypes2;
		})(MinecraftEnchantmentTypes || {});
		
		// src/mojang-entity.ts
		var MinecraftEntityTypes = /* @__PURE__ */ (MinecraftEntityTypes2 => {
		    MinecraftEntityTypes2['Agent'] = 'minecraft:agent';
		    MinecraftEntityTypes2['Allay'] = 'minecraft:allay';
		    MinecraftEntityTypes2['AreaEffectCloud'] = 'minecraft:area_effect_cloud';
		    MinecraftEntityTypes2['Armadillo'] = 'minecraft:armadillo';
		    MinecraftEntityTypes2['ArmorStand'] = 'minecraft:armor_stand';
		    MinecraftEntityTypes2['Arrow'] = 'minecraft:arrow';
		    MinecraftEntityTypes2['Axolotl'] = 'minecraft:axolotl';
		    MinecraftEntityTypes2['Bat'] = 'minecraft:bat';
		    MinecraftEntityTypes2['Bee'] = 'minecraft:bee';
		    MinecraftEntityTypes2['Blaze'] = 'minecraft:blaze';
		    MinecraftEntityTypes2['Boat'] = 'minecraft:boat';
		    MinecraftEntityTypes2['Bogged'] = 'minecraft:bogged';
		    MinecraftEntityTypes2['Breeze'] = 'minecraft:breeze';
		    MinecraftEntityTypes2['BreezeWindChargeProjectile'] = 'minecraft:breeze_wind_charge_projectile';
		    MinecraftEntityTypes2['Camel'] = 'minecraft:camel';
		    MinecraftEntityTypes2['Cat'] = 'minecraft:cat';
		    MinecraftEntityTypes2['CaveSpider'] = 'minecraft:cave_spider';
		    MinecraftEntityTypes2['ChestBoat'] = 'minecraft:chest_boat';
		    MinecraftEntityTypes2['ChestMinecart'] = 'minecraft:chest_minecart';
		    MinecraftEntityTypes2['Chicken'] = 'minecraft:chicken';
		    MinecraftEntityTypes2['Cod'] = 'minecraft:cod';
		    MinecraftEntityTypes2['CommandBlockMinecart'] = 'minecraft:command_block_minecart';
		    MinecraftEntityTypes2['Cow'] = 'minecraft:cow';
		    MinecraftEntityTypes2['Creaking'] = 'minecraft:creaking';
		    MinecraftEntityTypes2['Creeper'] = 'minecraft:creeper';
		    MinecraftEntityTypes2['Dolphin'] = 'minecraft:dolphin';
		    MinecraftEntityTypes2['Donkey'] = 'minecraft:donkey';
		    MinecraftEntityTypes2['DragonFireball'] = 'minecraft:dragon_fireball';
		    MinecraftEntityTypes2['Drowned'] = 'minecraft:drowned';
		    MinecraftEntityTypes2['Egg'] = 'minecraft:egg';
		    MinecraftEntityTypes2['ElderGuardian'] = 'minecraft:elder_guardian';
		    MinecraftEntityTypes2['EnderCrystal'] = 'minecraft:ender_crystal';
		    MinecraftEntityTypes2['EnderDragon'] = 'minecraft:ender_dragon';
		    MinecraftEntityTypes2['EnderPearl'] = 'minecraft:ender_pearl';
		    MinecraftEntityTypes2['Enderman'] = 'minecraft:enderman';
		    MinecraftEntityTypes2['Endermite'] = 'minecraft:endermite';
		    MinecraftEntityTypes2['EvocationIllager'] = 'minecraft:evocation_illager';
		    MinecraftEntityTypes2['EyeOfEnderSignal'] = 'minecraft:eye_of_ender_signal';
		    MinecraftEntityTypes2['Fireball'] = 'minecraft:fireball';
		    MinecraftEntityTypes2['FireworksRocket'] = 'minecraft:fireworks_rocket';
		    MinecraftEntityTypes2['FishingHook'] = 'minecraft:fishing_hook';
		    MinecraftEntityTypes2['Fox'] = 'minecraft:fox';
		    MinecraftEntityTypes2['Frog'] = 'minecraft:frog';
		    MinecraftEntityTypes2['Ghast'] = 'minecraft:ghast';
		    MinecraftEntityTypes2['GlowSquid'] = 'minecraft:glow_squid';
		    MinecraftEntityTypes2['Goat'] = 'minecraft:goat';
		    MinecraftEntityTypes2['Guardian'] = 'minecraft:guardian';
		    MinecraftEntityTypes2['Hoglin'] = 'minecraft:hoglin';
		    MinecraftEntityTypes2['HopperMinecart'] = 'minecraft:hopper_minecart';
		    MinecraftEntityTypes2['Horse'] = 'minecraft:horse';
		    MinecraftEntityTypes2['Husk'] = 'minecraft:husk';
		    MinecraftEntityTypes2['IronGolem'] = 'minecraft:iron_golem';
		    MinecraftEntityTypes2['LightningBolt'] = 'minecraft:lightning_bolt';
		    MinecraftEntityTypes2['LingeringPotion'] = 'minecraft:lingering_potion';
		    MinecraftEntityTypes2['Llama'] = 'minecraft:llama';
		    MinecraftEntityTypes2['LlamaSpit'] = 'minecraft:llama_spit';
		    MinecraftEntityTypes2['MagmaCube'] = 'minecraft:magma_cube';
		    MinecraftEntityTypes2['Minecart'] = 'minecraft:minecart';
		    MinecraftEntityTypes2['Mooshroom'] = 'minecraft:mooshroom';
		    MinecraftEntityTypes2['Mule'] = 'minecraft:mule';
		    MinecraftEntityTypes2['Npc'] = 'minecraft:npc';
		    MinecraftEntityTypes2['Ocelot'] = 'minecraft:ocelot';
		    MinecraftEntityTypes2['OminousItemSpawner'] = 'minecraft:ominous_item_spawner';
		    MinecraftEntityTypes2['Panda'] = 'minecraft:panda';
		    MinecraftEntityTypes2['Parrot'] = 'minecraft:parrot';
		    MinecraftEntityTypes2['Phantom'] = 'minecraft:phantom';
		    MinecraftEntityTypes2['Pig'] = 'minecraft:pig';
		    MinecraftEntityTypes2['Piglin'] = 'minecraft:piglin';
		    MinecraftEntityTypes2['PiglinBrute'] = 'minecraft:piglin_brute';
		    MinecraftEntityTypes2['Pillager'] = 'minecraft:pillager';
		    MinecraftEntityTypes2['Player'] = 'minecraft:player';
		    MinecraftEntityTypes2['PolarBear'] = 'minecraft:polar_bear';
		    MinecraftEntityTypes2['Pufferfish'] = 'minecraft:pufferfish';
		    MinecraftEntityTypes2['Rabbit'] = 'minecraft:rabbit';
		    MinecraftEntityTypes2['Ravager'] = 'minecraft:ravager';
		    MinecraftEntityTypes2['Salmon'] = 'minecraft:salmon';
		    MinecraftEntityTypes2['Sheep'] = 'minecraft:sheep';
		    MinecraftEntityTypes2['Shulker'] = 'minecraft:shulker';
		    MinecraftEntityTypes2['ShulkerBullet'] = 'minecraft:shulker_bullet';
		    MinecraftEntityTypes2['Silverfish'] = 'minecraft:silverfish';
		    MinecraftEntityTypes2['Skeleton'] = 'minecraft:skeleton';
		    MinecraftEntityTypes2['SkeletonHorse'] = 'minecraft:skeleton_horse';
		    MinecraftEntityTypes2['Slime'] = 'minecraft:slime';
		    MinecraftEntityTypes2['SmallFireball'] = 'minecraft:small_fireball';
		    MinecraftEntityTypes2['Sniffer'] = 'minecraft:sniffer';
		    MinecraftEntityTypes2['SnowGolem'] = 'minecraft:snow_golem';
		    MinecraftEntityTypes2['Snowball'] = 'minecraft:snowball';
		    MinecraftEntityTypes2['Spider'] = 'minecraft:spider';
		    MinecraftEntityTypes2['SplashPotion'] = 'minecraft:splash_potion';
		    MinecraftEntityTypes2['Squid'] = 'minecraft:squid';
		    MinecraftEntityTypes2['Stray'] = 'minecraft:stray';
		    MinecraftEntityTypes2['Strider'] = 'minecraft:strider';
		    MinecraftEntityTypes2['Tadpole'] = 'minecraft:tadpole';
		    MinecraftEntityTypes2['ThrownTrident'] = 'minecraft:thrown_trident';
		    MinecraftEntityTypes2['Tnt'] = 'minecraft:tnt';
		    MinecraftEntityTypes2['TntMinecart'] = 'minecraft:tnt_minecart';
		    MinecraftEntityTypes2['TraderLlama'] = 'minecraft:trader_llama';
		    MinecraftEntityTypes2['TripodCamera'] = 'minecraft:tripod_camera';
		    MinecraftEntityTypes2['Tropicalfish'] = 'minecraft:tropicalfish';
		    MinecraftEntityTypes2['Turtle'] = 'minecraft:turtle';
		    MinecraftEntityTypes2['Vex'] = 'minecraft:vex';
		    MinecraftEntityTypes2['Villager'] = 'minecraft:villager';
		    MinecraftEntityTypes2['VillagerV2'] = 'minecraft:villager_v2';
		    MinecraftEntityTypes2['Vindicator'] = 'minecraft:vindicator';
		    MinecraftEntityTypes2['WanderingTrader'] = 'minecraft:wandering_trader';
		    MinecraftEntityTypes2['Warden'] = 'minecraft:warden';
		    MinecraftEntityTypes2['WindChargeProjectile'] = 'minecraft:wind_charge_projectile';
		    MinecraftEntityTypes2['Witch'] = 'minecraft:witch';
		    MinecraftEntityTypes2['Wither'] = 'minecraft:wither';
		    MinecraftEntityTypes2['WitherSkeleton'] = 'minecraft:wither_skeleton';
		    MinecraftEntityTypes2['WitherSkull'] = 'minecraft:wither_skull';
		    MinecraftEntityTypes2['WitherSkullDangerous'] = 'minecraft:wither_skull_dangerous';
		    MinecraftEntityTypes2['Wolf'] = 'minecraft:wolf';
		    MinecraftEntityTypes2['XpBottle'] = 'minecraft:xp_bottle';
		    MinecraftEntityTypes2['XpOrb'] = 'minecraft:xp_orb';
		    MinecraftEntityTypes2['Zoglin'] = 'minecraft:zoglin';
		    MinecraftEntityTypes2['Zombie'] = 'minecraft:zombie';
		    MinecraftEntityTypes2['ZombieHorse'] = 'minecraft:zombie_horse';
		    MinecraftEntityTypes2['ZombiePigman'] = 'minecraft:zombie_pigman';
		    MinecraftEntityTypes2['ZombieVillager'] = 'minecraft:zombie_villager';
		    MinecraftEntityTypes2['ZombieVillagerV2'] = 'minecraft:zombie_villager_v2';
		    return MinecraftEntityTypes2;
		})(MinecraftEntityTypes || {});
		
		// src/mojang-feature.ts
		var MinecraftFeatureTypes = /* @__PURE__ */ (MinecraftFeatureTypes2 => {
		    MinecraftFeatureTypes2['AncientCity'] = 'minecraft:ancient_city';
		    MinecraftFeatureTypes2['BastionRemnant'] = 'minecraft:bastion_remnant';
		    MinecraftFeatureTypes2['BuriedTreasure'] = 'minecraft:buried_treasure';
		    MinecraftFeatureTypes2['EndCity'] = 'minecraft:end_city';
		    MinecraftFeatureTypes2['Fortress'] = 'minecraft:fortress';
		    MinecraftFeatureTypes2['Mansion'] = 'minecraft:mansion';
		    MinecraftFeatureTypes2['Mineshaft'] = 'minecraft:mineshaft';
		    MinecraftFeatureTypes2['Monument'] = 'minecraft:monument';
		    MinecraftFeatureTypes2['PillagerOutpost'] = 'minecraft:pillager_outpost';
		    MinecraftFeatureTypes2['RuinedPortal'] = 'minecraft:ruined_portal';
		    MinecraftFeatureTypes2['Ruins'] = 'minecraft:ruins';
		    MinecraftFeatureTypes2['Shipwreck'] = 'minecraft:shipwreck';
		    MinecraftFeatureTypes2['Stronghold'] = 'minecraft:stronghold';
		    MinecraftFeatureTypes2['Temple'] = 'minecraft:temple';
		    MinecraftFeatureTypes2['TrailRuins'] = 'minecraft:trail_ruins';
		    MinecraftFeatureTypes2['TrialChambers'] = 'minecraft:trial_chambers';
		    MinecraftFeatureTypes2['Village'] = 'minecraft:village';
		    return MinecraftFeatureTypes2;
		})(MinecraftFeatureTypes || {});
		
		// src/mojang-item.ts
		var MinecraftItemTypes = /* @__PURE__ */ (MinecraftItemTypes2 => {
		    MinecraftItemTypes2['AcaciaBoat'] = 'minecraft:acacia_boat';
		    MinecraftItemTypes2['AcaciaButton'] = 'minecraft:acacia_button';
		    MinecraftItemTypes2['AcaciaChestBoat'] = 'minecraft:acacia_chest_boat';
		    MinecraftItemTypes2['AcaciaDoor'] = 'minecraft:acacia_door';
		    MinecraftItemTypes2['AcaciaFence'] = 'minecraft:acacia_fence';
		    MinecraftItemTypes2['AcaciaFenceGate'] = 'minecraft:acacia_fence_gate';
		    MinecraftItemTypes2['AcaciaHangingSign'] = 'minecraft:acacia_hanging_sign';
		    MinecraftItemTypes2['AcaciaLeaves'] = 'minecraft:acacia_leaves';
		    MinecraftItemTypes2['AcaciaLog'] = 'minecraft:acacia_log';
		    MinecraftItemTypes2['AcaciaPlanks'] = 'minecraft:acacia_planks';
		    MinecraftItemTypes2['AcaciaPressurePlate'] = 'minecraft:acacia_pressure_plate';
		    MinecraftItemTypes2['AcaciaSapling'] = 'minecraft:acacia_sapling';
		    MinecraftItemTypes2['AcaciaSign'] = 'minecraft:acacia_sign';
		    MinecraftItemTypes2['AcaciaSlab'] = 'minecraft:acacia_slab';
		    MinecraftItemTypes2['AcaciaStairs'] = 'minecraft:acacia_stairs';
		    MinecraftItemTypes2['AcaciaTrapdoor'] = 'minecraft:acacia_trapdoor';
		    MinecraftItemTypes2['AcaciaWood'] = 'minecraft:acacia_wood';
		    MinecraftItemTypes2['ActivatorRail'] = 'minecraft:activator_rail';
		    MinecraftItemTypes2['Air'] = 'minecraft:air';
		    MinecraftItemTypes2['AllaySpawnEgg'] = 'minecraft:allay_spawn_egg';
		    MinecraftItemTypes2['Allium'] = 'minecraft:allium';
		    MinecraftItemTypes2['Allow'] = 'minecraft:allow';
		    MinecraftItemTypes2['AmethystBlock'] = 'minecraft:amethyst_block';
		    MinecraftItemTypes2['AmethystCluster'] = 'minecraft:amethyst_cluster';
		    MinecraftItemTypes2['AmethystShard'] = 'minecraft:amethyst_shard';
		    MinecraftItemTypes2['AncientDebris'] = 'minecraft:ancient_debris';
		    MinecraftItemTypes2['Andesite'] = 'minecraft:andesite';
		    MinecraftItemTypes2['AndesiteSlab'] = 'minecraft:andesite_slab';
		    MinecraftItemTypes2['AndesiteStairs'] = 'minecraft:andesite_stairs';
		    MinecraftItemTypes2['AndesiteWall'] = 'minecraft:andesite_wall';
		    MinecraftItemTypes2['AnglerPotterySherd'] = 'minecraft:angler_pottery_sherd';
		    MinecraftItemTypes2['Anvil'] = 'minecraft:anvil';
		    MinecraftItemTypes2['Apple'] = 'minecraft:apple';
		    MinecraftItemTypes2['ArcherPotterySherd'] = 'minecraft:archer_pottery_sherd';
		    MinecraftItemTypes2['ArmadilloScute'] = 'minecraft:armadillo_scute';
		    MinecraftItemTypes2['ArmadilloSpawnEgg'] = 'minecraft:armadillo_spawn_egg';
		    MinecraftItemTypes2['ArmorStand'] = 'minecraft:armor_stand';
		    MinecraftItemTypes2['ArmsUpPotterySherd'] = 'minecraft:arms_up_pottery_sherd';
		    MinecraftItemTypes2['Arrow'] = 'minecraft:arrow';
		    MinecraftItemTypes2['AxolotlBucket'] = 'minecraft:axolotl_bucket';
		    MinecraftItemTypes2['AxolotlSpawnEgg'] = 'minecraft:axolotl_spawn_egg';
		    MinecraftItemTypes2['Azalea'] = 'minecraft:azalea';
		    MinecraftItemTypes2['AzaleaLeaves'] = 'minecraft:azalea_leaves';
		    MinecraftItemTypes2['AzaleaLeavesFlowered'] = 'minecraft:azalea_leaves_flowered';
		    MinecraftItemTypes2['AzureBluet'] = 'minecraft:azure_bluet';
		    MinecraftItemTypes2['BakedPotato'] = 'minecraft:baked_potato';
		    MinecraftItemTypes2['Bamboo'] = 'minecraft:bamboo';
		    MinecraftItemTypes2['BambooBlock'] = 'minecraft:bamboo_block';
		    MinecraftItemTypes2['BambooButton'] = 'minecraft:bamboo_button';
		    MinecraftItemTypes2['BambooChestRaft'] = 'minecraft:bamboo_chest_raft';
		    MinecraftItemTypes2['BambooDoor'] = 'minecraft:bamboo_door';
		    MinecraftItemTypes2['BambooFence'] = 'minecraft:bamboo_fence';
		    MinecraftItemTypes2['BambooFenceGate'] = 'minecraft:bamboo_fence_gate';
		    MinecraftItemTypes2['BambooHangingSign'] = 'minecraft:bamboo_hanging_sign';
		    MinecraftItemTypes2['BambooMosaic'] = 'minecraft:bamboo_mosaic';
		    MinecraftItemTypes2['BambooMosaicSlab'] = 'minecraft:bamboo_mosaic_slab';
		    MinecraftItemTypes2['BambooMosaicStairs'] = 'minecraft:bamboo_mosaic_stairs';
		    MinecraftItemTypes2['BambooPlanks'] = 'minecraft:bamboo_planks';
		    MinecraftItemTypes2['BambooPressurePlate'] = 'minecraft:bamboo_pressure_plate';
		    MinecraftItemTypes2['BambooRaft'] = 'minecraft:bamboo_raft';
		    MinecraftItemTypes2['BambooSign'] = 'minecraft:bamboo_sign';
		    MinecraftItemTypes2['BambooSlab'] = 'minecraft:bamboo_slab';
		    MinecraftItemTypes2['BambooStairs'] = 'minecraft:bamboo_stairs';
		    MinecraftItemTypes2['BambooTrapdoor'] = 'minecraft:bamboo_trapdoor';
		    MinecraftItemTypes2['Banner'] = 'minecraft:banner';
		    MinecraftItemTypes2['Barrel'] = 'minecraft:barrel';
		    MinecraftItemTypes2['Barrier'] = 'minecraft:barrier';
		    MinecraftItemTypes2['Basalt'] = 'minecraft:basalt';
		    MinecraftItemTypes2['BatSpawnEgg'] = 'minecraft:bat_spawn_egg';
		    MinecraftItemTypes2['Beacon'] = 'minecraft:beacon';
		    MinecraftItemTypes2['Bed'] = 'minecraft:bed';
		    MinecraftItemTypes2['Bedrock'] = 'minecraft:bedrock';
		    MinecraftItemTypes2['BeeNest'] = 'minecraft:bee_nest';
		    MinecraftItemTypes2['BeeSpawnEgg'] = 'minecraft:bee_spawn_egg';
		    MinecraftItemTypes2['Beef'] = 'minecraft:beef';
		    MinecraftItemTypes2['Beehive'] = 'minecraft:beehive';
		    MinecraftItemTypes2['Beetroot'] = 'minecraft:beetroot';
		    MinecraftItemTypes2['BeetrootSeeds'] = 'minecraft:beetroot_seeds';
		    MinecraftItemTypes2['BeetrootSoup'] = 'minecraft:beetroot_soup';
		    MinecraftItemTypes2['Bell'] = 'minecraft:bell';
		    MinecraftItemTypes2['BigDripleaf'] = 'minecraft:big_dripleaf';
		    MinecraftItemTypes2['BirchBoat'] = 'minecraft:birch_boat';
		    MinecraftItemTypes2['BirchButton'] = 'minecraft:birch_button';
		    MinecraftItemTypes2['BirchChestBoat'] = 'minecraft:birch_chest_boat';
		    MinecraftItemTypes2['BirchDoor'] = 'minecraft:birch_door';
		    MinecraftItemTypes2['BirchFence'] = 'minecraft:birch_fence';
		    MinecraftItemTypes2['BirchFenceGate'] = 'minecraft:birch_fence_gate';
		    MinecraftItemTypes2['BirchHangingSign'] = 'minecraft:birch_hanging_sign';
		    MinecraftItemTypes2['BirchLeaves'] = 'minecraft:birch_leaves';
		    MinecraftItemTypes2['BirchLog'] = 'minecraft:birch_log';
		    MinecraftItemTypes2['BirchPlanks'] = 'minecraft:birch_planks';
		    MinecraftItemTypes2['BirchPressurePlate'] = 'minecraft:birch_pressure_plate';
		    MinecraftItemTypes2['BirchSapling'] = 'minecraft:birch_sapling';
		    MinecraftItemTypes2['BirchSign'] = 'minecraft:birch_sign';
		    MinecraftItemTypes2['BirchSlab'] = 'minecraft:birch_slab';
		    MinecraftItemTypes2['BirchStairs'] = 'minecraft:birch_stairs';
		    MinecraftItemTypes2['BirchTrapdoor'] = 'minecraft:birch_trapdoor';
		    MinecraftItemTypes2['BirchWood'] = 'minecraft:birch_wood';
		    MinecraftItemTypes2['BlackBundle'] = 'minecraft:black_bundle';
		    MinecraftItemTypes2['BlackCandle'] = 'minecraft:black_candle';
		    MinecraftItemTypes2['BlackCarpet'] = 'minecraft:black_carpet';
		    MinecraftItemTypes2['BlackConcrete'] = 'minecraft:black_concrete';
		    MinecraftItemTypes2['BlackConcretePowder'] = 'minecraft:black_concrete_powder';
		    MinecraftItemTypes2['BlackDye'] = 'minecraft:black_dye';
		    MinecraftItemTypes2['BlackGlazedTerracotta'] = 'minecraft:black_glazed_terracotta';
		    MinecraftItemTypes2['BlackShulkerBox'] = 'minecraft:black_shulker_box';
		    MinecraftItemTypes2['BlackStainedGlass'] = 'minecraft:black_stained_glass';
		    MinecraftItemTypes2['BlackStainedGlassPane'] = 'minecraft:black_stained_glass_pane';
		    MinecraftItemTypes2['BlackTerracotta'] = 'minecraft:black_terracotta';
		    MinecraftItemTypes2['BlackWool'] = 'minecraft:black_wool';
		    MinecraftItemTypes2['Blackstone'] = 'minecraft:blackstone';
		    MinecraftItemTypes2['BlackstoneSlab'] = 'minecraft:blackstone_slab';
		    MinecraftItemTypes2['BlackstoneStairs'] = 'minecraft:blackstone_stairs';
		    MinecraftItemTypes2['BlackstoneWall'] = 'minecraft:blackstone_wall';
		    MinecraftItemTypes2['BladePotterySherd'] = 'minecraft:blade_pottery_sherd';
		    MinecraftItemTypes2['BlastFurnace'] = 'minecraft:blast_furnace';
		    MinecraftItemTypes2['BlazePowder'] = 'minecraft:blaze_powder';
		    MinecraftItemTypes2['BlazeRod'] = 'minecraft:blaze_rod';
		    MinecraftItemTypes2['BlazeSpawnEgg'] = 'minecraft:blaze_spawn_egg';
		    MinecraftItemTypes2['BlueBundle'] = 'minecraft:blue_bundle';
		    MinecraftItemTypes2['BlueCandle'] = 'minecraft:blue_candle';
		    MinecraftItemTypes2['BlueCarpet'] = 'minecraft:blue_carpet';
		    MinecraftItemTypes2['BlueConcrete'] = 'minecraft:blue_concrete';
		    MinecraftItemTypes2['BlueConcretePowder'] = 'minecraft:blue_concrete_powder';
		    MinecraftItemTypes2['BlueDye'] = 'minecraft:blue_dye';
		    MinecraftItemTypes2['BlueGlazedTerracotta'] = 'minecraft:blue_glazed_terracotta';
		    MinecraftItemTypes2['BlueIce'] = 'minecraft:blue_ice';
		    MinecraftItemTypes2['BlueOrchid'] = 'minecraft:blue_orchid';
		    MinecraftItemTypes2['BlueShulkerBox'] = 'minecraft:blue_shulker_box';
		    MinecraftItemTypes2['BlueStainedGlass'] = 'minecraft:blue_stained_glass';
		    MinecraftItemTypes2['BlueStainedGlassPane'] = 'minecraft:blue_stained_glass_pane';
		    MinecraftItemTypes2['BlueTerracotta'] = 'minecraft:blue_terracotta';
		    MinecraftItemTypes2['BlueWool'] = 'minecraft:blue_wool';
		    MinecraftItemTypes2['BoggedSpawnEgg'] = 'minecraft:bogged_spawn_egg';
		    MinecraftItemTypes2['BoltArmorTrimSmithingTemplate'] = 'minecraft:bolt_armor_trim_smithing_template';
		    MinecraftItemTypes2['Bone'] = 'minecraft:bone';
		    MinecraftItemTypes2['BoneBlock'] = 'minecraft:bone_block';
		    MinecraftItemTypes2['BoneMeal'] = 'minecraft:bone_meal';
		    MinecraftItemTypes2['Book'] = 'minecraft:book';
		    MinecraftItemTypes2['Bookshelf'] = 'minecraft:bookshelf';
		    MinecraftItemTypes2['BorderBlock'] = 'minecraft:border_block';
		    MinecraftItemTypes2['BordureIndentedBannerPattern'] = 'minecraft:bordure_indented_banner_pattern';
		    MinecraftItemTypes2['Bow'] = 'minecraft:bow';
		    MinecraftItemTypes2['Bowl'] = 'minecraft:bowl';
		    MinecraftItemTypes2['BrainCoral'] = 'minecraft:brain_coral';
		    MinecraftItemTypes2['BrainCoralBlock'] = 'minecraft:brain_coral_block';
		    MinecraftItemTypes2['BrainCoralFan'] = 'minecraft:brain_coral_fan';
		    MinecraftItemTypes2['Bread'] = 'minecraft:bread';
		    MinecraftItemTypes2['BreezeRod'] = 'minecraft:breeze_rod';
		    MinecraftItemTypes2['BreezeSpawnEgg'] = 'minecraft:breeze_spawn_egg';
		    MinecraftItemTypes2['BrewerPotterySherd'] = 'minecraft:brewer_pottery_sherd';
		    MinecraftItemTypes2['BrewingStand'] = 'minecraft:brewing_stand';
		    MinecraftItemTypes2['Brick'] = 'minecraft:brick';
		    MinecraftItemTypes2['BrickBlock'] = 'minecraft:brick_block';
		    MinecraftItemTypes2['BrickSlab'] = 'minecraft:brick_slab';
		    MinecraftItemTypes2['BrickStairs'] = 'minecraft:brick_stairs';
		    MinecraftItemTypes2['BrickWall'] = 'minecraft:brick_wall';
		    MinecraftItemTypes2['BrownBundle'] = 'minecraft:brown_bundle';
		    MinecraftItemTypes2['BrownCandle'] = 'minecraft:brown_candle';
		    MinecraftItemTypes2['BrownCarpet'] = 'minecraft:brown_carpet';
		    MinecraftItemTypes2['BrownConcrete'] = 'minecraft:brown_concrete';
		    MinecraftItemTypes2['BrownConcretePowder'] = 'minecraft:brown_concrete_powder';
		    MinecraftItemTypes2['BrownDye'] = 'minecraft:brown_dye';
		    MinecraftItemTypes2['BrownGlazedTerracotta'] = 'minecraft:brown_glazed_terracotta';
		    MinecraftItemTypes2['BrownMushroom'] = 'minecraft:brown_mushroom';
		    MinecraftItemTypes2['BrownMushroomBlock'] = 'minecraft:brown_mushroom_block';
		    MinecraftItemTypes2['BrownShulkerBox'] = 'minecraft:brown_shulker_box';
		    MinecraftItemTypes2['BrownStainedGlass'] = 'minecraft:brown_stained_glass';
		    MinecraftItemTypes2['BrownStainedGlassPane'] = 'minecraft:brown_stained_glass_pane';
		    MinecraftItemTypes2['BrownTerracotta'] = 'minecraft:brown_terracotta';
		    MinecraftItemTypes2['BrownWool'] = 'minecraft:brown_wool';
		    MinecraftItemTypes2['Brush'] = 'minecraft:brush';
		    MinecraftItemTypes2['BubbleCoral'] = 'minecraft:bubble_coral';
		    MinecraftItemTypes2['BubbleCoralBlock'] = 'minecraft:bubble_coral_block';
		    MinecraftItemTypes2['BubbleCoralFan'] = 'minecraft:bubble_coral_fan';
		    MinecraftItemTypes2['Bucket'] = 'minecraft:bucket';
		    MinecraftItemTypes2['BuddingAmethyst'] = 'minecraft:budding_amethyst';
		    MinecraftItemTypes2['Bundle'] = 'minecraft:bundle';
		    MinecraftItemTypes2['BurnPotterySherd'] = 'minecraft:burn_pottery_sherd';
		    MinecraftItemTypes2['Cactus'] = 'minecraft:cactus';
		    MinecraftItemTypes2['Cake'] = 'minecraft:cake';
		    MinecraftItemTypes2['Calcite'] = 'minecraft:calcite';
		    MinecraftItemTypes2['CalibratedSculkSensor'] = 'minecraft:calibrated_sculk_sensor';
		    MinecraftItemTypes2['CamelSpawnEgg'] = 'minecraft:camel_spawn_egg';
		    MinecraftItemTypes2['Campfire'] = 'minecraft:campfire';
		    MinecraftItemTypes2['Candle'] = 'minecraft:candle';
		    MinecraftItemTypes2['Carrot'] = 'minecraft:carrot';
		    MinecraftItemTypes2['CarrotOnAStick'] = 'minecraft:carrot_on_a_stick';
		    MinecraftItemTypes2['CartographyTable'] = 'minecraft:cartography_table';
		    MinecraftItemTypes2['CarvedPumpkin'] = 'minecraft:carved_pumpkin';
		    MinecraftItemTypes2['CatSpawnEgg'] = 'minecraft:cat_spawn_egg';
		    MinecraftItemTypes2['Cauldron'] = 'minecraft:cauldron';
		    MinecraftItemTypes2['CaveSpiderSpawnEgg'] = 'minecraft:cave_spider_spawn_egg';
		    MinecraftItemTypes2['Chain'] = 'minecraft:chain';
		    MinecraftItemTypes2['ChainCommandBlock'] = 'minecraft:chain_command_block';
		    MinecraftItemTypes2['ChainmailBoots'] = 'minecraft:chainmail_boots';
		    MinecraftItemTypes2['ChainmailChestplate'] = 'minecraft:chainmail_chestplate';
		    MinecraftItemTypes2['ChainmailHelmet'] = 'minecraft:chainmail_helmet';
		    MinecraftItemTypes2['ChainmailLeggings'] = 'minecraft:chainmail_leggings';
		    MinecraftItemTypes2['Charcoal'] = 'minecraft:charcoal';
		    MinecraftItemTypes2['CherryBoat'] = 'minecraft:cherry_boat';
		    MinecraftItemTypes2['CherryButton'] = 'minecraft:cherry_button';
		    MinecraftItemTypes2['CherryChestBoat'] = 'minecraft:cherry_chest_boat';
		    MinecraftItemTypes2['CherryDoor'] = 'minecraft:cherry_door';
		    MinecraftItemTypes2['CherryFence'] = 'minecraft:cherry_fence';
		    MinecraftItemTypes2['CherryFenceGate'] = 'minecraft:cherry_fence_gate';
		    MinecraftItemTypes2['CherryHangingSign'] = 'minecraft:cherry_hanging_sign';
		    MinecraftItemTypes2['CherryLeaves'] = 'minecraft:cherry_leaves';
		    MinecraftItemTypes2['CherryLog'] = 'minecraft:cherry_log';
		    MinecraftItemTypes2['CherryPlanks'] = 'minecraft:cherry_planks';
		    MinecraftItemTypes2['CherryPressurePlate'] = 'minecraft:cherry_pressure_plate';
		    MinecraftItemTypes2['CherrySapling'] = 'minecraft:cherry_sapling';
		    MinecraftItemTypes2['CherrySign'] = 'minecraft:cherry_sign';
		    MinecraftItemTypes2['CherrySlab'] = 'minecraft:cherry_slab';
		    MinecraftItemTypes2['CherryStairs'] = 'minecraft:cherry_stairs';
		    MinecraftItemTypes2['CherryTrapdoor'] = 'minecraft:cherry_trapdoor';
		    MinecraftItemTypes2['CherryWood'] = 'minecraft:cherry_wood';
		    MinecraftItemTypes2['Chest'] = 'minecraft:chest';
		    MinecraftItemTypes2['ChestMinecart'] = 'minecraft:chest_minecart';
		    MinecraftItemTypes2['Chicken'] = 'minecraft:chicken';
		    MinecraftItemTypes2['ChickenSpawnEgg'] = 'minecraft:chicken_spawn_egg';
		    MinecraftItemTypes2['ChippedAnvil'] = 'minecraft:chipped_anvil';
		    MinecraftItemTypes2['ChiseledBookshelf'] = 'minecraft:chiseled_bookshelf';
		    MinecraftItemTypes2['ChiseledCopper'] = 'minecraft:chiseled_copper';
		    MinecraftItemTypes2['ChiseledDeepslate'] = 'minecraft:chiseled_deepslate';
		    MinecraftItemTypes2['ChiseledNetherBricks'] = 'minecraft:chiseled_nether_bricks';
		    MinecraftItemTypes2['ChiseledPolishedBlackstone'] = 'minecraft:chiseled_polished_blackstone';
		    MinecraftItemTypes2['ChiseledQuartzBlock'] = 'minecraft:chiseled_quartz_block';
		    MinecraftItemTypes2['ChiseledRedSandstone'] = 'minecraft:chiseled_red_sandstone';
		    MinecraftItemTypes2['ChiseledResinBricks'] = 'minecraft:chiseled_resin_bricks';
		    MinecraftItemTypes2['ChiseledSandstone'] = 'minecraft:chiseled_sandstone';
		    MinecraftItemTypes2['ChiseledStoneBricks'] = 'minecraft:chiseled_stone_bricks';
		    MinecraftItemTypes2['ChiseledTuff'] = 'minecraft:chiseled_tuff';
		    MinecraftItemTypes2['ChiseledTuffBricks'] = 'minecraft:chiseled_tuff_bricks';
		    MinecraftItemTypes2['ChorusFlower'] = 'minecraft:chorus_flower';
		    MinecraftItemTypes2['ChorusFruit'] = 'minecraft:chorus_fruit';
		    MinecraftItemTypes2['ChorusPlant'] = 'minecraft:chorus_plant';
		    MinecraftItemTypes2['Clay'] = 'minecraft:clay';
		    MinecraftItemTypes2['ClayBall'] = 'minecraft:clay_ball';
		    MinecraftItemTypes2['Clock'] = 'minecraft:clock';
		    MinecraftItemTypes2['ClosedEyeblossom'] = 'minecraft:closed_eyeblossom';
		    MinecraftItemTypes2['Coal'] = 'minecraft:coal';
		    MinecraftItemTypes2['CoalBlock'] = 'minecraft:coal_block';
		    MinecraftItemTypes2['CoalOre'] = 'minecraft:coal_ore';
		    MinecraftItemTypes2['CoarseDirt'] = 'minecraft:coarse_dirt';
		    MinecraftItemTypes2['CoastArmorTrimSmithingTemplate'] = 'minecraft:coast_armor_trim_smithing_template';
		    MinecraftItemTypes2['CobbledDeepslate'] = 'minecraft:cobbled_deepslate';
		    MinecraftItemTypes2['CobbledDeepslateSlab'] = 'minecraft:cobbled_deepslate_slab';
		    MinecraftItemTypes2['CobbledDeepslateStairs'] = 'minecraft:cobbled_deepslate_stairs';
		    MinecraftItemTypes2['CobbledDeepslateWall'] = 'minecraft:cobbled_deepslate_wall';
		    MinecraftItemTypes2['Cobblestone'] = 'minecraft:cobblestone';
		    MinecraftItemTypes2['CobblestoneSlab'] = 'minecraft:cobblestone_slab';
		    MinecraftItemTypes2['CobblestoneWall'] = 'minecraft:cobblestone_wall';
		    MinecraftItemTypes2['CocoaBeans'] = 'minecraft:cocoa_beans';
		    MinecraftItemTypes2['Cod'] = 'minecraft:cod';
		    MinecraftItemTypes2['CodBucket'] = 'minecraft:cod_bucket';
		    MinecraftItemTypes2['CodSpawnEgg'] = 'minecraft:cod_spawn_egg';
		    MinecraftItemTypes2['CommandBlock'] = 'minecraft:command_block';
		    MinecraftItemTypes2['CommandBlockMinecart'] = 'minecraft:command_block_minecart';
		    MinecraftItemTypes2['Comparator'] = 'minecraft:comparator';
		    MinecraftItemTypes2['Compass'] = 'minecraft:compass';
		    MinecraftItemTypes2['Composter'] = 'minecraft:composter';
		    MinecraftItemTypes2['Conduit'] = 'minecraft:conduit';
		    MinecraftItemTypes2['CookedBeef'] = 'minecraft:cooked_beef';
		    MinecraftItemTypes2['CookedChicken'] = 'minecraft:cooked_chicken';
		    MinecraftItemTypes2['CookedCod'] = 'minecraft:cooked_cod';
		    MinecraftItemTypes2['CookedMutton'] = 'minecraft:cooked_mutton';
		    MinecraftItemTypes2['CookedPorkchop'] = 'minecraft:cooked_porkchop';
		    MinecraftItemTypes2['CookedRabbit'] = 'minecraft:cooked_rabbit';
		    MinecraftItemTypes2['CookedSalmon'] = 'minecraft:cooked_salmon';
		    MinecraftItemTypes2['Cookie'] = 'minecraft:cookie';
		    MinecraftItemTypes2['CopperBlock'] = 'minecraft:copper_block';
		    MinecraftItemTypes2['CopperBulb'] = 'minecraft:copper_bulb';
		    MinecraftItemTypes2['CopperDoor'] = 'minecraft:copper_door';
		    MinecraftItemTypes2['CopperGrate'] = 'minecraft:copper_grate';
		    MinecraftItemTypes2['CopperIngot'] = 'minecraft:copper_ingot';
		    MinecraftItemTypes2['CopperOre'] = 'minecraft:copper_ore';
		    MinecraftItemTypes2['CopperTrapdoor'] = 'minecraft:copper_trapdoor';
		    MinecraftItemTypes2['Cornflower'] = 'minecraft:cornflower';
		    MinecraftItemTypes2['CowSpawnEgg'] = 'minecraft:cow_spawn_egg';
		    MinecraftItemTypes2['CrackedDeepslateBricks'] = 'minecraft:cracked_deepslate_bricks';
		    MinecraftItemTypes2['CrackedDeepslateTiles'] = 'minecraft:cracked_deepslate_tiles';
		    MinecraftItemTypes2['CrackedNetherBricks'] = 'minecraft:cracked_nether_bricks';
		    MinecraftItemTypes2['CrackedPolishedBlackstoneBricks'] = 'minecraft:cracked_polished_blackstone_bricks';
		    MinecraftItemTypes2['CrackedStoneBricks'] = 'minecraft:cracked_stone_bricks';
		    MinecraftItemTypes2['Crafter'] = 'minecraft:crafter';
		    MinecraftItemTypes2['CraftingTable'] = 'minecraft:crafting_table';
		    MinecraftItemTypes2['CreakingHeart'] = 'minecraft:creaking_heart';
		    MinecraftItemTypes2['CreakingSpawnEgg'] = 'minecraft:creaking_spawn_egg';
		    MinecraftItemTypes2['CreeperBannerPattern'] = 'minecraft:creeper_banner_pattern';
		    MinecraftItemTypes2['CreeperHead'] = 'minecraft:creeper_head';
		    MinecraftItemTypes2['CreeperSpawnEgg'] = 'minecraft:creeper_spawn_egg';
		    MinecraftItemTypes2['CrimsonButton'] = 'minecraft:crimson_button';
		    MinecraftItemTypes2['CrimsonDoor'] = 'minecraft:crimson_door';
		    MinecraftItemTypes2['CrimsonFence'] = 'minecraft:crimson_fence';
		    MinecraftItemTypes2['CrimsonFenceGate'] = 'minecraft:crimson_fence_gate';
		    MinecraftItemTypes2['CrimsonFungus'] = 'minecraft:crimson_fungus';
		    MinecraftItemTypes2['CrimsonHangingSign'] = 'minecraft:crimson_hanging_sign';
		    MinecraftItemTypes2['CrimsonHyphae'] = 'minecraft:crimson_hyphae';
		    MinecraftItemTypes2['CrimsonNylium'] = 'minecraft:crimson_nylium';
		    MinecraftItemTypes2['CrimsonPlanks'] = 'minecraft:crimson_planks';
		    MinecraftItemTypes2['CrimsonPressurePlate'] = 'minecraft:crimson_pressure_plate';
		    MinecraftItemTypes2['CrimsonRoots'] = 'minecraft:crimson_roots';
		    MinecraftItemTypes2['CrimsonSign'] = 'minecraft:crimson_sign';
		    MinecraftItemTypes2['CrimsonSlab'] = 'minecraft:crimson_slab';
		    MinecraftItemTypes2['CrimsonStairs'] = 'minecraft:crimson_stairs';
		    MinecraftItemTypes2['CrimsonStem'] = 'minecraft:crimson_stem';
		    MinecraftItemTypes2['CrimsonTrapdoor'] = 'minecraft:crimson_trapdoor';
		    MinecraftItemTypes2['Crossbow'] = 'minecraft:crossbow';
		    MinecraftItemTypes2['CryingObsidian'] = 'minecraft:crying_obsidian';
		    MinecraftItemTypes2['CutCopper'] = 'minecraft:cut_copper';
		    MinecraftItemTypes2['CutCopperSlab'] = 'minecraft:cut_copper_slab';
		    MinecraftItemTypes2['CutCopperStairs'] = 'minecraft:cut_copper_stairs';
		    MinecraftItemTypes2['CutRedSandstone'] = 'minecraft:cut_red_sandstone';
		    MinecraftItemTypes2['CutRedSandstoneSlab'] = 'minecraft:cut_red_sandstone_slab';
		    MinecraftItemTypes2['CutSandstone'] = 'minecraft:cut_sandstone';
		    MinecraftItemTypes2['CutSandstoneSlab'] = 'minecraft:cut_sandstone_slab';
		    MinecraftItemTypes2['CyanBundle'] = 'minecraft:cyan_bundle';
		    MinecraftItemTypes2['CyanCandle'] = 'minecraft:cyan_candle';
		    MinecraftItemTypes2['CyanCarpet'] = 'minecraft:cyan_carpet';
		    MinecraftItemTypes2['CyanConcrete'] = 'minecraft:cyan_concrete';
		    MinecraftItemTypes2['CyanConcretePowder'] = 'minecraft:cyan_concrete_powder';
		    MinecraftItemTypes2['CyanDye'] = 'minecraft:cyan_dye';
		    MinecraftItemTypes2['CyanGlazedTerracotta'] = 'minecraft:cyan_glazed_terracotta';
		    MinecraftItemTypes2['CyanShulkerBox'] = 'minecraft:cyan_shulker_box';
		    MinecraftItemTypes2['CyanStainedGlass'] = 'minecraft:cyan_stained_glass';
		    MinecraftItemTypes2['CyanStainedGlassPane'] = 'minecraft:cyan_stained_glass_pane';
		    MinecraftItemTypes2['CyanTerracotta'] = 'minecraft:cyan_terracotta';
		    MinecraftItemTypes2['CyanWool'] = 'minecraft:cyan_wool';
		    MinecraftItemTypes2['DamagedAnvil'] = 'minecraft:damaged_anvil';
		    MinecraftItemTypes2['Dandelion'] = 'minecraft:dandelion';
		    MinecraftItemTypes2['DangerPotterySherd'] = 'minecraft:danger_pottery_sherd';
		    MinecraftItemTypes2['DarkOakBoat'] = 'minecraft:dark_oak_boat';
		    MinecraftItemTypes2['DarkOakButton'] = 'minecraft:dark_oak_button';
		    MinecraftItemTypes2['DarkOakChestBoat'] = 'minecraft:dark_oak_chest_boat';
		    MinecraftItemTypes2['DarkOakDoor'] = 'minecraft:dark_oak_door';
		    MinecraftItemTypes2['DarkOakFence'] = 'minecraft:dark_oak_fence';
		    MinecraftItemTypes2['DarkOakFenceGate'] = 'minecraft:dark_oak_fence_gate';
		    MinecraftItemTypes2['DarkOakHangingSign'] = 'minecraft:dark_oak_hanging_sign';
		    MinecraftItemTypes2['DarkOakLeaves'] = 'minecraft:dark_oak_leaves';
		    MinecraftItemTypes2['DarkOakLog'] = 'minecraft:dark_oak_log';
		    MinecraftItemTypes2['DarkOakPlanks'] = 'minecraft:dark_oak_planks';
		    MinecraftItemTypes2['DarkOakPressurePlate'] = 'minecraft:dark_oak_pressure_plate';
		    MinecraftItemTypes2['DarkOakSapling'] = 'minecraft:dark_oak_sapling';
		    MinecraftItemTypes2['DarkOakSign'] = 'minecraft:dark_oak_sign';
		    MinecraftItemTypes2['DarkOakSlab'] = 'minecraft:dark_oak_slab';
		    MinecraftItemTypes2['DarkOakStairs'] = 'minecraft:dark_oak_stairs';
		    MinecraftItemTypes2['DarkOakTrapdoor'] = 'minecraft:dark_oak_trapdoor';
		    MinecraftItemTypes2['DarkOakWood'] = 'minecraft:dark_oak_wood';
		    MinecraftItemTypes2['DarkPrismarine'] = 'minecraft:dark_prismarine';
		    MinecraftItemTypes2['DarkPrismarineSlab'] = 'minecraft:dark_prismarine_slab';
		    MinecraftItemTypes2['DarkPrismarineStairs'] = 'minecraft:dark_prismarine_stairs';
		    MinecraftItemTypes2['DaylightDetector'] = 'minecraft:daylight_detector';
		    MinecraftItemTypes2['DeadBrainCoral'] = 'minecraft:dead_brain_coral';
		    MinecraftItemTypes2['DeadBrainCoralBlock'] = 'minecraft:dead_brain_coral_block';
		    MinecraftItemTypes2['DeadBrainCoralFan'] = 'minecraft:dead_brain_coral_fan';
		    MinecraftItemTypes2['DeadBubbleCoral'] = 'minecraft:dead_bubble_coral';
		    MinecraftItemTypes2['DeadBubbleCoralBlock'] = 'minecraft:dead_bubble_coral_block';
		    MinecraftItemTypes2['DeadBubbleCoralFan'] = 'minecraft:dead_bubble_coral_fan';
		    MinecraftItemTypes2['DeadFireCoral'] = 'minecraft:dead_fire_coral';
		    MinecraftItemTypes2['DeadFireCoralBlock'] = 'minecraft:dead_fire_coral_block';
		    MinecraftItemTypes2['DeadFireCoralFan'] = 'minecraft:dead_fire_coral_fan';
		    MinecraftItemTypes2['DeadHornCoral'] = 'minecraft:dead_horn_coral';
		    MinecraftItemTypes2['DeadHornCoralBlock'] = 'minecraft:dead_horn_coral_block';
		    MinecraftItemTypes2['DeadHornCoralFan'] = 'minecraft:dead_horn_coral_fan';
		    MinecraftItemTypes2['DeadTubeCoral'] = 'minecraft:dead_tube_coral';
		    MinecraftItemTypes2['DeadTubeCoralBlock'] = 'minecraft:dead_tube_coral_block';
		    MinecraftItemTypes2['DeadTubeCoralFan'] = 'minecraft:dead_tube_coral_fan';
		    MinecraftItemTypes2['Deadbush'] = 'minecraft:deadbush';
		    MinecraftItemTypes2['DebugStick'] = 'minecraft:debug_stick';
		    MinecraftItemTypes2['DecoratedPot'] = 'minecraft:decorated_pot';
		    MinecraftItemTypes2['Deepslate'] = 'minecraft:deepslate';
		    MinecraftItemTypes2['DeepslateBrickSlab'] = 'minecraft:deepslate_brick_slab';
		    MinecraftItemTypes2['DeepslateBrickStairs'] = 'minecraft:deepslate_brick_stairs';
		    MinecraftItemTypes2['DeepslateBrickWall'] = 'minecraft:deepslate_brick_wall';
		    MinecraftItemTypes2['DeepslateBricks'] = 'minecraft:deepslate_bricks';
		    MinecraftItemTypes2['DeepslateCoalOre'] = 'minecraft:deepslate_coal_ore';
		    MinecraftItemTypes2['DeepslateCopperOre'] = 'minecraft:deepslate_copper_ore';
		    MinecraftItemTypes2['DeepslateDiamondOre'] = 'minecraft:deepslate_diamond_ore';
		    MinecraftItemTypes2['DeepslateEmeraldOre'] = 'minecraft:deepslate_emerald_ore';
		    MinecraftItemTypes2['DeepslateGoldOre'] = 'minecraft:deepslate_gold_ore';
		    MinecraftItemTypes2['DeepslateIronOre'] = 'minecraft:deepslate_iron_ore';
		    MinecraftItemTypes2['DeepslateLapisOre'] = 'minecraft:deepslate_lapis_ore';
		    MinecraftItemTypes2['DeepslateRedstoneOre'] = 'minecraft:deepslate_redstone_ore';
		    MinecraftItemTypes2['DeepslateTileSlab'] = 'minecraft:deepslate_tile_slab';
		    MinecraftItemTypes2['DeepslateTileStairs'] = 'minecraft:deepslate_tile_stairs';
		    MinecraftItemTypes2['DeepslateTileWall'] = 'minecraft:deepslate_tile_wall';
		    MinecraftItemTypes2['DeepslateTiles'] = 'minecraft:deepslate_tiles';
		    MinecraftItemTypes2['Deny'] = 'minecraft:deny';
		    MinecraftItemTypes2['DetectorRail'] = 'minecraft:detector_rail';
		    MinecraftItemTypes2['Diamond'] = 'minecraft:diamond';
		    MinecraftItemTypes2['DiamondAxe'] = 'minecraft:diamond_axe';
		    MinecraftItemTypes2['DiamondBlock'] = 'minecraft:diamond_block';
		    MinecraftItemTypes2['DiamondBoots'] = 'minecraft:diamond_boots';
		    MinecraftItemTypes2['DiamondChestplate'] = 'minecraft:diamond_chestplate';
		    MinecraftItemTypes2['DiamondHelmet'] = 'minecraft:diamond_helmet';
		    MinecraftItemTypes2['DiamondHoe'] = 'minecraft:diamond_hoe';
		    MinecraftItemTypes2['DiamondHorseArmor'] = 'minecraft:diamond_horse_armor';
		    MinecraftItemTypes2['DiamondLeggings'] = 'minecraft:diamond_leggings';
		    MinecraftItemTypes2['DiamondOre'] = 'minecraft:diamond_ore';
		    MinecraftItemTypes2['DiamondPickaxe'] = 'minecraft:diamond_pickaxe';
		    MinecraftItemTypes2['DiamondShovel'] = 'minecraft:diamond_shovel';
		    MinecraftItemTypes2['DiamondSword'] = 'minecraft:diamond_sword';
		    MinecraftItemTypes2['Diorite'] = 'minecraft:diorite';
		    MinecraftItemTypes2['DioriteSlab'] = 'minecraft:diorite_slab';
		    MinecraftItemTypes2['DioriteStairs'] = 'minecraft:diorite_stairs';
		    MinecraftItemTypes2['DioriteWall'] = 'minecraft:diorite_wall';
		    MinecraftItemTypes2['Dirt'] = 'minecraft:dirt';
		    MinecraftItemTypes2['DirtWithRoots'] = 'minecraft:dirt_with_roots';
		    MinecraftItemTypes2['DiscFragment5'] = 'minecraft:disc_fragment_5';
		    MinecraftItemTypes2['Dispenser'] = 'minecraft:dispenser';
		    MinecraftItemTypes2['DolphinSpawnEgg'] = 'minecraft:dolphin_spawn_egg';
		    MinecraftItemTypes2['DonkeySpawnEgg'] = 'minecraft:donkey_spawn_egg';
		    MinecraftItemTypes2['DragonBreath'] = 'minecraft:dragon_breath';
		    MinecraftItemTypes2['DragonEgg'] = 'minecraft:dragon_egg';
		    MinecraftItemTypes2['DragonHead'] = 'minecraft:dragon_head';
		    MinecraftItemTypes2['DriedKelp'] = 'minecraft:dried_kelp';
		    MinecraftItemTypes2['DriedKelpBlock'] = 'minecraft:dried_kelp_block';
		    MinecraftItemTypes2['DripstoneBlock'] = 'minecraft:dripstone_block';
		    MinecraftItemTypes2['Dropper'] = 'minecraft:dropper';
		    MinecraftItemTypes2['DrownedSpawnEgg'] = 'minecraft:drowned_spawn_egg';
		    MinecraftItemTypes2['DuneArmorTrimSmithingTemplate'] = 'minecraft:dune_armor_trim_smithing_template';
		    MinecraftItemTypes2['EchoShard'] = 'minecraft:echo_shard';
		    MinecraftItemTypes2['Egg'] = 'minecraft:egg';
		    MinecraftItemTypes2['ElderGuardianSpawnEgg'] = 'minecraft:elder_guardian_spawn_egg';
		    MinecraftItemTypes2['Elytra'] = 'minecraft:elytra';
		    MinecraftItemTypes2['Emerald'] = 'minecraft:emerald';
		    MinecraftItemTypes2['EmeraldBlock'] = 'minecraft:emerald_block';
		    MinecraftItemTypes2['EmeraldOre'] = 'minecraft:emerald_ore';
		    MinecraftItemTypes2['EmptyMap'] = 'minecraft:empty_map';
		    MinecraftItemTypes2['EnchantedBook'] = 'minecraft:enchanted_book';
		    MinecraftItemTypes2['EnchantedGoldenApple'] = 'minecraft:enchanted_golden_apple';
		    MinecraftItemTypes2['EnchantingTable'] = 'minecraft:enchanting_table';
		    MinecraftItemTypes2['EndBrickStairs'] = 'minecraft:end_brick_stairs';
		    MinecraftItemTypes2['EndBricks'] = 'minecraft:end_bricks';
		    MinecraftItemTypes2['EndCrystal'] = 'minecraft:end_crystal';
		    MinecraftItemTypes2['EndPortalFrame'] = 'minecraft:end_portal_frame';
		    MinecraftItemTypes2['EndRod'] = 'minecraft:end_rod';
		    MinecraftItemTypes2['EndStone'] = 'minecraft:end_stone';
		    MinecraftItemTypes2['EndStoneBrickSlab'] = 'minecraft:end_stone_brick_slab';
		    MinecraftItemTypes2['EndStoneBrickWall'] = 'minecraft:end_stone_brick_wall';
		    MinecraftItemTypes2['EnderChest'] = 'minecraft:ender_chest';
		    MinecraftItemTypes2['EnderDragonSpawnEgg'] = 'minecraft:ender_dragon_spawn_egg';
		    MinecraftItemTypes2['EnderEye'] = 'minecraft:ender_eye';
		    MinecraftItemTypes2['EnderPearl'] = 'minecraft:ender_pearl';
		    MinecraftItemTypes2['EndermanSpawnEgg'] = 'minecraft:enderman_spawn_egg';
		    MinecraftItemTypes2['EndermiteSpawnEgg'] = 'minecraft:endermite_spawn_egg';
		    MinecraftItemTypes2['EvokerSpawnEgg'] = 'minecraft:evoker_spawn_egg';
		    MinecraftItemTypes2['ExperienceBottle'] = 'minecraft:experience_bottle';
		    MinecraftItemTypes2['ExplorerPotterySherd'] = 'minecraft:explorer_pottery_sherd';
		    MinecraftItemTypes2['ExposedChiseledCopper'] = 'minecraft:exposed_chiseled_copper';
		    MinecraftItemTypes2['ExposedCopper'] = 'minecraft:exposed_copper';
		    MinecraftItemTypes2['ExposedCopperBulb'] = 'minecraft:exposed_copper_bulb';
		    MinecraftItemTypes2['ExposedCopperDoor'] = 'minecraft:exposed_copper_door';
		    MinecraftItemTypes2['ExposedCopperGrate'] = 'minecraft:exposed_copper_grate';
		    MinecraftItemTypes2['ExposedCopperTrapdoor'] = 'minecraft:exposed_copper_trapdoor';
		    MinecraftItemTypes2['ExposedCutCopper'] = 'minecraft:exposed_cut_copper';
		    MinecraftItemTypes2['ExposedCutCopperSlab'] = 'minecraft:exposed_cut_copper_slab';
		    MinecraftItemTypes2['ExposedCutCopperStairs'] = 'minecraft:exposed_cut_copper_stairs';
		    MinecraftItemTypes2['EyeArmorTrimSmithingTemplate'] = 'minecraft:eye_armor_trim_smithing_template';
		    MinecraftItemTypes2['Farmland'] = 'minecraft:farmland';
		    MinecraftItemTypes2['Feather'] = 'minecraft:feather';
		    MinecraftItemTypes2['FenceGate'] = 'minecraft:fence_gate';
		    MinecraftItemTypes2['FermentedSpiderEye'] = 'minecraft:fermented_spider_eye';
		    MinecraftItemTypes2['Fern'] = 'minecraft:fern';
		    MinecraftItemTypes2['FieldMasonedBannerPattern'] = 'minecraft:field_masoned_banner_pattern';
		    MinecraftItemTypes2['FilledMap'] = 'minecraft:filled_map';
		    MinecraftItemTypes2['FireCharge'] = 'minecraft:fire_charge';
		    MinecraftItemTypes2['FireCoral'] = 'minecraft:fire_coral';
		    MinecraftItemTypes2['FireCoralBlock'] = 'minecraft:fire_coral_block';
		    MinecraftItemTypes2['FireCoralFan'] = 'minecraft:fire_coral_fan';
		    MinecraftItemTypes2['FireworkRocket'] = 'minecraft:firework_rocket';
		    MinecraftItemTypes2['FireworkStar'] = 'minecraft:firework_star';
		    MinecraftItemTypes2['FishingRod'] = 'minecraft:fishing_rod';
		    MinecraftItemTypes2['FletchingTable'] = 'minecraft:fletching_table';
		    MinecraftItemTypes2['Flint'] = 'minecraft:flint';
		    MinecraftItemTypes2['FlintAndSteel'] = 'minecraft:flint_and_steel';
		    MinecraftItemTypes2['FlowArmorTrimSmithingTemplate'] = 'minecraft:flow_armor_trim_smithing_template';
		    MinecraftItemTypes2['FlowBannerPattern'] = 'minecraft:flow_banner_pattern';
		    MinecraftItemTypes2['FlowPotterySherd'] = 'minecraft:flow_pottery_sherd';
		    MinecraftItemTypes2['FlowerBannerPattern'] = 'minecraft:flower_banner_pattern';
		    MinecraftItemTypes2['FlowerPot'] = 'minecraft:flower_pot';
		    MinecraftItemTypes2['FloweringAzalea'] = 'minecraft:flowering_azalea';
		    MinecraftItemTypes2['FoxSpawnEgg'] = 'minecraft:fox_spawn_egg';
		    MinecraftItemTypes2['Frame'] = 'minecraft:frame';
		    MinecraftItemTypes2['FriendPotterySherd'] = 'minecraft:friend_pottery_sherd';
		    MinecraftItemTypes2['FrogSpawn'] = 'minecraft:frog_spawn';
		    MinecraftItemTypes2['FrogSpawnEgg'] = 'minecraft:frog_spawn_egg';
		    MinecraftItemTypes2['FrostedIce'] = 'minecraft:frosted_ice';
		    MinecraftItemTypes2['Furnace'] = 'minecraft:furnace';
		    MinecraftItemTypes2['GhastSpawnEgg'] = 'minecraft:ghast_spawn_egg';
		    MinecraftItemTypes2['GhastTear'] = 'minecraft:ghast_tear';
		    MinecraftItemTypes2['GildedBlackstone'] = 'minecraft:gilded_blackstone';
		    MinecraftItemTypes2['Glass'] = 'minecraft:glass';
		    MinecraftItemTypes2['GlassBottle'] = 'minecraft:glass_bottle';
		    MinecraftItemTypes2['GlassPane'] = 'minecraft:glass_pane';
		    MinecraftItemTypes2['GlisteringMelonSlice'] = 'minecraft:glistering_melon_slice';
		    MinecraftItemTypes2['GlobeBannerPattern'] = 'minecraft:globe_banner_pattern';
		    MinecraftItemTypes2['GlowBerries'] = 'minecraft:glow_berries';
		    MinecraftItemTypes2['GlowFrame'] = 'minecraft:glow_frame';
		    MinecraftItemTypes2['GlowInkSac'] = 'minecraft:glow_ink_sac';
		    MinecraftItemTypes2['GlowLichen'] = 'minecraft:glow_lichen';
		    MinecraftItemTypes2['GlowSquidSpawnEgg'] = 'minecraft:glow_squid_spawn_egg';
		    MinecraftItemTypes2['Glowstone'] = 'minecraft:glowstone';
		    MinecraftItemTypes2['GlowstoneDust'] = 'minecraft:glowstone_dust';
		    MinecraftItemTypes2['GoatHorn'] = 'minecraft:goat_horn';
		    MinecraftItemTypes2['GoatSpawnEgg'] = 'minecraft:goat_spawn_egg';
		    MinecraftItemTypes2['GoldBlock'] = 'minecraft:gold_block';
		    MinecraftItemTypes2['GoldIngot'] = 'minecraft:gold_ingot';
		    MinecraftItemTypes2['GoldNugget'] = 'minecraft:gold_nugget';
		    MinecraftItemTypes2['GoldOre'] = 'minecraft:gold_ore';
		    MinecraftItemTypes2['GoldenApple'] = 'minecraft:golden_apple';
		    MinecraftItemTypes2['GoldenAxe'] = 'minecraft:golden_axe';
		    MinecraftItemTypes2['GoldenBoots'] = 'minecraft:golden_boots';
		    MinecraftItemTypes2['GoldenCarrot'] = 'minecraft:golden_carrot';
		    MinecraftItemTypes2['GoldenChestplate'] = 'minecraft:golden_chestplate';
		    MinecraftItemTypes2['GoldenHelmet'] = 'minecraft:golden_helmet';
		    MinecraftItemTypes2['GoldenHoe'] = 'minecraft:golden_hoe';
		    MinecraftItemTypes2['GoldenHorseArmor'] = 'minecraft:golden_horse_armor';
		    MinecraftItemTypes2['GoldenLeggings'] = 'minecraft:golden_leggings';
		    MinecraftItemTypes2['GoldenPickaxe'] = 'minecraft:golden_pickaxe';
		    MinecraftItemTypes2['GoldenRail'] = 'minecraft:golden_rail';
		    MinecraftItemTypes2['GoldenShovel'] = 'minecraft:golden_shovel';
		    MinecraftItemTypes2['GoldenSword'] = 'minecraft:golden_sword';
		    MinecraftItemTypes2['Granite'] = 'minecraft:granite';
		    MinecraftItemTypes2['GraniteSlab'] = 'minecraft:granite_slab';
		    MinecraftItemTypes2['GraniteStairs'] = 'minecraft:granite_stairs';
		    MinecraftItemTypes2['GraniteWall'] = 'minecraft:granite_wall';
		    MinecraftItemTypes2['GrassBlock'] = 'minecraft:grass_block';
		    MinecraftItemTypes2['GrassPath'] = 'minecraft:grass_path';
		    MinecraftItemTypes2['Gravel'] = 'minecraft:gravel';
		    MinecraftItemTypes2['GrayBundle'] = 'minecraft:gray_bundle';
		    MinecraftItemTypes2['GrayCandle'] = 'minecraft:gray_candle';
		    MinecraftItemTypes2['GrayCarpet'] = 'minecraft:gray_carpet';
		    MinecraftItemTypes2['GrayConcrete'] = 'minecraft:gray_concrete';
		    MinecraftItemTypes2['GrayConcretePowder'] = 'minecraft:gray_concrete_powder';
		    MinecraftItemTypes2['GrayDye'] = 'minecraft:gray_dye';
		    MinecraftItemTypes2['GrayGlazedTerracotta'] = 'minecraft:gray_glazed_terracotta';
		    MinecraftItemTypes2['GrayShulkerBox'] = 'minecraft:gray_shulker_box';
		    MinecraftItemTypes2['GrayStainedGlass'] = 'minecraft:gray_stained_glass';
		    MinecraftItemTypes2['GrayStainedGlassPane'] = 'minecraft:gray_stained_glass_pane';
		    MinecraftItemTypes2['GrayTerracotta'] = 'minecraft:gray_terracotta';
		    MinecraftItemTypes2['GrayWool'] = 'minecraft:gray_wool';
		    MinecraftItemTypes2['GreenBundle'] = 'minecraft:green_bundle';
		    MinecraftItemTypes2['GreenCandle'] = 'minecraft:green_candle';
		    MinecraftItemTypes2['GreenCarpet'] = 'minecraft:green_carpet';
		    MinecraftItemTypes2['GreenConcrete'] = 'minecraft:green_concrete';
		    MinecraftItemTypes2['GreenConcretePowder'] = 'minecraft:green_concrete_powder';
		    MinecraftItemTypes2['GreenDye'] = 'minecraft:green_dye';
		    MinecraftItemTypes2['GreenGlazedTerracotta'] = 'minecraft:green_glazed_terracotta';
		    MinecraftItemTypes2['GreenShulkerBox'] = 'minecraft:green_shulker_box';
		    MinecraftItemTypes2['GreenStainedGlass'] = 'minecraft:green_stained_glass';
		    MinecraftItemTypes2['GreenStainedGlassPane'] = 'minecraft:green_stained_glass_pane';
		    MinecraftItemTypes2['GreenTerracotta'] = 'minecraft:green_terracotta';
		    MinecraftItemTypes2['GreenWool'] = 'minecraft:green_wool';
		    MinecraftItemTypes2['Grindstone'] = 'minecraft:grindstone';
		    MinecraftItemTypes2['GuardianSpawnEgg'] = 'minecraft:guardian_spawn_egg';
		    MinecraftItemTypes2['Gunpowder'] = 'minecraft:gunpowder';
		    MinecraftItemTypes2['GusterBannerPattern'] = 'minecraft:guster_banner_pattern';
		    MinecraftItemTypes2['GusterPotterySherd'] = 'minecraft:guster_pottery_sherd';
		    MinecraftItemTypes2['HangingRoots'] = 'minecraft:hanging_roots';
		    MinecraftItemTypes2['HardenedClay'] = 'minecraft:hardened_clay';
		    MinecraftItemTypes2['HayBlock'] = 'minecraft:hay_block';
		    MinecraftItemTypes2['HeartOfTheSea'] = 'minecraft:heart_of_the_sea';
		    MinecraftItemTypes2['HeartPotterySherd'] = 'minecraft:heart_pottery_sherd';
		    MinecraftItemTypes2['HeartbreakPotterySherd'] = 'minecraft:heartbreak_pottery_sherd';
		    MinecraftItemTypes2['HeavyCore'] = 'minecraft:heavy_core';
		    MinecraftItemTypes2['HeavyWeightedPressurePlate'] = 'minecraft:heavy_weighted_pressure_plate';
		    MinecraftItemTypes2['HoglinSpawnEgg'] = 'minecraft:hoglin_spawn_egg';
		    MinecraftItemTypes2['HoneyBlock'] = 'minecraft:honey_block';
		    MinecraftItemTypes2['HoneyBottle'] = 'minecraft:honey_bottle';
		    MinecraftItemTypes2['Honeycomb'] = 'minecraft:honeycomb';
		    MinecraftItemTypes2['HoneycombBlock'] = 'minecraft:honeycomb_block';
		    MinecraftItemTypes2['Hopper'] = 'minecraft:hopper';
		    MinecraftItemTypes2['HopperMinecart'] = 'minecraft:hopper_minecart';
		    MinecraftItemTypes2['HornCoral'] = 'minecraft:horn_coral';
		    MinecraftItemTypes2['HornCoralBlock'] = 'minecraft:horn_coral_block';
		    MinecraftItemTypes2['HornCoralFan'] = 'minecraft:horn_coral_fan';
		    MinecraftItemTypes2['HorseSpawnEgg'] = 'minecraft:horse_spawn_egg';
		    MinecraftItemTypes2['HostArmorTrimSmithingTemplate'] = 'minecraft:host_armor_trim_smithing_template';
		    MinecraftItemTypes2['HowlPotterySherd'] = 'minecraft:howl_pottery_sherd';
		    MinecraftItemTypes2['HuskSpawnEgg'] = 'minecraft:husk_spawn_egg';
		    MinecraftItemTypes2['Ice'] = 'minecraft:ice';
		    MinecraftItemTypes2['InfestedChiseledStoneBricks'] = 'minecraft:infested_chiseled_stone_bricks';
		    MinecraftItemTypes2['InfestedCobblestone'] = 'minecraft:infested_cobblestone';
		    MinecraftItemTypes2['InfestedCrackedStoneBricks'] = 'minecraft:infested_cracked_stone_bricks';
		    MinecraftItemTypes2['InfestedDeepslate'] = 'minecraft:infested_deepslate';
		    MinecraftItemTypes2['InfestedMossyStoneBricks'] = 'minecraft:infested_mossy_stone_bricks';
		    MinecraftItemTypes2['InfestedStone'] = 'minecraft:infested_stone';
		    MinecraftItemTypes2['InfestedStoneBricks'] = 'minecraft:infested_stone_bricks';
		    MinecraftItemTypes2['InkSac'] = 'minecraft:ink_sac';
		    MinecraftItemTypes2['IronAxe'] = 'minecraft:iron_axe';
		    MinecraftItemTypes2['IronBars'] = 'minecraft:iron_bars';
		    MinecraftItemTypes2['IronBlock'] = 'minecraft:iron_block';
		    MinecraftItemTypes2['IronBoots'] = 'minecraft:iron_boots';
		    MinecraftItemTypes2['IronChestplate'] = 'minecraft:iron_chestplate';
		    MinecraftItemTypes2['IronDoor'] = 'minecraft:iron_door';
		    MinecraftItemTypes2['IronGolemSpawnEgg'] = 'minecraft:iron_golem_spawn_egg';
		    MinecraftItemTypes2['IronHelmet'] = 'minecraft:iron_helmet';
		    MinecraftItemTypes2['IronHoe'] = 'minecraft:iron_hoe';
		    MinecraftItemTypes2['IronHorseArmor'] = 'minecraft:iron_horse_armor';
		    MinecraftItemTypes2['IronIngot'] = 'minecraft:iron_ingot';
		    MinecraftItemTypes2['IronLeggings'] = 'minecraft:iron_leggings';
		    MinecraftItemTypes2['IronNugget'] = 'minecraft:iron_nugget';
		    MinecraftItemTypes2['IronOre'] = 'minecraft:iron_ore';
		    MinecraftItemTypes2['IronPickaxe'] = 'minecraft:iron_pickaxe';
		    MinecraftItemTypes2['IronShovel'] = 'minecraft:iron_shovel';
		    MinecraftItemTypes2['IronSword'] = 'minecraft:iron_sword';
		    MinecraftItemTypes2['IronTrapdoor'] = 'minecraft:iron_trapdoor';
		    MinecraftItemTypes2['Jigsaw'] = 'minecraft:jigsaw';
		    MinecraftItemTypes2['Jukebox'] = 'minecraft:jukebox';
		    MinecraftItemTypes2['JungleBoat'] = 'minecraft:jungle_boat';
		    MinecraftItemTypes2['JungleButton'] = 'minecraft:jungle_button';
		    MinecraftItemTypes2['JungleChestBoat'] = 'minecraft:jungle_chest_boat';
		    MinecraftItemTypes2['JungleDoor'] = 'minecraft:jungle_door';
		    MinecraftItemTypes2['JungleFence'] = 'minecraft:jungle_fence';
		    MinecraftItemTypes2['JungleFenceGate'] = 'minecraft:jungle_fence_gate';
		    MinecraftItemTypes2['JungleHangingSign'] = 'minecraft:jungle_hanging_sign';
		    MinecraftItemTypes2['JungleLeaves'] = 'minecraft:jungle_leaves';
		    MinecraftItemTypes2['JungleLog'] = 'minecraft:jungle_log';
		    MinecraftItemTypes2['JunglePlanks'] = 'minecraft:jungle_planks';
		    MinecraftItemTypes2['JunglePressurePlate'] = 'minecraft:jungle_pressure_plate';
		    MinecraftItemTypes2['JungleSapling'] = 'minecraft:jungle_sapling';
		    MinecraftItemTypes2['JungleSign'] = 'minecraft:jungle_sign';
		    MinecraftItemTypes2['JungleSlab'] = 'minecraft:jungle_slab';
		    MinecraftItemTypes2['JungleStairs'] = 'minecraft:jungle_stairs';
		    MinecraftItemTypes2['JungleTrapdoor'] = 'minecraft:jungle_trapdoor';
		    MinecraftItemTypes2['JungleWood'] = 'minecraft:jungle_wood';
		    MinecraftItemTypes2['Kelp'] = 'minecraft:kelp';
		    MinecraftItemTypes2['Ladder'] = 'minecraft:ladder';
		    MinecraftItemTypes2['Lantern'] = 'minecraft:lantern';
		    MinecraftItemTypes2['LapisBlock'] = 'minecraft:lapis_block';
		    MinecraftItemTypes2['LapisLazuli'] = 'minecraft:lapis_lazuli';
		    MinecraftItemTypes2['LapisOre'] = 'minecraft:lapis_ore';
		    MinecraftItemTypes2['LargeAmethystBud'] = 'minecraft:large_amethyst_bud';
		    MinecraftItemTypes2['LargeFern'] = 'minecraft:large_fern';
		    MinecraftItemTypes2['LavaBucket'] = 'minecraft:lava_bucket';
		    MinecraftItemTypes2['Lead'] = 'minecraft:lead';
		    MinecraftItemTypes2['Leather'] = 'minecraft:leather';
		    MinecraftItemTypes2['LeatherBoots'] = 'minecraft:leather_boots';
		    MinecraftItemTypes2['LeatherChestplate'] = 'minecraft:leather_chestplate';
		    MinecraftItemTypes2['LeatherHelmet'] = 'minecraft:leather_helmet';
		    MinecraftItemTypes2['LeatherHorseArmor'] = 'minecraft:leather_horse_armor';
		    MinecraftItemTypes2['LeatherLeggings'] = 'minecraft:leather_leggings';
		    MinecraftItemTypes2['Lectern'] = 'minecraft:lectern';
		    MinecraftItemTypes2['Lever'] = 'minecraft:lever';
		    MinecraftItemTypes2['LightBlock0'] = 'minecraft:light_block_0';
		    MinecraftItemTypes2['LightBlock1'] = 'minecraft:light_block_1';
		    MinecraftItemTypes2['LightBlock10'] = 'minecraft:light_block_10';
		    MinecraftItemTypes2['LightBlock11'] = 'minecraft:light_block_11';
		    MinecraftItemTypes2['LightBlock12'] = 'minecraft:light_block_12';
		    MinecraftItemTypes2['LightBlock13'] = 'minecraft:light_block_13';
		    MinecraftItemTypes2['LightBlock14'] = 'minecraft:light_block_14';
		    MinecraftItemTypes2['LightBlock15'] = 'minecraft:light_block_15';
		    MinecraftItemTypes2['LightBlock2'] = 'minecraft:light_block_2';
		    MinecraftItemTypes2['LightBlock3'] = 'minecraft:light_block_3';
		    MinecraftItemTypes2['LightBlock4'] = 'minecraft:light_block_4';
		    MinecraftItemTypes2['LightBlock5'] = 'minecraft:light_block_5';
		    MinecraftItemTypes2['LightBlock6'] = 'minecraft:light_block_6';
		    MinecraftItemTypes2['LightBlock7'] = 'minecraft:light_block_7';
		    MinecraftItemTypes2['LightBlock8'] = 'minecraft:light_block_8';
		    MinecraftItemTypes2['LightBlock9'] = 'minecraft:light_block_9';
		    MinecraftItemTypes2['LightBlueBundle'] = 'minecraft:light_blue_bundle';
		    MinecraftItemTypes2['LightBlueCandle'] = 'minecraft:light_blue_candle';
		    MinecraftItemTypes2['LightBlueCarpet'] = 'minecraft:light_blue_carpet';
		    MinecraftItemTypes2['LightBlueConcrete'] = 'minecraft:light_blue_concrete';
		    MinecraftItemTypes2['LightBlueConcretePowder'] = 'minecraft:light_blue_concrete_powder';
		    MinecraftItemTypes2['LightBlueDye'] = 'minecraft:light_blue_dye';
		    MinecraftItemTypes2['LightBlueGlazedTerracotta'] = 'minecraft:light_blue_glazed_terracotta';
		    MinecraftItemTypes2['LightBlueShulkerBox'] = 'minecraft:light_blue_shulker_box';
		    MinecraftItemTypes2['LightBlueStainedGlass'] = 'minecraft:light_blue_stained_glass';
		    MinecraftItemTypes2['LightBlueStainedGlassPane'] = 'minecraft:light_blue_stained_glass_pane';
		    MinecraftItemTypes2['LightBlueTerracotta'] = 'minecraft:light_blue_terracotta';
		    MinecraftItemTypes2['LightBlueWool'] = 'minecraft:light_blue_wool';
		    MinecraftItemTypes2['LightGrayBundle'] = 'minecraft:light_gray_bundle';
		    MinecraftItemTypes2['LightGrayCandle'] = 'minecraft:light_gray_candle';
		    MinecraftItemTypes2['LightGrayCarpet'] = 'minecraft:light_gray_carpet';
		    MinecraftItemTypes2['LightGrayConcrete'] = 'minecraft:light_gray_concrete';
		    MinecraftItemTypes2['LightGrayConcretePowder'] = 'minecraft:light_gray_concrete_powder';
		    MinecraftItemTypes2['LightGrayDye'] = 'minecraft:light_gray_dye';
		    MinecraftItemTypes2['LightGrayShulkerBox'] = 'minecraft:light_gray_shulker_box';
		    MinecraftItemTypes2['LightGrayStainedGlass'] = 'minecraft:light_gray_stained_glass';
		    MinecraftItemTypes2['LightGrayStainedGlassPane'] = 'minecraft:light_gray_stained_glass_pane';
		    MinecraftItemTypes2['LightGrayTerracotta'] = 'minecraft:light_gray_terracotta';
		    MinecraftItemTypes2['LightGrayWool'] = 'minecraft:light_gray_wool';
		    MinecraftItemTypes2['LightWeightedPressurePlate'] = 'minecraft:light_weighted_pressure_plate';
		    MinecraftItemTypes2['LightningRod'] = 'minecraft:lightning_rod';
		    MinecraftItemTypes2['Lilac'] = 'minecraft:lilac';
		    MinecraftItemTypes2['LilyOfTheValley'] = 'minecraft:lily_of_the_valley';
		    MinecraftItemTypes2['LimeBundle'] = 'minecraft:lime_bundle';
		    MinecraftItemTypes2['LimeCandle'] = 'minecraft:lime_candle';
		    MinecraftItemTypes2['LimeCarpet'] = 'minecraft:lime_carpet';
		    MinecraftItemTypes2['LimeConcrete'] = 'minecraft:lime_concrete';
		    MinecraftItemTypes2['LimeConcretePowder'] = 'minecraft:lime_concrete_powder';
		    MinecraftItemTypes2['LimeDye'] = 'minecraft:lime_dye';
		    MinecraftItemTypes2['LimeGlazedTerracotta'] = 'minecraft:lime_glazed_terracotta';
		    MinecraftItemTypes2['LimeShulkerBox'] = 'minecraft:lime_shulker_box';
		    MinecraftItemTypes2['LimeStainedGlass'] = 'minecraft:lime_stained_glass';
		    MinecraftItemTypes2['LimeStainedGlassPane'] = 'minecraft:lime_stained_glass_pane';
		    MinecraftItemTypes2['LimeTerracotta'] = 'minecraft:lime_terracotta';
		    MinecraftItemTypes2['LimeWool'] = 'minecraft:lime_wool';
		    MinecraftItemTypes2['LingeringPotion'] = 'minecraft:lingering_potion';
		    MinecraftItemTypes2['LitPumpkin'] = 'minecraft:lit_pumpkin';
		    MinecraftItemTypes2['LlamaSpawnEgg'] = 'minecraft:llama_spawn_egg';
		    MinecraftItemTypes2['Lodestone'] = 'minecraft:lodestone';
		    MinecraftItemTypes2['LodestoneCompass'] = 'minecraft:lodestone_compass';
		    MinecraftItemTypes2['Loom'] = 'minecraft:loom';
		    MinecraftItemTypes2['Mace'] = 'minecraft:mace';
		    MinecraftItemTypes2['MagentaBundle'] = 'minecraft:magenta_bundle';
		    MinecraftItemTypes2['MagentaCandle'] = 'minecraft:magenta_candle';
		    MinecraftItemTypes2['MagentaCarpet'] = 'minecraft:magenta_carpet';
		    MinecraftItemTypes2['MagentaConcrete'] = 'minecraft:magenta_concrete';
		    MinecraftItemTypes2['MagentaConcretePowder'] = 'minecraft:magenta_concrete_powder';
		    MinecraftItemTypes2['MagentaDye'] = 'minecraft:magenta_dye';
		    MinecraftItemTypes2['MagentaGlazedTerracotta'] = 'minecraft:magenta_glazed_terracotta';
		    MinecraftItemTypes2['MagentaShulkerBox'] = 'minecraft:magenta_shulker_box';
		    MinecraftItemTypes2['MagentaStainedGlass'] = 'minecraft:magenta_stained_glass';
		    MinecraftItemTypes2['MagentaStainedGlassPane'] = 'minecraft:magenta_stained_glass_pane';
		    MinecraftItemTypes2['MagentaTerracotta'] = 'minecraft:magenta_terracotta';
		    MinecraftItemTypes2['MagentaWool'] = 'minecraft:magenta_wool';
		    MinecraftItemTypes2['Magma'] = 'minecraft:magma';
		    MinecraftItemTypes2['MagmaCream'] = 'minecraft:magma_cream';
		    MinecraftItemTypes2['MagmaCubeSpawnEgg'] = 'minecraft:magma_cube_spawn_egg';
		    MinecraftItemTypes2['MangroveBoat'] = 'minecraft:mangrove_boat';
		    MinecraftItemTypes2['MangroveButton'] = 'minecraft:mangrove_button';
		    MinecraftItemTypes2['MangroveChestBoat'] = 'minecraft:mangrove_chest_boat';
		    MinecraftItemTypes2['MangroveDoor'] = 'minecraft:mangrove_door';
		    MinecraftItemTypes2['MangroveFence'] = 'minecraft:mangrove_fence';
		    MinecraftItemTypes2['MangroveFenceGate'] = 'minecraft:mangrove_fence_gate';
		    MinecraftItemTypes2['MangroveHangingSign'] = 'minecraft:mangrove_hanging_sign';
		    MinecraftItemTypes2['MangroveLeaves'] = 'minecraft:mangrove_leaves';
		    MinecraftItemTypes2['MangroveLog'] = 'minecraft:mangrove_log';
		    MinecraftItemTypes2['MangrovePlanks'] = 'minecraft:mangrove_planks';
		    MinecraftItemTypes2['MangrovePressurePlate'] = 'minecraft:mangrove_pressure_plate';
		    MinecraftItemTypes2['MangrovePropagule'] = 'minecraft:mangrove_propagule';
		    MinecraftItemTypes2['MangroveRoots'] = 'minecraft:mangrove_roots';
		    MinecraftItemTypes2['MangroveSign'] = 'minecraft:mangrove_sign';
		    MinecraftItemTypes2['MangroveSlab'] = 'minecraft:mangrove_slab';
		    MinecraftItemTypes2['MangroveStairs'] = 'minecraft:mangrove_stairs';
		    MinecraftItemTypes2['MangroveTrapdoor'] = 'minecraft:mangrove_trapdoor';
		    MinecraftItemTypes2['MangroveWood'] = 'minecraft:mangrove_wood';
		    MinecraftItemTypes2['MediumAmethystBud'] = 'minecraft:medium_amethyst_bud';
		    MinecraftItemTypes2['MelonBlock'] = 'minecraft:melon_block';
		    MinecraftItemTypes2['MelonSeeds'] = 'minecraft:melon_seeds';
		    MinecraftItemTypes2['MelonSlice'] = 'minecraft:melon_slice';
		    MinecraftItemTypes2['MilkBucket'] = 'minecraft:milk_bucket';
		    MinecraftItemTypes2['Minecart'] = 'minecraft:minecart';
		    MinecraftItemTypes2['MinerPotterySherd'] = 'minecraft:miner_pottery_sherd';
		    MinecraftItemTypes2['MobSpawner'] = 'minecraft:mob_spawner';
		    MinecraftItemTypes2['MojangBannerPattern'] = 'minecraft:mojang_banner_pattern';
		    MinecraftItemTypes2['MooshroomSpawnEgg'] = 'minecraft:mooshroom_spawn_egg';
		    MinecraftItemTypes2['MossBlock'] = 'minecraft:moss_block';
		    MinecraftItemTypes2['MossCarpet'] = 'minecraft:moss_carpet';
		    MinecraftItemTypes2['MossyCobblestone'] = 'minecraft:mossy_cobblestone';
		    MinecraftItemTypes2['MossyCobblestoneSlab'] = 'minecraft:mossy_cobblestone_slab';
		    MinecraftItemTypes2['MossyCobblestoneStairs'] = 'minecraft:mossy_cobblestone_stairs';
		    MinecraftItemTypes2['MossyCobblestoneWall'] = 'minecraft:mossy_cobblestone_wall';
		    MinecraftItemTypes2['MossyStoneBrickSlab'] = 'minecraft:mossy_stone_brick_slab';
		    MinecraftItemTypes2['MossyStoneBrickStairs'] = 'minecraft:mossy_stone_brick_stairs';
		    MinecraftItemTypes2['MossyStoneBrickWall'] = 'minecraft:mossy_stone_brick_wall';
		    MinecraftItemTypes2['MossyStoneBricks'] = 'minecraft:mossy_stone_bricks';
		    MinecraftItemTypes2['MournerPotterySherd'] = 'minecraft:mourner_pottery_sherd';
		    MinecraftItemTypes2['Mud'] = 'minecraft:mud';
		    MinecraftItemTypes2['MudBrickSlab'] = 'minecraft:mud_brick_slab';
		    MinecraftItemTypes2['MudBrickStairs'] = 'minecraft:mud_brick_stairs';
		    MinecraftItemTypes2['MudBrickWall'] = 'minecraft:mud_brick_wall';
		    MinecraftItemTypes2['MudBricks'] = 'minecraft:mud_bricks';
		    MinecraftItemTypes2['MuddyMangroveRoots'] = 'minecraft:muddy_mangrove_roots';
		    MinecraftItemTypes2['MuleSpawnEgg'] = 'minecraft:mule_spawn_egg';
		    MinecraftItemTypes2['MushroomStem'] = 'minecraft:mushroom_stem';
		    MinecraftItemTypes2['MushroomStew'] = 'minecraft:mushroom_stew';
		    MinecraftItemTypes2['MusicDisc11'] = 'minecraft:music_disc_11';
		    MinecraftItemTypes2['MusicDisc13'] = 'minecraft:music_disc_13';
		    MinecraftItemTypes2['MusicDisc5'] = 'minecraft:music_disc_5';
		    MinecraftItemTypes2['MusicDiscBlocks'] = 'minecraft:music_disc_blocks';
		    MinecraftItemTypes2['MusicDiscCat'] = 'minecraft:music_disc_cat';
		    MinecraftItemTypes2['MusicDiscChirp'] = 'minecraft:music_disc_chirp';
		    MinecraftItemTypes2['MusicDiscCreator'] = 'minecraft:music_disc_creator';
		    MinecraftItemTypes2['MusicDiscCreatorMusicBox'] = 'minecraft:music_disc_creator_music_box';
		    MinecraftItemTypes2['MusicDiscFar'] = 'minecraft:music_disc_far';
		    MinecraftItemTypes2['MusicDiscMall'] = 'minecraft:music_disc_mall';
		    MinecraftItemTypes2['MusicDiscMellohi'] = 'minecraft:music_disc_mellohi';
		    MinecraftItemTypes2['MusicDiscOtherside'] = 'minecraft:music_disc_otherside';
		    MinecraftItemTypes2['MusicDiscPigstep'] = 'minecraft:music_disc_pigstep';
		    MinecraftItemTypes2['MusicDiscPrecipice'] = 'minecraft:music_disc_precipice';
		    MinecraftItemTypes2['MusicDiscRelic'] = 'minecraft:music_disc_relic';
		    MinecraftItemTypes2['MusicDiscStal'] = 'minecraft:music_disc_stal';
		    MinecraftItemTypes2['MusicDiscStrad'] = 'minecraft:music_disc_strad';
		    MinecraftItemTypes2['MusicDiscWait'] = 'minecraft:music_disc_wait';
		    MinecraftItemTypes2['MusicDiscWard'] = 'minecraft:music_disc_ward';
		    MinecraftItemTypes2['Mutton'] = 'minecraft:mutton';
		    MinecraftItemTypes2['Mycelium'] = 'minecraft:mycelium';
		    MinecraftItemTypes2['NameTag'] = 'minecraft:name_tag';
		    MinecraftItemTypes2['NautilusShell'] = 'minecraft:nautilus_shell';
		    MinecraftItemTypes2['NetherBrick'] = 'minecraft:nether_brick';
		    MinecraftItemTypes2['NetherBrickFence'] = 'minecraft:nether_brick_fence';
		    MinecraftItemTypes2['NetherBrickSlab'] = 'minecraft:nether_brick_slab';
		    MinecraftItemTypes2['NetherBrickStairs'] = 'minecraft:nether_brick_stairs';
		    MinecraftItemTypes2['NetherBrickWall'] = 'minecraft:nether_brick_wall';
		    MinecraftItemTypes2['NetherGoldOre'] = 'minecraft:nether_gold_ore';
		    MinecraftItemTypes2['NetherSprouts'] = 'minecraft:nether_sprouts';
		    MinecraftItemTypes2['NetherStar'] = 'minecraft:nether_star';
		    MinecraftItemTypes2['NetherWart'] = 'minecraft:nether_wart';
		    MinecraftItemTypes2['NetherWartBlock'] = 'minecraft:nether_wart_block';
		    MinecraftItemTypes2['Netherbrick'] = 'minecraft:netherbrick';
		    MinecraftItemTypes2['NetheriteAxe'] = 'minecraft:netherite_axe';
		    MinecraftItemTypes2['NetheriteBlock'] = 'minecraft:netherite_block';
		    MinecraftItemTypes2['NetheriteBoots'] = 'minecraft:netherite_boots';
		    MinecraftItemTypes2['NetheriteChestplate'] = 'minecraft:netherite_chestplate';
		    MinecraftItemTypes2['NetheriteHelmet'] = 'minecraft:netherite_helmet';
		    MinecraftItemTypes2['NetheriteHoe'] = 'minecraft:netherite_hoe';
		    MinecraftItemTypes2['NetheriteIngot'] = 'minecraft:netherite_ingot';
		    MinecraftItemTypes2['NetheriteLeggings'] = 'minecraft:netherite_leggings';
		    MinecraftItemTypes2['NetheritePickaxe'] = 'minecraft:netherite_pickaxe';
		    MinecraftItemTypes2['NetheriteScrap'] = 'minecraft:netherite_scrap';
		    MinecraftItemTypes2['NetheriteShovel'] = 'minecraft:netherite_shovel';
		    MinecraftItemTypes2['NetheriteSword'] = 'minecraft:netherite_sword';
		    MinecraftItemTypes2['NetheriteUpgradeSmithingTemplate'] = 'minecraft:netherite_upgrade_smithing_template';
		    MinecraftItemTypes2['Netherrack'] = 'minecraft:netherrack';
		    MinecraftItemTypes2['NormalStoneSlab'] = 'minecraft:normal_stone_slab';
		    MinecraftItemTypes2['NormalStoneStairs'] = 'minecraft:normal_stone_stairs';
		    MinecraftItemTypes2['Noteblock'] = 'minecraft:noteblock';
		    MinecraftItemTypes2['OakBoat'] = 'minecraft:oak_boat';
		    MinecraftItemTypes2['OakChestBoat'] = 'minecraft:oak_chest_boat';
		    MinecraftItemTypes2['OakFence'] = 'minecraft:oak_fence';
		    MinecraftItemTypes2['OakHangingSign'] = 'minecraft:oak_hanging_sign';
		    MinecraftItemTypes2['OakLeaves'] = 'minecraft:oak_leaves';
		    MinecraftItemTypes2['OakLog'] = 'minecraft:oak_log';
		    MinecraftItemTypes2['OakPlanks'] = 'minecraft:oak_planks';
		    MinecraftItemTypes2['OakSapling'] = 'minecraft:oak_sapling';
		    MinecraftItemTypes2['OakSign'] = 'minecraft:oak_sign';
		    MinecraftItemTypes2['OakSlab'] = 'minecraft:oak_slab';
		    MinecraftItemTypes2['OakStairs'] = 'minecraft:oak_stairs';
		    MinecraftItemTypes2['OakWood'] = 'minecraft:oak_wood';
		    MinecraftItemTypes2['Observer'] = 'minecraft:observer';
		    MinecraftItemTypes2['Obsidian'] = 'minecraft:obsidian';
		    MinecraftItemTypes2['OcelotSpawnEgg'] = 'minecraft:ocelot_spawn_egg';
		    MinecraftItemTypes2['OchreFroglight'] = 'minecraft:ochre_froglight';
		    MinecraftItemTypes2['OminousBottle'] = 'minecraft:ominous_bottle';
		    MinecraftItemTypes2['OminousTrialKey'] = 'minecraft:ominous_trial_key';
		    MinecraftItemTypes2['OpenEyeblossom'] = 'minecraft:open_eyeblossom';
		    MinecraftItemTypes2['OrangeBundle'] = 'minecraft:orange_bundle';
		    MinecraftItemTypes2['OrangeCandle'] = 'minecraft:orange_candle';
		    MinecraftItemTypes2['OrangeCarpet'] = 'minecraft:orange_carpet';
		    MinecraftItemTypes2['OrangeConcrete'] = 'minecraft:orange_concrete';
		    MinecraftItemTypes2['OrangeConcretePowder'] = 'minecraft:orange_concrete_powder';
		    MinecraftItemTypes2['OrangeDye'] = 'minecraft:orange_dye';
		    MinecraftItemTypes2['OrangeGlazedTerracotta'] = 'minecraft:orange_glazed_terracotta';
		    MinecraftItemTypes2['OrangeShulkerBox'] = 'minecraft:orange_shulker_box';
		    MinecraftItemTypes2['OrangeStainedGlass'] = 'minecraft:orange_stained_glass';
		    MinecraftItemTypes2['OrangeStainedGlassPane'] = 'minecraft:orange_stained_glass_pane';
		    MinecraftItemTypes2['OrangeTerracotta'] = 'minecraft:orange_terracotta';
		    MinecraftItemTypes2['OrangeTulip'] = 'minecraft:orange_tulip';
		    MinecraftItemTypes2['OrangeWool'] = 'minecraft:orange_wool';
		    MinecraftItemTypes2['OxeyeDaisy'] = 'minecraft:oxeye_daisy';
		    MinecraftItemTypes2['OxidizedChiseledCopper'] = 'minecraft:oxidized_chiseled_copper';
		    MinecraftItemTypes2['OxidizedCopper'] = 'minecraft:oxidized_copper';
		    MinecraftItemTypes2['OxidizedCopperBulb'] = 'minecraft:oxidized_copper_bulb';
		    MinecraftItemTypes2['OxidizedCopperDoor'] = 'minecraft:oxidized_copper_door';
		    MinecraftItemTypes2['OxidizedCopperGrate'] = 'minecraft:oxidized_copper_grate';
		    MinecraftItemTypes2['OxidizedCopperTrapdoor'] = 'minecraft:oxidized_copper_trapdoor';
		    MinecraftItemTypes2['OxidizedCutCopper'] = 'minecraft:oxidized_cut_copper';
		    MinecraftItemTypes2['OxidizedCutCopperSlab'] = 'minecraft:oxidized_cut_copper_slab';
		    MinecraftItemTypes2['OxidizedCutCopperStairs'] = 'minecraft:oxidized_cut_copper_stairs';
		    MinecraftItemTypes2['PackedIce'] = 'minecraft:packed_ice';
		    MinecraftItemTypes2['PackedMud'] = 'minecraft:packed_mud';
		    MinecraftItemTypes2['Painting'] = 'minecraft:painting';
		    MinecraftItemTypes2['PaleHangingMoss'] = 'minecraft:pale_hanging_moss';
		    MinecraftItemTypes2['PaleMossBlock'] = 'minecraft:pale_moss_block';
		    MinecraftItemTypes2['PaleMossCarpet'] = 'minecraft:pale_moss_carpet';
		    MinecraftItemTypes2['PaleOakBoat'] = 'minecraft:pale_oak_boat';
		    MinecraftItemTypes2['PaleOakButton'] = 'minecraft:pale_oak_button';
		    MinecraftItemTypes2['PaleOakChestBoat'] = 'minecraft:pale_oak_chest_boat';
		    MinecraftItemTypes2['PaleOakDoor'] = 'minecraft:pale_oak_door';
		    MinecraftItemTypes2['PaleOakFence'] = 'minecraft:pale_oak_fence';
		    MinecraftItemTypes2['PaleOakFenceGate'] = 'minecraft:pale_oak_fence_gate';
		    MinecraftItemTypes2['PaleOakHangingSign'] = 'minecraft:pale_oak_hanging_sign';
		    MinecraftItemTypes2['PaleOakLeaves'] = 'minecraft:pale_oak_leaves';
		    MinecraftItemTypes2['PaleOakLog'] = 'minecraft:pale_oak_log';
		    MinecraftItemTypes2['PaleOakPlanks'] = 'minecraft:pale_oak_planks';
		    MinecraftItemTypes2['PaleOakPressurePlate'] = 'minecraft:pale_oak_pressure_plate';
		    MinecraftItemTypes2['PaleOakSapling'] = 'minecraft:pale_oak_sapling';
		    MinecraftItemTypes2['PaleOakSign'] = 'minecraft:pale_oak_sign';
		    MinecraftItemTypes2['PaleOakSlab'] = 'minecraft:pale_oak_slab';
		    MinecraftItemTypes2['PaleOakStairs'] = 'minecraft:pale_oak_stairs';
		    MinecraftItemTypes2['PaleOakTrapdoor'] = 'minecraft:pale_oak_trapdoor';
		    MinecraftItemTypes2['PaleOakWood'] = 'minecraft:pale_oak_wood';
		    MinecraftItemTypes2['PandaSpawnEgg'] = 'minecraft:panda_spawn_egg';
		    MinecraftItemTypes2['Paper'] = 'minecraft:paper';
		    MinecraftItemTypes2['ParrotSpawnEgg'] = 'minecraft:parrot_spawn_egg';
		    MinecraftItemTypes2['PearlescentFroglight'] = 'minecraft:pearlescent_froglight';
		    MinecraftItemTypes2['Peony'] = 'minecraft:peony';
		    MinecraftItemTypes2['PetrifiedOakSlab'] = 'minecraft:petrified_oak_slab';
		    MinecraftItemTypes2['PhantomMembrane'] = 'minecraft:phantom_membrane';
		    MinecraftItemTypes2['PhantomSpawnEgg'] = 'minecraft:phantom_spawn_egg';
		    MinecraftItemTypes2['PigSpawnEgg'] = 'minecraft:pig_spawn_egg';
		    MinecraftItemTypes2['PiglinBannerPattern'] = 'minecraft:piglin_banner_pattern';
		    MinecraftItemTypes2['PiglinBruteSpawnEgg'] = 'minecraft:piglin_brute_spawn_egg';
		    MinecraftItemTypes2['PiglinHead'] = 'minecraft:piglin_head';
		    MinecraftItemTypes2['PiglinSpawnEgg'] = 'minecraft:piglin_spawn_egg';
		    MinecraftItemTypes2['PillagerSpawnEgg'] = 'minecraft:pillager_spawn_egg';
		    MinecraftItemTypes2['PinkBundle'] = 'minecraft:pink_bundle';
		    MinecraftItemTypes2['PinkCandle'] = 'minecraft:pink_candle';
		    MinecraftItemTypes2['PinkCarpet'] = 'minecraft:pink_carpet';
		    MinecraftItemTypes2['PinkConcrete'] = 'minecraft:pink_concrete';
		    MinecraftItemTypes2['PinkConcretePowder'] = 'minecraft:pink_concrete_powder';
		    MinecraftItemTypes2['PinkDye'] = 'minecraft:pink_dye';
		    MinecraftItemTypes2['PinkGlazedTerracotta'] = 'minecraft:pink_glazed_terracotta';
		    MinecraftItemTypes2['PinkPetals'] = 'minecraft:pink_petals';
		    MinecraftItemTypes2['PinkShulkerBox'] = 'minecraft:pink_shulker_box';
		    MinecraftItemTypes2['PinkStainedGlass'] = 'minecraft:pink_stained_glass';
		    MinecraftItemTypes2['PinkStainedGlassPane'] = 'minecraft:pink_stained_glass_pane';
		    MinecraftItemTypes2['PinkTerracotta'] = 'minecraft:pink_terracotta';
		    MinecraftItemTypes2['PinkTulip'] = 'minecraft:pink_tulip';
		    MinecraftItemTypes2['PinkWool'] = 'minecraft:pink_wool';
		    MinecraftItemTypes2['Piston'] = 'minecraft:piston';
		    MinecraftItemTypes2['PitcherPlant'] = 'minecraft:pitcher_plant';
		    MinecraftItemTypes2['PitcherPod'] = 'minecraft:pitcher_pod';
		    MinecraftItemTypes2['PlayerHead'] = 'minecraft:player_head';
		    MinecraftItemTypes2['PlentyPotterySherd'] = 'minecraft:plenty_pottery_sherd';
		    MinecraftItemTypes2['Podzol'] = 'minecraft:podzol';
		    MinecraftItemTypes2['PointedDripstone'] = 'minecraft:pointed_dripstone';
		    MinecraftItemTypes2['PoisonousPotato'] = 'minecraft:poisonous_potato';
		    MinecraftItemTypes2['PolarBearSpawnEgg'] = 'minecraft:polar_bear_spawn_egg';
		    MinecraftItemTypes2['PolishedAndesite'] = 'minecraft:polished_andesite';
		    MinecraftItemTypes2['PolishedAndesiteSlab'] = 'minecraft:polished_andesite_slab';
		    MinecraftItemTypes2['PolishedAndesiteStairs'] = 'minecraft:polished_andesite_stairs';
		    MinecraftItemTypes2['PolishedBasalt'] = 'minecraft:polished_basalt';
		    MinecraftItemTypes2['PolishedBlackstone'] = 'minecraft:polished_blackstone';
		    MinecraftItemTypes2['PolishedBlackstoneBrickSlab'] = 'minecraft:polished_blackstone_brick_slab';
		    MinecraftItemTypes2['PolishedBlackstoneBrickStairs'] = 'minecraft:polished_blackstone_brick_stairs';
		    MinecraftItemTypes2['PolishedBlackstoneBrickWall'] = 'minecraft:polished_blackstone_brick_wall';
		    MinecraftItemTypes2['PolishedBlackstoneBricks'] = 'minecraft:polished_blackstone_bricks';
		    MinecraftItemTypes2['PolishedBlackstoneButton'] = 'minecraft:polished_blackstone_button';
		    MinecraftItemTypes2['PolishedBlackstonePressurePlate'] = 'minecraft:polished_blackstone_pressure_plate';
		    MinecraftItemTypes2['PolishedBlackstoneSlab'] = 'minecraft:polished_blackstone_slab';
		    MinecraftItemTypes2['PolishedBlackstoneStairs'] = 'minecraft:polished_blackstone_stairs';
		    MinecraftItemTypes2['PolishedBlackstoneWall'] = 'minecraft:polished_blackstone_wall';
		    MinecraftItemTypes2['PolishedDeepslate'] = 'minecraft:polished_deepslate';
		    MinecraftItemTypes2['PolishedDeepslateSlab'] = 'minecraft:polished_deepslate_slab';
		    MinecraftItemTypes2['PolishedDeepslateStairs'] = 'minecraft:polished_deepslate_stairs';
		    MinecraftItemTypes2['PolishedDeepslateWall'] = 'minecraft:polished_deepslate_wall';
		    MinecraftItemTypes2['PolishedDiorite'] = 'minecraft:polished_diorite';
		    MinecraftItemTypes2['PolishedDioriteSlab'] = 'minecraft:polished_diorite_slab';
		    MinecraftItemTypes2['PolishedDioriteStairs'] = 'minecraft:polished_diorite_stairs';
		    MinecraftItemTypes2['PolishedGranite'] = 'minecraft:polished_granite';
		    MinecraftItemTypes2['PolishedGraniteSlab'] = 'minecraft:polished_granite_slab';
		    MinecraftItemTypes2['PolishedGraniteStairs'] = 'minecraft:polished_granite_stairs';
		    MinecraftItemTypes2['PolishedTuff'] = 'minecraft:polished_tuff';
		    MinecraftItemTypes2['PolishedTuffSlab'] = 'minecraft:polished_tuff_slab';
		    MinecraftItemTypes2['PolishedTuffStairs'] = 'minecraft:polished_tuff_stairs';
		    MinecraftItemTypes2['PolishedTuffWall'] = 'minecraft:polished_tuff_wall';
		    MinecraftItemTypes2['PoppedChorusFruit'] = 'minecraft:popped_chorus_fruit';
		    MinecraftItemTypes2['Poppy'] = 'minecraft:poppy';
		    MinecraftItemTypes2['Porkchop'] = 'minecraft:porkchop';
		    MinecraftItemTypes2['Potato'] = 'minecraft:potato';
		    MinecraftItemTypes2['Potion'] = 'minecraft:potion';
		    MinecraftItemTypes2['PowderSnowBucket'] = 'minecraft:powder_snow_bucket';
		    MinecraftItemTypes2['Prismarine'] = 'minecraft:prismarine';
		    MinecraftItemTypes2['PrismarineBrickSlab'] = 'minecraft:prismarine_brick_slab';
		    MinecraftItemTypes2['PrismarineBricks'] = 'minecraft:prismarine_bricks';
		    MinecraftItemTypes2['PrismarineBricksStairs'] = 'minecraft:prismarine_bricks_stairs';
		    MinecraftItemTypes2['PrismarineCrystals'] = 'minecraft:prismarine_crystals';
		    MinecraftItemTypes2['PrismarineShard'] = 'minecraft:prismarine_shard';
		    MinecraftItemTypes2['PrismarineSlab'] = 'minecraft:prismarine_slab';
		    MinecraftItemTypes2['PrismarineStairs'] = 'minecraft:prismarine_stairs';
		    MinecraftItemTypes2['PrismarineWall'] = 'minecraft:prismarine_wall';
		    MinecraftItemTypes2['PrizePotterySherd'] = 'minecraft:prize_pottery_sherd';
		    MinecraftItemTypes2['Pufferfish'] = 'minecraft:pufferfish';
		    MinecraftItemTypes2['PufferfishBucket'] = 'minecraft:pufferfish_bucket';
		    MinecraftItemTypes2['PufferfishSpawnEgg'] = 'minecraft:pufferfish_spawn_egg';
		    MinecraftItemTypes2['Pumpkin'] = 'minecraft:pumpkin';
		    MinecraftItemTypes2['PumpkinPie'] = 'minecraft:pumpkin_pie';
		    MinecraftItemTypes2['PumpkinSeeds'] = 'minecraft:pumpkin_seeds';
		    MinecraftItemTypes2['PurpleBundle'] = 'minecraft:purple_bundle';
		    MinecraftItemTypes2['PurpleCandle'] = 'minecraft:purple_candle';
		    MinecraftItemTypes2['PurpleCarpet'] = 'minecraft:purple_carpet';
		    MinecraftItemTypes2['PurpleConcrete'] = 'minecraft:purple_concrete';
		    MinecraftItemTypes2['PurpleConcretePowder'] = 'minecraft:purple_concrete_powder';
		    MinecraftItemTypes2['PurpleDye'] = 'minecraft:purple_dye';
		    MinecraftItemTypes2['PurpleGlazedTerracotta'] = 'minecraft:purple_glazed_terracotta';
		    MinecraftItemTypes2['PurpleShulkerBox'] = 'minecraft:purple_shulker_box';
		    MinecraftItemTypes2['PurpleStainedGlass'] = 'minecraft:purple_stained_glass';
		    MinecraftItemTypes2['PurpleStainedGlassPane'] = 'minecraft:purple_stained_glass_pane';
		    MinecraftItemTypes2['PurpleTerracotta'] = 'minecraft:purple_terracotta';
		    MinecraftItemTypes2['PurpleWool'] = 'minecraft:purple_wool';
		    MinecraftItemTypes2['PurpurBlock'] = 'minecraft:purpur_block';
		    MinecraftItemTypes2['PurpurPillar'] = 'minecraft:purpur_pillar';
		    MinecraftItemTypes2['PurpurSlab'] = 'minecraft:purpur_slab';
		    MinecraftItemTypes2['PurpurStairs'] = 'minecraft:purpur_stairs';
		    MinecraftItemTypes2['Quartz'] = 'minecraft:quartz';
		    MinecraftItemTypes2['QuartzBlock'] = 'minecraft:quartz_block';
		    MinecraftItemTypes2['QuartzBricks'] = 'minecraft:quartz_bricks';
		    MinecraftItemTypes2['QuartzOre'] = 'minecraft:quartz_ore';
		    MinecraftItemTypes2['QuartzPillar'] = 'minecraft:quartz_pillar';
		    MinecraftItemTypes2['QuartzSlab'] = 'minecraft:quartz_slab';
		    MinecraftItemTypes2['QuartzStairs'] = 'minecraft:quartz_stairs';
		    MinecraftItemTypes2['Rabbit'] = 'minecraft:rabbit';
		    MinecraftItemTypes2['RabbitFoot'] = 'minecraft:rabbit_foot';
		    MinecraftItemTypes2['RabbitHide'] = 'minecraft:rabbit_hide';
		    MinecraftItemTypes2['RabbitSpawnEgg'] = 'minecraft:rabbit_spawn_egg';
		    MinecraftItemTypes2['RabbitStew'] = 'minecraft:rabbit_stew';
		    MinecraftItemTypes2['Rail'] = 'minecraft:rail';
		    MinecraftItemTypes2['RaiserArmorTrimSmithingTemplate'] = 'minecraft:raiser_armor_trim_smithing_template';
		    MinecraftItemTypes2['RavagerSpawnEgg'] = 'minecraft:ravager_spawn_egg';
		    MinecraftItemTypes2['RawCopper'] = 'minecraft:raw_copper';
		    MinecraftItemTypes2['RawCopperBlock'] = 'minecraft:raw_copper_block';
		    MinecraftItemTypes2['RawGold'] = 'minecraft:raw_gold';
		    MinecraftItemTypes2['RawGoldBlock'] = 'minecraft:raw_gold_block';
		    MinecraftItemTypes2['RawIron'] = 'minecraft:raw_iron';
		    MinecraftItemTypes2['RawIronBlock'] = 'minecraft:raw_iron_block';
		    MinecraftItemTypes2['RecoveryCompass'] = 'minecraft:recovery_compass';
		    MinecraftItemTypes2['RedBundle'] = 'minecraft:red_bundle';
		    MinecraftItemTypes2['RedCandle'] = 'minecraft:red_candle';
		    MinecraftItemTypes2['RedCarpet'] = 'minecraft:red_carpet';
		    MinecraftItemTypes2['RedConcrete'] = 'minecraft:red_concrete';
		    MinecraftItemTypes2['RedConcretePowder'] = 'minecraft:red_concrete_powder';
		    MinecraftItemTypes2['RedDye'] = 'minecraft:red_dye';
		    MinecraftItemTypes2['RedGlazedTerracotta'] = 'minecraft:red_glazed_terracotta';
		    MinecraftItemTypes2['RedMushroom'] = 'minecraft:red_mushroom';
		    MinecraftItemTypes2['RedMushroomBlock'] = 'minecraft:red_mushroom_block';
		    MinecraftItemTypes2['RedNetherBrick'] = 'minecraft:red_nether_brick';
		    MinecraftItemTypes2['RedNetherBrickSlab'] = 'minecraft:red_nether_brick_slab';
		    MinecraftItemTypes2['RedNetherBrickStairs'] = 'minecraft:red_nether_brick_stairs';
		    MinecraftItemTypes2['RedNetherBrickWall'] = 'minecraft:red_nether_brick_wall';
		    MinecraftItemTypes2['RedSand'] = 'minecraft:red_sand';
		    MinecraftItemTypes2['RedSandstone'] = 'minecraft:red_sandstone';
		    MinecraftItemTypes2['RedSandstoneSlab'] = 'minecraft:red_sandstone_slab';
		    MinecraftItemTypes2['RedSandstoneStairs'] = 'minecraft:red_sandstone_stairs';
		    MinecraftItemTypes2['RedSandstoneWall'] = 'minecraft:red_sandstone_wall';
		    MinecraftItemTypes2['RedShulkerBox'] = 'minecraft:red_shulker_box';
		    MinecraftItemTypes2['RedStainedGlass'] = 'minecraft:red_stained_glass';
		    MinecraftItemTypes2['RedStainedGlassPane'] = 'minecraft:red_stained_glass_pane';
		    MinecraftItemTypes2['RedTerracotta'] = 'minecraft:red_terracotta';
		    MinecraftItemTypes2['RedTulip'] = 'minecraft:red_tulip';
		    MinecraftItemTypes2['RedWool'] = 'minecraft:red_wool';
		    MinecraftItemTypes2['Redstone'] = 'minecraft:redstone';
		    MinecraftItemTypes2['RedstoneBlock'] = 'minecraft:redstone_block';
		    MinecraftItemTypes2['RedstoneLamp'] = 'minecraft:redstone_lamp';
		    MinecraftItemTypes2['RedstoneOre'] = 'minecraft:redstone_ore';
		    MinecraftItemTypes2['RedstoneTorch'] = 'minecraft:redstone_torch';
		    MinecraftItemTypes2['ReinforcedDeepslate'] = 'minecraft:reinforced_deepslate';
		    MinecraftItemTypes2['Repeater'] = 'minecraft:repeater';
		    MinecraftItemTypes2['RepeatingCommandBlock'] = 'minecraft:repeating_command_block';
		    MinecraftItemTypes2['ResinBlock'] = 'minecraft:resin_block';
		    MinecraftItemTypes2['ResinBrick'] = 'minecraft:resin_brick';
		    MinecraftItemTypes2['ResinBrickSlab'] = 'minecraft:resin_brick_slab';
		    MinecraftItemTypes2['ResinBrickStairs'] = 'minecraft:resin_brick_stairs';
		    MinecraftItemTypes2['ResinBrickWall'] = 'minecraft:resin_brick_wall';
		    MinecraftItemTypes2['ResinBricks'] = 'minecraft:resin_bricks';
		    MinecraftItemTypes2['ResinClump'] = 'minecraft:resin_clump';
		    MinecraftItemTypes2['RespawnAnchor'] = 'minecraft:respawn_anchor';
		    MinecraftItemTypes2['RibArmorTrimSmithingTemplate'] = 'minecraft:rib_armor_trim_smithing_template';
		    MinecraftItemTypes2['RoseBush'] = 'minecraft:rose_bush';
		    MinecraftItemTypes2['RottenFlesh'] = 'minecraft:rotten_flesh';
		    MinecraftItemTypes2['Saddle'] = 'minecraft:saddle';
		    MinecraftItemTypes2['Salmon'] = 'minecraft:salmon';
		    MinecraftItemTypes2['SalmonBucket'] = 'minecraft:salmon_bucket';
		    MinecraftItemTypes2['SalmonSpawnEgg'] = 'minecraft:salmon_spawn_egg';
		    MinecraftItemTypes2['Sand'] = 'minecraft:sand';
		    MinecraftItemTypes2['Sandstone'] = 'minecraft:sandstone';
		    MinecraftItemTypes2['SandstoneSlab'] = 'minecraft:sandstone_slab';
		    MinecraftItemTypes2['SandstoneStairs'] = 'minecraft:sandstone_stairs';
		    MinecraftItemTypes2['SandstoneWall'] = 'minecraft:sandstone_wall';
		    MinecraftItemTypes2['Scaffolding'] = 'minecraft:scaffolding';
		    MinecraftItemTypes2['ScrapePotterySherd'] = 'minecraft:scrape_pottery_sherd';
		    MinecraftItemTypes2['Sculk'] = 'minecraft:sculk';
		    MinecraftItemTypes2['SculkCatalyst'] = 'minecraft:sculk_catalyst';
		    MinecraftItemTypes2['SculkSensor'] = 'minecraft:sculk_sensor';
		    MinecraftItemTypes2['SculkShrieker'] = 'minecraft:sculk_shrieker';
		    MinecraftItemTypes2['SculkVein'] = 'minecraft:sculk_vein';
		    MinecraftItemTypes2['SeaLantern'] = 'minecraft:sea_lantern';
		    MinecraftItemTypes2['SeaPickle'] = 'minecraft:sea_pickle';
		    MinecraftItemTypes2['Seagrass'] = 'minecraft:seagrass';
		    MinecraftItemTypes2['SentryArmorTrimSmithingTemplate'] = 'minecraft:sentry_armor_trim_smithing_template';
		    MinecraftItemTypes2['ShaperArmorTrimSmithingTemplate'] = 'minecraft:shaper_armor_trim_smithing_template';
		    MinecraftItemTypes2['SheafPotterySherd'] = 'minecraft:sheaf_pottery_sherd';
		    MinecraftItemTypes2['Shears'] = 'minecraft:shears';
		    MinecraftItemTypes2['SheepSpawnEgg'] = 'minecraft:sheep_spawn_egg';
		    MinecraftItemTypes2['ShelterPotterySherd'] = 'minecraft:shelter_pottery_sherd';
		    MinecraftItemTypes2['Shield'] = 'minecraft:shield';
		    MinecraftItemTypes2['ShortGrass'] = 'minecraft:short_grass';
		    MinecraftItemTypes2['Shroomlight'] = 'minecraft:shroomlight';
		    MinecraftItemTypes2['ShulkerShell'] = 'minecraft:shulker_shell';
		    MinecraftItemTypes2['ShulkerSpawnEgg'] = 'minecraft:shulker_spawn_egg';
		    MinecraftItemTypes2['SilenceArmorTrimSmithingTemplate'] = 'minecraft:silence_armor_trim_smithing_template';
		    MinecraftItemTypes2['SilverGlazedTerracotta'] = 'minecraft:silver_glazed_terracotta';
		    MinecraftItemTypes2['SilverfishSpawnEgg'] = 'minecraft:silverfish_spawn_egg';
		    MinecraftItemTypes2['SkeletonHorseSpawnEgg'] = 'minecraft:skeleton_horse_spawn_egg';
		    MinecraftItemTypes2['SkeletonSkull'] = 'minecraft:skeleton_skull';
		    MinecraftItemTypes2['SkeletonSpawnEgg'] = 'minecraft:skeleton_spawn_egg';
		    MinecraftItemTypes2['SkullBannerPattern'] = 'minecraft:skull_banner_pattern';
		    MinecraftItemTypes2['SkullPotterySherd'] = 'minecraft:skull_pottery_sherd';
		    MinecraftItemTypes2['Slime'] = 'minecraft:slime';
		    MinecraftItemTypes2['SlimeBall'] = 'minecraft:slime_ball';
		    MinecraftItemTypes2['SlimeSpawnEgg'] = 'minecraft:slime_spawn_egg';
		    MinecraftItemTypes2['SmallAmethystBud'] = 'minecraft:small_amethyst_bud';
		    MinecraftItemTypes2['SmallDripleafBlock'] = 'minecraft:small_dripleaf_block';
		    MinecraftItemTypes2['SmithingTable'] = 'minecraft:smithing_table';
		    MinecraftItemTypes2['Smoker'] = 'minecraft:smoker';
		    MinecraftItemTypes2['SmoothBasalt'] = 'minecraft:smooth_basalt';
		    MinecraftItemTypes2['SmoothQuartz'] = 'minecraft:smooth_quartz';
		    MinecraftItemTypes2['SmoothQuartzSlab'] = 'minecraft:smooth_quartz_slab';
		    MinecraftItemTypes2['SmoothQuartzStairs'] = 'minecraft:smooth_quartz_stairs';
		    MinecraftItemTypes2['SmoothRedSandstone'] = 'minecraft:smooth_red_sandstone';
		    MinecraftItemTypes2['SmoothRedSandstoneSlab'] = 'minecraft:smooth_red_sandstone_slab';
		    MinecraftItemTypes2['SmoothRedSandstoneStairs'] = 'minecraft:smooth_red_sandstone_stairs';
		    MinecraftItemTypes2['SmoothSandstone'] = 'minecraft:smooth_sandstone';
		    MinecraftItemTypes2['SmoothSandstoneSlab'] = 'minecraft:smooth_sandstone_slab';
		    MinecraftItemTypes2['SmoothSandstoneStairs'] = 'minecraft:smooth_sandstone_stairs';
		    MinecraftItemTypes2['SmoothStone'] = 'minecraft:smooth_stone';
		    MinecraftItemTypes2['SmoothStoneSlab'] = 'minecraft:smooth_stone_slab';
		    MinecraftItemTypes2['SnifferEgg'] = 'minecraft:sniffer_egg';
		    MinecraftItemTypes2['SnifferSpawnEgg'] = 'minecraft:sniffer_spawn_egg';
		    MinecraftItemTypes2['SnortPotterySherd'] = 'minecraft:snort_pottery_sherd';
		    MinecraftItemTypes2['SnoutArmorTrimSmithingTemplate'] = 'minecraft:snout_armor_trim_smithing_template';
		    MinecraftItemTypes2['Snow'] = 'minecraft:snow';
		    MinecraftItemTypes2['SnowGolemSpawnEgg'] = 'minecraft:snow_golem_spawn_egg';
		    MinecraftItemTypes2['SnowLayer'] = 'minecraft:snow_layer';
		    MinecraftItemTypes2['Snowball'] = 'minecraft:snowball';
		    MinecraftItemTypes2['SoulCampfire'] = 'minecraft:soul_campfire';
		    MinecraftItemTypes2['SoulLantern'] = 'minecraft:soul_lantern';
		    MinecraftItemTypes2['SoulSand'] = 'minecraft:soul_sand';
		    MinecraftItemTypes2['SoulSoil'] = 'minecraft:soul_soil';
		    MinecraftItemTypes2['SoulTorch'] = 'minecraft:soul_torch';
		    MinecraftItemTypes2['SpiderEye'] = 'minecraft:spider_eye';
		    MinecraftItemTypes2['SpiderSpawnEgg'] = 'minecraft:spider_spawn_egg';
		    MinecraftItemTypes2['SpireArmorTrimSmithingTemplate'] = 'minecraft:spire_armor_trim_smithing_template';
		    MinecraftItemTypes2['SplashPotion'] = 'minecraft:splash_potion';
		    MinecraftItemTypes2['Sponge'] = 'minecraft:sponge';
		    MinecraftItemTypes2['SporeBlossom'] = 'minecraft:spore_blossom';
		    MinecraftItemTypes2['SpruceBoat'] = 'minecraft:spruce_boat';
		    MinecraftItemTypes2['SpruceButton'] = 'minecraft:spruce_button';
		    MinecraftItemTypes2['SpruceChestBoat'] = 'minecraft:spruce_chest_boat';
		    MinecraftItemTypes2['SpruceDoor'] = 'minecraft:spruce_door';
		    MinecraftItemTypes2['SpruceFence'] = 'minecraft:spruce_fence';
		    MinecraftItemTypes2['SpruceFenceGate'] = 'minecraft:spruce_fence_gate';
		    MinecraftItemTypes2['SpruceHangingSign'] = 'minecraft:spruce_hanging_sign';
		    MinecraftItemTypes2['SpruceLeaves'] = 'minecraft:spruce_leaves';
		    MinecraftItemTypes2['SpruceLog'] = 'minecraft:spruce_log';
		    MinecraftItemTypes2['SprucePlanks'] = 'minecraft:spruce_planks';
		    MinecraftItemTypes2['SprucePressurePlate'] = 'minecraft:spruce_pressure_plate';
		    MinecraftItemTypes2['SpruceSapling'] = 'minecraft:spruce_sapling';
		    MinecraftItemTypes2['SpruceSign'] = 'minecraft:spruce_sign';
		    MinecraftItemTypes2['SpruceSlab'] = 'minecraft:spruce_slab';
		    MinecraftItemTypes2['SpruceStairs'] = 'minecraft:spruce_stairs';
		    MinecraftItemTypes2['SpruceTrapdoor'] = 'minecraft:spruce_trapdoor';
		    MinecraftItemTypes2['SpruceWood'] = 'minecraft:spruce_wood';
		    MinecraftItemTypes2['Spyglass'] = 'minecraft:spyglass';
		    MinecraftItemTypes2['SquidSpawnEgg'] = 'minecraft:squid_spawn_egg';
		    MinecraftItemTypes2['Stick'] = 'minecraft:stick';
		    MinecraftItemTypes2['StickyPiston'] = 'minecraft:sticky_piston';
		    MinecraftItemTypes2['Stone'] = 'minecraft:stone';
		    MinecraftItemTypes2['StoneAxe'] = 'minecraft:stone_axe';
		    MinecraftItemTypes2['StoneBrickSlab'] = 'minecraft:stone_brick_slab';
		    MinecraftItemTypes2['StoneBrickStairs'] = 'minecraft:stone_brick_stairs';
		    MinecraftItemTypes2['StoneBrickWall'] = 'minecraft:stone_brick_wall';
		    MinecraftItemTypes2['StoneBricks'] = 'minecraft:stone_bricks';
		    MinecraftItemTypes2['StoneButton'] = 'minecraft:stone_button';
		    MinecraftItemTypes2['StoneHoe'] = 'minecraft:stone_hoe';
		    MinecraftItemTypes2['StonePickaxe'] = 'minecraft:stone_pickaxe';
		    MinecraftItemTypes2['StonePressurePlate'] = 'minecraft:stone_pressure_plate';
		    MinecraftItemTypes2['StoneShovel'] = 'minecraft:stone_shovel';
		    MinecraftItemTypes2['StoneStairs'] = 'minecraft:stone_stairs';
		    MinecraftItemTypes2['StoneSword'] = 'minecraft:stone_sword';
		    MinecraftItemTypes2['StonecutterBlock'] = 'minecraft:stonecutter_block';
		    MinecraftItemTypes2['StraySpawnEgg'] = 'minecraft:stray_spawn_egg';
		    MinecraftItemTypes2['StriderSpawnEgg'] = 'minecraft:strider_spawn_egg';
		    MinecraftItemTypes2['String'] = 'minecraft:string';
		    MinecraftItemTypes2['StrippedAcaciaLog'] = 'minecraft:stripped_acacia_log';
		    MinecraftItemTypes2['StrippedAcaciaWood'] = 'minecraft:stripped_acacia_wood';
		    MinecraftItemTypes2['StrippedBambooBlock'] = 'minecraft:stripped_bamboo_block';
		    MinecraftItemTypes2['StrippedBirchLog'] = 'minecraft:stripped_birch_log';
		    MinecraftItemTypes2['StrippedBirchWood'] = 'minecraft:stripped_birch_wood';
		    MinecraftItemTypes2['StrippedCherryLog'] = 'minecraft:stripped_cherry_log';
		    MinecraftItemTypes2['StrippedCherryWood'] = 'minecraft:stripped_cherry_wood';
		    MinecraftItemTypes2['StrippedCrimsonHyphae'] = 'minecraft:stripped_crimson_hyphae';
		    MinecraftItemTypes2['StrippedCrimsonStem'] = 'minecraft:stripped_crimson_stem';
		    MinecraftItemTypes2['StrippedDarkOakLog'] = 'minecraft:stripped_dark_oak_log';
		    MinecraftItemTypes2['StrippedDarkOakWood'] = 'minecraft:stripped_dark_oak_wood';
		    MinecraftItemTypes2['StrippedJungleLog'] = 'minecraft:stripped_jungle_log';
		    MinecraftItemTypes2['StrippedJungleWood'] = 'minecraft:stripped_jungle_wood';
		    MinecraftItemTypes2['StrippedMangroveLog'] = 'minecraft:stripped_mangrove_log';
		    MinecraftItemTypes2['StrippedMangroveWood'] = 'minecraft:stripped_mangrove_wood';
		    MinecraftItemTypes2['StrippedOakLog'] = 'minecraft:stripped_oak_log';
		    MinecraftItemTypes2['StrippedOakWood'] = 'minecraft:stripped_oak_wood';
		    MinecraftItemTypes2['StrippedPaleOakLog'] = 'minecraft:stripped_pale_oak_log';
		    MinecraftItemTypes2['StrippedPaleOakWood'] = 'minecraft:stripped_pale_oak_wood';
		    MinecraftItemTypes2['StrippedSpruceLog'] = 'minecraft:stripped_spruce_log';
		    MinecraftItemTypes2['StrippedSpruceWood'] = 'minecraft:stripped_spruce_wood';
		    MinecraftItemTypes2['StrippedWarpedHyphae'] = 'minecraft:stripped_warped_hyphae';
		    MinecraftItemTypes2['StrippedWarpedStem'] = 'minecraft:stripped_warped_stem';
		    MinecraftItemTypes2['StructureBlock'] = 'minecraft:structure_block';
		    MinecraftItemTypes2['StructureVoid'] = 'minecraft:structure_void';
		    MinecraftItemTypes2['Sugar'] = 'minecraft:sugar';
		    MinecraftItemTypes2['SugarCane'] = 'minecraft:sugar_cane';
		    MinecraftItemTypes2['Sunflower'] = 'minecraft:sunflower';
		    MinecraftItemTypes2['SuspiciousGravel'] = 'minecraft:suspicious_gravel';
		    MinecraftItemTypes2['SuspiciousSand'] = 'minecraft:suspicious_sand';
		    MinecraftItemTypes2['SuspiciousStew'] = 'minecraft:suspicious_stew';
		    MinecraftItemTypes2['SweetBerries'] = 'minecraft:sweet_berries';
		    MinecraftItemTypes2['TadpoleBucket'] = 'minecraft:tadpole_bucket';
		    MinecraftItemTypes2['TadpoleSpawnEgg'] = 'minecraft:tadpole_spawn_egg';
		    MinecraftItemTypes2['TallGrass'] = 'minecraft:tall_grass';
		    MinecraftItemTypes2['Target'] = 'minecraft:target';
		    MinecraftItemTypes2['TideArmorTrimSmithingTemplate'] = 'minecraft:tide_armor_trim_smithing_template';
		    MinecraftItemTypes2['TintedGlass'] = 'minecraft:tinted_glass';
		    MinecraftItemTypes2['Tnt'] = 'minecraft:tnt';
		    MinecraftItemTypes2['TntMinecart'] = 'minecraft:tnt_minecart';
		    MinecraftItemTypes2['Torch'] = 'minecraft:torch';
		    MinecraftItemTypes2['Torchflower'] = 'minecraft:torchflower';
		    MinecraftItemTypes2['TorchflowerSeeds'] = 'minecraft:torchflower_seeds';
		    MinecraftItemTypes2['TotemOfUndying'] = 'minecraft:totem_of_undying';
		    MinecraftItemTypes2['TraderLlamaSpawnEgg'] = 'minecraft:trader_llama_spawn_egg';
		    MinecraftItemTypes2['Trapdoor'] = 'minecraft:trapdoor';
		    MinecraftItemTypes2['TrappedChest'] = 'minecraft:trapped_chest';
		    MinecraftItemTypes2['TrialKey'] = 'minecraft:trial_key';
		    MinecraftItemTypes2['TrialSpawner'] = 'minecraft:trial_spawner';
		    MinecraftItemTypes2['Trident'] = 'minecraft:trident';
		    MinecraftItemTypes2['TripwireHook'] = 'minecraft:tripwire_hook';
		    MinecraftItemTypes2['TropicalFish'] = 'minecraft:tropical_fish';
		    MinecraftItemTypes2['TropicalFishBucket'] = 'minecraft:tropical_fish_bucket';
		    MinecraftItemTypes2['TropicalFishSpawnEgg'] = 'minecraft:tropical_fish_spawn_egg';
		    MinecraftItemTypes2['TubeCoral'] = 'minecraft:tube_coral';
		    MinecraftItemTypes2['TubeCoralBlock'] = 'minecraft:tube_coral_block';
		    MinecraftItemTypes2['TubeCoralFan'] = 'minecraft:tube_coral_fan';
		    MinecraftItemTypes2['Tuff'] = 'minecraft:tuff';
		    MinecraftItemTypes2['TuffBrickSlab'] = 'minecraft:tuff_brick_slab';
		    MinecraftItemTypes2['TuffBrickStairs'] = 'minecraft:tuff_brick_stairs';
		    MinecraftItemTypes2['TuffBrickWall'] = 'minecraft:tuff_brick_wall';
		    MinecraftItemTypes2['TuffBricks'] = 'minecraft:tuff_bricks';
		    MinecraftItemTypes2['TuffSlab'] = 'minecraft:tuff_slab';
		    MinecraftItemTypes2['TuffStairs'] = 'minecraft:tuff_stairs';
		    MinecraftItemTypes2['TuffWall'] = 'minecraft:tuff_wall';
		    MinecraftItemTypes2['TurtleEgg'] = 'minecraft:turtle_egg';
		    MinecraftItemTypes2['TurtleHelmet'] = 'minecraft:turtle_helmet';
		    MinecraftItemTypes2['TurtleScute'] = 'minecraft:turtle_scute';
		    MinecraftItemTypes2['TurtleSpawnEgg'] = 'minecraft:turtle_spawn_egg';
		    MinecraftItemTypes2['TwistingVines'] = 'minecraft:twisting_vines';
		    MinecraftItemTypes2['UndyedShulkerBox'] = 'minecraft:undyed_shulker_box';
		    MinecraftItemTypes2['Vault'] = 'minecraft:vault';
		    MinecraftItemTypes2['VerdantFroglight'] = 'minecraft:verdant_froglight';
		    MinecraftItemTypes2['VexArmorTrimSmithingTemplate'] = 'minecraft:vex_armor_trim_smithing_template';
		    MinecraftItemTypes2['VexSpawnEgg'] = 'minecraft:vex_spawn_egg';
		    MinecraftItemTypes2['VillagerSpawnEgg'] = 'minecraft:villager_spawn_egg';
		    MinecraftItemTypes2['VindicatorSpawnEgg'] = 'minecraft:vindicator_spawn_egg';
		    MinecraftItemTypes2['Vine'] = 'minecraft:vine';
		    MinecraftItemTypes2['WanderingTraderSpawnEgg'] = 'minecraft:wandering_trader_spawn_egg';
		    MinecraftItemTypes2['WardArmorTrimSmithingTemplate'] = 'minecraft:ward_armor_trim_smithing_template';
		    MinecraftItemTypes2['WardenSpawnEgg'] = 'minecraft:warden_spawn_egg';
		    MinecraftItemTypes2['WarpedButton'] = 'minecraft:warped_button';
		    MinecraftItemTypes2['WarpedDoor'] = 'minecraft:warped_door';
		    MinecraftItemTypes2['WarpedFence'] = 'minecraft:warped_fence';
		    MinecraftItemTypes2['WarpedFenceGate'] = 'minecraft:warped_fence_gate';
		    MinecraftItemTypes2['WarpedFungus'] = 'minecraft:warped_fungus';
		    MinecraftItemTypes2['WarpedFungusOnAStick'] = 'minecraft:warped_fungus_on_a_stick';
		    MinecraftItemTypes2['WarpedHangingSign'] = 'minecraft:warped_hanging_sign';
		    MinecraftItemTypes2['WarpedHyphae'] = 'minecraft:warped_hyphae';
		    MinecraftItemTypes2['WarpedNylium'] = 'minecraft:warped_nylium';
		    MinecraftItemTypes2['WarpedPlanks'] = 'minecraft:warped_planks';
		    MinecraftItemTypes2['WarpedPressurePlate'] = 'minecraft:warped_pressure_plate';
		    MinecraftItemTypes2['WarpedRoots'] = 'minecraft:warped_roots';
		    MinecraftItemTypes2['WarpedSign'] = 'minecraft:warped_sign';
		    MinecraftItemTypes2['WarpedSlab'] = 'minecraft:warped_slab';
		    MinecraftItemTypes2['WarpedStairs'] = 'minecraft:warped_stairs';
		    MinecraftItemTypes2['WarpedStem'] = 'minecraft:warped_stem';
		    MinecraftItemTypes2['WarpedTrapdoor'] = 'minecraft:warped_trapdoor';
		    MinecraftItemTypes2['WarpedWartBlock'] = 'minecraft:warped_wart_block';
		    MinecraftItemTypes2['WaterBucket'] = 'minecraft:water_bucket';
		    MinecraftItemTypes2['Waterlily'] = 'minecraft:waterlily';
		    MinecraftItemTypes2['WaxedChiseledCopper'] = 'minecraft:waxed_chiseled_copper';
		    MinecraftItemTypes2['WaxedCopper'] = 'minecraft:waxed_copper';
		    MinecraftItemTypes2['WaxedCopperBulb'] = 'minecraft:waxed_copper_bulb';
		    MinecraftItemTypes2['WaxedCopperDoor'] = 'minecraft:waxed_copper_door';
		    MinecraftItemTypes2['WaxedCopperGrate'] = 'minecraft:waxed_copper_grate';
		    MinecraftItemTypes2['WaxedCopperTrapdoor'] = 'minecraft:waxed_copper_trapdoor';
		    MinecraftItemTypes2['WaxedCutCopper'] = 'minecraft:waxed_cut_copper';
		    MinecraftItemTypes2['WaxedCutCopperSlab'] = 'minecraft:waxed_cut_copper_slab';
		    MinecraftItemTypes2['WaxedCutCopperStairs'] = 'minecraft:waxed_cut_copper_stairs';
		    MinecraftItemTypes2['WaxedExposedChiseledCopper'] = 'minecraft:waxed_exposed_chiseled_copper';
		    MinecraftItemTypes2['WaxedExposedCopper'] = 'minecraft:waxed_exposed_copper';
		    MinecraftItemTypes2['WaxedExposedCopperBulb'] = 'minecraft:waxed_exposed_copper_bulb';
		    MinecraftItemTypes2['WaxedExposedCopperDoor'] = 'minecraft:waxed_exposed_copper_door';
		    MinecraftItemTypes2['WaxedExposedCopperGrate'] = 'minecraft:waxed_exposed_copper_grate';
		    MinecraftItemTypes2['WaxedExposedCopperTrapdoor'] = 'minecraft:waxed_exposed_copper_trapdoor';
		    MinecraftItemTypes2['WaxedExposedCutCopper'] = 'minecraft:waxed_exposed_cut_copper';
		    MinecraftItemTypes2['WaxedExposedCutCopperSlab'] = 'minecraft:waxed_exposed_cut_copper_slab';
		    MinecraftItemTypes2['WaxedExposedCutCopperStairs'] = 'minecraft:waxed_exposed_cut_copper_stairs';
		    MinecraftItemTypes2['WaxedOxidizedChiseledCopper'] = 'minecraft:waxed_oxidized_chiseled_copper';
		    MinecraftItemTypes2['WaxedOxidizedCopper'] = 'minecraft:waxed_oxidized_copper';
		    MinecraftItemTypes2['WaxedOxidizedCopperBulb'] = 'minecraft:waxed_oxidized_copper_bulb';
		    MinecraftItemTypes2['WaxedOxidizedCopperDoor'] = 'minecraft:waxed_oxidized_copper_door';
		    MinecraftItemTypes2['WaxedOxidizedCopperGrate'] = 'minecraft:waxed_oxidized_copper_grate';
		    MinecraftItemTypes2['WaxedOxidizedCopperTrapdoor'] = 'minecraft:waxed_oxidized_copper_trapdoor';
		    MinecraftItemTypes2['WaxedOxidizedCutCopper'] = 'minecraft:waxed_oxidized_cut_copper';
		    MinecraftItemTypes2['WaxedOxidizedCutCopperSlab'] = 'minecraft:waxed_oxidized_cut_copper_slab';
		    MinecraftItemTypes2['WaxedOxidizedCutCopperStairs'] = 'minecraft:waxed_oxidized_cut_copper_stairs';
		    MinecraftItemTypes2['WaxedWeatheredChiseledCopper'] = 'minecraft:waxed_weathered_chiseled_copper';
		    MinecraftItemTypes2['WaxedWeatheredCopper'] = 'minecraft:waxed_weathered_copper';
		    MinecraftItemTypes2['WaxedWeatheredCopperBulb'] = 'minecraft:waxed_weathered_copper_bulb';
		    MinecraftItemTypes2['WaxedWeatheredCopperDoor'] = 'minecraft:waxed_weathered_copper_door';
		    MinecraftItemTypes2['WaxedWeatheredCopperGrate'] = 'minecraft:waxed_weathered_copper_grate';
		    MinecraftItemTypes2['WaxedWeatheredCopperTrapdoor'] = 'minecraft:waxed_weathered_copper_trapdoor';
		    MinecraftItemTypes2['WaxedWeatheredCutCopper'] = 'minecraft:waxed_weathered_cut_copper';
		    MinecraftItemTypes2['WaxedWeatheredCutCopperSlab'] = 'minecraft:waxed_weathered_cut_copper_slab';
		    MinecraftItemTypes2['WaxedWeatheredCutCopperStairs'] = 'minecraft:waxed_weathered_cut_copper_stairs';
		    MinecraftItemTypes2['WayfinderArmorTrimSmithingTemplate'] = 'minecraft:wayfinder_armor_trim_smithing_template';
		    MinecraftItemTypes2['WeatheredChiseledCopper'] = 'minecraft:weathered_chiseled_copper';
		    MinecraftItemTypes2['WeatheredCopper'] = 'minecraft:weathered_copper';
		    MinecraftItemTypes2['WeatheredCopperBulb'] = 'minecraft:weathered_copper_bulb';
		    MinecraftItemTypes2['WeatheredCopperDoor'] = 'minecraft:weathered_copper_door';
		    MinecraftItemTypes2['WeatheredCopperGrate'] = 'minecraft:weathered_copper_grate';
		    MinecraftItemTypes2['WeatheredCopperTrapdoor'] = 'minecraft:weathered_copper_trapdoor';
		    MinecraftItemTypes2['WeatheredCutCopper'] = 'minecraft:weathered_cut_copper';
		    MinecraftItemTypes2['WeatheredCutCopperSlab'] = 'minecraft:weathered_cut_copper_slab';
		    MinecraftItemTypes2['WeatheredCutCopperStairs'] = 'minecraft:weathered_cut_copper_stairs';
		    MinecraftItemTypes2['Web'] = 'minecraft:web';
		    MinecraftItemTypes2['WeepingVines'] = 'minecraft:weeping_vines';
		    MinecraftItemTypes2['WetSponge'] = 'minecraft:wet_sponge';
		    MinecraftItemTypes2['Wheat'] = 'minecraft:wheat';
		    MinecraftItemTypes2['WheatSeeds'] = 'minecraft:wheat_seeds';
		    MinecraftItemTypes2['WhiteBundle'] = 'minecraft:white_bundle';
		    MinecraftItemTypes2['WhiteCandle'] = 'minecraft:white_candle';
		    MinecraftItemTypes2['WhiteCarpet'] = 'minecraft:white_carpet';
		    MinecraftItemTypes2['WhiteConcrete'] = 'minecraft:white_concrete';
		    MinecraftItemTypes2['WhiteConcretePowder'] = 'minecraft:white_concrete_powder';
		    MinecraftItemTypes2['WhiteDye'] = 'minecraft:white_dye';
		    MinecraftItemTypes2['WhiteGlazedTerracotta'] = 'minecraft:white_glazed_terracotta';
		    MinecraftItemTypes2['WhiteShulkerBox'] = 'minecraft:white_shulker_box';
		    MinecraftItemTypes2['WhiteStainedGlass'] = 'minecraft:white_stained_glass';
		    MinecraftItemTypes2['WhiteStainedGlassPane'] = 'minecraft:white_stained_glass_pane';
		    MinecraftItemTypes2['WhiteTerracotta'] = 'minecraft:white_terracotta';
		    MinecraftItemTypes2['WhiteTulip'] = 'minecraft:white_tulip';
		    MinecraftItemTypes2['WhiteWool'] = 'minecraft:white_wool';
		    MinecraftItemTypes2['WildArmorTrimSmithingTemplate'] = 'minecraft:wild_armor_trim_smithing_template';
		    MinecraftItemTypes2['WindCharge'] = 'minecraft:wind_charge';
		    MinecraftItemTypes2['WitchSpawnEgg'] = 'minecraft:witch_spawn_egg';
		    MinecraftItemTypes2['WitherRose'] = 'minecraft:wither_rose';
		    MinecraftItemTypes2['WitherSkeletonSkull'] = 'minecraft:wither_skeleton_skull';
		    MinecraftItemTypes2['WitherSkeletonSpawnEgg'] = 'minecraft:wither_skeleton_spawn_egg';
		    MinecraftItemTypes2['WitherSpawnEgg'] = 'minecraft:wither_spawn_egg';
		    MinecraftItemTypes2['WolfArmor'] = 'minecraft:wolf_armor';
		    MinecraftItemTypes2['WolfSpawnEgg'] = 'minecraft:wolf_spawn_egg';
		    MinecraftItemTypes2['WoodenAxe'] = 'minecraft:wooden_axe';
		    MinecraftItemTypes2['WoodenButton'] = 'minecraft:wooden_button';
		    MinecraftItemTypes2['WoodenDoor'] = 'minecraft:wooden_door';
		    MinecraftItemTypes2['WoodenHoe'] = 'minecraft:wooden_hoe';
		    MinecraftItemTypes2['WoodenPickaxe'] = 'minecraft:wooden_pickaxe';
		    MinecraftItemTypes2['WoodenPressurePlate'] = 'minecraft:wooden_pressure_plate';
		    MinecraftItemTypes2['WoodenShovel'] = 'minecraft:wooden_shovel';
		    MinecraftItemTypes2['WoodenSword'] = 'minecraft:wooden_sword';
		    MinecraftItemTypes2['WritableBook'] = 'minecraft:writable_book';
		    MinecraftItemTypes2['YellowBundle'] = 'minecraft:yellow_bundle';
		    MinecraftItemTypes2['YellowCandle'] = 'minecraft:yellow_candle';
		    MinecraftItemTypes2['YellowCarpet'] = 'minecraft:yellow_carpet';
		    MinecraftItemTypes2['YellowConcrete'] = 'minecraft:yellow_concrete';
		    MinecraftItemTypes2['YellowConcretePowder'] = 'minecraft:yellow_concrete_powder';
		    MinecraftItemTypes2['YellowDye'] = 'minecraft:yellow_dye';
		    MinecraftItemTypes2['YellowGlazedTerracotta'] = 'minecraft:yellow_glazed_terracotta';
		    MinecraftItemTypes2['YellowShulkerBox'] = 'minecraft:yellow_shulker_box';
		    MinecraftItemTypes2['YellowStainedGlass'] = 'minecraft:yellow_stained_glass';
		    MinecraftItemTypes2['YellowStainedGlassPane'] = 'minecraft:yellow_stained_glass_pane';
		    MinecraftItemTypes2['YellowTerracotta'] = 'minecraft:yellow_terracotta';
		    MinecraftItemTypes2['YellowWool'] = 'minecraft:yellow_wool';
		    MinecraftItemTypes2['ZoglinSpawnEgg'] = 'minecraft:zoglin_spawn_egg';
		    MinecraftItemTypes2['ZombieHead'] = 'minecraft:zombie_head';
		    MinecraftItemTypes2['ZombieHorseSpawnEgg'] = 'minecraft:zombie_horse_spawn_egg';
		    MinecraftItemTypes2['ZombiePigmanSpawnEgg'] = 'minecraft:zombie_pigman_spawn_egg';
		    MinecraftItemTypes2['ZombieSpawnEgg'] = 'minecraft:zombie_spawn_egg';
		    MinecraftItemTypes2['ZombieVillagerSpawnEgg'] = 'minecraft:zombie_villager_spawn_egg';
		    return MinecraftItemTypes2;
		})(MinecraftItemTypes || {});
		
		// src/mojang-potionEffect.ts
		var MinecraftPotionEffectTypes = /* @__PURE__ */ (MinecraftPotionEffectTypes2 => {
		    MinecraftPotionEffectTypes2['FireResistance'] = 'FireResistance';
		    MinecraftPotionEffectTypes2['Harming'] = 'Harming';
		    MinecraftPotionEffectTypes2['Healing'] = 'Healing';
		    MinecraftPotionEffectTypes2['Infested'] = 'Infested';
		    MinecraftPotionEffectTypes2['Invisibility'] = 'Invisibility';
		    MinecraftPotionEffectTypes2['Leaping'] = 'Leaping';
		    MinecraftPotionEffectTypes2['NightVision'] = 'NightVision';
		    MinecraftPotionEffectTypes2['None'] = 'None';
		    MinecraftPotionEffectTypes2['Oozing'] = 'Oozing';
		    MinecraftPotionEffectTypes2['Poison'] = 'Poison';
		    MinecraftPotionEffectTypes2['SlowFalling'] = 'SlowFalling';
		    MinecraftPotionEffectTypes2['Slowing'] = 'Slowing';
		    MinecraftPotionEffectTypes2['Strength'] = 'Strength';
		    MinecraftPotionEffectTypes2['Swiftness'] = 'Swiftness';
		    MinecraftPotionEffectTypes2['TurtleMaster'] = 'TurtleMaster';
		    MinecraftPotionEffectTypes2['WaterBreath'] = 'WaterBreath';
		    MinecraftPotionEffectTypes2['Weakness'] = 'Weakness';
		    MinecraftPotionEffectTypes2['Weaving'] = 'Weaving';
		    MinecraftPotionEffectTypes2['WindCharged'] = 'WindCharged';
		    MinecraftPotionEffectTypes2['Wither'] = 'Wither';
		    return MinecraftPotionEffectTypes2;
		})(MinecraftPotionEffectTypes || {});
		
		// src/mojang-potionLiquid.ts
		var MinecraftPotionLiquidTypes = /* @__PURE__ */ (MinecraftPotionLiquidTypes2 => {
		    MinecraftPotionLiquidTypes2['Lingering'] = 'Lingering';
		    MinecraftPotionLiquidTypes2['Regular'] = 'Regular';
		    MinecraftPotionLiquidTypes2['Splash'] = 'Splash';
		    return MinecraftPotionLiquidTypes2;
		})(MinecraftPotionLiquidTypes || {});
		
		// src/mojang-potionModifier.ts
		var MinecraftPotionModifierTypes = /* @__PURE__ */ (MinecraftPotionModifierTypes2 => {
		    MinecraftPotionModifierTypes2['Long'] = 'Long';
		    MinecraftPotionModifierTypes2['Normal'] = 'Normal';
		    MinecraftPotionModifierTypes2['Strong'] = 'Strong';
		    return MinecraftPotionModifierTypes2;
		})(MinecraftPotionModifierTypes || {});
		
		
		
		/***/ }),
		
		/***/ "@minecraft/server":
		/*!************************************!*\
		  !*** external "@minecraft/server" ***!
		  \************************************/
		/***/ ((module) => {
		
		var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }
		var y = x => () => x
		module.exports = __WEBPACK_EXTERNAL_MODULE__minecraft_server_fb7572af__;
		
		/***/ }),
		
		/***/ "@minecraft/server-gametest":
		/*!*********************************************!*\
		  !*** external "@minecraft/server-gametest" ***!
		  \*********************************************/
		/***/ ((module) => {
		
		var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }
		var y = x => () => x
		module.exports = __WEBPACK_EXTERNAL_MODULE__minecraft_server_gametest_e5aa2fb2__;
		
		/***/ })
		
		/******/ });
		/************************************************************************/
		/******/ // The module cache
		/******/ var __webpack_module_cache__ = {};
		/******/ 
		/******/ // The require function
		/******/ function __webpack_require__(moduleId) {
		/******/ 	// Check if module is in cache
		/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
		/******/ 	if (cachedModule !== undefined) {
		/******/ 		return cachedModule.exports;
		/******/ 	}
		/******/ 	// Create a new module (and put it into the cache)
		/******/ 	var module = __webpack_module_cache__[moduleId] = {
		/******/ 		// no module.id needed
		/******/ 		// no module.loaded needed
		/******/ 		exports: {}
		/******/ 	};
		/******/ 
		/******/ 	// Execute the module function
		/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
		/******/ 
		/******/ 	// Return the exports of the module
		/******/ 	return module.exports;
		/******/ }
		/******/ 
		/************************************************************************/
		/******/ /* webpack/runtime/define property getters */
		/******/ (() => {
		/******/ 	// define getter functions for harmony exports
		/******/ 	__webpack_require__.d = (exports, definition) => {
		/******/ 		for(var key in definition) {
		/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
		/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
		/******/ 			}
		/******/ 		}
		/******/ 	};
		/******/ })();
		/******/ 
		/******/ /* webpack/runtime/hasOwnProperty shorthand */
		/******/ (() => {
		/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
		/******/ })();
		/******/ 
		/******/ /* webpack/runtime/make namespace object */
		/******/ (() => {
		/******/ 	// define __esModule on exports
		/******/ 	__webpack_require__.r = (exports) => {
		/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
		/******/ 		}
		/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
		/******/ 	};
		/******/ })();
		/******/ 
		/************************************************************************/
		var __webpack_exports__ = {};
		// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
		(() => {
		/*!*********************!*\
		  !*** ./src/Main.ts ***!
		  \*********************/
		__webpack_require__.r(__webpack_exports__);
		/* harmony import */ var _scripts_Redstone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/Redstone */ "./src/scripts/Redstone.js");
		/* harmony import */ var _minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @minecraft/server-wrapper */ "../../module-wrappers/server-wrapper/index.js");
		// Copyright (c) Mojang AB.  All rights reserved.
		
		
		_minecraft_server_wrapper__WEBPACK_IMPORTED_MODULE_1__.system.beforeEvents.watchdogTerminate.subscribe(e => {
		    e.cancel = true;
		});
		
		})();
		
		'''