Difference of "scripts" between "1.19.22" and "1.19.30.20" (beta of "1.19.30").

Total behavior pack: 2 (+0, -1)
Removed behavior pack "editor":
	script "Main.js":
		'''
		/*
		Ignore this file - This is just a placeholder file for 
		    Editor(Server) scripting support
		*/
		import {
		    EditorBlockVolume,
		} from "editor-common";
		
		import {
		    BlockLocation,
		    Location
		} from "mojang-minecraft";
		
		console.log( "\n# ---------------------------------------------------- \n# LOADED and executed global state for Editor(Server)::Main.js\n# ---------------------------------------------------- \n");
		
		console.log( "\nTesting Editor Block Volume Bindings");
		
		const from = new BlockLocation(0, -2, 2);
		const to = new BlockLocation(-1, 1, -3);
		
		let testVol = new EditorBlockVolume(from, to);
		console.log("\nSimple construction -- " + testVol.toString());
		
		let min = testVol.getMin();
		console.log("\nMin -- (" + min.x + ", " + min.y + ", " + min.z + ")");
		
		let max = testVol.getMax();
		console.log("\nMax -- (" + max.x + ", " + max.y + ", " + max.z + ")");
		
		console.log("\n-----Done-----");
		'''
Moved behavior pack from "agent_gametest" to "vanilla_edu_gametest".
Changed behavior pack "vanilla_edu_gametest":
	Total script: 5 (+1, -0)
	Moved script from "AgentTest.js" to "AgentTests.js".
	Changed script "AgentTests.js":
		Total line: 1327 (+3, -3)
		            '''
		            ...
		 462  462       agent.dropAll(options.dir);
		 463  463       await test.idle(5);
		 464  464   
		 465  465       let dirOffset = GameTestAgentExtensions.directionToLocationOffset(options.dir);
		 466  466       let dropAllLocation = origin.offset(dirOffset.x, dirOffset.y, dirOffset.z);
		      467 +     await testEx.teleportItems(test.worldBlockLocation(dropAllLocation));
		 467      -     testEx.teleportItems(test.worldBlockLocation(dropAllLocation));
		 468  468       await test.idle(5);
		 469  469   
		 470  470       for (let item of options.items) {
		 471  471         const slotItem = agent.container().getItem(item.slot);
		 472  472         test.assert(!slotItem || slotItem.amount === 0, "Should have dropped all items in slot");
		            ...
		 519  519         test.assertEntityPresent(itemEntityId, itemLoc, false);
		 520  520   
		 521  521         const stack = new ItemStack(item.item, item.quantity);
		 522  522         agent.container().setItem(item.slot, stack);
		 523  523   
		      524 +       await test.idle(3);
		 524      -       await test.idle(2);
		 525  525   
		 526  526         agent.drop(item.slot + 1, item.quantity, item.dir);
		      527 +       await test.idle(6);
		 527      -       await test.idle(5);
		 528  528   
		 529  529         const slotItem = agent.container().getItem(item.slot);
		 530  530         test.assert(!slotItem || slotItem.amount === 0, "Should have dropped all items in slot");
		 531  531   
		 532  532         test.assertEntityPresent(itemEntityId, itemLoc, true);
		            ...
		            '''
	Added script "BlockTests.js":
		'''
		import * as GameTest from "mojang-gametest";
		import { BlockLocation, MinecraftBlockTypes, MinecraftItemTypes, Location } from "mojang-minecraft";
		import GameTestExtensions from "./GameTestExtensions.js";
		
		const TicksPerSecond = 20;
		function toTicks(sec) {
		  return sec * TicksPerSecond;
		}
		
		function locactionToString(loc) {
		  return `<${loc.x}, ${loc.y}, ${loc.z}>`;
		}
		
		GameTest.registerAsync("BlockTests", "player_border_block_break", async (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_border_break");
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.wool, new BlockLocation(1, 2, 1));
		  const testEx = new GameTestExtensions(test);
		
		  testEx.giveItem(playerSim, MinecraftItemTypes.shears, 1, 0);
		  await test.idle(toTicks(1.0));
		  playerSim.breakBlock(new BlockLocation(1, 2, 1));
		
		  await test.idle(toTicks(1.0));
		  playerSim.stopBreakingBlock();
		
		  test.assertBlockPresent(MinecraftBlockTypes.wool, new BlockLocation(1, 2, 1), true);
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_below", async (test) => {
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 0), "playerSim_border_move_below");
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 2, 1));
		
		  await test.idle(toTicks(1.0));
		
		  const loc = test.worldBlockLocation(new BlockLocation(1, 2, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_above", async (test) => {
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(1, 5, 0));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 6, 0), "playerSim_border_move_above");
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 6, 1));
		
		  await test.idle(toTicks(1.0));
		  const loc = test.worldBlockLocation(new BlockLocation(1, 6, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		
		GameTest.registerAsync("BlockTests", "player_border_block_move_above_build_height", async (test) => {
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(1, 4, 1));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(0, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.borderBlock, new BlockLocation(2, 4, 0));
		  test.setBlockType(MinecraftBlockTypes.stone, new BlockLocation(1, 320, 0));
		  let playerSim = test.spawnSimulatedPlayer(new BlockLocation(1, 321, 0), "playerSim_border_move_above");
		  const testEx = new GameTestExtensions(test);
		
		  await test.idle(toTicks(0.5));
		  playerSim.moveToLocation(new Location(1, 6, 1));
		
		  await test.idle(toTicks(1.0));
		  const loc = test.worldBlockLocation(new BlockLocation(1, 321, 0));
		  const pLoc = GameTestExtensions.toBlockLocation(playerSim.location);
		  test.assert(loc.equals(pLoc), `Player should not move through border: ${locactionToString(loc)} != ${locactionToString(pLoc)}`);
		
		  await test.idle(toTicks(0.5));
		  test.destroyBlock(new BlockLocation(1, 320, 0));
		
		  test.succeed();
		})
		  .structureName("BlockTests:border_blocks")
		  .tag("suite:border")
		  .tag("suite:edu");
		'''
	Changed script "GameTestAgentExtensions.js":
		Total line: 275 (+2, -2)
		          '''
		          ...
		 16  16      *
		 17  17      * @param {string} command
		 18  18      * @returns
		 19  19      */
		 20  20     agentCommand = (command) => {
		     21 +     return this._player.runCommandAsync(`agent ${command}`);
		 21     -     return this._player.runCommand(`agent ${command}`);
		 22  22     };
		 23  23   
		 24  24     _command = (command) => {
		     25 +     return this._player.runCommandAsync(command);
		 25     -     return this._player.runCommand(command);
		 26  26     };
		 27  27   
		 28  28     /**
		 29  29      *
		 30  30      * @param {BlockLocation} itemPos
		          ...
		          '''
	Changed script "GameTestExtensions.js":
		Total line: 27 (+13, -7)
		        '''
		    1 + import { BlockLocation, Location, ItemStack } from "mojang-minecraft";
		    2 + 
		    3 + export default class GameTestExtensions {
		    4 +   constructor(test) {
		    5 +     this.test = test;
		    6 +   }
		 1    - import { BlockLocation, Location } from "mojang-minecraft";
		 2  7   
		    8 +   assertBlockProperty(propertyName, value, blockLocation) {
		    9 +     this.test.assertBlockState(blockLocation, (block) => {
		 3    - export default class GameTestExtensions {
		   10 +       return block.permutation.getProperty(propertyName).value == value;
		   11 +     });
		 4    -   constructor(test) {
		 5    -     this.test = test;
		 6 12     }
		 7 13   
		   14 +   static toBlockLocation = (pos) => {
		 8    -   assertBlockProperty(propertyName, value, blockLocation) {
		 9    -     this.test.assertBlockState(blockLocation, (block) => {
		   15 +     return new BlockLocation(Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z));
		   16 +   };
		10    -       return block.permutation.getProperty(propertyName).value == value;
		11    -     });
		12    -   }
		13 17   
		   18 +   static toLocation = (pos) => {
		   19 +     return new Location(pos.x, pos.y, pos.z);
		14    -   static toBlockLocation = (pos) => {
		15    -     return new BlockLocation(pos.x, pos.y, pos.z);
		16 20     };
		17 21   
		   22 +   giveItem(player, itemType, amount, slot) {
		   23 +     const inventoryContainer = player.getComponent("inventory").container;
		   24 +     inventoryContainer.addItem(new ItemStack(itemType, amount ?? 1));
		18    -   static toLocation = (pos) => {
		   25 +     player.selectedSlot = slot ?? 0;
		   26 +   }
		19    -     return new Location(pos.x, pos.y, pos.z);
		20    -   };
		21 27   }
		        '''
	Changed script "Main.js":
		Total line: 2 (+2, -1)
		      '''
		  1 + import "scripts/AgentTests.js";
		  2 + import "scripts/BlockTests.js";
		1   - import "scripts/AgentTest.js";
		      '''
Changed behavior pack "vanilla_gametest":
	Changed script "APITests.js":
		Total line: 1906 (+13, -14)
		            '''
		            ...
		   9    9     ExplosionOptions,
		  10   10     EntityDamageCause,
		  11   11     EntityEventOptions,
		  12   12     EntityDataDrivenTriggerEventOptions,
		  13   13     FluidContainer,
		       14 +   FluidType,
		  14   15     MinecraftEffectTypes,
		  15   16     MinecraftItemTypes,
		  16   17     ItemStack,
		  17   18     Location,
		  18   19     Vector,
		            ...
		 435  436     const pistonComp = test.getDimension().getBlock(test.worldBlockLocation(pistonLoc)).getComponent("piston");
		 436  437   
		 437  438     test.assert(pistonComp != undefined, "Expected piston component");
		 438  439   
		 439  440     let assertPistonState = (isMoving, isExpanded, isExpanding, isRetracted, isRetracting) => {
		      441 +     test.assert(pistonComp.isMoving === isMoving, `Unexpected isMoving, expected[${isMoving}] actual[${pistonComp.isMoving}]`);
		      442 +     test.assert(pistonComp.isExpanded === isExpanded, `Unexpected isExpanded, expected[${isExpanded}] actual[${pistonComp.isExpanded}]`);
		 440      -     test.assert(pistonComp.isMoving === isMoving, "Unexpected isMoving");
		 441      -     test.assert(pistonComp.isExpanded === isExpanded, "Unexpected isExpanded");
		      443 +     test.assert(pistonComp.isExpanding === isExpanding, `Unexpected isExpanding, expected[${isExpanding}] actual[${pistonComp.isExpanding}]`);
		      444 +     test.assert(pistonComp.isRetracted === isRetracted, `Unexpected isRetracted, expected[${isRetracted}] actual[${pistonComp.isRetracted}]`);
		      445 +     test.assert(pistonComp.isRetracting === isRetracting, `Unexpected isRetracting, expected[${isRetracting}] actual[${pistonComp.isRetracting}]`);
		 442      -     test.assert(pistonComp.isExpanding === isExpanding, "Unexpected isExpanding");
		 443      -     test.assert(pistonComp.isRetracted === isRetracted, "Unexpected isRetracted");
		 444      -     test.assert(pistonComp.isRetracting === isRetracting, "Unexpected isRetracting");
		 445  446     };
		 446  447   
		 447  448     test
		 448  449       .startSequence()
		 449  450       .thenExecute(() => {
		 450  451         test.assert(pistonComp.attachedBlocks.length === 0, "Expected 0 attached blocks");
		 451  452         assertPistonState(false, false, false, true, false); // isRetracted
		 452  453         test.setBlockType(MinecraftBlockTypes.redstoneBlock, redstoneLoc);
		 453  454       })
		      455 +     .thenIdle(3)
		 454      -     .thenIdle(4)
		 455  456       .thenExecute(() => {
		      457 +       test.assert(pistonComp.attachedBlocks.length === 3, `Expected 3 attached blocks, actual [${pistonComp.attachedBlocks.length}]`);
		 456      -       test.assert(pistonComp.attachedBlocks.length === 3, "Expected 3 attached blocks");
		 457  458         assertPistonState(true, false, true, false, false); // isMoving, isExpanding
		 458  459       })
		 459  460       .thenIdle(2)
		 460  461       .thenExecute(() => {
		 461  462         assertPistonState(false, true, false, false, false); // isExpanded
		 462      - 
		 463  463         test.setBlockType(MinecraftBlockTypes.air, redstoneLoc);
		 464  464       })
		      465 +     .thenIdle(3)
		 465      -     .thenIdle(4)
		 466  466       .thenExecute(() => {
		 467  467         assertPistonState(true, false, false, false, true); // isMoving, isRetracting
		 468  468       })
		 469  469       .thenIdle(2)
		 470  470       .thenExecute(() => {
		            ...
		1013 1013   
		1014 1014   GameTest.register("APITests", "cauldron", (test) => {
		1015 1015     const loc = new BlockLocation(0, 1, 0);
		1016 1016     var block = test.getBlock(loc);
		1017 1017   
		     1018 +   test.setFluidContainer(loc, FluidType.water);
		1018      -   test.setFluidContainer(loc, GameTest.FluidType.water);
		1019 1019     test.assert(block.getComponent("waterContainer") != null, "This is a water container");
		1020 1020     test.assert(
		1021 1021       block.getComponent("lavaContainer") == null,
		1022 1022       "A water container should not have a lavaContainer component"
		1023 1023     );
		            ...
		1044 1044     block.getComponent("waterContainer").addDye(MinecraftItemTypes.blueDye);
		1045 1045     test.assert(isNear(block.getComponent("waterContainer").customColor.red, 0.616), "red component should be set");
		1046 1046     test.assert(isNear(block.getComponent("waterContainer").customColor.green, 0.133), "green component should be set");
		1047 1047     test.assert(isNear(block.getComponent("waterContainer").customColor.blue, 0.333), "blue component should be set");
		1048 1048   
		     1049 +   test.setFluidContainer(loc, FluidType.lava);
		1049      -   test.setFluidContainer(loc, GameTest.FluidType.lava);
		1050 1050     test.assert(
		1051 1051       block.getComponent("waterContainer") == null,
		1052 1052       "A lava container should not have a waterContainer component"
		1053 1053     );
		1054 1054     test.assert(block.getComponent("lavaContainer") != null, "This is a lava component");
		            ...
		1059 1059     test.assert(
		1060 1060       block.getComponent("potionContainer") == null,
		1061 1061       "A lava container should not have a potionContainer component"
		1062 1062     );
		1063 1063   
		     1064 +   test.setFluidContainer(loc, FluidType.powderSnow);
		1064      -   test.setFluidContainer(loc, GameTest.FluidType.powderSnow);
		1065 1065     test.assert(
		1066 1066       block.getComponent("waterContainer") == null,
		1067 1067       "A snow container should not have a waterContainer component"
		1068 1068     );
		1069 1069     test.assert(
		            ...
		1074 1074     test.assert(
		1075 1075       block.getComponent("potionContainer") == null,
		1076 1076       "A snow container should not have a potionContainer component"
		1077 1077     );
		1078 1078   
		     1079 +   test.setFluidContainer(loc, FluidType.potion);
		1079      -   test.setFluidContainer(loc, GameTest.FluidType.potion);
		1080 1080     test.assert(
		1081 1081       block.getComponent("snowContainer") == null,
		1082 1082       "A potion container should not have a waterContainer component"
		1083 1083     );
		1084 1084     test.assert(
		            ...
		1099 1099     const loc = new BlockLocation(0, 1, 0);
		1100 1100     var block = test.getBlock(loc);
		1101 1101   
		1102 1102     test.setBlockType(MinecraftBlockTypes.air, loc);
		1103 1103     test.setBlockType(MinecraftBlockTypes.cauldron, loc);
		     1104 +   test.setFluidContainer(loc, FluidType.potion);
		1104      -   test.setFluidContainer(loc, GameTest.FluidType.potion);
		1105 1105   
		1106 1106     let cauldron = block.getComponent("potionContainer");
		1107 1107     cauldron.fillLevel = 2;
		1108 1108   
		1109 1109     const poisonPotion = new ItemStack(MinecraftItemTypes.splashPotion, 1, 32);
		            ...
		1853 1853   })
		1854 1854     .maxTicks(400)
		1855 1855     .structureName("ComponentTests:animal_pen")
		1856 1856     .tag(GameTest.Tags.suiteDefault);
		1857 1857   
		     1858 + GameTest.register("APITests", "teleport_keep_velocity", (test) => {
		1858      - GameTest.registerAsync("APITests", "teleport_keep_velocity", async (test) => {
		1859 1859     const arrow = test.spawn("arrow", new BlockLocation(2, 4, 1));
		1860 1860     // The arrow should fall 1 block before hitting the target
		     1861 +   arrow.setVelocity(test.rotateVector(new Vector(0, 0, 1.2)));
		1861      -   arrow.setVelocity(new Vector(0, 0, 1.2));
		1862      -   const lampLoc = new BlockLocation(2, 3, 7);
		     1862 +   let relativeLoc = test.relativeLocation(arrow.location);
		     1863 +   relativeLoc.x -= 1;
		     1864 +   let teleportLoc = test.worldLocation(relativeLoc);
		     1865 +   arrow.teleport(teleportLoc, arrow.dimension, 0, 0, true);
		     1866 +   let velocity = arrow.velocity.length();
		     1867 +   test.assert(velocity > 0.5, "Expected velocity to be greater than 0.5, but got " + velocity);
		     1868 +   test.succeed();
		1863      -   await test.idle(2);
		1864      -   let arrowLoc = arrow.location;
		1865      -   arrowLoc.x -= 1;
		1866      -   arrow.teleport(arrowLoc, arrow.dimension, 0, 0, true);
		1867      -   test.succeedWhen(() => {
		1868      -     test.assertBlockPresent(MinecraftBlockTypes.litRedstoneLamp, lampLoc);
		1869      -   });
		1870 1869   })
		1871 1870     .structureName("SimulatedPlayerTests:target_practice")
		1872 1871     .tag(GameTest.Tags.suiteDefault);
		1873 1872   
		1874 1873   GameTest.registerAsync(`APITests`, `teleport_keep_velocity_mob`, async (test) => {
		            ...
		            '''
	Changed script "EntityQueryTests.js":
		Total line: 340 (+10, -11)
		          '''
		          ...
		 15  15     test.spawnSimulatedPlayer(new BlockLocation(0, 2, 1), "world_player_2");
		 16  16   
		 17  17     test
		 18  18       .startSequence()
		 19  19       .thenExecuteAfter(2, () => {
		     20 +       let options = { name: player.nameTag };
		 20     -       let options = new EntityQueryOptions();
		 21     -       options.name = player.nameTag;
		 22  21         const playerIterator = world.getPlayers(options);
		 23  22         const iteratorType = playerIterator.constructor.toString().match(/function (\w*)/)[1];
		 24  23         test.assert(iteratorType == "PlayerIterator", "Expected PlayerIterator, got " + iteratorType);
		 25  24         const players = Array.from(playerIterator);
		 26  25         test.assert(players.length === 1 && players[0] === player, "Unexpected player");
		          ...
		 34  33     const player = test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "dimension_player_1");
		 35  34     test.spawnSimulatedPlayer(new BlockLocation(0, 2, 1), "dimension_player_2");
		 36  35   
		 37  36     await test.idle(2);
		 38  37   
		     38 +   let options = { name: player.nameTag };
		 39     -   let options = new EntityQueryOptions();
		 40     -   options.name = player.nameTag;
		 41  39     const dimension = test.getDimension();
		 42  40     const players = Array.from(dimension.getPlayers(options));
		 43  41     test.assert(players.length === 1 && players[0] === player, "Unexpected player");
		 44  42   
		 45  43     const overworld = world.getDimension("overworld");
		          ...
		 55  53   
		 56  54   GameTest.register("EntityQueryTests", "dimension_entity_query", (test) => {
		 57  55     const testEx = new GameTestExtensions(test);
		 58  56   
		 59  57     const createQueryOptions = function () {
		     58 +     let options = {
		     59 +       location: test.worldLocation(new Location(1, 2, 1)),
		 60     -     let options = new EntityQueryOptions();
		     60 +       volume: testEx.rotateVolume(new BlockAreaSize(5, 3, 5)),
		     61 +     };
		 61     -     options.location = test.worldLocation(new Location(1, 2, 1));
		 62     -     options.volume = testEx.rotateVolume(new BlockAreaSize(5, 3, 5));
		 63  62       return options;
		 64  63     };
		 65  64   
		 66  65     const assertEntitiesMatch = function (testName, entities, expected) {
		 67  66       entities = Array.from(entities);
		          ...
		309 308         );
		310 309       }
		311 310     };
		312 311   
		313 312     test.spawnSimulatedPlayer(new BlockLocation(1, 2, 1), "world_player_1");
		    313 +   let options = {};
		314     -   let options = new EntityQueryOptions();
		315 314     options.location = new Location(0, 2, 1);
		316 315     assertQueryPositionalOptionException(options, "location");
		317 316   
		    317 +   options = {};
		318     -   options = new EntityQueryOptions();
		319 318     options.closest = 1;
		320 319     assertQueryPositionalOptionException(options, "closest");
		321 320   
		    321 +   options = {};
		322     -   options = new EntityQueryOptions();
		323 322     options.farthest = 1;
		324 323     assertQueryPositionalOptionException(options, "farthest");
		325 324   
		    325 +   options = {};
		326     -   options = new EntityQueryOptions();
		327 326     options.maxDistance = 1;
		328 327     assertQueryPositionalOptionException(options, "maxDistance");
		329 328   
		    329 +   options = {};
		330     -   options = new EntityQueryOptions();
		331 330     options.minDistance = 1;
		332 331     assertQueryPositionalOptionException(options, "minDistance");
		333 332   
		    333 +   options = {};
		334     -   options = new EntityQueryOptions();
		335 334     options.volume = new BlockAreaSize(1, 1, 1);
		336 335     assertQueryPositionalOptionException(options, "volume");
		337 336   
		338 337     test.succeed();
		339 338   })
		          ...
		          '''
	Changed script "PathFindingTests.js":
		Total line: 469 (+8, -4)
		          '''
		          ...
		189 189       const villagerEntitySpawnType = villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		190 190   
		191 191       // Prepare the map
		192 192       placeBlocksFromMap(test, placementMap);
		193 193       const bedPos = new BlockLocation(1, 2, 4);
		    194 +     const doubleAboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down. (Shouldn't happen anymore)
		    195 +     const singleAboveBedPos = bedPos.above(); // Villager hit box should be working in bed properly now
		194     -     const aboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down.
		195 196       const spawnPos = new BlockLocation(5, 3, 4);
		196 197   
		197 198       // Do the test
		198 199       test.assertEntityPresent(villagerEntityType, bedPos, false);
		199 200       test.spawn(villagerEntitySpawnType, spawnPos);
		200 201   
		201 202       test.succeedWhen(() => {
		    203 +       test.assertEntityPresent(villagerEntityType, singleAboveBedPos, false);
		    204 +       test.assertEntityPresent(villagerEntityType, doubleAboveBedPos, false);
		202     -       test.assertEntityPresent(villagerEntityType, aboveBedPos, false);
		203 205         test.assertEntityPresent(villagerEntityType, bedPos, true);
		204 206   
		205 207         test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		206 208       });
		207 209     })
		          ...
		223 225       const villagerEntitySpawnType = villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		224 226   
		225 227       // Prepare the map
		226 228       placeBlocks(test, floor1, floor2, mid2, ceiling2);
		227 229       const bedPos = new BlockLocation(1, 2, 4);
		    230 +     const doubleAboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down. (Shouldn't happen anymore)
		    231 +     const singleAboveBedPos = bedPos.above(); // Villager hit box should be working in bed properly now
		228     -     const aboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down.
		229 232       const spawnPos = new BlockLocation(5, 3, 4);
		230 233   
		231 234       // Do the test
		232 235       test.assertEntityPresent(villagerEntityType, bedPos, false);
		233 236       test.spawn(villagerEntitySpawnType, spawnPos);
		234 237       test.succeedWhen(() => {
		    238 +       test.assertEntityPresent(villagerEntityType, singleAboveBedPos, false);
		    239 +       test.assertEntityPresent(villagerEntityType, doubleAboveBedPos, false);
		235     -       test.assertEntityPresent(villagerEntityType, aboveBedPos, false);
		236 240         test.assertEntityPresent(villagerEntityType, bedPos, true);
		237 241   
		238 242         test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		239 243       });
		240 244     })
		          ...
		          '''
	Changed script "PistonTests.js":
		Total line: 837 (+2, -2)
		          '''
		          ...
		330 330     const extended = new BlockLocation(0, 1, 1);
		331 331   
		332 332     test.pulseRedstone(trigger, 2);
		333 333     test
		334 334       .startSequence()
		    335 +     .thenIdle(1)
		335     -     .thenIdle(2)
		336 336       .thenWait(() => {
		337 337         test.assertBlockPresent(MinecraftBlockTypes.concrete, extended, true);
		338 338         test.assertBlockPresent(MinecraftBlockTypes.air, retracted, true);
		339 339       })
		340 340       .thenExecuteAfter(3, () => {
		341 341         test.pulseRedstone(trigger, 2);
		342 342       })
		    343 +     .thenIdle(5)
		343     -     .thenIdle(6)
		344 344       .thenWait(() => {
		345 345         test.assertBlockPresent(MinecraftBlockTypes.concrete, retracted, true);
		346 346         test.assertBlockPresent(MinecraftBlockTypes.air, extended, true);
		347 347       })
		348 348       .thenSucceed();
		          ...
		          '''