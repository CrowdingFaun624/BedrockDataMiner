Difference of "scripts" between "1.16.220.50" (beta of "1.16.220") and "1.16.220.51" (beta of "1.16.220").

Changed behavior pack "vanilla_gametest":
	Total script: 8 (+1, -0)
	Changed script "BlockTests.js":
		Total line: 136 (+34, -38)
		          '''
		  1   1   import * as GameTest from "GameTest";
		      2 + import { BlockLocation, Blocks, ItemStack } from "Minecraft";
		  2     - import { BlockPos, Blocks, ItemStack } from "Minecraft";
		  3   3   
		  4   4   const TicksPerSecond = 20;
		  5   5   const FiveSecondsInTicks = 5 * TicksPerSecond;
		  6   6   
		  7   7   ///
		          ...
		  9   9   ///
		 10  10   GameTest.register(
		 11  11     "BlockTests",
		 12  12     "concrete_solidifies_in_shallow_water",
		 13  13     (test) => {
		     14 +     test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 3, 1));
		 14     -     test.setBlock(Blocks.concretepowder(), new BlockPos(1, 3, 1));
		 15  15   
		     16 +     test.succeedWhen(() => {
		     17 +       test.assertBlockPresent(Blocks.concrete(), new BlockLocation(1, 2, 1));
		 16     -     test.succeedWhen((test) => {
		 17     -       test.assertBlockPresent(Blocks.concrete(), new BlockPos(1, 2, 1));
		 18  18       });
		 19  19     }
		 20  20   )
		 21  21     .maxTicks(FiveSecondsInTicks)
		 22  22     .tag(GameTest.Tags.suiteDefault);
		 23  23   
		 24  24   GameTest.register("BlockTests", "concrete_solidifies_in_deep_water", (test) => {
		     25 +   test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 4, 1));
		 25     -   test.setBlock(Blocks.concretepowder(), new BlockPos(1, 4, 1));
		 26  26   
		     27 +   test.succeedWhen(() => {
		     28 +     test.assertBlockPresent(Blocks.concrete(), new BlockLocation(1, 2, 1));
		 27     -   test.succeedWhen((test) => {
		 28     -     test.assertBlockPresent(Blocks.concrete(), new BlockPos(1, 2, 1));
		 29  29     });
		 30  30   })
		 31  31     .maxTicks(FiveSecondsInTicks)
		 32  32     .tag(GameTest.Tags.suiteDefault);
		 33  33   
		 34  34   GameTest.register("BlockTests", "concrete_solidifies_next_to_water", (test) => {
		     35 +   test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 3, 1));
		 35     -   test.setBlock(Blocks.concretepowder(), new BlockPos(1, 3, 1));
		 36  36   
		     37 +   test.succeedWhen(() => {
		     38 +     test.assertBlockPresent(Blocks.concrete(), new BlockLocation(1, 2, 1));
		 37     -   test.succeedWhen((test) => {
		 38     -     test.assertBlockPresent(Blocks.concrete(), new BlockPos(1, 2, 1));
		 39  39     });
		 40  40   })
		 41  41     .maxTicks(FiveSecondsInTicks)
		 42  42     .tag(GameTest.Tags.suiteDefault);
		 43  43   
		 44  44   GameTest.register("BlockTests", "sand_fall_boats", (test) => {
		     45 +   test.setBlock(Blocks.sand(), new BlockLocation(1, 4, 1));
		 45     -   test.setBlock(Blocks.sand(), new BlockPos(1, 4, 1));
		 46  46   
		     47 +   test.succeedWhen(() => {
		     48 +     test.assertBlockPresent(Blocks.sand(), new BlockLocation(1, 2, 1));
		 47     -   test.succeedWhen((test) => {
		 48     -     test.assertBlockPresent(Blocks.sand(), new BlockPos(1, 2, 1));
		 49  49     });
		 50  50   })
		 51  51     .maxTicks(FiveSecondsInTicks)
		 52  52     .tag(GameTest.Tags.suiteDefault);
		 53  53   
		          ...
		 55  55   // Turtle Egg Tests
		 56  56   ///
		 57  57   
		 58  58   GameTest.register("BlockTests", "turtle_eggs_survive_xp", (test) => {
		 59  59     const xpOrb = "minecraft:xp_orb";
		     60 +   const spawnPos = new BlockLocation(1, 3, 1);
		 60     -   const spawnPos = new BlockPos(1, 3, 1);
		 61     -   test.spawn(xpOrb, spawnPos);
		 62  61     test.spawn(xpOrb, spawnPos);
		 63  62     test.spawn(xpOrb, spawnPos);
		 64  63     test.spawn(xpOrb, spawnPos);
		 65  64     test.spawn(xpOrb, spawnPos);
		 66  65     test.spawn(xpOrb, spawnPos);
		 67  66     test.spawn(xpOrb, spawnPos);
		 68  67     test.spawn(xpOrb, spawnPos);
		 69     - 
		 70     -   // Fail if the turtle egg dies
		 71     -   test.failIf((test) => {
		 72     -     test.assertBlockPresent(Blocks.air(), new BlockPos(1, 2, 1));
		     68 +   test.spawn(xpOrb, spawnPos);
		 73     -   });
		 74  69   
		     70 +   // Fail if the turtle egg dies
		     71 +   test.failIf(() => {
		 75     -   // Succeed after 4 seconds
		 76     -   test.runAfterDelay(4 * 20, (test) => {
		     72 +     test.assertBlockPresent(Blocks.air(), new BlockLocation(1, 2, 1));
		 77     -     test.succeed();
		 78  73     });
		     74 + 
		     75 +   // Succeed after 4 seconds
		     76 +   test.startSequence().thenIdle(80).thenSucceed();
		 79  77   })
		 80  78     .maxTicks(FiveSecondsInTicks)
		 81  79     .tag(GameTest.Tags.suiteDefault);
		 82     - 
		 83     - GameTest.register("BlockTests", "turtle_eggs_survive_item", (test) => {
		 84     -   test.pressButton(new BlockPos(2, 4, 0));
		 85  80   
		     81 + GameTest.register("BlockTests", "turtle_eggs_survive_item", (test) => {
		 86     -   // Fail if the turtle egg dies
		 87     -   test.failIf((test) => {
		 88     -     test.assertBlockPresent(Blocks.air(), new BlockPos(1, 2, 1));
		     82 +   test.pressButton(new BlockLocation(2, 4, 0));
		 89     -   });
		 90  83   
		     84 +   // Fail if the turtle egg dies
		     85 +   test.failIf(() => {
		 91     -   // Succeed after 4 seconds
		 92     -   test.runAfterDelay(4 * 20, (test) => {
		     86 +     test.assertBlockPresent(Blocks.air(), new BlockLocation(1, 2, 1));
		 93     -     test.succeed();
		 94  87     });
		     88 + 
		     89 +   // Succeed after 4 seconds
		     90 +   test.startSequence().thenIdle(80).thenSucceed();
		 95  91   })
		 96  92     .maxTicks(FiveSecondsInTicks)
		 97  93     .tag(GameTest.Tags.suiteDefault);
		 98  94   
		 99  95   GameTest.register("BlockTests", "explosion_drop_location", (test) => {
		     96 +   test.pressButton(new BlockLocation(4, 3, 4));
		100     -   test.pressButton(new BlockPos(4, 3, 4));
		101  97   
		     98 +   test.succeedWhen(() => {
		     99 +     const redSandstonePos = new BlockLocation(6, 2, 4);
		102     -   test.succeedWhen((test) => {
		103     -     const redSandstonePos = new BlockPos(6, 2, 4);
		    100 +     const sandstonePos = new BlockLocation(2, 2, 4);
		104     -     const sandstonePos = new BlockPos(2, 2, 4);
		105 101   
		106 102       test.assertBlockNotPresent(Blocks.redSandstone(), redSandstonePos);
		107 103       test.assertBlockNotPresent(Blocks.sandstone(), sandstonePos);
		    104 +     test.assertItemEntityPresent(
		108     -     test.assertItemActorPresent(
		109 105         new ItemStack(Blocks.redSandstone()),
		110 106         redSandstonePos,
		111 107         2.0
		112 108       );
		    109 +     test.assertItemEntityPresent(
		113     -     test.assertItemActorPresent(
		114 110         new ItemStack(Blocks.sandstone()),
		115 111         sandstonePos,
		116 112         2.0
		117 113       );
		118 114     });
		          ...
		123 119   
		124 120   GameTest.register(
		125 121     "BlockTests",
		126 122     "concrete_pops_off_waterlogged_chest",
		127 123     (test) => {
		    124 +     test.setBlock(Blocks.concretepowder(), new BlockLocation(1, 4, 1));
		    125 +     test.succeedWhen(() => {
		128     -     test.setBlock(Blocks.concretepowder(), new BlockPos(1, 4, 1));
		129     -     test.succeedWhen((test) => {
		    126 +       const chestPos = new BlockLocation(1, 2, 1);
		130     -       const chestPos = new BlockPos(1, 2, 1);
		131 127         test.assertBlockPresent(Blocks.chest(), chestPos);
		    128 +       test.assertItemEntityPresent(
		132     -       test.assertItemActorPresent(
		133 129           new ItemStack(Blocks.concretepowder()),
		134 130           chestPos,
		135 131           2
		136 132         );
		    133 +       test.assertEntityNotPresent("falling_block");
		137     -       test.assertActorNotPresent("falling_block");
		138 134       });
		139 135     }
		140 136   ).maxTicks(TicksPerSecond * 5);
		          '''
	Changed script "DebugTests.js":
		Total line: 15 (+1, -1)
		        '''
		        ...
		 5  5   })
		 6  6     .maxTicks(50)
		 7  7     .tag(GameTest.Tags.suiteDebug);
		 8  8   
		 9  9   GameTest.register("DebugTests", "always_succeed", (test) => {
		   10 +   test.runAfterDelay(40, () => {
		10    -   test.runAfterDelay(40, (test) => {
		11 11       test.succeed();
		12 12     });
		13 13   })
		14 14     .maxTicks(50)
		15 15     .tag(GameTest.Tags.suiteDebug);
		        '''
	Added script "DispenserTests.js":
		'''
		import * as GameTest from "GameTest";
		import { BlockLocation, Blocks, ItemStack } from "Minecraft";
		
		const dispenserDelay = 5; // Number of ticks to wait for the dispenser to use or dispense an item
		const armorSlotTorso = 1;
		const pinkCarpet = 6;
		const threeSecondsInTicks = 60;
		
		GameTest.register("DispenserTests", "dispenser_shears_sheep", (test) => {
		  const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(sheepId, entityLoc);
		  test.assertEntityPresent(sheepId, entityLoc);
		  test.assertEntityHasComponent(
		    sheepId,
		    "minecraft:is_sheared",
		    entityLoc,
		    false
		  );
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(sheepId, entityLoc);
		  test.succeedWhenEntityHasComponent(
		    sheepId,
		    "minecraft:is_sheared",
		    entityLoc,
		    true
		  );
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_shears_mooshroom", (test) => {
		  const cowId = "minecraft:cow<minecraft:ageable_grow_up>";
		  const mooshroomId = "minecraft:mooshroom<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(mooshroomId, entityLoc);
		  test.assertEntityPresent(mooshroomId, entityLoc);
		  test.assertEntityHasComponent(
		    mooshroomId,
		    "minecraft:is_sheared",
		    entityLoc,
		    false
		  );
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedWhenEntityPresent(cowId, entityLoc);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_shears_snowgolem", (test) => {
		  const snowGolemId = "minecraft:snow_golem";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(snowGolemId, entityLoc);
		  test.assertEntityPresent(snowGolemId, entityLoc);
		  test.assertEntityHasComponent(
		    snowGolemId,
		    "minecraft:is_sheared",
		    entityLoc,
		    false
		  );
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(snowGolemId, entityLoc);
		  test.succeedWhenEntityHasComponent(
		    snowGolemId,
		    "minecraft:is_sheared",
		    entityLoc,
		    true
		  );
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_horsearmor_on_horse", (test) => {
		  const horseId = "minecraft:horse<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(horseId, entityLoc);
		  test.setEntityTamed(horseId, entityLoc);
		
		  test.assertEntityHasArmor(horseId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(horseId, entityLoc);
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasArmor(
		      horseId,
		      armorSlotTorso,
		      "diamond_horse_armor",
		      0,
		      entityLoc,
		      true
		    );
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_saddle_on_pig", (test) => {
		  const pigId = "minecraft:pig<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(pigId, entityLoc);
		  test.assertEntityHasComponent(
		    pigId,
		    "minecraft:is_saddled",
		    entityLoc,
		    false
		  );
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(pigId, entityLoc);
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(
		      pigId,
		      "minecraft:is_saddled",
		      entityLoc,
		      true
		    );
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_saddle_on_horse", (test) => {
		  const horseId = "minecraft:horse<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(horseId, entityLoc);
		  test.setEntityTamed(horseId, entityLoc);
		  test.assertEntityHasComponent(
		    horseId,
		    "minecraft:is_saddled",
		    entityLoc,
		    false
		  );
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(horseId, entityLoc);
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(
		      horseId,
		      "minecraft:is_saddled",
		      entityLoc,
		      true
		    );
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_chest_on_llama", (test) => {
		  const llamaId = "minecraft:llama<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(llamaId, entityLoc);
		  test.setEntityTamed(llamaId, entityLoc);
		  test.assertEntityHasComponent(
		    llamaId,
		    "minecraft:is_chested",
		    entityLoc,
		    false
		  );
		  test.assertEntityHasArmor(llamaId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(llamaId, entityLoc);
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasComponent(
		      llamaId,
		      "minecraft:is_chested",
		      entityLoc,
		      true
		    );
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		GameTest.register("DispenserTests", "dispenser_carpet_on_llama", (test) => {
		  const llamaId = "minecraft:llama<minecraft:ageable_grow_up>";
		  const entityLoc = new BlockLocation(1, 2, 1);
		  test.spawn(llamaId, entityLoc);
		  test.setEntityTamed(llamaId, entityLoc);
		  test.assertEntityHasArmor(llamaId, armorSlotTorso, "", 0, entityLoc, false);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.assertEntityPresent(llamaId, entityLoc);
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityHasArmor(
		      llamaId,
		      armorSlotTorso,
		      "minecraft:carpet",
		      pinkCarpet,
		      entityLoc,
		      true
		    );
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag("suite:java_parity")
		  .tag(GameTest.Tags.suiteBroken);
		
		function dispenserMinecartTest(test, actorId) {
		  const minecartPos = new BlockLocation(1, 2, 1);
		  test.assertEntityNotPresent(actorId, minecartPos);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerEmpty(new BlockLocation(0, 2, 1));
		    test.assertEntityPresent(actorId, minecartPos);
		  });
		}
		
		GameTest.register("DispenserTests", "dispenser_minecart_track", (test) => {
		  dispenserMinecartTest(test, "minecraft:minecart");
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_minecart", (test) => {
		  dispenserMinecartTest(test, "minecraft:item");
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_water", (test) => {
		  const waterPos = new BlockLocation(1, 2, 1);
		  const dispenserPos = new BlockLocation(0, 2, 1);
		  test.assertBlockNotPresent(Blocks.water(), waterPos);
		  test.assertContainerContains("minecraft:water_bucket", dispenserPos);
		
		  test.pressButton(new BlockLocation(0, 2, 0));
		
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    test.assertContainerContains("minecraft:bucket", dispenserPos);
		    test.assertBlockPresent(Blocks.water(), waterPos);
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_arrow_trap", (test) => {
		  const sheepId = "minecraft:sheep<minecraft:ageable_grow_up>";
		  const sheepPos = new BlockLocation(4, 2, 2);
		  test.spawn(sheepId, sheepPos);
		  test.assertEntityPresent(sheepId, sheepPos);
		  test.pullLever(new BlockLocation(2, 3, 2));
		  test.succeedWhenEntityNotPresent(sheepId, sheepPos);
		})
		  .maxTicks(200)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register(
		  "DispenserTests",
		  "dispenser_charge_respawn_anchor",
		  (test) => {
		    test.pressButton(new BlockLocation(0, 2, 0));
		    const respawnAnchorPos = new BlockLocation(1, 2, 1);
		    const dispenserPos = new BlockLocation(0, 2, 1);
		    test.assertContainerContains("minecraft:glowstone", dispenserPos);
		
		    test.assertBlockState("respawn_anchor_charge", 0, respawnAnchorPos);
		    test.succeedWhen(() => {
		      test.assertBlockState("respawn_anchor_charge", 1, respawnAnchorPos);
		      test.assertContainerEmpty(dispenserPos);
		    });
		  }
		)
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		GameTest.register("DispenserTests", "dispenser_fire", (test) => {
		  test.pullLever(new BlockLocation(2, 5, 1));
		  const firePositions = [
		    new BlockLocation(2, 2, 1),
		    new BlockLocation(2, 4, 0),
		    new BlockLocation(4, 5, 1),
		    new BlockLocation(0, 5, 1),
		    new BlockLocation(2, 5, 3),
		    new BlockLocation(2, 7, 1),
		  ];
		
		  test.succeedOnTickWhen(dispenserDelay, () => {
		    for (const pos of firePositions) {
		      test.assertBlockPresent(Blocks.fire(), pos);
		    }
		  });
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		
		// Regression test for crash when dispensing fire MC-210622
		GameTest.register("DispenserTests", "dispenser_fire_crash", (test) => {
		  test.pullLever(new BlockLocation(0, 2, 0));
		  test.succeedOnTick(dispenserDelay);
		})
		  .maxTicks(threeSecondsInTicks)
		  .tag(GameTest.Tags.suiteDefault);
		'''
	Changed script "DoorTests.js":
		Total line: 24 (+7, -7)
		        '''
		 1  1   import * as GameTest from "GameTest";
		    2 + import { BlockLocation } from "Minecraft";
		 2    - import { BlockPos } from "Minecraft";
		 3  3   
		 4  4   GameTest.register("DoorTests", "four_villagers_one_door", (test) => {
		    5 +   const villagerEntityType = "minecraft:villager_v2";
		    6 +   const villagerEntitySpawnType =
		 5    -   const villagerActorType = "minecraft:villager_v2";
		 6    -   const villagerActorSpawnType =
		 7  7       "minecraft:villager_v2<minecraft:spawn_farmer>"; // Attempt to spawn the villagers as farmers
		 8  8   
		    9 +   test.spawn(villagerEntitySpawnType, new BlockLocation(5, 2, 4));
		   10 +   test.spawn(villagerEntitySpawnType, new BlockLocation(4, 2, 5));
		 9    -   test.spawn(villagerActorSpawnType, new BlockPos(5, 2, 4));
		10    -   test.spawn(villagerActorSpawnType, new BlockPos(4, 2, 5));
		   11 +   test.spawn(villagerEntitySpawnType, new BlockLocation(2, 2, 5));
		   12 +   test.spawn(villagerEntitySpawnType, new BlockLocation(1, 2, 4));
		11    -   test.spawn(villagerActorSpawnType, new BlockPos(2, 2, 5));
		12    -   test.spawn(villagerActorSpawnType, new BlockPos(1, 2, 4));
		13 13   
		   14 +   test.succeedWhen(() => {
		   15 +     test.assertEntityPresent(villagerEntityType, new BlockLocation(5, 2, 2));
		14    -   test.succeedWhen(function (test) {
		15    -     test.assertActorPresent(villagerActorType, new BlockPos(5, 2, 2));
		   16 +     test.assertEntityPresent(villagerEntityType, new BlockLocation(5, 2, 1));
		   17 +     test.assertEntityPresent(villagerEntityType, new BlockLocation(1, 2, 2));
		   18 +     test.assertEntityPresent(villagerEntityType, new BlockLocation(1, 2, 1));
		16    -     test.assertActorPresent(villagerActorType, new BlockPos(5, 2, 1));
		17    -     test.assertActorPresent(villagerActorType, new BlockPos(1, 2, 2));
		18    -     test.assertActorPresent(villagerActorType, new BlockPos(1, 2, 1));
		19 19     });
		20 20   })
		21 21     .tag(GameTest.Tags.suiteDefault)
		22 22     .padding(50) // Space out villager tests to stop them from confusing each other
		23 23     .batch("night") // This should be a constant at some point
		        ...
		        '''
	Changed script "Main.js":
		Total line: 7 (+2, -2)
		      '''
		  1 + import "scripts/BlockTests.js";
		  2 + import "scripts/DebugTests.js";
		1   - import "scripts/BlockTests.js"
		2   - import "scripts/DebugTests.js"
		  3 + import "scripts/DispenserTests.js";
		  4 + import "scripts/DoorTests.js";
		  5 + import "scripts/MinecartTests.js";
		  6 + import "scripts/MobTests.js";
		  7 + import "scripts/PathFindingTests.js";
		3   - import "scripts/DoorTests.js"
		4   - import "scripts/MinecartTests.js"
		5   - import "scripts/MobTests.js"
		6   - import "scripts/PathFindingTests.js"
		7   - 
		      '''
	Changed script "MinecartTests.js":
		Total line: 16 (+8, -8)
		        '''
		 1  1   import * as GameTest from "GameTest";
		    2 + import { BlockLocation } from "Minecraft";
		 2    - import { BlockPos } from "Minecraft";
		 3  3   
		 4  4   GameTest.register("MinecartTests", "turn", (test) => {
		    5 +   const minecartEntityType = "minecart";
		 5    -   const minecartActorType = "minecart";
		 6  6   
		    7 +   const endPos = new BlockLocation(1, 2, 2);
		    8 +   const startPos = new BlockLocation(1, 2, 0);
		 7    -   const endPos = new BlockPos(1, 2, 2);
		 8    -   const startPos = new BlockPos(1, 2, 0);
		 9  9   
		   10 +   test.assertEntityPresent(minecartEntityType, startPos);
		   11 +   test.assertEntityNotPresent(minecartEntityType, endPos);
		10    -   test.assertActorPresent(minecartActorType, startPos);
		11    -   test.assertActorNotPresent(minecartActorType, endPos);
		12 12   
		   13 +   test.pressButton(new BlockLocation(0, 3, 0));
		13    -   test.pressButton(new BlockPos(0, 3, 0));
		14 14   
		   15 +   test.succeedWhenEntityPresent(minecartEntityType, endPos);
		15    -   test.succeedWhenActorPresent(minecartActorType, endPos);
		16 16   }).tag(GameTest.Tags.suiteDefault);
		        '''
	Changed script "MobTests.js":
		Total line: 14 (+4, -4)
		        '''
		 1  1   import * as GameTest from "GameTest";
		    2 + import { BlockLocation, BlockStates, Blocks } from "Minecraft";
		 2    - import { BlockPos, BlockStates, Blocks } from "Minecraft";
		 3  3   
		 4  4   const TicksPerSecond = 20;
		 5  5   
		 6  6   GameTest.register("MobTests", "zombie_burn", (test) => {
		    7 +   const zombieEntityType = "minecraft:zombie";
		    8 +   const zombiePosition = new BlockLocation(1, 2, 1);
		 7    -   const zombieActorType = "minecraft:zombie";
		 8    -   const zombiePosition = new BlockPos(1, 2, 1);
		 9  9   
		   10 +   test.succeedWhenEntityNotPresent(zombieEntityType, zombiePosition);
		10    -   test.succeedWhenActorNotPresent(zombieActorType, zombiePosition);
		11 11   })
		12 12     .maxTicks(TicksPerSecond * 30)
		13 13     .tag(GameTest.Tags.suiteDefault)
		14 14     .batch("day");
		        '''
	Changed script "PathFindingTests.js":
		Total line: 337 (+19, -19)
		          '''
		  1   1   import * as GameTest from "GameTest";
		      2 + import { Blocks, BlockStates, BlockLocation } from "Minecraft";
		  2     - import { Blocks, BlockStates, BlockPos } from "Minecraft";
		  3   3   
		  4   4   ///
		  5   5   // Setup constants
		  6   6   ///
		  7   7   const VERTICAL_TEST_TEMPLATE_NAME = "PathFindingTests:veritcal_template";
		          ...
		 65  65         if (mapChar != " ") {
		 66  66           const block = getBlockStateForMapChar(mapChar);
		 67  67   
		 68  68           // Place two next to each other
		 69  69           for (let currentZ = spawnZ; currentZ >= spawnZ - 1; --currentZ) {
		     70 +           test.setBlock(block, new BlockLocation(currentX, currentY, currentZ));
		 70     -           test.setBlock(block, new BlockPos(currentX, currentY, currentZ));
		 71  71           }
		 72  72         }
		 73  73         --currentX;
		 74  74       }
		 75  75       ++currentY;
		          ...
		110 110               |####     |####     |####     |####     |####     |####
		111 111     ceiling:   none      0.5       1         1.5       2         2.5
		112 112     --------------------------------------------------------------------
		113 113   */
		114 114   function placeBlocks(test, floor1, floor2, mid2, ceiling2) {
		    115 +   const spawnPos = new BlockLocation(5, 2, 4);
		115     -   const spawnPos = new BlockPos(5, 2, 4);
		116 116   
		117 117     // we place two of each block, at z and z-1.
		118 118     for (let zOffset = 0; zOffset >= -1; --zOffset) {
		119 119       // floor1 defines how high the block is where the villager spawns
		120 120       if (floor1 == "0.5") {
		          ...
		186 186       tag = GameTest.Tags.suiteDefault;
		187 187     }
		188 188   
		189 189     const testName = "Vertical" + counter;
		190 190     GameTest.register("PathFindingTests", testName, (test) => {
		    191 +     const villagerEntityType = "minecraft:villager_v2";
		    192 +     const villagerEntitySpawnType =
		191     -     const villagerActorType = "minecraft:villager_v2";
		192     -     const villagerActorSpawnType =
		    193 +       villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		193     -       villagerActorType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		194 194   
		195 195       // Prepare the map
		196 196       placeBlocksFromMap(test, placementMap);
		    197 +     const bedPos = new BlockLocation(1, 2, 4);
		197     -     const bedPos = new BlockPos(1, 2, 4);
		198 198       const aboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down.
		    199 +     const spawnPos = new BlockLocation(5, 3, 4);
		199     -     const spawnPos = new BlockPos(5, 3, 4);
		200 200   
		201 201       // Do the test
		    202 +     test.assertEntityNotPresent(villagerEntityType, bedPos);
		    203 +     test.spawn(villagerEntitySpawnType, spawnPos);
		202     -     test.assertActorNotPresent(villagerActorType, bedPos);
		203     -     test.spawn(villagerActorSpawnType, spawnPos);
		204 204   
		    205 +     test.succeedWhen(() => {
		    206 +       test.assertEntityNotPresent(villagerEntityType, aboveBedPos);
		205     -     test.succeedWhen((test) => {
		206     -       test.assertActorNotPresent(villagerActorType, aboveBedPos);
		    207 +       test.assertEntityPresent(villagerEntityType, bedPos);
		207     -       test.assertActorPresent(villagerActorType, bedPos);
		208 208   
		    209 +       test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		209     -       test.killAllActors(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		210 210       });
		211 211     })
		212 212       .structureName(VERTICAL_TEST_TEMPLATE_NAME)
		213 213       .maxTicks(VERTICAL_TEST_MAX_TICKS)
		214 214       .setupTicks(VERTICAL_TEST_STARTUP_TICKS)
		          ...
		228 228     if (tag == null) {
		229 229       tag = GameTest.Tags.suiteDefault;
		230 230     }
		231 231   
		232 232     GameTest.register("PathFindingTests", testName, (test) => {
		    233 +     const villagerEntityType = "minecraft:villager_v2";
		    234 +     const villagerEntitySpawnType =
		233     -     const villagerActorType = "minecraft:villager_v2";
		234     -     const villagerActorSpawnType =
		    235 +       villagerEntityType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		235     -       villagerActorType + "<minecraft:become_farmer>"; // Attempt to spawn the villagers as farmers
		236 236   
		237 237       // Prepare the map
		238 238       placeBlocks(test, floor1, floor2, mid2, ceiling2);
		    239 +     const bedPos = new BlockLocation(1, 2, 4);
		239     -     const bedPos = new BlockPos(1, 2, 4);
		240 240       const aboveBedPos = bedPos.above().above(); // Check 2 blocks above the bed because under rare circumstances the villager hit box may stick out above the bed block when lying down.
		    241 +     const spawnPos = new BlockLocation(5, 3, 4);
		241     -     const spawnPos = new BlockPos(5, 3, 4);
		242 242   
		243 243       // Do the test
		    244 +     test.assertEntityNotPresent(villagerEntityType, bedPos);
		    245 +     test.spawn(villagerEntitySpawnType, spawnPos);
		244     -     test.assertActorNotPresent(villagerActorType, bedPos);
		245     -     test.spawn(villagerActorSpawnType, spawnPos);
		    246 +     test.succeedWhen(() => {
		    247 +       test.assertEntityNotPresent(villagerEntityType, aboveBedPos);
		    248 +       test.assertEntityPresent(villagerEntityType, bedPos);
		246     -     test.succeedWhen((test) => {
		247     -       test.assertActorNotPresent(villagerActorType, aboveBedPos);
		248     -       test.assertActorPresent(villagerActorType, bedPos);
		249 249   
		    250 +       test.killAllEntities(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		250     -       test.killAllActors(); // Clean up villagers so the VillageManager doesn't waste time looking for points of interest (POIs)
		251 251       });
		252 252     })
		253 253       .structureName(VERTICAL_TEST_TEMPLATE_NAME)
		254 254       .maxTicks(VERTICAL_TEST_MAX_TICKS)
		255 255       .setupTicks(VERTICAL_TEST_STARTUP_TICKS)
		          ...
		          '''