Difference of "shaders" between "1.7.0" and "1.8.0.8" (beta of "1.8.0").
Unable to create data files for 1 file between: "1.7.1"

Changed file "color_texture.fragment.hlsl":
	Total line: 107 (+13, -2)
	          '''
	          ...
	 32  32   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv + EFFECT_UV_OFFSET);
	 33  33   #else
	 34  34   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	 35  35   #endif
	 36  36   
	     37 + #ifdef MULTI_COLOR_TINT
	     38 + 	// Texture is a mask for tinting with two colors
	     39 + 	float2 colorMask = diffuse.rg;
	     40 + 
	     41 + 	// Apply the base color tint
	     42 + 	diffuse.rgb = colorMask.rrr * PSInput.color.rgb;
	     43 + 
	     44 + 	// Apply the secondary color mask and tint so long as its grayscale value is not 0
	     45 + 	diffuse.rgb = lerp(diffuse.rgb, colorMask.ggg * CHANGE_COLOR, ceil(colorMask.g));
	     46 + #endif
	     47 + 
	 37  48   #ifdef ALPHA_TEST
	 38  49   
	 39  50   #ifdef ENABLE_VERTEX_TINT_MASK
	 40  51   	if( diffuse.a <= 0.0f )
	 41  52   #else
	          ...
	 44  55   	{
	 45  56   		discard;
	 46  57   	}
	 47  58   #endif
	 48  59   
	     60 + #if defined(ENABLE_VERTEX_TINT_MASK) && !defined(MULTI_COLOR_TINT)
	 49     - #ifdef ENABLE_VERTEX_TINT_MASK
	 50  61   	diffuse.rgb = lerp(diffuse.rgb, diffuse.rgb*PSInput.color.rgb, diffuse.a);
	 51  62   	if (PSInput.color.a > 0.0f) {
	 52  63   		diffuse.a = diffuse.a > 0.0f ? 1.0f : 0.0f; // This line is needed for horse armour icon and dyed leather to work properly
	 53  64   	}
	 54  65   #endif
	          ...
	 75  86   
	 76  87   #ifdef ENABLE_CURRENT_ALPHA_MULTIPLY
	 77  88   	diffuse = diffuse * float4(1.0f, 1.0f, 1.0f, HUD_OPACITY);
	 78  89   #endif
	 79  90   
	     91 + #elif !defined(MULTI_COLOR_TINT)
	 80     - #else
	 81  92   	diffuse = diffuse * PSInput.color;
	 82  93   #endif
	 83  94   
	 84  95   	// Fog needs to be applied after the color tinting.
	 85  96   #ifdef ENABLE_FOG
	          ...
	          '''
Changed file "entity.fragment.hlsl":
	Total line: 181 (+47, -26)
	          '''
	          ...
	 11  11   	// there is some alignment issue on the Windows Phone 1320 that causes the position
	 12  12   	// to get corrupted if this is two floats and last in the struct memory wise
	 13  13   	float4 layerUV : GLINT_UVS;
	 14  14   #endif
	 15  15   
	     16 + #ifdef COLOR_BASED
	     17 + 	float4 color : COLOR;
	     18 + #endif
	     19 + 
	     20 + #ifdef USE_OVERLAY
	     21 + 	float4 overlayColor : OVERLAY_COLOR;
	     22 + #endif
	     23 + 
	     24 + #ifdef TINTED_ALPHA_TEST
	     25 + 	float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	     26 + #endif
	     27 + 
	     28 + 	float2 uv : TEXCOORD_0_FB_MSAA;
	     29 + 
	     30 + };
	     31 + 
	     32 + struct PS_Output
	     33 + {
	     34 + 	float4 color : SV_Target;
	     35 + };
	     36 + 
	     37 + #ifdef USE_EMISSIVE
	     38 + #ifdef USE_ONLY_EMISSIVE
	     39 + #define NEEDS_DISCARD(C) (C.a == 0.0f ||C.a == 1.0f )
	     40 + #else
	     41 + #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
	     42 + #endif
	     43 + #else
	     44 + #ifndef USE_COLOR_MASK
	 16     - #ifdef USE_OVERLAY
	     45 + #define NEEDS_DISCARD(C)	(C.a < 0.5)
	     46 + #else
	     47 + #define NEEDS_DISCARD(C)	(C.a == 0.0)
	 17     - 	float4 overlayColor : OVERLAY_COLOR;
	 18  48   #endif
	 19     - 
	 20     - #ifdef TINTED_ALPHA_TEST
	 21     - 	float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	 22  49   #endif
	 23  50   
	     51 + float4 glintBlend(float4 dest, float4 source) {
	     52 + 	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	     53 + 	return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	     54 + }
	 24     - 	float2 uv : TEXCOORD_0_FB_MSAA;
	 25  55   
	     56 + ROOT_SIGNATURE
	     57 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	     58 + {
	     59 + 	float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	 26     - };
	 27  60   
	 28     - struct PS_Output
	 29     - {
	 30     - 	float4 color : SV_Target;
	     61 + #if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	 31     - };
	 32  62   
	     63 + #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
	 33     - #ifdef USE_EMISSIVE
	 34     - #ifdef USE_ONLY_EMISSIVE
	     64 + 	color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	 35     - #define NEEDS_DISCARD(C) (C.a == 0.0f ||C.a == 1.0f )
	 36  65   #else
	     66 + 	color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	 37     - #define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
	 38  67   #endif
	     68 + 
	 39     - #else
	     69 + #if defined(ALPHA_TEST) && !defined(USE_MULTITEXTURE) && !defined(MULTIPLICATIVE_TINT)
	     70 + 	if( NEEDS_DISCARD( color ) )
	 40     - #ifndef USE_COLOR_MASK
	 41     - #define NEEDS_DISCARD(C)	(C.a < 0.5)
	     71 + 	{
	 42     - #else
	     72 + 		discard;
	     73 + 	}
	 43     - #define NEEDS_DISCARD(C)	(C.a == 0.0)
	 44     - #endif
	 45  74   #endif
	 46  75   
	     76 + #ifdef TINTED_ALPHA_TEST
	 47     - float4 glintBlend(float4 dest, float4 source) {
	     77 + 	float4 testColor = color;
	     78 + 	testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
	     79 + 	if( NEEDS_DISCARD( testColor ) )
	     80 + 	{
	     81 + 		discard;
	     82 + 	}
	 48     - 	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	 49     - 	return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	 50     - }
	 51     - 
	 52     - ROOT_SIGNATURE
	 53     - void main(in PS_Input PSInput, out PS_Output PSOutput)
	 54     - {
	     83 + #endif
	 55     - 	float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	 56  84   
	     85 + #endif
	 57     - #if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	 58  86   
	 59     - #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
	 60     - 	color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	     87 + #ifdef COLOR_BASED
	     88 + 	color = PSInput.color;
	 61     - #else
	 62     - 	color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	 63  89   #endif
	 64  90   
	     91 + #ifdef MULTI_COLOR_TINT
	 65     - #if defined(ALPHA_TEST) && !defined(USE_MULTITEXTURE) && !defined(MULTIPLICATIVE_TINT)
	 66     - 	if( NEEDS_DISCARD( color ) )
	 67     - 	{
	     92 + 	// Texture is a mask for tinting with two colors
	     93 + 	float2 colorMask = color.rg;
	 68     - 		discard;
	 69     - 	}
	 70     - #endif
	 71  94   
	 72     - #ifdef TINTED_ALPHA_TEST
	 73     - 	float4 testColor = color;
	     95 + 	// Apply the base color tint
	     96 + 	color.rgb = colorMask.rrr * CHANGE_COLOR.rgb;
	     97 + 
	     98 + 	// Apply the secondary color mask and tint so long as its grayscale value is not 0
	     99 + 	color.rgb = lerp(color.rgb, colorMask.ggg * MULTIPLICATIVE_TINT_CHANGE_COLOR.rgb, ceil(colorMask.g));
	    100 + #else
	 74     - 	testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
	 75     - 	if( NEEDS_DISCARD( testColor ) )
	 76     - 	{
	 77     - 		discard;
	 78     - 	}
	 79     - #endif
	 80 101   
	    102 + #ifdef USE_COLOR_MASK
	    103 + 	color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
	    104 + 	color.a *= CHANGE_COLOR.a;
	 81 105   #endif
	 82 106   
	    107 + #ifdef ITEM_IN_HAND
	 83     - #ifdef USE_COLOR_MASK
	    108 + 	color.rgb = lerp(color, color * CHANGE_COLOR, color.a).rgb;
	 84     - 	color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
	 85     - 	color.a *= CHANGE_COLOR.a;
	 86 109   #endif
	 87 110   
	 88     - #ifdef ITEM_IN_HAND
	 89     - 	color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	 90 111   #endif
	 91 112   
	 92 113   #ifdef USE_MULTITEXTURE
	 93 114   	float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
	 94 115   	float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
	          ...
	          '''
Changed file "entity.geometry.hlsl":
	Total line: 94 (+12, -1)
	        '''
	        ...
	 8  8   
	 9  9   #ifdef GLINT
	10 10   	float4		layerUV			: GLINT_UVS;
	11 11   #endif
	12 12   
	   13 + #ifdef COLOR_BASED
	   14 + 	float4		color			: COLOR;
	   15 + #endif
	   16 + 
	13 17   #ifdef USE_OVERLAY
	14 18   	float4		overlayColor	: OVERLAY_COLOR;
	15 19   #endif
	16 20   
	17 21   #ifdef TINTED_ALPHA_TEST
	        ...
	27 31   // Per-pixel color data passed through the pixel shader.
	28 32   struct GeometryShaderOutput
	29 33   {
	30 34   	float4		pos				: SV_POSITION;
	31 35   	float4		light			: LIGHT;
	   36 + 	float4		fogColor		: FOG_COLOR;
	   37 + 
	   38 + #ifdef GLINT
	   39 + 	float4		layerUV			: GLINT_UVS;
	32    - 	float4		fogColor		: FOG_COLOR;
	   40 + #endif
	33 41   
	   42 + #ifdef COLOR_BASED
	34    - #ifdef GLINT
	   43 + 	float4		color			: COLOR;
	35    - 	float4		layerUV			: GLINT_UVS;
	36 44   #endif
	37 45   
	38 46   #ifdef USE_OVERLAY
	39 47   	float4		overlayColor	: OVERLAY_COLOR;
	40 48   #endif
	        ...
	66 74   #endif
	67 75   #ifdef INSTANCEDSTEREO
	68 76   		output.renTarget_id = i;
	69 77   #endif
	70 78   		output.light			= input[j].light;
	   79 + 		output.fogColor			= input[j].fogColor;
	   80 + #ifdef COLOR_BASED
	   81 + 		output.color			= input[j].color;
	71    - 		output.fogColor			= input[j].fogColor;
	   82 + #endif
	72 83   #ifdef USE_OVERLAY
	73 84   		output.overlayColor		= input[j].overlayColor;
	74 85   #endif
	75 86   #ifdef TINTED_ALPHA_TEST
	76 87   		output.alphaTestMultiplier = input[j].alphaTestMultiplier;
	        ...
	        '''
Changed file "entity.vertex.hlsl":
	Total line: 174 (+13, -6)
	          '''
	          ...
	 26  26   	// there is some alignment issue on the Windows Phone 1320 that causes the position
	 27  27   	// to get corrupted if this is two floats and last in the struct memory wise
	 28  28   	float4 layerUV : GLINT_UVS;
	 29  29   #endif
	 30  30   
	     31 + #ifdef COLOR_BASED
	     32 + 	float4 color : COLOR;
	     33 + #endif
	     34 + 
	 31  35   #ifdef USE_OVERLAY
	 32  36   	float4 overlayColor : OVERLAY_COLOR;
	 33  37   #endif
	 34  38   
	 35  39   #ifdef TINTED_ALPHA_TEST
	          ...
	125 129   	float4 normal = TransformRGBA8_SNORM(VSInput.normal);
	126 130   
	127 131   #ifdef USE_SKINNING
	128 132   	float L = lightIntensity(BONES[VSInput.boneId], float4(VSInput.position, 1), normal);
	129 133   #elif !defined(INSTANCEDSTEREO)
	    134 + 	float L = lightIntensity(WORLD, float4(VSInput.position, 1), normal);
	    135 + #else
	    136 + 	float L = lightIntensity(WORLD_STEREO, float4(VSInput.position, 1), normal);
	130     - 	float L = lightIntensity(WORLD, float4(VSInput.position, 1), normal);
	    137 + #endif
	    138 + 
	    139 + #ifdef USE_OVERLAY
	    140 + 	L += OVERLAY_COLOR.a * 0.35;
	131     - #else
	132     - 	float L = lightIntensity(WORLD_STEREO, float4(VSInput.position, 1), normal);
	133 141   #endif
	134 142   
	    143 + #ifdef TINTED_ALPHA_TEST
	135     - #ifdef USE_OVERLAY
	136     - 	L += OVERLAY_COLOR.a * 0.35;
	    144 + 	PSInput.alphaTestMultiplier = OVERLAY_COLOR.aaaa;
	137     - 	PSInput.overlayColor = OVERLAY_COLOR;
	138 145   #endif
	    146 + 
	    147 + 	PSInput.light = float4(L.xxx * TILE_LIGHT_COLOR.rgb, 1.0);
	139 148   
	    149 + #ifdef COLOR_BASED
	140     - #ifdef TINTED_ALPHA_TEST
	    150 + 	PSInput.color = VSInput.color;
	141     - 	PSInput.alphaTestMultiplier = OVERLAY_COLOR.aaaa;
	142 151   #endif
	143     - 
	144     - 	PSInput.light = float4(L.xxx * TILE_LIGHT_COLOR.rgb, 1.0);
	145 152   
	    153 + #ifdef USE_OVERLAY
	146     - #ifdef COLOR_BASED
	    154 + 	PSInput.overlayColor = OVERLAY_COLOR;
	147     - 	PSInput.light *= VSInput.color;
	148 155   #endif
	149 156   
	150 157   #if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	151 158   	PSInput.uv = VSInput.texCoords;
	152 159   #endif
	          ...
	          '''