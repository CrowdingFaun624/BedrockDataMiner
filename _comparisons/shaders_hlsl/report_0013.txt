Difference of "shaders" between "1.2.3" and "1.2.5.0" (beta of "1.2.5").

Changed file "cloud.vertex.hlsl":
	Total line: 54 (+17, -9)
	        '''
	        ...
	 5  5       float3 position : POSITION;
	 6  6       float4 color : COLOR;
	 7  7   #ifdef INSTANCEDSTEREO
	 8  8   	uint instanceID : SV_InstanceID;
	 9  9   #endif
	   10 + 
	   11 + };
	   12 + 
	   13 + 
	   14 + struct PS_Input
	   15 + {
	   16 +     float4 position : SV_Position;
	   17 +     float4 color : COLOR;
	   18 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   19 + 	uint instanceID : SV_InstanceID;
	   20 + #endif
	   21 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   22 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	   23 + #endif
	10 24   };
	11    - 
	12 25   
	13    - struct PS_Input
	14    - {
	15    -     float4 position : SV_Position;
	16    -     float4 color : COLOR;
	   26 + static const float fogNear = 0.9;
	   27 + 
	   28 + static const float3 inverseLightDirection = float3( 0.62, 0.78, 0.0 );
	   29 + static const float ambient = 0.7;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19    - #endif
	20    - };
	21 30   
	   31 + void main( in VS_Input VSInput, out PS_Input PSInput )
	   32 + {
	   33 + #ifdef INSTANCEDSTEREO
	   34 + 	int i = VSInput.instanceID;
	   35 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   36 + 	float3 worldPos = mul(WORLD_STEREO, float4(VSInput.position, 1));
	   37 + #else
	   38 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	   39 + 	float3 worldPos = mul(WORLD, float4(VSInput.position, 1));
	   40 + #endif
	   41 + #ifdef GEOMETRY_INSTANCEDSTEREO
	22    - static const float fogNear = 0.9;
	23    - 
	24    - static const float3 inverseLightDirection = float3( 0.62, 0.78, 0.0 );
	25    - static const float ambient = 0.7;
	26    - 
	27    - void main( in VS_Input VSInput, out PS_Input PSInput )
	28    - {
	29    - #ifdef INSTANCEDSTEREO
	30    - 	int i = VSInput.instanceID;
	31    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   42 + 	PSInput.instanceID = VSInput.instanceID;
	32    - 	PSInput.instanceID = i;
	33    - 	float3 worldPos = mul(WORLD_STEREO, float4(VSInput.position, 1));
	   43 + #endif 
	   44 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   45 + 	PSInput.renTarget_id = VSInput.instanceID;
	34    - #else
	35    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	36    - 	float3 worldPos = mul(WORLD, float4(VSInput.position, 1));
	37 46   #endif
	38    - 
	39 47       PSInput.color = VSInput.color * CURRENT_COLOR;
	40 48   
	41 49   	float depth = length(worldPos) / RENDER_DISTANCE;
	42 50   
	43 51       float fog = max( depth - fogNear, 0.0 );
	        ...
	        '''
Changed file "color.vertex.hlsl":
	Total line: 41 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float4 color : COLOR;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28       PSInput.color = VSInput.color;
	26 29   #ifdef INSTANCEDSTEREO
	27 30   	int i = VSInput.instanceID;
	   31 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   32 + #else
	   33 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	28    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   34 + #endif
	   35 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   36 + 	PSInput.instanceID = VSInput.instanceID;
	29    - 	PSInput.instanceID = i;
	   37 + #endif 
	   38 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   39 + 	PSInput.renTarget_id = VSInput.instanceID;
	30    - #else
	31    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	32 40   #endif
	33 41   }
	        '''
Changed file "color_uv.vertex.hlsl":
	Total line: 82 (+23, -15)
	        '''
	        ...
	23 23   
	24 24   #ifdef GLINT
	25 25   	float2 layer1UV : UV_1;
	26 26   	float2 layer2UV : UV_2;
	27 27   #endif
	   28 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   29 + 	uint instanceID : SV_InstanceID;
	   30 + #endif
	   31 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   32 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	   33 + #endif
	   34 + };
	   35 + 
	   36 + #ifdef GLINT
	   37 + float2 calculateLayerUV(float2 origUV, float offset, float rotation) {
	   38 + 	float2 uv = origUV;
	   39 + 	uv -= 0.5;
	   40 + 	float rsin = sin(rotation);
	   41 + 	float rcos = cos(rotation);
	   42 + 	uv = mul(uv, float2x2(rcos, -rsin, rsin, rcos));
	   43 + 	uv.x += offset;
	   44 + 	uv += 0.5;
	   45 + 
	   46 + 	return uv * GLINT_UV_SCALE;
	   47 + }
	28    - #ifdef INSTANCEDSTEREO
	29    - 	uint instanceID : SV_InstanceID;
	30 48   #endif
	   49 + 
	31    - };
	32 50   
	33    - #ifdef GLINT
	34    - float2 calculateLayerUV(float2 origUV, float offset, float rotation) {
	35    - 	float2 uv = origUV;
	36    - 	uv -= 0.5;
	   51 + void main( in VS_Input VSInput, out PS_Input PSInput )
	   52 + {
	   53 +     PSInput.color = VSInput.color;
	   54 + #ifdef INSTANCEDSTEREO
	   55 + 	int i = VSInput.instanceID;
	   56 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   57 + #else
	   58 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	37    - 	float rsin = sin(rotation);
	38    - 	float rcos = cos(rotation);
	39    - 	uv = mul(uv, float2x2(rcos, -rsin, rsin, rcos));
	40    - 	uv.x += offset;
	41    - 	uv += 0.5;
	42    - 
	43    - 	return uv * GLINT_UV_SCALE;
	44    - }
	45 59   #endif
	   60 +     PSInput.texCoords = VSInput.texCoords;
	46    - 
	47 61   
	   62 + #ifdef ENABLE_FOG
	   63 + 	//fog
	48    - void main( in VS_Input VSInput, out PS_Input PSInput )
	49    - {
	   64 + 	PSInput.fogColor.rgb = FOG_COLOR.rgb;
	50    -     PSInput.color = VSInput.color;
	51    - #ifdef INSTANCEDSTEREO
	   65 + 	PSInput.fogColor.a = clamp(((PSInput.position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	   66 + #endif
	   67 + 
	   68 + #ifdef USE_LIGHTING
	   69 + 	PSInput.color *= float4(TILE_LIGHT_COLOR.rgb, 1.0);
	52    - 	int i = VSInput.instanceID;
	53    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	54    - 	PSInput.instanceID = i;
	55    - #else
	56    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	57 70   #endif
	58    -     PSInput.texCoords = VSInput.texCoords;
	59 71   
	   72 + #ifdef GLINT
	60    - #ifdef ENABLE_FOG
	61    - 	//fog
	   73 + 	PSInput.layer1UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.x, UV_ROTATION.x);
	   74 + 	PSInput.layer2UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.y, UV_ROTATION.y);
	62    - 	PSInput.fogColor.rgb = FOG_COLOR.rgb;
	63    - 	PSInput.fogColor.a = clamp(((PSInput.position.z / RENDER_DISTANCE) - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
	64 75   #endif
	65    - 
	   76 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   77 + 	PSInput.instanceID = VSInput.instanceID;
	   78 + #endif 
	66    - #ifdef USE_LIGHTING
	67    - 	PSInput.color *= float4(TILE_LIGHT_COLOR.rgb, 1.0);
	68    - #endif
	69    - 
	70    - #ifdef GLINT
	   79 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   80 + 	PSInput.renTarget_id = VSInput.instanceID;
	71    - 	PSInput.layer1UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.x, UV_ROTATION.x);
	72    - 	PSInput.layer2UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.y, UV_ROTATION.y);
	73 81   #endif
	74 82   }
	        '''
Changed file "end_portal.vertex.hlsl":
	Total line: 124 (+16, -8)
	          '''
	          ...
	 27  27   		#ifdef FOG
	 28  28   			float4 fogColor : FOG_COLOR;
	 29  29   		#endif
	 30  30   	#endif
	 31  31   
	     32 + 	#ifdef GEOMETRY_INSTANCEDSTEREO
	     33 + 		uint instanceID : SV_InstanceID;
	     34 + 	#endif
	     35 + 	#ifdef VERTEXSHADER_INSTANCEDSTEREO
	     36 + 		uint renTarget_id : SV_RenderTargetArrayIndex;
	     37 + 	#endif
	     38 + };
	     39 + 
	     40 + static const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
	     41 + 
	 32     - 	#ifdef INSTANCEDSTEREO
	 33     - 		uint instanceID : SV_InstanceID;
	 34     - 	#endif
	     42 + static const float MAX_LAYER_DEPTH = 32.0;
	 35     - };
	 36  43   
	     44 + void main(in VS_Input VSInput, out PS_Input PSInput) {
	     45 + 	///// Vertex Transformation
	     46 + 	float3 worldPos = (VSInput.position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	     47 + 	float3 viewRay = worldPos.xyz;
	 37     - static const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
	 38  48   
	     49 + 	#ifdef INSTANCEDSTEREO
	     50 + 		int i = VSInput.instanceID;
	 39     - static const float MAX_LAYER_DEPTH = 32.0;
	 40  51   
	 41     - void main(in VS_Input VSInput, out PS_Input PSInput) {
	 42     - 	///// Vertex Transformation
	     52 + 		PSInput.position = mul(WORLDVIEW_STEREO[i], float4(worldPos, 1 ));
	     53 + 		PSInput.position = mul(PROJ_STEREO[i], PSInput.position);
	 43     - 	float3 worldPos = (VSInput.position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	 44     - 	float3 viewRay = worldPos.xyz;
	 45  54   
	     55 + 		viewRay -= WORLDVIEW_STEREO[i]._m30_m31_m32;
	 46     - 	#ifdef INSTANCEDSTEREO
	 47     - 		int i = VSInput.instanceID;
	 48  56   
	     57 + 	#else
	     58 + 		PSInput.position = mul(WORLDVIEW, float4( worldPos, 1 ));
	     59 + 		PSInput.position = mul(PROJ, PSInput.position);
	 49     - 		PSInput.position = mul(WORLDVIEW_STEREO[i], float4(worldPos, 1 ));
	 50     - 		PSInput.position = mul(PROJ_STEREO[i], PSInput.position);
	     60 + 	#endif
	 51     - 
	 52     - 		viewRay -= WORLDVIEW_STEREO[i]._m30_m31_m32;
	     61 + 	#ifdef GEOMETRY_INSTANCEDSTEREO
	     62 + 		PSInput.instanceID = VSInput.instanceID;
	     63 + 	#endif 
	     64 + 	#ifdef VERTEXSHADER_INSTANCEDSTEREO
	     65 + 		PSInput.renTarget_id = VSInput.instanceID;
	 53     - 
	 54     - 		PSInput.instanceID = i;
	 55     - 	#else
	 56     - 		PSInput.position = mul(WORLDVIEW, float4( worldPos, 1 ));
	 57     - 		PSInput.position = mul(PROJ, PSInput.position);
	 58  66   	#endif
	 59  67   
	 60  68   	#ifndef BYPASS_PIXEL_SHADER
	 61  69   		PSInput.encodedPlane = VSInput.color;
	 62  70   		PSInput.colorLookupUV = VSInput.uv0;
	          ...
	          '''
Changed file "entity.vertex.hlsl":
	Total line: 156 (+8, -0)
	          '''
	          ...
	 35  35   	float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	 36  36   #endif
	 37  37   
	 38  38   	float2 uv : TEXCOORD_0_FB_MSAA;
	 39  39   	
	     40 + #ifdef GEOMETRY_INSTANCEDSTEREO
	     41 + 	uint instanceID : SV_InstanceID;
	     42 + #endif
	     43 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	     44 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	 40     - #ifdef INSTANCEDSTEREO
	 41     - 	uint instanceID : SV_InstanceID;
	 42  45   #endif
	 43  46   };
	 44  47   
	 45  48   static const float AMBIENT = 0.45;
	 46  49   
	          ...
	102 105   #endif
	103 106   
	104 107   void main(in VS_Input VSInput, out PS_Input PSInput) {
	105 108   #ifdef INSTANCEDSTEREO
	106 109   	int i = VSInput.instanceID;
	    110 + 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	    111 + #else
	    112 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	107     - 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	    113 + #endif
	    114 + #ifdef GEOMETRY_INSTANCEDSTEREO
	    115 + 	PSInput.instanceID = VSInput.instanceID;
	108     - 	PSInput.instanceID = i;
	    116 + #endif 
	    117 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	    118 + 	PSInput.renTarget_id = VSInput.instanceID;
	109     - #else
	110     - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	111 119   #endif
	112 120   	float4 normal = TransformRGBA8_SNORM(VSInput.normal);
	113 121   
	114 122   	float L = lightIntensity(float4(VSInput.position, 1), normal);
	115 123   
	          ...
	          '''
Changed file "normal_as_color.vertex.hlsl":
	Total line: 42 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float4 color : COLOR;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28   #ifdef INSTANCEDSTEREO
	26 29   	int i = VSInput.instanceID;
	   30 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   31 + #else
	   32 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	27    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   33 + #endif
	   34 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   35 + 	PSInput.instanceID = VSInput.instanceID;
	28    - 	PSInput.instanceID = i;
	   36 + #endif 
	   37 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   38 + 	PSInput.renTarget_id = VSInput.instanceID;
	29    - #else
	30    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	31 39   #endif
	32 40       PSInput.color.rgb = ( VSInput.normal.xyz / 2 ) + 0.5;
	33 41       PSInput.color.a = 1.0;
	34 42   }
	        '''
Changed file "position.vertex.hlsl":
	Total line: 38 (+8, -0)
	        '''
	        ...
	10 10   
	11 11   
	12 12   struct PS_Input
	13 13   {
	14 14   	float4 position : SV_Position;
	   15 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   16 + 	uint instanceID : SV_InstanceID;
	   17 + #endif
	   18 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   19 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	15    - #ifdef INSTANCEDSTEREO
	16    - 	uint instanceID : SV_InstanceID;
	17 20   #endif
	18 21   };
	19 22   
	20 23   
	21 24   void main( in VS_Input VSInput, out PS_Input PSInput )
	22 25   {
	23 26   #ifdef INSTANCEDSTEREO
	24 27   	int i = VSInput.instanceID;
	   28 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   29 + #else
	   30 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	25    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   31 + #endif
	   32 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   33 + 	PSInput.instanceID = VSInput.instanceID;
	26    - 	PSInput.instanceID = i;
	   34 + #endif 
	   35 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   36 + 	PSInput.renTarget_id = VSInput.instanceID;
	27    - #else
	28    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	29 37   #endif
	30 38   }
	        '''
Changed file "rain_snow.vertex.hlsl":
	Total line: 97 (+8, -0)
	        '''
	        ...
	13 13   	float4 position : SV_Position;
	14 14   	float2 uv : TEXCOORD_0;
	15 15   	float4 color : COLOR;
	16 16   	float4 worldPosition : TEXCOORD_1;
	17 17   	float4 fogColor : FOG_COLOR;
	   18 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   19 + 	uint instanceID : SV_InstanceID;
	   20 + #endif
	   21 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   22 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	18    - #ifdef INSTANCEDSTEREO
	19    - 	uint instanceID : SV_InstanceID;
	20 23   #endif
	21 24   };
	22 25   
	23 26   void main(in VS_Input VSInput, out PS_Input PSInput)
	24 27   {
	        ...
	45 48   	float4 worldPositionTop = float4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0f);
	46 49   
	47 50   	// get projected positions of top and bottom of particle, and top of particle in previous frame
	48 51   #ifdef INSTANCEDSTEREO
	49 52   	int i = VSInput.instanceID;
	   53 + 	float4 bottom = mul(WORLDVIEWPROJ_STEREO[i], worldPositionBottom);
	   54 + 	float4 top = mul(WORLDVIEWPROJ_STEREO[i], worldPositionTop);
	   55 + #else
	   56 + 	float4 bottom = mul(WORLDVIEWPROJ, worldPositionBottom);
	   57 + 	float4 top = mul(WORLDVIEWPROJ, worldPositionTop);
	50    - 	float4 bottom = mul(WORLDVIEWPROJ_STEREO[i], worldPositionBottom);
	51    - 	float4 top = mul(WORLDVIEWPROJ_STEREO[i], worldPositionTop);
	   58 + #endif
	   59 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   60 + 	PSInput.instanceID = VSInput.instanceID;
	   61 + #endif 
	   62 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   63 + 	PSInput.renTarget_id = VSInput.instanceID;
	52    - 	PSInput.instanceID = i;
	53    - #else
	54    - 	float4 bottom = mul(WORLDVIEWPROJ, worldPositionBottom);
	55    - 	float4 top = mul(WORLDVIEWPROJ, worldPositionTop);
	56 64   #endif
	57 65   	// get 2d vector in screenspace between top and bottom of particle
	58 66   	float2 dir = (top.xy/top.w) - (bottom.xy/bottom.w);
	59 67   	
	60 68   	// get 2d vector perpendicular to velocity
	        ...
	        '''
Changed file "renderchunk.vertex.hlsl":
	Total line: 137 (+10, -3)
	          '''
	          ...
	 25  25   #endif
	 26  26   
	 27  27   #ifdef FOG
	 28  28   	float4 fogColor : FOG_COLOR;
	 29  29   #endif
	     30 + #ifdef GEOMETRY_INSTANCEDSTEREO
	     31 + 	uint instanceID : SV_InstanceID;
	     32 + #endif
	     33 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	     34 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	 30     - #ifdef INSTANCEDSTEREO
	 31     - 	uint instanceID : SV_InstanceID;
	 32  35   #endif
	 33  36   };
	 34  37   
	 35  38   
	 36  39   static const float rA = 1.0;
	          ...
	 49  52   
	 50  53   #ifdef AS_ENTITY_RENDERER
	 51  54   	#ifdef INSTANCEDSTEREO
	 52  55   		int i = VSInput.instanceID;
	 53  56   		PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	 54     - 		PSInput.instanceID = i;
	 55  57   	#else
	 56  58   		PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	 57  59   	#endif
	 58  60   		float3 worldPos = PSInput.position;
	 59  61   #else
	          ...
	 61  63   	
	 62  64   		// Transform to view space before projection instead of all at once to avoid floating point errors
	 63  65   		// Not required for entities because they are already offset by camera translation before rendering
	 64  66   		// World position here is calculated above and can get huge
	 65  67   	#ifdef INSTANCEDSTEREO
	     68 + 		int i = VSInput.instanceID;
	     69 + 	
	     70 + 		PSInput.position = mul(WORLDVIEW_STEREO[i], float4(worldPos, 1 ));
	     71 + 		PSInput.position = mul(PROJ_STEREO[i], PSInput.position);
	 66     - 		int i = VSInput.instanceID;
	 67  72   	
	     73 + 	#else
	     74 + 		PSInput.position = mul(WORLDVIEW, float4( worldPos, 1 ));
	     75 + 		PSInput.position = mul(PROJ, PSInput.position);
	 68     - 		PSInput.position = mul(WORLDVIEW_STEREO[i], float4(worldPos, 1 ));
	 69     - 		PSInput.position = mul(PROJ_STEREO[i], PSInput.position);
	     76 + 	#endif
	 70     - 	
	     77 + 
	     78 + #endif
	     79 + #ifdef GEOMETRY_INSTANCEDSTEREO
	     80 + 		PSInput.instanceID = VSInput.instanceID;
	     81 + #endif 
	 71     - 		PSInput.instanceID = i;
	 72     - 	#else
	 73     - 		PSInput.position = mul(WORLDVIEW, float4( worldPos, 1 ));
	 74     - 		PSInput.position = mul(PROJ, PSInput.position);
	 75     - 	#endif
	     82 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	     83 + 		PSInput.renTarget_id = VSInput.instanceID;
	 76  84   #endif
	 77     - 
	 78  85   ///// find distance from the camera
	 79  86   
	 80  87   #if defined(FOG) || defined(NEAR_WATER)
	 81  88   	#ifdef FANCY
	 82  89   		float3 relPos = -worldPos;
	          ...
	          '''
Changed file "selection_box.vertex.hlsl":
	Total line: 41 (+12, -4)
	        '''
	        ...
	10 10   
	11 11   
	12 12   struct PS_Input
	13 13   {
	14 14   	float4 position : SV_Position;
	   15 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   16 + 	uint instanceID : SV_InstanceID;
	   17 + #endif
	   18 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   19 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	   20 + #endif
	   21 + };
	   22 + 
	   23 + 
	   24 + void main( in VS_Input VSInput, out PS_Input PSInput )
	   25 + {
	15 26   #ifdef INSTANCEDSTEREO
	16    - 	uint instanceID : SV_InstanceID;
	17    - #endif
	   27 + 	int i = VSInput.instanceID;
	   28 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   29 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   30 +     PSInput.instanceID = i;
	   31 + #endif 
	   32 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	18    - };
	19    - 
	20    - 
	21    - void main( in VS_Input VSInput, out PS_Input PSInput )
	22    - {
	23    - #ifdef INSTANCEDSTEREO
	24    - 	int i = VSInput.instanceID;
	25    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   33 + 	PSInput.renTarget_id = i;
	26    - 	PSInput.instanceID = i;
	   34 + #endif    
	27 35   #else
	28 36   	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	29 37   #endif
	30 38   
	31 39       //this is to make it come closer to the camera and avoid z-fighting
	        ...
	        '''
Changed file "sky.vertex.hlsl":
	Total line: 42 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float4 color : COLOR;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28   #ifdef INSTANCEDSTEREO
	26 29   	int i = VSInput.instanceID;
	   30 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   31 + #else
	   32 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	27    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   33 + #endif
	   34 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   35 + 	PSInput.instanceID = VSInput.instanceID;
	28    - 	PSInput.instanceID = i;
	   36 + #endif 
	   37 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   38 + 	PSInput.renTarget_id = VSInput.instanceID;
	29    - #else
	30    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	31 39   #endif
	32 40       PSInput.color = lerp( CURRENT_COLOR, FOG_COLOR, VSInput.color.r );
	33 41   
	34 42   }
	        '''
Changed file "texture_ccolor.fragment.hlsl":
	Total line: 40 (+9, -0)
	        '''
	        ...
	25 25       {
	26 26           discard;
	27 27       }
	28 28   #endif
	29 29   
	   30 + #ifdef IGNORE_CURRENTCOLOR
	   31 +     PSOutput.color = diffuse;
	   32 + #else
	   33 +     PSOutput.color = CURRENT_COLOR * diffuse;
	   34 + #endif
	   35 + 
	   36 + #ifdef WINDOWSMR_MAGICALPHA
	   37 +     // Set the magic MR value alpha value so that this content pops over layers
	   38 +     PSOutput.color.a = 133.0f / 255.0f;
	30    -     PSOutput.color = CURRENT_COLOR * diffuse;
	   39 + #endif
	31 40   }
	        '''
Changed file "util.fxh":
	Total line: 45 (+4, -13)
	        '''
	        ...
	 3  3   {
	 4  4   	// Texture antialiasing
	 5  5   	//
	 6  6   	// The texture coordinates are modified so that the bilinear filter will be one pixel width wide instead of one texel width. 
	 7  7   
	 8    - 	// Get the UV deltas
	 9    - 	float2 dUVdx = ddx(uv) * TEXTURE_DIMENSIONS.xy;
	10    - 	float2 dUVdy = ddy(uv) * TEXTURE_DIMENSIONS.xy;
	11    - 	float2 dU = float2(dUVdx.x, dUVdy.x);
	12    - 	float2 dV = float2(dUVdx.y, dUVdy.y);
	13    - 
	14    - 	float duUV = sqrt(dot(dU, dU));
	    8 + 	if (tex.CalculateLevelOfDetailUnclamped(TextureSampler0, uv) < -0.5f)
	    9 + 	{
	   10 + 		// Get the UV deltas
	   11 + 		float2 dUVdx = ddx(uv) * TEXTURE_DIMENSIONS.xy;
	   12 + 		float2 dUVdy = ddy(uv) * TEXTURE_DIMENSIONS.xy;
	   13 + 		float2 dU = float2(dUVdx.x, dUVdy.x);
	   14 + 		float2 dV = float2(dUVdx.y, dUVdy.y);
	15    - 	float dvUV = sqrt(dot(dV, dV));
	16    - 
	17    - 	// Determine mip map LOD
	18    -     float d = max(dot(dUVdx, dUVdx), dot(dUVdy, dUVdy));
	19    - 	float mipLevel = .5f * log2(d);
	20    - 	mipLevel = mipLevel + .5f;	// Mip bias to reduce aliasing
	21    - 	mipLevel = clamp(mipLevel, 0.0f, TEXTURE_DIMENSIONS.z);
	22 15   
	23    - 	float2 uvModified; 
	24    - 	if( mipLevel >= 1.0f)
	25    - 	{
	26    - 		uvModified = uv;
	   16 + 		float duUV = sqrt(dot(dU, dU));
	   17 + 		float dvUV = sqrt(dot(dV, dV));
	   18 + 
	27    - 	}
	28    - 	else
	29    - 	{
	30 19   		// First scale the uv so that each texel has a uv range of [0,1]
	31 20   		float2 texelUV = frac(uv * TEXTURE_DIMENSIONS.xy);
	32 21   
	33 22   		// Initially set uvModified to the floor of the texel position
	   23 + 		float2 uvModified = (uv * TEXTURE_DIMENSIONS.xy) - texelUV;
	34    - 		uvModified = (uv * TEXTURE_DIMENSIONS.xy) - texelUV;
	35 24   
	36 25   		// Modify the texelUV to push the uvs toward the edges.
	37 26   		//          |                 |       |                   |
	38 27   		//          |         _/      |       |           /       |
	39 28   		//  Change  | U     _/        |  to   | U     ___/        |
	        ...
	44 33   		float scalerV = 1.0f / (dvUV);
	45 34   		float2 scaler = max(float2(scalerU, scalerV), 1.0f);
	46 35   		texelUV = clamp(texelUV * scaler, 0.0f, .5f) + clamp(texelUV*scaler - (scaler - .5f), 0.0f, .5f);
	47 36   		uvModified += texelUV;
	48 37   		uvModified /= TEXTURE_DIMENSIONS.xy;
	   38 + 
	   39 + 		// Update uv
	   40 + 		uv = uvModified;
	49 41   	}
	50    - 	float4 diffuse = tex.Sample(TextureSampler0, uvModified);
	51    - 	return diffuse;
	52 42   
	   43 + 	return tex.Sample(TextureSampler0, uv);
	53 44   }
	54 45   
	        '''
Changed file "uv.vertex.hlsl":
	Total line: 41 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float2 uv : TEXCOORD_0;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28       PSInput.uv = VSInput.uv;
	26 29   #ifdef INSTANCEDSTEREO
	27 30   	int i = VSInput.instanceID;
	   31 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   32 + #else
	   33 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	28    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   34 + #endif
	   35 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   36 + 	PSInput.instanceID = VSInput.instanceID;
	29    - 	PSInput.instanceID = i;
	   37 + #endif 
	   38 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   39 + 	PSInput.renTarget_id = VSInput.instanceID;
	30    - #else
	31    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	32 40   #endif
	33 41   }
	        '''
Changed file "uv_blend.vertex.hlsl":
	Total line: 45 (+9, -0)
	        '''
	        ...
	 6  6   	float2 uv : TEXCOORD_0;
	 7  7   	float2 uv1 : TEXCOORD_1;
	 8  8   #ifdef INSTANCEDSTEREO
	 9  9   	uint instanceID : SV_InstanceID;
	10 10   #endif
	   11 + 
	11 12   };
	12 13   
	13 14   
	14 15   struct PS_Input
	15 16   {
	16 17   	float4 position : SV_Position;
	17 18   	float2 uv : TEXCOORD_0;
	18 19   	float2 uv1 : TEXCOORD_1;
	   20 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   21 + 	uint instanceID : SV_InstanceID;
	   22 + #endif
	   23 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   24 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	19    - #ifdef INSTANCEDSTEREO
	20    - 	uint instanceID : SV_InstanceID;
	21 25   #endif
	22 26   };
	23 27   
	24 28   
	25 29   void main(in VS_Input VSInput, out PS_Input PSInput)
	26 30   {
	27 31   	PSInput.uv = VSInput.uv;
	28 32   	PSInput.uv1 = VSInput.uv1;
	29 33   #ifdef INSTANCEDSTEREO
	30 34   	int i = VSInput.instanceID;
	   35 + 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	   36 + #else
	   37 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	31    - 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	   38 + #endif
	   39 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   40 + 	PSInput.instanceID = VSInput.instanceID;
	32    - 	PSInput.instanceID = i;
	   41 + #endif 
	   42 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   43 + 	PSInput.renTarget_id = VSInput.instanceID;
	33    - #else
	34    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	35 44   #endif
	36 45   }
	        '''
Changed file "uv_blend_flipbook.vertex.hlsl":
	Total line: 43 (+8, -0)
	        '''
	        ...
	11 11   
	12 12   struct PS_Input {
	13 13   	float4 position : SV_Position;
	14 14   	float2 uv : TEXCOORD_0;
	15 15   	float2 uv1 : TEXCOORD_1;
	   16 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   17 + 	uint instanceID : SV_InstanceID;
	   18 + #endif
	   19 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   20 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	16    - #ifdef INSTANCEDSTEREO
	17    - 	uint instanceID : SV_InstanceID;
	18 21   #endif
	19 22   };
	20 23   
	21 24   
	22 25   void main(in VS_Input VSInput, out PS_Input PSInput) {
	        ...
	25 28   	PSInput.uv1 = VSInput.uv;
	26 29   	PSInput.uv1.y += V_BLEND_OFFSET;
	27 30   
	28 31   #ifdef INSTANCEDSTEREO
	29 32   	int i = VSInput.instanceID;
	   33 + 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	   34 + #else
	   35 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	30    - 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	   36 + #endif
	   37 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   38 + 	PSInput.instanceID = VSInput.instanceID;
	31    - 	PSInput.instanceID = i;
	   39 + #endif 
	   40 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   41 + 	PSInput.renTarget_id = VSInput.instanceID;
	32    - #else
	33    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	34 42   #endif
	35 43   }
	        '''
Changed file "uv_repeat.vertex.hlsl":
	Total line: 43 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float2 uv : TEXCOORD_0;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 +     uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    -     uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	        ...
	25 28       float4 transformedUV = mul(UV_TRANSFORM, float4(VSInput.uv, 0, 1));
	26 29       PSInput.uv = transformedUV.xy;
	27 30   
	28 31   #ifdef INSTANCEDSTEREO
	29 32       int i = VSInput.instanceID;
	   33 +     PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   34 + #else
	   35 +     PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	30    -     PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   36 + #endif
	   37 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   38 + 	PSInput.instanceID = VSInput.instanceID;
	31    -     PSInput.instanceID = i;
	   39 + #endif 
	   40 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   41 + 	PSInput.renTarget_id = VSInput.instanceID;
	32    - #else
	33    -     PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	34 42   #endif
	35 43   }
	        '''
Changed file "uv_scale.vertex.hlsl":
	Total line: 42 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float2 uv : TEXCOORD_0;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28       PSInput.uv = VSInput.uv * GLINT_UV_SCALE.xy;
	26 29   
	27 30   #ifdef INSTANCEDSTEREO
	28 31   	int i = VSInput.instanceID;
	   32 + 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   33 + #else
	   34 + 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	29    - 	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	   35 + #endif
	   36 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   37 + 	PSInput.instanceID = VSInput.instanceID;
	30    - 	PSInput.instanceID = i;
	   38 + #endif 
	   39 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   40 + 	PSInput.renTarget_id = VSInput.instanceID;
	31    - #else
	32    - 	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	33 41   #endif
	34 42   }
	        '''
Changed file "uv_selection_overlay.vertex.hlsl":
	Total line: 43 (+8, -0)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float2 uv : TEXCOORD_0;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    - 	uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	21 24   
	22 25   
	23 26   void main( in VS_Input VSInput, out PS_Input PSInput )
	24 27   {
	25 28       PSInput.uv = VSInput.uv;
	26 29   #ifdef INSTANCEDSTEREO
	27 30   	int i = VSInput.instanceID;
	   31 + 	float4 pos = mul(WORLDVIEW_STEREO[i], float4(VSInput.position, 1));
	   32 + 	PSInput.position = mul(PROJ_STEREO[i], pos);
	   33 + #else
	   34 + 	float4 pos = mul(WORLDVIEW, float4(VSInput.position, 1));
	   35 + 	PSInput.position = mul(PROJ, pos);
	28    - 	float4 pos = mul(WORLDVIEW_STEREO[i], float4(VSInput.position, 1));
	29    - 	PSInput.position = mul(PROJ_STEREO[i], pos);
	   36 + #endif
	   37 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   38 + 	PSInput.instanceID = VSInput.instanceID;
	   39 + #endif 
	   40 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   41 + 	PSInput.renTarget_id = VSInput.instanceID;
	30    - 	PSInput.instanceID = i;
	31    - #else
	32    - 	float4 pos = mul(WORLDVIEW, float4(VSInput.position, 1));
	33    - 	PSInput.position = mul(PROJ, pos);
	34 42   #endif
	35 43   }
	        '''
Changed file "uv_time_rotate.vertex.hlsl":
	Total line: 42 (+10, -2)
	        '''
	        ...
	12 12   
	13 13   struct PS_Input
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float2 uv : TEXCOORD_0;
	   17 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   18 + 	uint instanceID : SV_InstanceID;
	   19 + #endif
	   20 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	   21 + 	uint renTarget_id : SV_RenderTargetArrayIndex;
	17    - #ifdef INSTANCEDSTEREO
	18    -     uint instanceID : SV_InstanceID;
	19 22   #endif
	20 23   };
	   24 + 
	21 25   
	   26 + void main( in VS_Input VSInput, out PS_Input PSInput )
	   27 + {
	22 28   
	   29 +     PSInput.uv = VSInput.uv;
	   30 + #ifdef INSTANCEDSTEREO
	   31 +     int i = VSInput.instanceID;
	   32 +     PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], mul(CUBE_MAP_ROTATION, float4( VSInput.position, 1 )));
	   33 + #ifdef GEOMETRY_INSTANCEDSTEREO
	   34 +     PSInput.instanceID = i;
	23    - void main( in VS_Input VSInput, out PS_Input PSInput )
	24    - {
	25    - 
	26    -     PSInput.uv = VSInput.uv;
	   35 + #endif 
	   36 + #ifdef VERTEXSHADER_INSTANCEDSTEREO
	27    - #ifdef INSTANCEDSTEREO
	28    -     int i = VSInput.instanceID;
	29    -     PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], mul(CUBE_MAP_ROTATION, float4( VSInput.position, 1 )));
	   37 + 	PSInput.renTarget_id = i;
	30    -     PSInput.instanceID = i;
	   38 + #endif    
	31 39   #else
	32 40       PSInput.position = mul(WORLDVIEWPROJ, mul(CUBE_MAP_ROTATION, float4(VSInput.position, 1)));
	33 41   #endif
	34 42   }
	        '''