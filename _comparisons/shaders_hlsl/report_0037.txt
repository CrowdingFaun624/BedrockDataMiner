Difference of "shaders" between "1.13.0.9" (beta of "1.13.0") and "1.13.0.13" (beta of "1.13.0").

Changed file "entity.vertex.hlsl":
	Total line: 171 (+6, -9)
	          '''
	          ...
	 41  41   	// We assume it is trying to pack the single float with the centroid-interpolated UV coordinates, which it can't do
	 42  42   	float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	 43  43   #endif
	 44  44   
	 45  45   	float2 uv : TEXCOORD_0_FB_MSAA;
	     46 + 
	 46     - 	
	 47  47   
	 48  48   #ifdef GEOMETRY_INSTANCEDSTEREO
	 49  49   	uint instanceID : SV_InstanceID;
	 50  50   #endif
	 51  51   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	          ...
	 66  66   	return RGBA8_SNORM;
	 67  67   #endif
	 68  68   }
	 69  69   
	 70  70   
	     71 + float lightIntensity(const float4x4 worldMat, const float4 position, const float3 normal) {
	 71     - float lightIntensity(const float4x4 worldMat, const float4 position, const float4 normal) {
	 72  72   #ifdef FANCY
	 73  73   	float3 N = normalize(mul(worldMat, normal)).xyz;
	 74  74   
	 75  75   	N.y *= TILE_LIGHT_COLOR.a;
	 76  76   
	          ...
	102 102   	return uv * GLINT_UV_SCALE;
	103 103   }
	104 104   #endif
	105 105   
	106 106   ROOT_SIGNATURE
	    107 + void main(in VS_Input VSInput, out PS_Input PSInput) {
	107     - void main(in VS_Input VSInput, out PS_Input PSInput)
	    108 + 	float4 entitySpacePosition = float4(VSInput.position, 1);
	108     - {
	109     - #ifdef INSTANCEDSTEREO
	    109 + 	float3 entitySpaceNormal = TransformRGBA8_SNORM(VSInput.normal);
	    110 + #ifdef USE_SKINNING
	    111 + 	entitySpacePosition = mul(BONES[VSInput.boneId], entitySpacePosition);
	110     - 	int i = VSInput.instanceID;
	111     - 	#ifdef USE_SKINNING
	112     - 		PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], mul(BONES[VSInput.boneId], float4(VSInput.position, 1)));
	113     - 	#else
	    112 + 	entitySpaceNormal = mul(BONES[VSInput.boneId], entitySpaceNormal);
	    113 + #endif
	114     - 		PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	115     - 	#endif
	    114 + 
	    115 + #ifdef INSTANCEDSTEREO
	116     - #else
	    116 + 	int i = VSInput.instanceID;
	    117 + 	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], entitySpacePosition);
	    118 + #else
	    119 + 	PSInput.position = mul(WORLDVIEWPROJ, entitySpacePosition);
	117     - 	#ifdef USE_SKINNING
	118     - 		PSInput.position = mul(WORLDVIEWPROJ, mul(BONES[VSInput.boneId], float4(VSInput.position, 1)));
	119     - 	#else
	120     - 		PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	121     - 	#endif
	122 120   #endif
	    121 + 
	123 122   #ifdef GEOMETRY_INSTANCEDSTEREO
	124 123   	PSInput.instanceID = VSInput.instanceID;
	125 124   #endif 
	    125 + 
	126 126   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	127 127   	PSInput.renTarget_id = VSInput.instanceID;
	128 128   #endif
	129     - 	float4 normal = TransformRGBA8_SNORM(VSInput.normal);
	130 129   
	131     - #ifdef USE_SKINNING
	132     - 	float L = lightIntensity(BONES[VSInput.boneId], float4(VSInput.position, 1), normal);
	    130 + #ifdef INSTANCEDSTEREO
	    131 + 	float L = lightIntensity(WORLD_STEREO, entitySpacePosition, entitySpaceNormal);
	133     - #elif !defined(INSTANCEDSTEREO)
	134     - 	float L = lightIntensity(WORLD, float4(VSInput.position, 1), normal);
	135 132   #else
	    133 + 	float L = lightIntensity(WORLD, entitySpacePosition, entitySpaceNormal);
	136     - 	float L = lightIntensity(WORLD_STEREO, float4(VSInput.position, 1), normal);
	137 134   #endif
	138 135   
	139 136   #ifdef USE_OVERLAY
	140 137   	L += OVERLAY_COLOR.a * 0.35;
	141 138   #endif
	          ...
	          '''