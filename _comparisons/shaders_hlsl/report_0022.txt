Difference of "shaders" between "1.5.0.1" (beta of "1.5.0") and "1.5.0.4" (beta of "1.5.0").

Changed file "ShaderConstants.fxh":
	Total line: 231 (+59, -0)
	          '''
	  1   1   // These [aren't but] should be grouped in a way that they require the least amount of updating (world data in one, model data in another, part of model data in another one, etc)
	  2   2   
	      3 + // This define specifies our uber root signature so that it can be 
	      4 + // included at shader compile time, which speeds up PSO creation time.
	      5 + // https://msdn.microsoft.com/en-us/library/windows/desktop/dn913202(v=vs.85).aspx
	      6 + #define MinecraftRootSignature "RootFlags(ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT | DENY_DOMAIN_SHADER_ROOT_ACCESS | DENY_GEOMETRY_SHADER_ROOT_ACCESS | DENY_HULL_SHADER_ROOT_ACCESS), " \
	      7 + 	"DescriptorTable(SRV(t0)), " \
	      8 + 	"DescriptorTable(SRV(t1)), " \
	      9 + 	"DescriptorTable(SRV(t2)), " \
	     10 + 	"DescriptorTable(SRV(t3)), " \
	     11 + 	"DescriptorTable(SRV(t4)), " \
	     12 + 	"DescriptorTable(SRV(t5)), " \
	     13 + 	"DescriptorTable(SRV(t6)), " \
	     14 + 	"DescriptorTable(SRV(t7)), " \
	     15 + 	"DescriptorTable(SRV(t8)), " \
	     16 + 	"DescriptorTable(SRV(t9)), " \
	     17 + 	"DescriptorTable(SRV(t10)), " \
	     18 + 	"DescriptorTable(SRV(t11)), " \
	     19 + 	"DescriptorTable(SRV(t12)), " \
	     20 + 	"DescriptorTable(SRV(t13)), " \
	     21 + 	"DescriptorTable(SRV(t14)), " \
	     22 + 	"DescriptorTable(SRV(t15)), " \
	     23 + 	"DescriptorTable(Sampler(s0)), " \
	     24 + 	"DescriptorTable(Sampler(s1)), " \
	     25 + 	"DescriptorTable(Sampler(s2)), " \
	     26 + 	"DescriptorTable(Sampler(s3)), " \
	     27 + 	"DescriptorTable(Sampler(s4)), " \
	     28 + 	"DescriptorTable(Sampler(s5)), " \
	     29 + 	"DescriptorTable(Sampler(s6)), " \
	     30 + 	"DescriptorTable(Sampler(s7)), " \
	     31 + 	"DescriptorTable(Sampler(s8)), " \
	     32 + 	"DescriptorTable(Sampler(s9)), " \
	     33 + 	"DescriptorTable(Sampler(s10)), " \
	     34 + 	"DescriptorTable(Sampler(s11)), " \
	     35 + 	"DescriptorTable(Sampler(s12)), " \
	     36 + 	"DescriptorTable(Sampler(s13)), " \
	     37 + 	"DescriptorTable(Sampler(s14)), " \
	     38 + 	"DescriptorTable(Sampler(s15)), " \
	     39 + 	"CBV(b0, visibility=SHADER_VISIBILITY_PIXEL), " \
	     40 + 	"CBV(b1, visibility=SHADER_VISIBILITY_PIXEL), " \
	     41 + 	"CBV(b2, visibility=SHADER_VISIBILITY_PIXEL), " \
	     42 + 	"CBV(b3, visibility=SHADER_VISIBILITY_PIXEL), " \
	     43 + 	"CBV(b4, visibility=SHADER_VISIBILITY_PIXEL), " \
	     44 + 	"CBV(b5, visibility=SHADER_VISIBILITY_PIXEL), " \
	     45 + 	"CBV(b0, visibility=SHADER_VISIBILITY_VERTEX), " \
	     46 + 	"CBV(b1, visibility=SHADER_VISIBILITY_VERTEX), " \
	     47 + 	"CBV(b2, visibility=SHADER_VISIBILITY_VERTEX), " \
	     48 + 	"CBV(b3, visibility=SHADER_VISIBILITY_VERTEX), " \
	     49 + 	"CBV(b4, visibility=SHADER_VISIBILITY_VERTEX), " \
	     50 + 	"CBV(b5, visibility=SHADER_VISIBILITY_VERTEX)"
	     51 + 
	     52 + // HLSL root signatures require SM 5.0 or higher.  We only use SM 5.0
	     53 + // or higher when the Feature Level is 11_0 or above.  Specifying a 
	     54 + // root signature when compiling for DX11 silently ignores the root
	     55 + // signature.
	     56 + #if (VERSION >= 0xb000) 
	     57 + #define ROOT_SIGNATURE [RootSignature(MinecraftRootSignature)]
	     58 + #else
	     59 + #define ROOT_SIGNATURE 
	     60 + #endif
	     61 + 
	  3  62   #if (defined(USE_STEREO_TEXTURE_ARRAY) || defined(ARRAY_TEXTURE_0)) && (VERSION >= 0xa000)
	  4  63   Texture2DArray TEXTURE_0 : register (t0);
	  5  64   #else
	  6  65   Texture2DMS<float4> TEXTURE_0_MS : register(t0);
	  7  66   Texture2D TEXTURE_0 : register(t0);
	          ...
	          '''
Changed file "Template.fragment.hlsl":
	Total line: 18 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       PSOutput.color = PSInput.color;
	17 18   }
	        '''
Changed file "Template.vertex.hlsl":
	Total line: 29 (+1, -1)
	        '''
	        ...
	14 14   {
	15 15       float4 position : SV_Position;
	16 16       float4 color : COLOR;
	17 17   };
	18 18   
	   19 + ROOT_SIGNATURE
	19    - 
	   20 + void main(in VS_Input VSInput, out PS_Input PSInput)
	20    - void main( in VS_Input VSInput, out PS_Input PSInput )
	21 21   {
	22 22       PSInput.color = VSInput.color;
	23 23   #ifdef INSTANCEDSTEREO
	24 24   	int i = VSInput.instanceID;
	25 25   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], VSInput.position );
	        ...
	        '''
Changed file "banner.fragment.hlsl":
	Total line: 56 (+1, -0)
	        '''
	        ...
	20 20   struct PS_Output
	21 21   {
	22 22   	float4 color : SV_Target;
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	   26 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	25    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	26 27   {
	27 28   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.texCoords.xy);
	28 29   	float4 base = TEXTURE_0.Sample(TextureSampler0, PSInput.texCoords.zw);
	29 30   
	30 31   #ifndef DISABLE_TINTING
	        ...
	        '''
Changed file "banner.vertex.hlsl":
	Total line: 126 (+2, -0)
	          '''
	          ...
	 78  78   #else
	 79  79   	return 1.0;
	 80  80   #endif
	 81  81   }
	 82  82   
	     83 + ROOT_SIGNATURE
	     84 + void main(in VS_Input VSInput, out PS_Input PSInput)
	 83     - void main(in VS_Input VSInput, out PS_Input PSInput) {
	     85 + {
	 84  86   #ifdef INSTANCEDSTEREO
	 85  87   	int i = VSInput.instanceID;
	 86  88   	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	 87  89   #ifdef GEOMETRY_INSTANCEDSTEREO
	 88  90   	PSInput.instanceID = i;
	          ...
	          '''
Changed file "blur.fragment.hlsl":
	Total line: 369 (+2, -2)
	          '''
	          ...
	217 217   
	218 218   struct PS_Output {
	219 219   	float4 color : SV_Target;
	220 220   };
	221 221   
	    222 + ROOT_SIGNATURE
	222     - 
	    223 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	223     - void main(in PS_Input PSInput, out PS_Output PSOutput) {
	    224 + {
	224     - 
	225 225   #if defined(GAUSSIAN_H) || defined(GAUSSIAN_V)
	226 226   
	227 227   #ifdef GAUSSIAN_H
	228 228   	float2 texOffset = float2(1.0f, 0.0f) / TEXTURE_DIMENSIONS.xy;
	229 229   #else //GAUSSIAN_V
	          ...
	          '''
Changed file "cloud.vertex.hlsl":
	Total line: 55 (+1, -0)
	        '''
	        ...
	26 26   static const float fogNear = 0.9;
	27 27   
	28 28   static const float3 inverseLightDirection = float3( 0.62, 0.78, 0.0 );
	29 29   static const float ambient = 0.7;
	30 30   
	   31 + ROOT_SIGNATURE
	   32 + void main(in VS_Input VSInput, out PS_Input PSInput)
	31    - void main( in VS_Input VSInput, out PS_Input PSInput )
	32 33   {
	33 34   #ifdef INSTANCEDSTEREO
	34 35   	int i = VSInput.instanceID;
	35 36   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	36 37   	float3 worldPos = mul(WORLD_STEREO, float4(VSInput.position, 1));
	        ...
	        '''
Changed file "color.fragment.hlsl":
	Total line: 18 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       PSOutput.color = PSInput.color;
	17 18   }
	        '''
Changed file "color.vertex.hlsl":
	Total line: 41 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28       PSInput.color = VSInput.color;
	29 29   #ifdef INSTANCEDSTEREO
	30 30   	int i = VSInput.instanceID;
	31 31   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	        ...
	        '''
Changed file "color_ex.fragment.hlsl":
	Total line: 19 (+1, -0)
	        '''
	        ...
	10 10   struct PS_Output
	11 11   {
	12 12       float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	   16 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	15    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	16 17   {
	17 18       PSOutput.color = PSInput.color * CURRENT_COLOR;
	18 19   }
	        '''
Changed file "color_grayscale.fragment.hlsl":
	Total line: 29 (+2, -1)
	        '''
	        ...
	 9  9   
	10 10   struct PS_Output {
	11 11   	float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput) 
	14    - void main(in PS_Input PSInput, out PS_Output PSOutput) {
	   16 + {
	15 17   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	16    - 
	17 18   
	18 19   #ifdef ALPHA_TEST
	19 20   	if (diffuse.a < 0.5) {
	20 21   		discard;
	21 22   	}
	        ...
	        '''
Changed file "color_texture.fragment.hlsl":
	Total line: 96 (+1, -0)
	        '''
	        ...
	23 23   struct PS_Output
	24 24   {
	25 25   	float4 color : SV_Target;
	26 26   };
	27 27   
	   28 + ROOT_SIGNATURE
	   29 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	28    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	29 30   {
	30 31   #ifdef EFFECTS_OFFSET
	31 32   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv + EFFECT_UV_OFFSET);
	32 33   #else
	33 34   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	        ...
	        '''
Changed file "color_uv.vertex.hlsl":
	Total line: 82 (+1, -1)
	        '''
	        ...
	45 45   
	46 46   	return uv * GLINT_UV_SCALE;
	47 47   }
	48 48   #endif
	49 49   
	   50 + ROOT_SIGNATURE
	50    - 
	   51 + void main(in VS_Input VSInput, out PS_Input PSInput)
	51    - void main( in VS_Input VSInput, out PS_Input PSInput )
	52 52   {
	53 53       PSInput.color = VSInput.color;
	54 54   #ifdef INSTANCEDSTEREO
	55 55   	int i = VSInput.instanceID;
	56 56   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	        ...
	        '''
Changed file "current_color.fragment.hlsl":
	Total line: 26 (+1, -0)
	        '''
	        ...
	13 13   	float depth : SV_Depth;
	14 14   #endif
	15 15   
	16 16   };
	17 17   
	   18 + ROOT_SIGNATURE
	   19 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	18    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	19 20   {
	20 21   	PSOutput.color = CURRENT_COLOR;
	21 22   
	22 23   #ifdef FORCE_DEPTH_ZERO
	23 24   	PSOutput.depth = 0.0;
	        ...
	        '''
Changed file "depth_downsample.fragment.hlsl":
	Total line: 44 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11   	float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	14 15   void main(in PS_Input PSInput, out PS_Output PSOutput)
	15 16   {
	16 17   	PSOutput.color = float4(0.0, 0.0, 0.0, 1.0);	//If we don't initialize this, compiler complaints :(
	17 18   #if (VERSION >= 0xa100 /*D3D_FEATURE_LEVEL_10_1*/)
	18 19   
	        ...
	        '''
Changed file "depth_of_field.fragment.hlsl":
	Total line: 67 (+1, -0)
	        '''
	        ...
	13 13   struct PS_Output
	14 14   {
	15 15   	float4 color : SV_Target;
	16 16   };
	17 17   
	   18 + ROOT_SIGNATURE
	18 19   void main(in PS_Input PSInput, out PS_Output PSOutput)
	19 20   {
	20 21   #ifdef GAUSSIAN_DOF
	21 22   
	22 23   	const float centerDepth = MakeDepthLinear(TEXTURE_1.Sample(TextureSampler1, float2(0.5f, 0.5f)).r, 0.025f, FAR_CHUNKS_DISTANCE, false);
	        ...
	        '''
Changed file "end_portal.fragment.hlsl":
	Total line: 61 (+2, -0)
	        '''
	        ...
	22 22   	float4 color : SV_Target;
	23 23   };
	24 24   
	25 25   static const float MAX_LAYER_DEPTH = 32.0;
	26 26   
	   27 + ROOT_SIGNATURE
	   28 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	27    - void main( in PS_Input PSInput, out PS_Output PSOutput ) {
	   29 + {
	28 30   	#ifdef BYPASS_PIXEL_SHADER
	29 31   		PSOutput.color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	30 32   	#else
	31 33   		///// Decode Input Values
	32 34   		// Decode parallax plane data
	        ...
	        '''
Changed file "end_portal.vertex.hlsl":
	Total line: 126 (+2, -0)
	          '''
	          ...
	 39  39   
	 40  40   static const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
	 41  41   
	 42  42   static const float MAX_LAYER_DEPTH = 32.0;
	 43  43   
	     44 + ROOT_SIGNATURE
	     45 + void main(in VS_Input VSInput, out PS_Input PSInput)
	 44     - void main(in VS_Input VSInput, out PS_Input PSInput) {
	     46 + {
	 45  47   	///// Vertex Transformation
	 46  48   	float3 worldPos = (VSInput.position.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
	 47  49   	float3 viewRay = worldPos.xyz;
	 48  50   
	 49  51   	#ifdef INSTANCEDSTEREO
	          ...
	          '''
Changed file "entity.fragment.hlsl":
	Total line: 160 (+1, -0)
	          '''
	          ...
	 47  47   float4 glintBlend(float4 dest, float4 source) {
	 48  48   	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	 49  49   	return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	 50  50   }
	 51  51   
	     52 + ROOT_SIGNATURE
	     53 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	 52     - void main( in PS_Input PSInput, out PS_Output PSOutput )
	 53  54   {
	 54  55   	float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	 55  56   
	 56  57   #if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	 57  58   
	          ...
	          '''
Changed file "entity.vertex.hlsl":
	Total line: 158 (+2, -0)
	          '''
	          ...
	102 102   
	103 103   	return uv * GLINT_UV_SCALE;
	104 104   }
	105 105   #endif
	106 106   
	    107 + ROOT_SIGNATURE
	    108 + void main(in VS_Input VSInput, out PS_Input PSInput)
	107     - void main(in VS_Input VSInput, out PS_Input PSInput) {
	    109 + {
	108 110   #ifdef INSTANCEDSTEREO
	109 111   	int i = VSInput.instanceID;
	110 112   	PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], float4(VSInput.position, 1));
	111 113   #else
	112 114   	PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	          ...
	          '''
Changed file "flat_white.fragment.hlsl":
	Total line: 17 (+1, -0)
	        '''
	        ...
	 8  8   struct PS_Output
	 9  9   {
	10 10       float4 color : SV_Target;
	11 11   };
	12 12   
	   13 + ROOT_SIGNATURE
	   14 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	13    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	14 15   {
	15 16       PSOutput.color = float4(1,1,1,1);
	16 17   }
	        '''
Changed file "hologram_texture_stereo.fragment.hlsl":
	Total line: 28 (+1, -0)
	        '''
	        ...
	13 13   struct PS_Output
	14 14   {
	15 15   	float4 color : SV_Target;
	16 16   };
	17 17   
	   18 + ROOT_SIGNATURE
	   19 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	18    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	19 20   {
	20 21   #ifdef INSTANCEDSTEREO
	21 22   	float3 uvr = float3(PSInput.uv, PSInput.instanceID); // 3rd element selects the texture
	22 23   #else
	23 24   	int eyeIndex = 0;	//TODO: Right now this code will render mono if we were to implement non-instanced stereo rendering
	        ...
	        '''
Changed file "iteminhand.fragment.hlsl":
	Total line: 22 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       float4 color = lerp( float4( 1, 1, 1, 1 ), PSInput.light, PSInput.light.a );
	17 18   
	18 19       color.rgb = lerp( color, OVERLAY_COLOR, OVERLAY_COLOR.a ).rgb;
	19 20   
	        ...
	        '''
Changed file "levelstage_copy_vr.fragment.hlsl":
	Total line: 24 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17   	// when copying the levelstage texture for the rift overlay, we need to ensure alpha is 1, and
	17 18   	// convert from linear space to SRGB
	18 19   
	19 20       PSOutput.color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	        ...
	        '''
Changed file "normal_as_color.vertex.hlsl":
	Total line: 42 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28   #ifdef INSTANCEDSTEREO
	29 29   	int i = VSInput.instanceID;
	30 30   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	31 31   #else
	        ...
	        '''
Changed file "position.vertex.hlsl":
	Total line: 38 (+1, -1)
	        '''
	        ...
	18 18   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	19 19   	uint renTarget_id : SV_RenderTargetArrayIndex;
	20 20   #endif
	21 21   };
	22 22   
	   23 + ROOT_SIGNATURE
	23    - 
	   24 + void main(in VS_Input VSInput, out PS_Input PSInput)
	24    - void main( in VS_Input VSInput, out PS_Input PSInput )
	25 25   {
	26 26   #ifdef INSTANCEDSTEREO
	27 27   	int i = VSInput.instanceID;
	28 28   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	29 29   #else
	        ...
	        '''
Changed file "rain_snow.fragment.hlsl":
	Total line: 57 (+1, -0)
	        '''
	        ...
	10 10   
	11 11   struct PS_Output {
	12 12   	float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	   16 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	   17 + {	
	15    - void main( in PS_Input PSInput, out PS_Output PSOutput ) {
	16    - 	
	17 18   	PSOutput.color = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	18 19   
	19 20   	PSOutput.color.a *= PSInput.color.a;
	20 21   
	21 22   	float2 uv = PSInput.worldPosition.xz;
	        ...
	        '''
Changed file "rain_snow.vertex.hlsl":
	Total line: 99 (+1, -0)
	        '''
	        ...
	21 21   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	22 22   	uint renTarget_id : SV_RenderTargetArrayIndex;
	23 23   #endif
	24 24   };
	25 25   
	   26 + ROOT_SIGNATURE
	26 27   void main(in VS_Input VSInput, out PS_Input PSInput)
	27 28   {
	28 29   	float spriteSelector = VSInput.color.x*255.0f;
	29 30   	PSInput.uv = UV_INFO.xy + (VSInput.uv0 * UV_INFO.zw);
	30 31   #ifndef NO_VARIETY
	        ...
	        '''
Changed file "renderchunk.fragment.hlsl":
	Total line: 86 (+1, -0)
	        '''
	        ...
	19 19   struct PS_Output
	20 20   {
	21 21   	float4 color : SV_Target;
	22 22   };
	23 23   
	   24 + ROOT_SIGNATURE
	   25 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	24    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	25 26   {
	26 27   #ifdef BYPASS_PIXEL_SHADER
	27 28       PSOutput.color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	28 29       return;
	29 30   #else
	        ...
	        '''
Changed file "renderchunk.vertex.hlsl":
	Total line: 125 (+2, -1)
	          '''
	          ...
	 36  36   static const float rB = 1.0;
	 37  37   static const float3 UNIT_Y = float3(0, 1, 0);
	 38  38   static const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
	 39  39   
	 40  40   
	     41 + ROOT_SIGNATURE
	     42 + void main(in VS_Input VSInput, out PS_Input PSInput)
	 41     - void main(in VS_Input VSInput, out PS_Input PSInput) {
	     43 + {
	 42     - 
	 43  44   #ifndef BYPASS_PIXEL_SHADER
	 44  45   	PSInput.uv0 = VSInput.uv0;
	 45  46   	PSInput.uv1 = VSInput.uv1;
	 46  47   	PSInput.color = VSInput.color;
	 47  48   #endif
	          ...
	          '''
Changed file "resolve_depth.fragment.hlsl":
	Total line: 37 (+1, -0)
	        '''
	        ...
	12 12   #if (VERSION <= 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
	13 13   	float4 dx9dummy : SV_Target;
	14 14   #endif
	15 15   };
	16 16   
	   17 + ROOT_SIGNATURE
	   18 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	17    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	18 19   {
	19 20   #ifdef MSAA_FRAMEBUFFER_ENABLED
	20 21   	float depth = 0.0f;
	21 22       int sampleCount = MSAA_SAMPLECOUNT;
	22 23   	for (int i = 0; i < sampleCount; ++i )
	        ...
	        '''
Changed file "selection_box.vertex.hlsl":
	Total line: 41 (+1, -1)
	        '''
	        ...
	18 18   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	19 19   	uint renTarget_id : SV_RenderTargetArrayIndex;
	20 20   #endif
	21 21   };
	22 22   
	   23 + ROOT_SIGNATURE
	23    - 
	   24 + void main(in VS_Input VSInput, out PS_Input PSInput)
	24    - void main( in VS_Input VSInput, out PS_Input PSInput )
	25 25   {
	26 26   #ifdef INSTANCEDSTEREO
	27 27   	int i = VSInput.instanceID;
	28 28   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	29 29   #ifdef GEOMETRY_INSTANCEDSTEREO
	        ...
	        '''
Changed file "shadow_stencil_overlay.fragment.hlsl":
	Total line: 20 (+1, -0)
	        '''
	        ...
	10 10   struct PS_Output
	11 11   {
	12 12       float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	   16 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	15    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	16 17   {
	17 18     PSOutput.color.rgb = lerp(PSInput.color.rgb, CURRENT_COLOR.rgb, PSInput.color.a);
	18 19     PSOutput.color.a = 1;
	19 20   }
	        '''
Changed file "simple.vertex.hlsl":
	Total line: 32 (+1, -1)
	        '''
	        ...
	16 16   #ifdef INSTANCEDSTEREO
	17 17   	uint instanceID : SV_InstanceID;
	18 18   #endif
	19 19   };
	20 20   
	   21 + ROOT_SIGNATURE
	21    - 
	   22 + void main(in VS_Input VSInput, out PS_Input PSInput)
	22    - void main( in VS_Input VSInput, out PS_Input PSInput )
	23 23   {
	24 24       PSInput.color = CURRENT_COLOR;
	25 25   #ifdef INSTANCEDSTEREO
	26 26   	int i = VSInput.instanceID;
	27 27   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	        ...
	        '''
Changed file "sky.vertex.hlsl":
	Total line: 42 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28   #ifdef INSTANCEDSTEREO
	29 29   	int i = VSInput.instanceID;
	30 30   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	31 31   #else
	        ...
	        '''
Changed file "stars.fragment.hlsl":
	Total line: 19 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       PSOutput.color = PSInput.color;
	17 18       PSOutput.color.rgb *= CURRENT_COLOR.rgb * PSInput.color.a;
	18 19   }
	        '''
Changed file "text.fragment.hlsl":
	Total line: 68 (+1, -0)
	        '''
	        ...
	16 16       return max(min(a, b), min(max(a, b), c));
	17 17   }
	18 18   
	19 19   static const float GLYPH_UV_SIZE = 1.0 / 16.0;
	20 20   
	   21 + ROOT_SIGNATURE
	21 22   void main(in PS_Input PSInput, out PS_Output PSOutput)
	22 23   {
	23 24       float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	24 25   
	25 26   #ifdef SMOOTH
	        ...
	        '''
Changed file "texture.fragment.hlsl":
	Total line: 44 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	14 15   void main(in PS_Input PSInput, out PS_Output PSOutput)
	15 16   {
	16 17   #ifdef STEREO_LEFT_EYE_ONLY
	17 18       PSOutput.color = TEXTURE_0.Sample(TextureSampler0, float3(PSInput.uv, 0.0f));
	18 19   #elif defined(DEPTH_TEXTURE)
	        ...
	        '''
Changed file "texture_blend.fragment.hlsl":
	Total line: 30 (+1, -0)
	        '''
	        ...
	10 10   struct PS_Output
	11 11   {
	12 12   	float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	15 16   void main(in PS_Input PSInput, out PS_Output PSOutput)
	16 17   {
	17 18   	float4 color = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	18 19   	float4 color1 = TEXTURE_0.Sample(TextureSampler0, PSInput.uv1);
	19 20   
	        ...
	        '''
Changed file "texture_ccolor.fragment.hlsl":
	Total line: 41 (+1, -0)
	        '''
	        ...
	10 10   struct PS_Output
	11 11   {
	12 12       float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	   16 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	15    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	16 17   {
	17 18   #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/) 
	18 19   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	19 20   #else
	20 21   	float4 diffuse = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	        ...
	        '''
Changed file "texture_cutout.fragment.hlsl":
	Total line: 26 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	17 18   
	18 19   
	19 20       if( diffuse.a < 0.5 )
	        ...
	        '''
Changed file "texture_raw_alphatest.fragment.hlsl":
	Total line: 32 (+1, -0)
	        '''
	        ...
	10 10   struct PS_Output
	11 11   {
	12 12       float4 color : SV_Target;
	13 13   };
	14 14   
	   15 + ROOT_SIGNATURE
	   16 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	15    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	16 17   {
	17 18   #if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/) 
	18 19   	float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	19 20   #else
	20 21   	float4 diffuse = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	        ...
	        '''
Changed file "uv.vertex.hlsl":
	Total line: 41 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28       PSInput.uv = VSInput.uv;
	29 29   #ifdef INSTANCEDSTEREO
	30 30   	int i = VSInput.instanceID;
	31 31   	PSInput.position = mul( WORLDVIEWPROJ_STEREO[i], float4( VSInput.position, 1 ) );
	        ...
	        '''
Changed file "uv_as_color.fragment.hlsl":
	Total line: 18 (+1, -0)
	        '''
	        ...
	 9  9   struct PS_Output
	10 10   {
	11 11       float4 color : SV_Target;
	12 12   };
	13 13   
	   14 + ROOT_SIGNATURE
	   15 + void main(in PS_Input PSInput, out PS_Output PSOutput)
	14    - void main( in PS_Input PSInput, out PS_Output PSOutput )
	15 16   {
	16 17       PSOutput.color = float4( PSInput.uv.xy, 0, 1 );
	17 18   }
	        '''
Changed file "uv_blend.vertex.hlsl":
	Total line: 45 (+1, -1)
	        '''
	        ...
	23 23   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	24 24   	uint renTarget_id : SV_RenderTargetArrayIndex;
	25 25   #endif
	26 26   };
	27 27   
	   28 + ROOT_SIGNATURE
	28    - 
	29 29   void main(in VS_Input VSInput, out PS_Input PSInput)
	30 30   {
	31 31   	PSInput.uv = VSInput.uv;
	32 32   	PSInput.uv1 = VSInput.uv1;
	33 33   #ifdef INSTANCEDSTEREO
	        ...
	        '''
Changed file "uv_blend_flipbook.vertex.hlsl":
	Total line: 44 (+2, -1)
	        '''
	        ...
	19 19   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	20 20   	uint renTarget_id : SV_RenderTargetArrayIndex;
	21 21   #endif
	22 22   };
	23 23   
	   24 + ROOT_SIGNATURE
	24    - 
	   25 + void main(in VS_Input VSInput, out PS_Input PSInput)
	25    - void main(in VS_Input VSInput, out PS_Input PSInput) {
	   26 + {
	26 27   	PSInput.uv = VSInput.uv;
	27 28   	PSInput.uv.y += V_OFFSET;
	28 29   	PSInput.uv1 = VSInput.uv;
	29 30   	PSInput.uv1.y += V_BLEND_OFFSET;
	30 31   
	        ...
	        '''
Changed file "uv_repeat.vertex.hlsl":
	Total line: 43 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28       float4 transformedUV = mul(UV_TRANSFORM, float4(VSInput.uv, 0, 1));
	29 29       PSInput.uv = transformedUV.xy;
	30 30   
	31 31   #ifdef INSTANCEDSTEREO
	        ...
	        '''
Changed file "uv_scale.vertex.hlsl":
	Total line: 42 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28       PSInput.uv = VSInput.uv * GLINT_UV_SCALE.xy;
	29 29   
	30 30   #ifdef INSTANCEDSTEREO
	31 31   	int i = VSInput.instanceID;
	        ...
	        '''
Changed file "uv_selection_overlay.vertex.hlsl":
	Total line: 43 (+1, -1)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28 28       PSInput.uv = VSInput.uv;
	29 29   #ifdef INSTANCEDSTEREO
	30 30   	int i = VSInput.instanceID;
	31 31   	float4 pos = mul(WORLDVIEW_STEREO[i], float4(VSInput.position, 1));
	        ...
	        '''
Changed file "uv_time_rotate.vertex.hlsl":
	Total line: 41 (+1, -2)
	        '''
	        ...
	20 20   #ifdef VERTEXSHADER_INSTANCEDSTEREO
	21 21   	uint renTarget_id : SV_RenderTargetArrayIndex;
	22 22   #endif
	23 23   };
	24 24   
	   25 + ROOT_SIGNATURE
	25    - 
	   26 + void main(in VS_Input VSInput, out PS_Input PSInput)
	26    - void main( in VS_Input VSInput, out PS_Input PSInput )
	27 27   {
	28    - 
	29 28       PSInput.uv = VSInput.uv;
	30 29   #ifdef INSTANCEDSTEREO
	31 30       int i = VSInput.instanceID;
	32 31       PSInput.position = mul(WORLDVIEWPROJ_STEREO[i], mul(CUBE_MAP_ROTATION, float4( VSInput.position, 1 )));
	33 32   #ifdef GEOMETRY_INSTANCEDSTEREO
	        ...
	        '''