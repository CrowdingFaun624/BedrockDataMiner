Addition of "shaders" at "a0.12.1_build1" (beta of "a0.12.1").
Unable to create data files for 95 files before.

Added file "ShaderConstants.fxh":
	'''
	// These [aren't but] should be grouped in a way that they require the least amount of updating (world data in one, model data in another, part of model data in another one, etc)
	
	Texture2D TEXTURE_0 : register ( t0 );
	Texture2D TEXTURE_1 : register ( t1 );
	Texture2D TEXTURE_2 : register ( t2 );
	
	// Make sure this thing is actually getting bound
	sampler TextureSampler0 : register( s0 );
	sampler TextureSampler1 : register( s1 );
	sampler TextureSampler2 : register( s2 );
	
	#ifdef LOW_PRECISION
	#define lpfloat min16float
	#define lpfloat4 min16float4
	#else
	#define lpfloat float
	#define lpfloat4 float4
	#endif
	
	
	cbuffer RenderChunkConstants : register(b1)
	{
		//float2 VIEWPORT_DIMENSION;
		//float3 VIEW_POS;
	
		float3 CHUNK_ORIGIN;
	}
	
	cbuffer EntityConstants : register (b2)
	{
		float4 OVERLAY_COLOR;
		float4 TILE_LIGHT_COLOR;
		float4 CHANGE_COLOR;
		float2 UV_ANIM;
		float2 UV_OFFSET;
		float2 UV_ROTATION;
		float2 GLINT_UV_SCALE;
	}
	
	cbuffer PerFrameConstants : register (b3)
	{
		float3 VIEW_DIRECTION; // unneeded
		float TIME; // unneeded
	
		float3 VIEW_POS;
		float FAR_CHUNKS_DISTANCE;
	
		float4 FOG_COLOR;
	
		float2 FOG_CONTROL;
	
		float RENDER_DISTANCE;
	}
	
	cbuffer WorldConstants : register (b4)
	{
		float4x4 WORLDVIEWPROJ;
		float4x4 WORLD;
	}
	
	cbuffer ShaderConstants : register (b5)
	{
		float4 CURRENT_COLOR;
		float4 DARKEN;
	}
	
	cbuffer WeatherConstants : register (b5) {
		float4	POSITION_OFFSET;
		float4	VELOCITY;
		float4	ALPHA;
		float4	VIEW_POSITION;
		float4	SIZE_SCALE;
		float4	FORWARD;
		float4	UV_INFO;
		float4  PARTICLE_BOX;
	}
	'''
Added file "Template.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = PSInput.color;
	}
	'''
Added file "Template.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float4 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, VSInput.position );
	}
	'''
Added file "cloud.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	static const float fogNear = 0.9;
	
	static const float3 inverseLightDirection = float3( 0.62, 0.78, 0.0 );
	static const float ambient = 0.7;
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	
	    PSInput.color = VSInput.color * CURRENT_COLOR;
	
	    float depth = PSInput.position.z / RENDER_DISTANCE;
	    float fog = max( depth - fogNear, 0.0 );
	
	    PSInput.color.a *= 1.0 - fog;
	}
	'''
Added file "color.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = PSInput.color;
	}
	'''
Added file "color.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "color_ex.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = PSInput.color * CURRENT_COLOR;
	}
	'''
Added file "color_ex.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "color_texture.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	float4 glintBlend(float4 dest, float4 source) {
		return float4(source.rgb * source.rgb, 0.0) + dest;
	}
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	    float2 uv : TEXCOORD_0;
	#ifdef GLINT
		float2 layer1UV : UV_1;
		float2 layer2UV : UV_2;
	#endif
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	#ifdef ALPHA_TEST
	    if( diffuse.a < 0.5 )
	    {
	        discard;
	    }
	#endif
	
	#ifdef GLINT
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layer1UV)).rgbr * CHANGE_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layer2UV)).rgbr * CHANGE_COLOR;
		float4 glint = (layer1 + layer2);
	
		#ifdef INVENTORY
			diffuse = glint;
		#else
			diffuse = glintBlend(diffuse, glint);
		#endif
	#endif
	
	#ifdef USE_OVERLAY
	        //use either the diffuse or the OVERLAY_COLOR
	    diffuse.rgb = lerp( diffuse, OVERLAY_COLOR, OVERLAY_COLOR.a ).rgb;
	#endif
	
	    PSOutput.color = diffuse * PSInput.color;
	}
	'''
Added file "color_texture.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "color_uv.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	    float2 texCoords : TEXCOORD_0;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	    float2 texCoords : TEXCOORD_0;
	#ifdef GLINT
		float2 layer1UV : UV_1;
		float2 layer2UV : UV_2;
	#endif
	};
	
	#ifdef GLINT
	float2 calculateLayerUV(float2 origUV, float offset, float rotation) {
		float2 uv = origUV;
		uv -= 0.5;
		float rsin = sin(rotation);
		float rcos = cos(rotation);
		uv = mul(uv, float2x2(rcos, -rsin, rsin, rcos));
		uv.x += offset;
		uv += 0.5;
	
		return uv * GLINT_UV_SCALE;
	}
	#endif
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	    PSInput.texCoords = VSInput.texCoords;
	#ifdef GLINT
		PSInput.layer1UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.x, UV_ROTATION.x);
		PSInput.layer2UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.y, UV_ROTATION.y);
	#endif
	}
	'''
Added file "current_color.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = CURRENT_COLOR;
	}
	'''
Added file "entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	
	    float4 light : LIGHT;
	    float4 fogColor : FOG_COLOR;
	
	    float2 uv : TEXCOORD_0;
	
	#ifdef USE_OVERLAY
	    float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef GLINT
		float2 layer1UV : UV_1;
		float2 layer2UV : UV_2;
	#endif
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
	#else
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#ifndef COLOR_BASED
	        color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	#ifdef ALPHA_TEST
	        if( NEEDS_DISCARD( color ) )
	        {
	            discard;
	        }
	#endif
	#endif
	
	#ifdef USE_COLOR_MASK
		#ifdef GLINT
			// Applies color mask to glint texture instead and blends with original color
			float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layer1UV)).rgbr * CHANGE_COLOR;
			float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layer2UV)).rgbr * CHANGE_COLOR;
			float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		#else
			color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
			color.a = 1.0;
		#endif
	#endif
	
	#ifdef USE_OVERLAY
	        //use either the diffuse or the OVERLAY_COLOR
	        color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
	        //make glowy stuff
	        color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
	        color *= PSInput.light;
	#endif
	
	    //apply fog
	    color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef USE_COLOR_MASK
		#ifdef GLINT
			color = glintBlend(color, glint);
		#endif
	#endif
	
	    //WARNING do not refactor this 
	    PSOutput.color = color;
	}
	'''
Added file "entity.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 normal : NORMAL;
	    float2 texCoords : TEXCOORD_0;
	#ifdef COLOR_BASED
	    float4 color : COLOR;
	#endif
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	
	    float4 light : LIGHT;
	    float4 fogColor : FOG_COLOR;
	
	    float2 uv : TEXCOORD_0;
	
	#ifdef USE_OVERLAY
	    float4 overlayColor : OVERLAY_COLOR;
	#endif
	#ifdef GLINT
		float2 layer1UV : UV_1;
		float2 layer2UV : UV_2;
	#endif
	};
	
	static const float AMBIENT = 0.45;
	
	static const float XFAC = -0.1;
	static const float ZFAC = 0.1;
	
	
	float4 TransformRGBA8_SNORM( const float4 RGBA8_SNORM )
	{
	#ifdef R8G8B8A8_SNORM_UNSUPPORTED
	    return RGBA8_SNORM * float( 2.0 ).xxxx - float( 1.0 ).xxxx;
	#else
	    return RGBA8_SNORM;
	#endif
	}
	
	
	float lightIntensity( const float4 position, const float4 normal )
	{
	#ifdef FANCY
	    float3 N = normalize( mul( WORLD, normal ) ).xyz;
	
	        //take care of double sided polygons on materials without culling
	#ifdef FLIP_BACKFACES
	        float3 viewDir = normalize( ( mul( WORLD, position ) ).xyz );
	        if( dot( N, viewDir ) > 0.0 )
	        {
	            N *= -1.0;
	        }
	#endif
	
	        float yLight = ( 1.0 + N.y ) * 0.5;
	        return yLight * ( 1.0 - AMBIENT ) + N.x*N.x * XFAC + N.z*N.z * ZFAC + AMBIENT;
	#else
	    return 1.0;
	#endif
	}
	
	#ifdef GLINT
	float2 calculateLayerUV(float2 origUV, float offset, float rotation) {
		float2 uv = origUV;
		uv -= 0.5;
		float rsin = sin(rotation);
		float rcos = cos(rotation);
		uv = mul(uv, float2x2(rcos, -rsin, rsin, rcos));
		uv.x += offset;
		uv += 0.5;
	
		return uv * GLINT_UV_SCALE;
	}
	#endif
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	    float4 normal = TransformRGBA8_SNORM( VSInput.normal );
	
	    float L = lightIntensity( float4( VSInput.position, 1 ), normal );
	
	#ifdef USE_OVERLAY
	    L += OVERLAY_COLOR.a * 0.35;
	    PSInput.overlayColor = OVERLAY_COLOR;
	#endif
	
	    PSInput.light = float4( L.xxx * TILE_LIGHT_COLOR.rgb, 1.0 );
	
	#ifdef COLOR_BASED
	    PSInput.light *= VSInput.color;
	#else
	    PSInput.uv = VSInput.texCoords;
	#endif
	
	#ifdef USE_UV_ANIM
		PSInput.uv.xy += UV_ANIM.xy;
	#endif
	
	#ifdef GLINT
		PSInput.layer1UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.x, UV_ROTATION.x);
		PSInput.layer2UV = calculateLayerUV(VSInput.texCoords, UV_OFFSET.y, UV_ROTATION.y);
	#endif
	
	    //fog
	    PSInput.fogColor.rgb = FOG_COLOR.rgb;
	    PSInput.fogColor.a = clamp( ( ( PSInput.position.z / RENDER_DISTANCE ) - FOG_CONTROL.x ) / ( FOG_CONTROL.y - FOG_CONTROL.x ), 0.0, 1.0 );
	}
	
	'''
Added file "flat_white.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = float4(1,1,1,1);
	}
	'''
Added file "iteminhand.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 light : LIGHT;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    float4 color = lerp( float4( 1, 1, 1, 1 ), PSInput.light, PSInput.light.a );
	
	    color.rgb = lerp( color, OVERLAY_COLOR, OVERLAY_COLOR.a ).rgb;
	
	    PSOutput.color = color;
	}
	'''
Added file "normal_as_color.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 normal : NORMAL;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	
	    PSInput.color.rgb = ( VSInput.normal.xyz / 2 ) + 0.5;
	    PSInput.color.a = 1.0;
	}
	'''
Added file "position.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "rain_snow.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
		float2 uv : TEXCOORD_0;
		float4 color : COLOR;
		float4 worldPosition : TEXCOORD_1;
	};
	
	struct PS_Output {
		float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput ) {
		
		PSOutput.color = TEXTURE_0.Sample(TextureSampler0, PSInput.uv);
	
	#ifdef ALPHA_TEST
		if (PSOutput.color.a < 0.5)
			discard;
	#endif
	
		PSOutput.color.a *= PSInput.color.a;
	
		float2 uv = PSInput.worldPosition.xz;
		float4 occlusionTexture = TEXTURE_1.Sample(TextureSampler1, uv);
	
		occlusionTexture.a *= 255.0f;	// Alpha stores height of world
	
		// clamp the uvs
		float2 uvclamp = saturate(uv);
		if (uvclamp.x == uv.x && uvclamp.y == uv.y && PSInput.worldPosition.y < occlusionTexture.a) {
			discard;
		}
	
		float mixAmount = saturate((PSInput.worldPosition.y - occlusionTexture.a)*0.1f);
		float3 lighting = lerp(occlusionTexture.rgb, PSInput.color.rgb, mixAmount);
		PSOutput.color.rgb *= lighting.rgb;
	}
	
	
	'''
Added file "rain_snow.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input {
		float3 position : POSITION;
		float2 uv0 : TEXCOORD_0;
		float4 color : COLOR;
	};
	
	struct PS_Input {
		float4 position : SV_Position;
		float2 uv : TEXCOORD_0;
		float4 color : COLOR;
		float4 worldPosition : TEXCOORD_1;
	};
	
	void main(in VS_Input VSInput, out PS_Input PSInput)
	{
		float spriteSelector = VSInput.color.x*255.0f;
		PSInput.uv = UV_INFO.xy + (VSInput.uv0 * UV_INFO.zw);
		PSInput.uv.x += spriteSelector * UV_INFO.z;
	
		float3 position = VSInput.position.xyz;
			
		// subtract the offset then fmod into (0.0f, PARTICLE_BOX)
		position.xyz += POSITION_OFFSET.xyz;
		position.xyz = fmod(position.xyz, PARTICLE_BOX.xxx);
		
		// centre box on origin
		position.xyz -= PARTICLE_BOX.xxx * 0.5f;
		
		// push along view vector so box is positioned more infront of camera
		position.xyz += FORWARD.xyz;
		
		// get world position
		float4 worldPositionBottom = float4(position.xyz, 1.0f);
		float4 worldPositionTop = float4(worldPositionBottom.xyz + (VELOCITY.xyz * SIZE_SCALE.y), 1.0f);
	
		// get projected positions of top and bottom of particle, and top of particle in previous frame
		float4 bottom = mul(WORLDVIEWPROJ, worldPositionBottom);
		float4 top = mul(WORLDVIEWPROJ, worldPositionTop);
		
		// get 2d vector in screenspace between top and bottom of particle
		float2 dir = (top.xy/top.w) - (bottom.xy/bottom.w);
		
		// get 2d vector perpendicular to velocity
		float2 dirPerp = normalize(float2(-dir.y, dir.x));
	
		// choose either the top or bottom projected position using uv.y
		PSInput.position = lerp(top, bottom, VSInput.uv0.y);
		 	
		// offset the position of each side of the particle using uv.x 
		PSInput.position.xy += (0.5f - VSInput.uv0.x) * dirPerp * SIZE_SCALE.x;
		
		// get the final colour including the lighting, distance and length scales, and per instance alpha
		PSInput.color = ALPHA;
		
		worldPositionBottom.xz *= 1.0f / 64.0f;	// Scale by 1/TextureDimensions to get values between
		worldPositionBottom.xz += 0.5f;			// Offset so that center of view is in the center of occlusion texture
		worldPositionBottom.y += VIEW_POSITION.y - 0.5f;
		PSInput.worldPosition = worldPositionBottom;
	}
	
	
	'''
Added file "renderchunk.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    lpfloat4 color : COLOR;
	    snorm float2 uv0 : TEXCOORD_0;
	    snorm float2 uv1 : TEXCOORD_1;
	#ifdef FOG
	    float4 fogColor : FOG_COLOR;
	#endif
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv0 ) * TEXTURE_1.Sample( TextureSampler1, PSInput.uv1 );
	
	#ifdef SEASONS_FAR
		diffuse.a = 1.0f;
		PSInput.color.b = 1.0f;
	#endif
	
	#ifdef ALPHA_TEST
	    if( diffuse.a < 0.5 )
	    {
	        discard;
	    }
	#endif
	
	#ifndef SEASONS
	
	#if !defined(ALPHA_TEST) && !defined(BLEND)
		PSInput.color.rgb = lerp(PSInput.color.aaa, PSInput.color.rgb, diffuse.a);
	#elif defined(BLEND)
		diffuse.a *= PSInput.color.a;
	#endif	
		diffuse.rgb *= PSInput.color.rgb;
	#else
		float2 uv = PSInput.color.xy;
		uv.y += 1.0f / 512.0f;
		diffuse.rgb *= lerp(1.0f, TEXTURE_2.Sample(TextureSampler2, uv).rgb*2.0f, PSInput.color.b);
		diffuse.rgb *= PSInput.color.aaa;
		diffuse.a = 1.0f;
	#endif
	
	#ifdef FOG
	    diffuse.rgb = lerp( diffuse.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	#endif
	
	    PSOutput.color = diffuse;
	}
	'''
Added file "renderchunk.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	    float2 uv0 : TEXCOORD_0;
	    float2 uv1 : TEXCOORD_1;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    lpfloat4 color : COLOR;
	    snorm float2 uv0 : TEXCOORD_0;
	    snorm float2 uv1 : TEXCOORD_1;
	#ifdef FOG
	    float4 fogColor : FOG_COLOR;
	#endif
	};
	
	
	static const float rA = 1.0;
	static const float rB = 1.0;
	static const float3 UNIT_Y = float3( 0, 1, 0 );
	static const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.uv0 = VSInput.uv0;
	    PSInput.uv1 = VSInput.uv1;
	    PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position.xyz, 1 ) );
	
	
	#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
	    float3 relPos = VIEW_POS - ( VSInput.position.xyz + CHUNK_ORIGIN );
	    float cameraDepth = length( relPos );
	#else
	    float cameraDepth = PSInput.position.z;
	#endif
	#endif
	
	    ///// apply fog
	
	#ifdef FOG
	    float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
	    len += CURRENT_COLOR.r;
	#endif
	
	    PSInput.fogColor.rgb = FOG_COLOR.rgb;
	    PSInput.fogColor.a = clamp( ( len - FOG_CONTROL.x ) / ( FOG_CONTROL.y - FOG_CONTROL.x ), 0.0, 1.0 );
	#endif
	
	    ///// water magic
	#ifdef NEAR_WATER
	#ifdef FANCY  /////enhance water
	    float F = dot( normalize( relPos ), UNIT_Y );
	
	    //if both NEAR_WATER and FOG are defined, it's forced fog and we're underwater
	#ifndef FOG  //over water
	    F = 1.0 - max( F, 0.1 );
	#else //under water
	    PSInput.color.a = 0.7; //disable fake transparency and be transparent
	#endif
	
	    F = 1.0 - lerp( F*F*F*F, 1.0, min( 1.0, cameraDepth / FAR_CHUNKS_DISTANCE ) );
	
	    PSInput.color.rg -= float2( float( F * DIST_DESATURATION ).xx );
	
	    float4 depthColor = float4( PSInput.color.rgb * 0.5, 1.0 );
	    float4 traspColor = float4( PSInput.color.rgb * 0.45, 0.8 );
	    float4 surfColor = float4( PSInput.color.rgb, 1.0 );
	
	    float4 nearColor = lerp( traspColor, depthColor, PSInput.color.a );
	    PSInput.color = lerp( surfColor, nearColor, F );
	#else
	    PSInput.color.a = PSInput.position.z / FAR_CHUNKS_DISTANCE + 0.5;
	#endif //FANCY
	#endif
	
	}
	'''
Added file "sky.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	
	    PSInput.color = lerp( CURRENT_COLOR, FOG_COLOR, VSInput.color.r );
	}
	'''
Added file "text.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float4 color : COLOR;
	    float2 uv : TEXCOORD_0;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    const float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	#ifdef ALPHA_TEST
	    if( diffuse.a < 0.5 )
	    {
	        discard;
	    }
	#endif
	
	    PSOutput.color = diffuse * PSInput.color * DARKEN;
	}
	
	'''
Added file "texture.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	#ifdef ALPHA_TEST
	    if( PSOutput.color.a < 0.5 )
	    {
	        discard;
	    }
	#endif
	}
	'''
Added file "texture_ccolor.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	
	#ifdef ALPHA_TEST
	    if( diffuse.a < 0.5 )
	    {
	        discard;
	    }
	#endif
	
	    PSOutput.color = CURRENT_COLOR * diffuse;
	}
	'''
Added file "texture_cutout.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    float4 diffuse = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	
	
	    if( diffuse.a < 0.5 )
	    {
	        discard;
	    }
	
	    PSOutput.color = CURRENT_COLOR;
	}
	'''
Added file "uv.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float2 uv : TEXCOORD_0;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.uv = VSInput.uv;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "uv1.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float4 color : COLOR;
	    float2 uv : TEXCOORD_0;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	    //float4 color : COLOR;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.uv = VSInput.uv;
	    //PSInput.color = VSInput.color;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "uv_as_color.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	// be sure to change the shader type to pertex shader and shader model to ps_40 (in visual studio)
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	struct PS_Output
	{
	    float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
	    PSOutput.color = float4( PSInput.uv.xy, 0, 1 );
	}
	'''
Added file "uv_scale.vertex.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct VS_Input
	{
	    float3 position : POSITION;
	    float2 uv : TEXCOORD_0;
	};
	
	
	struct PS_Input
	{
	    float4 position : SV_Position;
	    float2 uv : TEXCOORD_0;
	};
	
	
	void main( in VS_Input VSInput, out PS_Input PSInput )
	{
	    PSInput.uv = VSInput.uv * GLINT_UV_SCALE.xy;
	    PSInput.position = mul( WORLDVIEWPROJ, float4( VSInput.position, 1 ) );
	}
	'''
Added file "weather.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
		float4 color : COLOR;
		float2 uv0 : TEXCOORD_0;
		float2 uv1 : TEXCOORD_1;
	};
	
	struct PS_Output {
		float4 color : SV_Target;
	};
	
	void main(in PS_Input PSInput, out PS_Output PSOutput) 
	{
		float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv0) * TEXTURE_1.Sample(TextureSampler1, PSInput.uv1);
	
	#ifdef ALPHA_TEST
		if(diffuse.a < 0.5)
		 	discard;
	#endif
		diffuse *= PSInput.color;
	
		PSOutput.color = diffuse;
	}
	'''
Added file "weather.vertex.hlsl":
	'''
	
	#include "ShaderConstants.fxh"
	
	struct VS_Input {
		float3 position : POSITION;
		float4 color : COLOR;
		float2 uv0 : TEXCOORD_0;
		float2 uv1 : TEXCOORD_1;
	};
	
	struct PS_Input {
		float4 position : SV_Position;
		float4 color : COLOR;
		float2 uv0 : TEXCOORD_0;
		float2 uv1 : TEXCOORD_1;
	};
	
	void main(in VS_Input VSInput, out PS_Input PSInput)
	{
		PSInput.position = mul(WORLDVIEWPROJ, float4(VSInput.position, 1));
	
		PSInput.color = VSInput.color;
		PSInput.uv0.x = VSInput.uv0.x*2.0f;
		PSInput.uv0.y = VSInput.uv0.y*10.0f;
		PSInput.uv1 = VSInput.uv1;
	}
	'''