Addition of "shaders" at "1.2.0.2" (beta of "1.2.0").
Unable to create data files for 201 files before.

Added file "7f4ba1a2-43dd-45b1-aa3f-0b3ca2ebd5c8/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "884ecfc8-a6e6-4ee1-a860-fd1f85d2bbc9/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "98330b0a-2c79-4d30-b9c8-136098340edc/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "b8de1e1e-ad0c-407f-af95-211e85e0a274/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "bd49c9c7-d2c9-432d-a24f-5227a3bde5f1/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "ce292d20-42e1-4873-a721-06507dbd54d4/hlsl/festive_foliage.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input
	{
		float4 position : SV_Position;
	
	#ifndef BYPASS_PIXEL_SHADER
		lpfloat4 color : COLOR;
		snorm float2 uv0 : TEXCOORD_0_FB_MSAA;
		snorm float2 uv1 : TEXCOORD_1_FB_MSAA;
	#endif
	
	#ifdef NEAR_WATER
		float cameraDist : TEXCOORD_2;
	#endif
	
	#ifdef FOG
		float4 fogColor : FOG_COLOR;
	#endif
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 diffuse = TEXTURE_0.Sample(TextureSampler0, PSInput.uv0);
	
	#ifdef SEASONS_FAR
		diffuse.a = 1.0f;
		PSInput.color.b = 1.0f;
	#endif
	
		//If we know that all the verts in a triangle will have the same alpha, we should cull there first.
		if (diffuse.a <= 0.0f) {
			discard;
		}
	
		diffuse = diffuse * TEXTURE_1.Sample(TextureSampler1, PSInput.uv1);
	
	#ifndef SEASONS
	
		diffuse.rgb *= lerp(1.0f, PSInput.color.rgb, diffuse.a);
		diffuse.a = 1.0f;
	
	#else
		float2 uv = PSInput.color.xy;
		PSInput.color.b = lerp(0.0f, PSInput.color.b, diffuse.a);
		diffuse.rgb *= lerp(1.0f, TEXTURE_2.Sample(TextureSampler2, uv).rgb*2.0f, PSInput.color.b);
		diffuse.rgb *= PSInput.color.aaa;
		diffuse.a = 1.0f;
	#endif
	
	#ifdef FOG
		diffuse.rgb = lerp( diffuse.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	#endif
	
		PSOutput.color = diffuse;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	
	}
	'''
Added file "d10c2615-6558-4a31-b32d-a5bf9bc3fbc5/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "d1bea604-839d-4e53-8c1f-4732b419ab1f/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''
Added file "d725e15d-105d-4f12-997f-16f844717b59/hlsl/entity.fragment.hlsl":
	'''
	#include "ShaderConstants.fxh"
	#include "Util.fxh"
	
	struct PS_Input {
		float4 position : SV_Position;
	
		float4 light : LIGHT;
		float4 fogColor : FOG_COLOR;
	
	#ifdef GLINT
		// there is some alignment issue on the Windows Phone 1320 that causes the position
		// to get corrupted if this is two floats and last in the struct memory wise
		float4 layerUV : GLINT_UVS;
	#endif
	
	#ifdef USE_OVERLAY
		float4 overlayColor : OVERLAY_COLOR;
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 alphaTestMultiplier : ALPHA_MULTIPLIER;
	#endif
	
		float2 uv : TEXCOORD_0_FB_MSAA;
	
	};
	
	struct PS_Output
	{
		float4 color : SV_Target;
	};
	
	#ifdef USE_EMISSIVE
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#else
	#ifndef USE_COLOR_MASK
	#define NEEDS_DISCARD(C)	(C.a < 0.5)
	#else
	#define NEEDS_DISCARD(C)	(C.a == 0.0)
	#endif
	#endif
	
	float4 glintBlend(float4 dest, float4 source) {
		// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
		return float4(source.rgb * source.rgb, source.a) + float4(dest.rgb, 0.0);
	}
	
	void main( in PS_Input PSInput, out PS_Output PSOutput )
	{
		float4 color = float4( 1.0f, 1.0f, 1.0f, 1.0f );
	
	#if( !defined(NO_TEXTURE) || !defined(COLOR_BASED) || defined(USE_COLOR_BLEND) )
	
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE) || (VERSION < 0xa000 /*D3D_FEATURE_LEVEL_10_0*/)
		color = TEXTURE_0.Sample( TextureSampler0, PSInput.uv );
	#else
		color = texture2D_AA(TEXTURE_0, TextureSampler0, PSInput.uv);
	#endif
	
	#ifdef ALPHA_TEST
		if( NEEDS_DISCARD( color ) )
		{
			discard;
		}
	#endif
	
	#ifdef TINTED_ALPHA_TEST
		float4 testColor = color;
		testColor.a = testColor.a * PSInput.alphaTestMultiplier.r;
		if( NEEDS_DISCARD( testColor ) )
		{
			discard;
		}
	#endif
	
	#endif
	
	#ifdef USE_COLOR_MASK
		color.rgb = lerp( color, color * CHANGE_COLOR, color.a ).rgb;
		color.a *= CHANGE_COLOR.a;
	#endif
	
	#ifdef ITEM_IN_HAND
		color.rgb = lerp(color, color * CHANGE_COLOR, PSInput.light.a).rgb;
	#endif
	
	#ifdef USE_MULTITEXTURE
		float4 tex1 = TEXTURE_1.Sample(TextureSampler1, PSInput.uv);
		float4 tex2 = TEXTURE_2.Sample(TextureSampler2, PSInput.uv);
		color.rgb = lerp(color.rgb, tex1, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0f) {
			color.rgb = lerp(tex2.rgb, tex2 * CHANGE_COLOR, tex2.a);
		}
	#else
		color.rgb = lerp(color.rgb, tex2, tex2.a);
	#endif
	#endif
	
	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = lerp( color, PSInput.overlayColor, PSInput.overlayColor.a ).rgb;
	#endif
	
	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= lerp( float( 1.0 ).xxxx, PSInput.light, color.a );
	#else
		color *= PSInput.light;
	#endif
	
		//apply fog
		color.rgb = lerp( color.rgb, PSInput.fogColor.rgb, PSInput.fogColor.a );
	
	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		float4 layer1 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.xy)).rgbr * GLINT_COLOR;
		float4 layer2 = TEXTURE_1.Sample(TextureSampler1, frac(PSInput.layerUV.zw)).rgbr * GLINT_COLOR;
		float4 glint = (layer1 + layer2) * TILE_LIGHT_COLOR;
		color = glintBlend(color, glint);
	#endif
	
		//WARNING do not refactor this 
		PSOutput.color = color;
	
	#ifdef VR_MODE
		// On Rift, the transition from 0 brightness to the lowest 8 bit value is abrupt, so clamp to 
		// the lowest 8 bit value.
		PSOutput.color = max(PSOutput.color, 1 / 255.0f);
	#endif
	}
	'''